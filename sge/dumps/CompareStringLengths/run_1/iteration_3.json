[{"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i2,int(7.0))))[mod(int(5.0),min(i2, ( divInt(( int(7.0) + i0 ),divInt(len(saveChr(( i1 + ( min(divInt(int(2.0),i2), ( max(int(1.0), i1) * int(7.0) )) - int(7.0) ) ))),i2)) + i0 ))):divInt(int(9.0),abs(int(8.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 38, 11, 8, 5, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(i0, ( divInt(( int(5.0) + i1 ),divInt(len(saveChr(( i2 * min(max(( int(7.0) - i1 ), divInt(abs(int(7.0)),i2)), int(1.0)) ))),int(7.0))) + i0 )) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 9, 8, 5, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i1:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 0, 3, 0, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[int(0.0):i0].rstrip()[abs(i2):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 11, 0, 49, 15, 10, 8, 7, 6, 1, 1, 15, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(saveChr(i0)[int(0.0):abs(mod(i2,int(4.0)))], mod(int(5.0),min(i2, ( divInt(( divInt(i0,( len((\"\"R\"\" + s0.capitalize()).rstrip()) + ( i1 + divInt(min(max(int(7.0), i2), ( abs(int(2.0)) * i1 )),int(1.0)) ) )) - int(0.0) ),i2) + i0 ))))[divInt(int(7.0),max(int(1.0), abs(i0))):mod(( ( int(8.0) * int(5.0) ) - ( int(0.0) - i1 ) ),int(4.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 3, 2, 1, 1, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 0, 17, 4, 5, 4, 0, 6, 1, 1, 11, 1, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i0:i2].rstrip()[abs(( i0 + int(0.0) )):( int(7.0) + min(i0, ( len(\"\"R\"\") * ( int(5.0) - int(7.0) ) )) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 2, 3, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 12, 0, 52, 17, 9, 7, 10, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i2,int(7.0))))[mod(int(5.0),min(i2, ( divInt(( int(7.0) + i0 ),divInt(len((\"\"R\"\" + in1.rstrip()).capitalize()),divInt(( divInt(min(( int(2.0) + i1 ), mod(divInt(int(1.0),i2),int(7.0))),int(7.0)) * i1 ),i2))) - ( max(max(int(9.0), max(i0, ( ( divInt(int(8.0),int(5.0)) + divInt(int(0.0),i0) ) * int(4.0) ))), i0) - i1 ) ))):int(8.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 3, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 1, 2, 1, 0, 2, 2, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 3, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 14, 0, 62, 18, 14, 9, 9, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(len(saveChr(( ( divInt(int(5.0),i0) + divInt(min(( i1 * max(abs(( int(7.0) - i2 )), max(max(int(7.0), int(1.0)), int(7.0))) ), int(7.0)),i0) ) + i2 ))), divInt(int(9.0),min(( max(i1, divInt(divInt(( int(8.0) * int(5.0) ),( int(0.0) - i0 )),int(4.0))) - len((\"\"R\"\" + in1.rstrip())) ), i0))) ):( min(int(8.0), mod(int(59.0),i0)) * divInt(mod(int(9.0),i1),i1) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0.capitalize()[mod(int(0.0),i0):mod(i2,int(7.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 49, 15, 9, 9, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i2,int(7.0))))[divInt(int(5.0),min(i2, ( divInt(( int(7.0) + i0 ),( len(saveChr(( i1 + ( i2 * divInt(int(2.0),i1) ) ))) - ( min(int(5.0), i2) + max(int(7.0), i0) ) )) * i0 ))):divInt(int(5.0),min(int(9.0), max(i0, divInt(( ( int(8.0) - int(5.0) ) - ( int(0.0) * i1 ) ),int(4.0)))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 8, 2, 3, 1, 1, 5, 0, 1, 8, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(mod(i0,abs(( i2 + int(1.0) )))).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 1, 8, 1, 3, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[max(i0, int(0.0)):] not in in0\\ni2 = abs(mod(i2,int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i0):]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 6, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 3], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 11, 0, 48, 15, 10, 8, 7, 7, 1, 1, 15, 4, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(saveChr(i0))) not in in0[int(0.0):max(mod(i2,int(7.0)), mod(int(6.0),min(i2, len(s0))))].rstrip()[( mod(int(7.0),i0) + ( min(mod(i0,( ( divInt(int(2.0),i1) + ( max(abs(i1), divInt(int(1.0),int(7.0))) - i2 ) ) - mod(int(7.0),max(int(9.0), len((\"\"R\"\" + getCharFromString(in1, i0))))) )), ( ( i0 + int(8.0) ) * int(5.0) )) - ( int(0.0) - i2 ) ) ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 49, 15, 9, 6, 9, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[min(mod(int(0.0),i0), mod(i1,int(7.0))):].capitalize()):]:{:\\nres0 = in1 not in saveChr(divInt(int(5.0),abs(i2)))[i0:divInt(divInt(int(7.0),i1),divInt(min(( i2 + ( len(in0[mod(min(i1, ( max(int(6.0), i2) + int(1.0) )),int(7.0)):i0]) * i0 ) ), divInt(int(7.0),abs(int(9.0)))),max(i0, mod(( ( int(8.0) - int(5.0) ) + ( int(0.0) * i1 ) ),int(4.0)))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 14, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 10, 0, 33, 10, 7, 5, 5, 6, 0, 1, 11, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:len(in0)] not in s0[i0:i2].rstrip()[abs(mod(i0,int(0.0))):( int(7.0) * divInt(i0,divInt(( divInt(int(5.0),i1) - ( abs(( i2 * len(saveChr(min(divInt(int(7.0),i1), ( max(int(7.0), i0) - int(1.0) )))) )) + i0 ) ),i0)) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 265}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = (in1 + in0) not in s0[max(i0, int(7.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 18, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nres0 = in1[max(i2, int(07.0)):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 20, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 8, 8, 8, 0, 33, 9, 8, 5, 4, 7, 0, 1, 10, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1[i1:]) != int(0.0) or True ) and in0 not in s0[abs(mod(i1,int(7.0))):mod(int(5.0),min(i1, ( divInt(( int(7.0) + i1 ),( len(in1[min(i0, ( max(( int(2.0) + i2 ), divInt(abs(int(1.0)),i1)) * int(7.0) )):]) - int(7.0) )) + i1 )))] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 281}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [2, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 1, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 10, 1, 3, 0, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s1[i0:int(0.0)], abs(mod(i1,int(0.0))))[i2:int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 0, 3, 0, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i0:i2].rstrip()[abs(int(0.0)):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 291}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 2, 1, 0, 2, 1, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[i0:].startswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 292}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 3, 0, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[saveOrd(in0):] not in s0[( int(0.0) + i0 ):( i2 + int(7.0) )].capitalize()[( int(5.0) * abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1, 1], [1, 1, 2, 2, 1, 0, 0, 2, 1], [1], [2, 2, 2, 0, 3, 1, 0, 2, 2, 3, 2, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0], [1, 1], [1, 2, 2], [0, 1, 0, 1], [0, 4], [], [], [4, 4, 0, 4, 1], [3, 3, 0], [5, 2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 9, 1, 17, 6, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= divInt(mod(divInt(i1,max(int(1.0), i2)),mod(( max(( i2 * i1 ), i0) * i0 ),i2)),i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 5, 8, 1], [2, 0, 0, 0, 2, 1, 2, 2, 0], [1], [1, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 2, 2, 2, 3, 0, 1, 2, 2, 1, 0, 2, 1, 3, 1, 1, 2, 1, 1, 0, 1, 2, 2, 1, 2, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 2, 4, 0], [2, 2, 2, 1, 2, 0, 2, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1], [1], [], [2, 4, 1], [1], [], [2], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 6, 1, 30, 12, 3, 5, 8, 1, 1, 0, 3, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(4.0)\\ns1 = saveChr(divInt(i0,int(0.0)))[( i0 * divInt(mod(int(0.0),( max(mod(divInt(divInt(abs(i0),int(7.0)),divInt(( int(3.0) * i2 ),( int(6.0) - saveOrd(\"\"u\"\") ))),int(1.0)), int(4.0)) * divInt(int(3.0),int(0.0)) )),i1) ):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2], [0], [3, 0, 0], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = max(i1, i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [], [0], [], [], [0], [0], [1, 0], [0], [], [1], [], [0], [0], [1, 1, 0], [7, 7, 3], [2, 2, 2], [], [1, 2, 0, 2, 0, 2, 0, 1], [0, 1, 0], [], [0, 0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 2, 2, 3, 0, 8, 3, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) \\l ( i2 + mod(i2,( i2 + int(7.0) )) ):{:\\nb0 = True\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nres0 = in1[max(i1, int(0.0)):abs(mod(i2,int(7.0)))] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 1, 1], [1], [], [0], [], [0], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1], [1], [3, 0, 1, 1], [], [2], [1], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [0], [0], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 2, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\nres0 = in1.rstrip() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1, 1], [], [0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [1], [7], [0], [0], [2, 1, 3], [1], [4], [], [1], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\ni0 = mod(int(7.0),saveOrd(in0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [3], [1], [], [], [], [1, 1, 1, 1], [8, 5, 7, 1], [0, 2, 0], [1], [1, 1, 0, 2, 3, 1, 1, 0], [0, 1], [1], [1, 0], [], [5, 2], [1], [], [1, 2, 4], [1], [], [0], [3], [], [], [], [6]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 1, 8, 1, 1, 2, 0, 0, 1, 0, 3, 1, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\"#\"\" != saveChr(int(8.0))[int(5.0):i0]\\ni2 -= ( max(int(7.0), int(1.0)) + i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [5], [0, 2, 1], [0], [4], [3, 0], [1], [], [], [1, 1, 0, 1, 1, 1], [9, 4, 9, 8, 8, 3], [2, 1, 0, 1], [], [1, 0, 0, 3, 2, 2, 3, 0, 3, 2, 1, 0, 1, 1], [1, 1, 0], [0, 1, 3], [1, 1], [1, 1], [5], [], [], [4, 4, 0], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 5, 5, 4, 0, 14, 3, 3, 1, 2, 1, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( saveChr(int(9.0)).startswith(saveChr(i2)) or i1 != min(mod(mod(max(i0, len(in2)),( int(4.0) - i1 )),int(98.0)), int(8.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [2], [1], [0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 3, 3, 3, 9], [1, 2, 2], [], [2, 2, 1, 2, 1, 2, 2, 3, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1], [2], [], [1, 1, 1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 13, 5, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = mod(mod(int(1.0),mod(int(3.0),divInt(mod(abs(i1),i2),int(3.0)))),i2) == int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [1, 1], [], [0], [], [], [], [2], [1], [0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 9, 5, 1, 1, 9, 6, 6, 1, 2, 2, 0, 4, 7, 9, 2, 0, 0], [0, 1, 2, 2, 0, 1, 1, 0, 2, 1, 2, 2, 0], [0, 1], [1, 2, 3, 2, 1, 3, 1, 2, 1, 3, 3, 0, 0, 3, 1, 0, 2, 1, 0, 2, 2, 3, 2, 1, 3, 2, 2, 1, 1, 0, 2, 2, 2, 3, 3, 1, 1, 3, 3, 2, 0, 0, 3, 1, 2, 1, 0, 0, 1, 3, 3, 2, 1, 0, 3, 2, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0], [0, 3, 4, 2, 4, 1, 4, 1, 0, 2, 2, 0, 3, 1, 1], [2, 0, 2, 0, 2, 2, 1, 1, 0, 2, 0], [1, 1, 1, 1, 0, 1, 1], [3, 1], [1], [], [2, 0, 4, 1, 0, 2, 2, 4, 4, 0, 4, 4], [2, 0, 1, 3, 3, 1], [0, 2], [1, 1, 0], [1], [], [17], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 4, 4, 4, 2, 14, 3, 5, 4, 0, 2, 1, 0, 5, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(2.0) == ( min(( int(9.0) * len(in0[:int(5.0)]) ), ( int(1.0) + saveOrd(\"\"r\"\".capitalize()) )) * abs(i0) ):{:\\ni1 = i2\\n:}\\ni2 += saveOrd(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [2], [0], [1], [0], [], [], [], [], [], [1, 1], [3, 7], [0], [], [0, 1, 0, 0], [], [0], [], [], [2, 0], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0:{:\\nb2 = i0 \\l int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [0, 9, 6, 9, 5, 6], [2, 2, 0, 0, 2, 0, 1, 2, 1, 1], [], [2, 3, 2, 1, 1, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 2, 2, 3, 0, 2, 2, 3, 0, 0, 1, 3, 2, 3, 1, 0, 0, 0, 3, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 3, 2, 1, 3, 2, 3, 4, 2, 1, 0, 1], [2, 0, 0, 0, 0], [0, 1, 0, 1], [5, 5, 1, 2], [1, 1], [], [3, 0, 0, 4, 4, 1, 2, 0, 4, 2, 0, 2, 4, 1], [0, 3, 0, 2, 1], [0], [2, 0, 1], [1, 1], [], [17, 0], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (in2 + s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [1], [], [0], [], [], [], [2, 5], [0, 1], [0], [], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 3, 2, 7, 4, 8, 2, 4, 4], [2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0], [1], [3, 0, 2, 2, 1, 0, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 0, 0, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 3, 2, 3, 0, 1, 3, 1, 3, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 3, 1, 1, 2, 1, 0, 2, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [3, 3, 1, 0, 3, 0, 1, 2, 1], [2, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [3, 1, 3, 4], [1], [], [0, 2, 4, 2, 4, 4, 0, 4, 1, 1, 0, 4, 4, 0, 2, 0], [3, 2, 2, 3, 0, 0, 2, 1], [0, 2], [1, 1, 1], [1], [], [24], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 4, 1, 7, 2, 1, 3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not len(in0) == i2:{:\\ni0 *= ( ( int(7.0) + i2 ) - i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [2], [1, 1], [], [0], [], [], [], [3], [1], [0], [], [], [], [], [], [1, 0, 0, 1, 1], [3, 2, 5, 0, 0], [1, 1, 1, 1], [1, 0], [2, 0, 1, 1, 1, 0], [1], [], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 2, 6, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(i1,int(3.0)) \\ge int(250.0):{:\\ni1 += int(0.0)\\ni1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [], [], [0, 0], [1], [0, 0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = i0 \\ge i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [], [0, 2, 0], [], [4], [2, 0], [1], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [], [], [], [4, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not saveChr(int(0.0)).startswith(saveChr(i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 1, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 0, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(s0[i0:])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [], [2, 0], [1], [3, 3, 0], [], [2, 2], [1], [], [2, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= abs(abs(i0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0, 2, 2], [], [0], [], [], [2], [], [0], [], [], [1], [], [1], [], [1], [8], [1, 0, 0, 0, 0, 1], [0], [1, 1, 3], [1], [4], [], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [0], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [3], [1], [0], [], [], [], [], [], [0, 1], [9, 0], [0, 1, 2, 1], [1], [3, 2, 0, 0, 0, 1], [1], [0, 0], [1, 0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 6, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(divInt(i0,i1), i2) \\ge int(90.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [1, 0, 1], [], [0], [], [], [1], [2], [1], [0], [], [], [], [], [], [1, 0, 1], [6, 0, 0], [2, 0, 0, 1, 0, 1, 2, 1], [1, 1], [3, 2, 1, 0, 0, 2, 3, 0, 0, 0, 1, 0], [0, 1], [1, 1], [2, 1, 0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 8, 2, 12, 2, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= max(( int(6.0) - i0 ), i0)\\nb1 = mod(max(i1, i0),i1) == int(00.0)\\ni2 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [3], [0, 0, 1], [0], [], [3, 0], [0], [], [], [1], [1], [0, 0], [], [3, 1, 0, 0], [], [4], [], [], [5, 1], [], [], [3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( b2 and saveOrd((in2 + s1)) \\ge int(1.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 3, 9, 7, 1, 7, 3, 7, 5, 0, 4, 4, 1, 3, 6, 8, 5, 9, 4, 4, 0, 1], [2, 2, 1, 0, 2, 1, 2, 0, 0, 2, 0, 2, 2, 0, 1, 0, 2, 0], [1], [1, 2, 2, 3, 2, 2, 2, 3, 3, 2, 3, 3, 2, 3, 2, 0, 3, 0, 1, 3, 0, 1, 2, 3, 0, 0, 2, 2, 0, 1, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 2, 1, 2, 1, 3, 0, 0, 1, 1, 1, 1, 2, 0, 2, 2, 1, 1, 2, 1, 3, 0, 1, 0, 0, 3, 0, 1, 1, 0, 1, 2, 1, 0, 0, 1, 3, 1, 3, 3, 1, 2, 1, 3, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 3, 1, 3, 4, 1, 4, 3, 4, 0, 1, 2, 4, 3, 4, 4, 2, 1, 3, 1, 3, 2, 2], [2, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0], [], [0, 5, 2, 0, 4, 5, 3, 1, 4], [1, 0, 0, 1, 1, 1, 1, 1], [0], [1, 1, 2, 2, 1, 4, 2, 0, 0, 4, 0, 2, 1, 2, 4, 2, 1, 0, 0, 2, 1, 4, 0, 1, 0, 1], [3, 0, 0, 2, 1], [5, 3], [0, 2, 0, 0, 1, 0, 1], [3, 3, 0, 2, 0, 3, 2, 2], [20], [10], [5, 6, 4], [6, 24, 11]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(7.0)\\ns0 = \"\"#\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [2, 1, 1, 2, 2, 1], [0], [1, 2, 0, 0, 2, 0, 0], [0, 1], [], [0, 1], [1], [0, 3, 2], [1], [], [2, 0, 4, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 4, 1, 0, 1, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in0[int(6.0):]\\ni2 = ( i1 + i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 1], [1], [3, 3, 0, 0, 0], [0], [1, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= max(min(i1, i2), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 3], [2, 0, 0], [1], [0, 0, 1], [], [], [2], [], [4], [1], [], [2, 1], [], [], [0], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 3, 0, 0, 1, 0, 1, 1, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i0\\nin1 = \"\"U\"\"[i0:int(43.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [], [], [0, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [0], [1, 1, 1, 1], [7, 7, 5, 3], [1, 2], [0], [1, 3, 2, 0, 2, 3, 2, 1, 2, 1, 0, 1], [0, 0, 0, 1], [1, 3, 2], [1, 2, 2, 0], [0], [3, 2, 2, 5], [], [], [3, 4, 4, 4, 0, 0, 0], [1, 1, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 4, 2, 3, 1, 2, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (saveChr(int(7.0)) + saveChr(max(( i1 - ( len(s2.capitalize()) * ( int(7.0) * divInt(int(5.0),i2) ) ) ), int(3.0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 1], [2, 0, 1, 1], [0], [1, 2, 1, 1], [0], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [9, 9], [1, 0, 2, 2, 1, 1, 1], [0, 1, 0], [0, 2, 0, 0, 2, 1, 3, 2, 1, 3], [0, 1, 1], [4, 3], [2, 1, 1], [0, 1], [0, 4, 1, 4], [], [0], [4, 4, 4, 0, 0], [1, 2, 1, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 5, 2, 10, 3, 2, 2, 2, 4, 0, 1, 5, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in saveChr(i1):{:\\ni0 = ( i2 * i2 )\\nin1 = saveChr(divInt(int(9.0),saveOrd(s1))).capitalize()\\ni1 -= mod(int(9.0),len(in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1, 1, 2], [1, 0], [0, 0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [2], [0], [], [], [], [], [5], [1], [0], [], [], [], [], [0], [1, 0], [5, 8], [0], [], [2, 1, 1, 0], [1], [], [], [0], [5, 0, 5, 3], [1], [0], [0, 0], [], [], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0:{:\\nin2 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 2, 1], [], [0, 0], [], [], [1, 0, 1], [], [0, 0], [], [], [1, 0], [], [1], [], [], [], [2, 1], [0], [3, 0], [], [2], [], [], [4, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\nin1 = in2\\ni2 = abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [0], [1], [0], [2], [], [], [], [], [1], [0], [2, 0, 0], [], [2, 2, 0, 1, 0, 0], [0, 1], [], [1, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 6, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( divInt(i2,int(0.0)) - i0 ) \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [], [3, 2, 0, 3, 0], [0], [2, 4], [1], [], [5, 5, 3, 4, 5], [], [], [4, 0, 0], [3, 0], [2], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2.strip()\\nin0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 1], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(21.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [1, 2, 0, 0], [1], [1, 2, 3, 0, 2, 2, 0, 0], [1, 1, 1], [2, 2], [1], [1, 1, 1], [1], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [2], [0, 2], [], [0], [], [], [2], [1], [0, 2, 1], [0], [0], [2], [], [], [1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [3, 8, 7, 3, 5, 1, 6, 7, 0, 0, 3, 4, 5, 5, 1], [2, 2, 0, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1], [], [3, 0, 3, 1, 1, 2, 1, 2, 3, 0, 3, 1, 2, 1, 1, 2, 3, 0, 1, 2, 0, 1, 0, 2, 3, 1, 0, 0, 0, 2, 0, 1, 0, 2, 3, 0, 2, 3, 0, 0, 3, 3, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 2, 2, 2, 1, 1, 0, 0, 0, 2, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 1, 3, 5, 3, 2], [], [], [2, 2, 0, 0, 0, 0, 0], [3], [1], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 0, 10, 10, 5, 0, 23, 5, 5, 3, 2, 2, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not s1[:min(i2, max(int(3.0), int(87.0)))][:( int(35.0) + divInt(min(i2, max(int(1.0), ( int(6.0) + int(7.0) ))),( abs(i0) - int(0.0) )) )] in s1:{:\\nb2 = mod(i1,int(0.0)) \\g i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [4], [1], [0], [], [], [], [], [], [1], [5], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(5.0) \\le i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [0], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [3], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = getCharFromString(saveChr(int(0.0)), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 2], [0], [1], [0], [0], [], [], [], [4], [1], [0], [], [], [], [], [], [1], [5], [1, 2, 2], [1], [2, 0, 0, 1], [0], [2], [0, 1], [], [1, 4, 1], [1], [0], [0, 4, 1], [0], [], [], [0], [9], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += ( i2 - i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 1], [], [0], [0], [], [0], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [8, 6, 7, 4, 7, 6, 5, 0, 9, 8], [2, 2, 2], [1], [3, 0, 1, 2, 1, 3, 1, 1], [1], [2, 4], [1], [0], [1, 4, 2, 0, 3], [], [], [3, 2, 4, 0, 3, 0, 0, 4, 3, 4, 0], [0, 2, 1], [], [0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 2, 1, 8, 1, 2, 1, 1, 5, 0, 0, 11, 3, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= abs(i2)\\ns1 = (getCharFromString(in1, int(8.0))[divInt(int(6.0),saveOrd((s2 + s0))):int(74.0)] + (saveChr(int(765.0)) + in0).capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [3], [], [3], [], [], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 2], [], [0], [], [], [1, 2, 2], [5], [1, 0], [0], [], [0], [], [], [], [1, 1, 1], [1, 5, 2], [0, 2], [], [1, 3, 0, 0, 3, 1, 0, 1], [1], [0, 0], [], [0], [2, 5], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(1.0) != min(i0, i2)\\ns2 = in2.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [1], [0], [0], [], [0], [], [], [], [1, 1, 1], [1], [], [], [3, 3, 1], [], [4, 4], [], [], [1, 4], [], [], [0, 4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1], [5, 7, 5, 6], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(5756.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 2, 1], [0], [0, 0, 1, 0, 0], [], [0, 0, 0], [], [], [0, 2, 3, 3], [2, 5], [0, 1, 0], [0, 0], [], [1, 0], [], [0], [], [1], [5], [2, 0, 1, 2], [1], [0, 1, 0, 0], [], [], [0], [], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\nb2 = i2 == int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [], [], [], [], [], [], [0, 0], [], [], [2, 1], [], [1], [0], [1], [3], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not False:{:\\ni0 = int(3.0)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2, 1, 2, 1], [0, 0], [3, 0, 2, 1, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 2, 5, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i1)\\ni2 = ( int(0.0) + i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [9, 7, 7], [1, 2, 1], [1, 0], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i2\\ni1 = int(977.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 2, 2], [2, 0, 1, 1], [], [2, 0, 2, 0, 2, 1, 2, 2, 3, 1, 0, 0, 1], [1, 0, 0, 0, 0], [0, 0], [0, 2, 1, 0], [0], [2, 3], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 13, 5, 1, 4, 1, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[divInt(i2,( i0 + ( int(1.0) * ( ( min(int(2.0), i1) - i1 ) + int(2.0) ) ) )):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [3], [], [4], [2], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= saveOrd(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [1], [2, 1], [], [0], [], [], [2], [5], [1, 2], [0], [1], [], [], [], [0], [1, 0, 1], [5, 8, 4], [0, 0], [0], [0, 1, 1, 0], [1], [], [], [0], [2, 3, 0, 0, 2], [], [], [0, 3, 2, 0, 0, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 3, 3, 2, 1, 3, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i0 != int(5.0):{:\\ns2 = in0\\n:}\\ni0 = int(84.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0], [9, 9, 0, 3], [1, 2, 0, 2], [1], [2, 0, 1, 2, 0, 1, 3, 3, 0, 0, 0], [0, 0], [1, 2], [1, 0], [1], [1, 4], [], [], [2, 2, 0], [], [], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 0, 6, 2, 0, 2, 0, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1[:( i1 - int(9.0) )][:( i2 + int(90.0) )]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [3, 7], [0, 1, 1, 2], [1], [3, 2, 2, 3, 3, 1, 1, 0, 0, 0], [1, 1, 1], [4, 0, 2], [1], [1, 0, 1], [4, 2], [], [], [4, 4, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 9, 2, 3, 1, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= saveOrd(saveChr(mod(divInt(min(abs(int(3.0)), int(7.0)),i1),i1)).capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 1], [], [0, 0], [], [], [3, 2, 3], [], [], [], [], [], [], [], [], [], [], [1, 2, 1, 2, 2, 1], [1], [3, 2, 0, 0, 2, 0, 0], [0, 1], [4], [0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 0], [1], [], [0, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in0\\ni1 += saveOrd(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [1], [8], [1], [], [1, 0], [], [], [], [], [2, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(8.0) \\ge i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 0, 0], [2, 0], [0, 1, 1, 0], [0], [0, 0, 0, 0], [], [], [1, 0], [2], [0, 1, 0, 0], [0], [], [1, 2, 1], [], [1, 0], [], [1], [1], [1, 2, 1, 0, 0, 2], [1, 1], [0, 2, 0, 2, 3, 0, 1, 0], [1, 0], [4], [2, 0, 2], [0], [4, 5, 4], [], [0], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 6, 6, 2, 4, 1, 4, 0, 0, 2, 1, 4, 1, 0, 3, 0, 2, 0, 1, 1, 6, 2, 8, 2, 1, 3, 1, 3, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\nloopBreak% = 0\\nwhile i1 == divInt(i2,( saveOrd(in1) * i1 )):{:\\ni0 += int(1.0)\\nloopBreak% = 0\\nfor in2 in in1:{:\\ni0 *= i2\\nb0 = not True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [2], [0], [0], [], [], [0], [2], [2], [], [5], [], [], [], [], [], [], [2, 0, 2, 1, 0], [], [0], [], [], [], [], [4, 1, 0], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in saveChr(i2):{:\\ns1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1, 0, 0, 0, 1], [2, 1, 4, 2, 9, 3, 5, 9, 6], [2, 0, 2, 2], [0], [2, 0, 2, 3, 0, 1, 0], [1, 0], [1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 7, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(i0,( max(i2, int(2.0)) + i2 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [4], [1], [0], [], [1], [], [1], [], [1], [9], [1], [1], [3, 1], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = len(in2) \\le int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [3], [0], [1], [1], [], [], [2], [], [4, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 2, 1, 0], [2, 0], [2, 1], [], [0], [], [], [], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 8, 7, 5, 4, 6, 1, 2], [2, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0], [2, 0, 2, 1, 0, 2, 0, 0, 2, 0, 1, 0, 2, 0, 2, 0, 1, 2, 1, 2, 3, 2, 0, 3, 1, 3, 1, 2, 0, 3, 2, 2, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [2, 3, 3, 2], [0, 2, 2, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1], [3, 1, 3, 5, 3, 4], [], [0], [0, 4, 2, 2, 4, 0, 0, 2, 0], [3, 0, 1], [5], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 1], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 3, 2], [0, 0], [], [1, 2, 3, 3, 3, 1, 3, 0, 0], [0], [4, 2, 3], [2], [], [4, 5], [], [], [0], [], [], [1, 2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [1], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [5, 3], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in0:{:\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1, 0, 0, 1, 0], [6, 2, 5, 3, 7, 5, 0, 7], [1, 1, 0, 0], [1], [1], [], [], [1], [], [], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(6253.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [0], [0], [0, 0], [], [1], [], [0], [], [0, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [0, 0], [1], [2, 1, 0], [1], [], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += mod(int(9.0),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [1], [0], [3, 1], [1, 0], [2], [0], [], [0, 4, 0, 4], [], [0], [4, 4, 0, 0], [3, 2], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 4, 0, 1, 4, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1.capitalize().strip():{:\\ns0 = in1\\ni1 = abs(int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1, 0], [], [0, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [8, 4], [0, 2], [1], [2, 1, 0, 1, 0], [1], [2], [1], [1], [0, 3], [], [], [4, 2], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= mod(int(8.0),i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [1], [1], [], [0], [], [], [], [3], [1], [0], [], [], [], [], [0], [0, 1, 0, 1], [4, 8, 4, 4], [0, 2, 1, 2, 0, 2], [1], [2, 3, 0, 0, 0, 1, 0, 0, 0], [1], [1, 0], [1], [1], [], [], [], [1], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= mod(max(i2, i1),i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [0], [], [], [1, 0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i1 \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 10, 1, 2, 0, 1, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):saveOrd(in1[mod(int(0.0),i0):])]:{:\\nres0 = saveChr(int(7.0))[i2:int(5.0)].capitalize() == in0[i2:int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [0, 2], [1], [0, 0, 3], [1], [], [2], [1], [], [], [], [], [], [], [1, 2, 0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [0], [], [], [3, 0], [], [0], [], [], [0], [], [], [], [], [], [0, 2], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\ni0 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [2], [], [0], [], [], [2], [], [1], [], [1], [2], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [0, 0], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [2], [], [0], [], [], [2], [], [1], [], [1], [2], [2], [1], [1], [], [], [2], [1, 1, 1, 0, 0, 0, 1, 0], [], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0], [1], [], [0], [1], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 3, 0, 1, 7, 8, 3], [2, 0, 2, 1, 2], [0], [3, 2, 1, 0, 0, 3, 3, 2, 1, 0, 3, 1, 2, 3, 3, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0], [4, 1, 0, 2, 0, 0], [2, 2, 0], [0, 1, 0], [4, 4, 5], [], [], [2, 4, 0, 0, 0], [0], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 5, 1, 1, 1, 0, 1, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = saveOrd(getCharFromString(in1, ( int(3.0) * i0 ))[:i2])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [1], [7], [2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [0, 1, 0], [0, 1], [0, 1], [], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [0], [3], [], [3], [], [], [2], [], [], [4, 0], [3], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = len(s2.strip())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 2, 0], [5], [0, 0, 0], [0], [], [3, 0, 0], [1], [1], [], [1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 5, 4, 9, 5, 2, 4, 2, 3], [2, 1], [], [3, 1, 2, 0, 1, 0, 3, 0, 2, 1], [0, 1], [1, 0, 4], [0], [0], [0, 1], [], [], [4, 4, 0, 0], [1, 3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 3, 0, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( b2 or b0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [3, 7], [2], [], [2, 2, 1, 0, 1], [1, 1], [], [], [1, 1], [5, 2, 2], [], [], [4, 3, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 2, 0, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(mod(mod(int(3.0),i2),int(7.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 2], [], [0], [], [], [1, 2, 2], [4], [1, 0], [0], [], [0], [], [], [], [1, 1, 1], [1, 5, 2], [1, 2], [], [1, 3, 0, 2, 3, 1, 0, 1], [1], [0, 0], [], [0], [2, 5], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 8, 1, 2, 0, 1, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(1.0) \\le min(i1, divInt(min(int(5.0), i2),int(2.0)))\\ns2 = in2.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [2, 0, 0, 2], [0], [0, 2, 2, 1, 0, 0], [0, 0], [3], [2, 0], [], [2, 3, 4, 3], [], [], [2, 0, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 6, 2, 0, 2, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\ns2 = in0[:( ( int(1.0) * i0 ) + i2 )]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1, 1, 0, 0, 1], [0, 0, 5, 1, 1, 6, 1, 1], [1, 2, 0, 0, 2], [1, 1], [2, 3, 3, 0, 0, 1, 2, 1, 2, 1, 3, 1], [1, 0, 0], [0, 4, 3], [1, 0, 0, 0], [0, 0], [5, 2], [], [], [2, 0, 2, 0], [], [], [2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 4, 2, 12, 3, 3, 4, 1, 2, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= divInt(min(saveOrd(in2[i2:]), i0),int(00.0))\\ni0 += ( int(51.0) + ( int(1.0) + len(s2[int(611.0):]) ) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0, 0], [0], [3, 0, 1], [0], [3], [2, 2], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [0], [0], [], [1], [], [1], [], [0, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 6, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 1, 0, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 4, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in2[:len(s0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [1, 0], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [5, 9, 9], [1, 1, 2], [1, 1], [1, 3, 3, 0, 1], [], [3, 1], [1, 1], [], [], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(59.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [0], [], [], [], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [3, 5, 2, 5], [], [], [3, 4, 3, 0, 0, 0], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (getCharFromString((in2 + s2), int(0.0)) + in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [0], [0], [0], [], [1], [], [1], [], [1], [0], [0, 2], [], [2, 0, 1, 0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [1], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 1, 1], [], [0, 0], [], [], [3, 0, 1], [], [0, 0], [], [], [1, 0], [], [1], [], [0, 1], [3, 0], [2, 1, 1], [0, 1], [3, 0, 1], [], [2], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 2, 2, 3, 2, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\ni2 = abs(i1)\\ni1 -= int(30.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 1], [], [1, 1, 2], [], [0], [], [], [3], [], [2], [], [0], [], [], [], [], [0, 1], [3, 1], [0, 1, 0], [1, 1], [3, 1, 0], [], [4], [0, 2], [], [1, 5, 2], [], [], [4, 0, 0, 4], [3, 1], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 1, 2, 0, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += saveOrd(s1.lstrip())\\ni1 *= int(31.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0], [], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [2, 1], [1], [2, 2, 1, 1, 0, 3], [0, 0], [3], [0, 0, 1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 5, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += ( ( int(0.0) + int(8.0) ) - i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 1], [1], [2, 2], [], [0], [], [], [2], [1], [2, 2, 1], [0], [0], [2], [], [], [0], [0, 0, 1], [5, 9, 5], [1, 2], [1], [1, 0, 3, 0], [], [3, 4], [1], [], [1, 1, 4, 5, 3, 2], [], [], [2, 2, 0, 0, 0, 0, 1], [], [], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s1[:int(595.0)][:i1]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [0], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [], [0, 0, 2], [], [2], [1, 1], [1], [1], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [], [1, 1], [], [], [], [3, 3], [], [], [], [9, 30]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [8, 8, 1, 9, 8, 4, 9, 7, 5, 0, 2, 5], [1, 2], [1], [2, 1, 2, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4], [2, 1], [1, 1], [0], [], [], [4, 1], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 2, 1, 5, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= mod(int(881984.0),mod(i2,int(975025.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1], [2, 0, 0, 0, 2, 0, 0, 2, 0, 2], [1], [1, 2, 0, 1, 1, 0, 2, 0, 1, 0, 1, 3, 2, 2, 0, 0, 1, 2, 2, 3, 1, 2, 1, 3, 1, 1, 0, 2, 2, 0, 3, 2, 0, 1, 0, 0, 0, 1, 1, 0, 3, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [1, 2, 4, 0, 1, 1], [2, 0, 1, 1, 2, 2, 2], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 4], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 1, 5, 1, 0, 1, 1, 1, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(42.0)\\ns1 = saveChr(divInt(i0,int(0.0)))[:int(7.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [1, 2, 0, 0], [1], [2, 2, 0, 0, 1, 2, 0, 0], [1, 1, 1], [2, 2], [1], [1, 1, 0], [1], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 5, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= mod(mod(i2,i0),int(9.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [5], [1], [0], [], [0], [], [], [], [0, 1], [7, 5], [0], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(75.0) != i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 2, 3], [2, 1, 1, 0, 2, 1], [], [3, 2, 0, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 0, 2, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0], [1], [0, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1], [0, 1], [], [], [2, 2, 0], [], [0, 2], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 21, 8, 1, 4, 4, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1[max(mod(i2,divInt(int(1.0),( int(3.0) + mod(i1,int(9.0)) ))), mod(( i1 + i0 ),int(4.0))):i2][( i1 * ( int(2.0) * int(3.0) ) ):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2, 1, 2], [0, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(0.0)\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [4], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = getCharFromString(saveChr(int(0.0)), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1], [5, 1, 2, 6, 8, 8, 2, 5, 0, 8, 4, 1, 8, 5, 0, 1, 2, 4, 2, 9, 2], [2, 0, 2, 1, 2], [0], [2, 0, 2, 0, 1, 2, 0, 1, 2, 1, 1, 2, 1, 0, 1, 3, 3, 3, 1, 1, 3, 1, 0, 1, 0], [0, 0, 1, 1, 1], [4, 1, 0, 3, 2], [2, 2], [0, 1, 1, 0], [3, 4], [], [], [4, 2, 2, 2, 4, 0, 4, 2, 4], [2, 0, 1, 1], [], [0, 0, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 5, 0, 24, 5, 4, 2, 3, 2, 0, 0, 9, 4, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = getCharFromString(in1, ( i2 * ( i0 * int(5.0) ) ))[divInt(i2,int(1.0)):][mod(int(268.0),int(825.0)):mod(int(0.0),i1)][int(8.0):saveOrd(saveChr(max(min(int(4.0), int(18.0)), len(saveChr(int(50.0))[i2:int(124.0)]))))].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [], [0], [], [], [], [], [0, 0], [], [], [0, 1], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [0], [1], [0], [], [], [], [], [], [1, 1, 0, 0, 1], [0, 5, 4, 1, 5], [1, 0], [], [3, 1, 0, 0, 1, 2, 3, 0, 1], [0, 0], [1, 4, 4], [0], [0], [0, 1], [], [], [2, 4, 0, 0], [1, 3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = max(int(0.0), i1) \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [], [0, 0], [], [2], [2, 1], [], [0], [], [], [], [], [1], [], [], [], [], [], [0, 0, 4], [], [], [0, 3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [0], [0], [], [], [], [], [], [], [], [2, 0, 0, 2], [1, 0], [0, 0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 2, 0, 1], [1, 2], [0, 1], [], [0], [], [], [2], [4, 3, 5], [1, 1, 1], [0, 0, 0], [1], [], [], [], [0], [1, 1, 1, 0, 1, 0, 1, 0, 1], [2, 4, 7, 9, 7, 4, 3, 6, 9], [2, 1, 1, 1], [1], [0, 1, 1, 1, 2, 3, 1, 2, 3, 1, 0, 1, 3], [1, 0], [1, 4, 3], [1, 1], [0], [2, 2], [], [], [4, 0, 4, 0, 0], [2, 2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 1, 9, 9, 3, 1, 13, 2, 3, 2, 1, 2, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i2 \\le int(2.0):{:\\nloopBreak% = 0\\nwhile int(4.0) \\ge int(7.0):{:\\nb2 = divInt(max(int(97.0), ( saveOrd(s2.capitalize()) - int(43.0) )),i1) != int(69.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 -= len(s2.capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 1], [8, 1, 0, 8, 4], [1], [1], [2, 1, 1], [1], [4], [1], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 1, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= mod(int(81.0),int(084.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 0, 1, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 1, 0, 3, 3, 2, 1, 1, 2, 3, 1, 1, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 7, 0, 21, 6, 4, 4, 2, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i0:i2].rstrip()[abs(mod(i2,int(0.0))):( int(7.0) + min(i0, ( ( ( int(5.0) + i1 ) * divInt(i2,int(7.0)) ) + i1 )) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [1, 1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [0], [], [2], [], [2], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [4, 4, 3], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in saveChr(i0):{:\\nb0 = in1 == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 0], [0], [0, 0], [0], [], [0], [], [], [], [1, 0, 1, 1], [9, 3, 4, 0], [], [], [1, 2, 1, 1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [1, 0], [0], [0], [], [3, 3, 4, 0, 3, 0, 1, 2, 1], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [], [], [0, 2], [0], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 3, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 2, 0, 3, 0, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 2, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 1, 3, 0, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(abs(mod(i1,abs(i2))), i2):]:{:\\nres0 = in1 not in in1[int(0.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [3, 0], [0], [2], [], [], [4, 2], [], [], [4, 4, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(abs(i0)).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 1], [0], [], [0], [], [0], [], [], [1], [5], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 0, 0, 0, 1], [7, 5, 0, 4, 7, 4, 8, 0], [], [], [1, 2, 3, 3, 1], [1], [2, 3], [], [1], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 0, 0, 5, 1, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(7.0) != mod(abs(len(s1)),int(5047480.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [1], [1], [1], [0], [], [], [], [], [], [1, 1], [3, 7], [0], [], [1, 1, 0, 0], [], [0], [], [], [2, 0], [1], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0:{:\\nb1 = int(3.0) \\g int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [0, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 0], [], [1, 1, 3, 1], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\g int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [8, 6, 4], [1], [0], [2, 1, 3, 2, 1, 1], [1, 0], [3], [1], [0], [0], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 6, 2, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = divInt(int(8.0),len(saveChr(( int(6.0) - int(4.0) ))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 1], [1], [0, 2], [], [0], [], [], [2], [1], [0, 2, 1], [0], [0], [2], [], [], [0], [], [], [1, 2], [], [3, 0, 3, 0], [], [3, 4], [], [], [2, 1, 4, 5, 3, 2], [], [], [2, 2, 4, 0, 0, 0, 1], [2], [], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 3, 0, 0, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not s2.capitalize()[:len(s1)][:i1] in in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [1, 1], [1], [0, 3, 0], [1], [], [3, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (in0 + s0)\\ni2 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1], [8], [0, 0, 2], [0], [0, 3, 0, 1], [], [2], [], [], [], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 1, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 \\g abs(i0)\\ni2 = int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [0], [2], [0], [4], [], [], [], [], [0, 1, 0, 1], [8, 5, 5, 7], [1, 1], [], [3, 0, 2, 0, 2, 2, 3, 0, 3], [0, 1], [2, 4, 4], [0], [0], [4, 2], [], [], [4, 4, 0, 3], [1, 3], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveChr(abs(i1)).startswith(in1.rstrip())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 2], [2, 1], [0], [2, 3, 1, 0], [1], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(abs(int(4.0)),i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [2, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 0, 34, 9, 7, 5, 4, 5, 1, 1, 14, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, max(len(in1[i0:]), int(0.0)))[:abs(mod(i1,int(7.0)))]:{:\\nb0 = s2 not in saveChr(i2)[int(5.0):saveOrd(in0[i2:mod(( divInt(int(7.0),i1) + ( len((\"\"R\"\" + saveChr(divInt(i2,( min(( int(2.0) + i1 ), ( max(int(1.0), i0) * int(7.0) )) - int(7.0) )))).rstrip()) + i0 ) ),i0)])]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 2, 1], [], [0, 0], [], [], [1, 0, 1], [], [0, 0], [], [0], [1, 0], [], [1], [], [], [], [2, 1], [0], [3, 0], [], [2], [], [], [4, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\nin1 = in2\\ni2 = abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [3], [], [4], [1], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= saveOrd(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [3, 1, 7], [], [], [2, 2, 1], [1], [], [0], [1], [4, 0, 0], [], [], [0, 2, 3, 0], [3, 2], [1], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [1, 4], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\g int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [0], [], [0, 2], [], [0], [2], [], [], [], [0], [2], [2, 0], [], [0, 0], [], [], [], [], [1, 5, 2], [], [0], [0, 4, 2, 0], [1, 2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 3, 0, 1, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2:{:\\nb0 = not saveChr(i2) in s2[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [2], [2], [1], [0], [], [], [], [], [], [1], [3], [1], [1], [1, 0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [0, 1], [], [], [], [], [1], [1], [1], [0], [], [], [], [], [], [], [], [0, 2, 2], [1], [0, 0, 3], [], [3], [1], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = i0 \\g i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [1], [1], [0], [], [], [], [], [], [1, 0, 1], [6, 5, 1], [2, 0, 0, 0, 0], [], [3, 1, 1, 2, 0, 2, 3, 0, 0, 0], [0, 1], [2, 1], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = abs(int(6.0)) \\g int(51.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [], [], [1], [], [], [], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:int(6.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 2], [0], [2, 0, 1], [1], [], [1], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(i2,int(5.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [2, 2], [], [], [], [], [2], [5], [1, 2], [0], [5], [], [], [], [0], [1, 0, 1], [5, 8, 4], [0, 2], [], [0, 1, 1, 0], [1], [], [], [0], [2, 0, 0, 0, 2], [], [], [0, 3, 2, 4, 0, 0], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 3, 3, 2, 0, 4, 0, 0, 0, 0, 4, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i0 != int(5.0):{:\\ns2 = s0\\n:}\\ns0 = (saveChr(int(84.0))[i2:] + s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 1], [2], [1, 2], [], [0], [], [], [0], [4], [0, 1], [0], [], [2], [], [], [], [1, 1, 1], [5, 5, 2], [0, 0], [0], [3, 1, 1, 0, 1], [], [0], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = min(int(5.0), int(5.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [8, 2], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(82.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [3], [], [3], [0], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 2, 3], [2, 1, 1, 0, 2, 1], [], [3, 2, 0, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 0, 2, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0], [1], [0, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1], [2, 1], [], [], [2, 2, 0], [], [0, 2], [1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 21, 8, 1, 4, 4, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s1[max(mod(i2,divInt(int(1.0),( int(3.0) + mod(i1,int(9.0)) ))), mod(( i1 + i0 ),int(4.0))):i2][:( i1 * ( int(2.0) * int(3.0) ) )]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 0, 0, 2, 3, 2, 3, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [1], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [], [0], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [7, 8, 2], [0, 0, 0, 1], [0, 1], [1, 2, 1, 3, 3, 2, 3, 0, 0, 3, 0, 3, 0], [0, 1], [1, 2, 3, 4, 2], [2], [0], [1, 1, 2, 3], [], [], [2, 2, 2, 0, 2, 0, 0, 0], [], [], [0, 2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 5, 1, 1, 4, 0, 0, 7, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s1[int(7.0):][( int(8.0) * max(abs(divInt(len(s2[i0:]),i0)), saveOrd(in0)) ):][i0:abs(i1)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [0, 0], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [0, 3], [], [0], [], [], [0], [1, 0], [], [], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [8, 9, 8, 1, 3, 0, 7, 6, 9, 4], [0, 0, 1, 1, 0], [1], [2, 1, 2, 2, 2, 3, 3, 2, 0, 2, 1, 0, 0, 3, 2, 1, 1], [1, 0, 0, 1, 0, 0, 1], [0, 4], [1, 2, 2, 0, 0], [1, 1, 0], [0, 1], [], [], [0], [], [1, 0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 1], [2, 0, 0, 0], [2], [0, 0, 1], [], [0, 0, 0], [], [], [3, 3], [0, 5], [1, 0, 1], [0, 0], [], [1], [], [0], [], [1, 1, 1], [6, 1, 3], [1, 2, 2, 0, 2], [1], [1, 1, 0, 2, 0, 0, 3, 0, 3], [0], [0, 3], [0, 1], [], [2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 0, 3, 0, 0, 2, 2, 3, 2, 0, 1, 0, 1, 0, 2, 2, 5, 1, 9, 1, 2, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(6.0) \\l int(1.0):{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = i1 != ( i2 + i2 )\\ni0 -= min(i2, len(s2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 1, 5, 4, 5, 9, 8, 0, 9, 4, 1, 4, 0, 9, 4, 3, 1], [1, 1, 0, 0, 2, 2, 0, 2], [1, 0], [1, 2, 1, 2, 0, 2, 3, 3, 1, 3, 1, 3, 1, 3, 3, 3, 1, 0, 1, 3, 1, 2, 0, 1, 2, 3, 3, 1, 2, 0, 1, 3, 0, 0, 1], [0, 0, 0, 1, 0, 0], [0, 2, 3, 2, 3, 0, 2, 0, 0, 1, 2], [1, 0, 2, 0, 2, 0], [0], [0, 2], [], [], [4, 2, 2, 2, 2, 4, 0, 0], [3, 2], [2], [0, 0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 8, 2, 35, 6, 11, 6, 1, 2, 0, 0, 8, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(29.0)\\ni1 = ( int(1.0) + ( i0 * ( min(abs(int(54.0)), len(s0.capitalize()[int(5.0):abs(int(9.0))][:len(s2)][min(abs(int(8094.0)), i0):int(1.0)][min(int(4.0), divInt(i2,int(0.0))):( min(max(int(9.0), ( i2 + int(4.0) )), abs(i0)) * i2 )].strip())) + int(31.0) ) ) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [3], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [1, 3, 0], [1, 2], [1], [1, 0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(130.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1], [0, 4, 0, 8], [0, 2, 1, 2, 0], [], [3, 3, 3, 3, 2, 1, 1, 2, 1, 0, 0, 1], [1, 1], [0, 0, 1, 2], [], [0, 0], [5, 0, 4], [], [], [4, 2, 2, 0], [1], [], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 2, 4, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(min(min(max(abs(divInt(int(0.0),int(4.0))), divInt(int(0.0),i0)), i2), int(8.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 3, 0, 1, 3, 2, 0, 3, 3, 2, 2, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 9, 1, 3, 0, 1, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in2):] not in s0[i0:int(3.0)].rstrip()[abs(mod(i2,int(7.0))):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0, 2, 2], [], [0], [], [], [2, 0], [], [0], [], [], [0], [], [1], [], [1], [8], [1, 0, 0, 0, 0, 1], [0], [1, 1, 3], [1], [4], [], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 1], [8], [2, 2, 1], [1], [0, 1, 3, 3, 0, 0, 0], [1, 1], [0, 3], [0], [0, 1], [0], [], [], [1, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [0], [1, 0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [1], [], [], [], [2, 2], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1, 1], [6, 0], [1, 0], [1], [1, 1, 0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(6.0) \\l int(0.0)\\ni1 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 4, 2, 9, 3, 5, 9, 6], [2, 0, 2], [0], [2, 1, 2, 3, 1, 1, 0], [1, 0], [1], [0], [0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 1, 7, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(int(1.0),( max(int(1.0), int(4.0)) + i0 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [0, 1], [], [], [], [], [0], [2], [0], [0], [], [1], [], [1], [], [], [], [2, 0, 1, 2], [0], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 0, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 4, 1, 1, 8, 2, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = s0[i0:] not in getCharFromString(\"\"R\"\", len(saveChr(i1)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [2], [0, 2], [], [0], [], [], [2], [1], [2, 2, 1], [0], [0, 2], [2], [], [], [1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [3, 8, 7, 3, 5, 1, 6, 7, 0, 0, 7, 4, 5, 5, 1], [2, 2, 0, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1], [], [3, 0, 3, 1, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 2, 3, 0, 1, 2, 0, 1, 0, 2, 0, 1, 0, 0, 0, 2, 0, 1, 0, 2, 3, 0, 2, 3, 0, 0, 3, 3, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 0], [0, 1, 2, 1, 2, 2, 2, 1, 1, 0, 0, 0, 2, 0], [0, 1, 1, 0, 0], [0, 0, 0, 0, 0], [1, 1, 3, 5, 3, 2], [], [], [2, 2, 4, 0, 0, 0, 0], [3], [1], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 9, 9, 4, 0, 23, 6, 6, 3, 3, 4, 0, 0, 7, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s1.rstrip()[:min(i2, max(int(3.0), int(87.0)))][:( int(35.0) + divInt(abs(max(abs(int(1.0)), ( int(6.0) - ( divInt(abs(i2),int(7.0)) - divInt(i0,int(0.0)) ) ))),i1) )] in s1:{:\\nb2 = in0 == in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0], [0], [2], [0], [], [], [], [], [], [1, 1], [6, 1], [], [], [1, 1], [], [], [], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [1, 3], [], [0, 2, 0], [], [4], [3, 0], [1], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [2], [], [], [4, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [1, 2, 2], [1, 0], [1, 0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(5.0)\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [3, 0], [], [2], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 3, 2, 1, 0, 4, 0, 1, 0, 1, 4, 4, 2, 0, 2, 2, 2, 0, 4], [], [], [2, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [2], [1, 1], [], [0, 0], [], [], [], [3], [0, 1], [0], [], [2], [], [], [], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [4, 6, 0, 1, 3, 9, 1, 6, 6, 4, 9, 8, 7, 6, 1, 9, 5, 2, 2], [2, 0, 1, 0, 1, 2, 1, 2], [0, 1, 1], [2, 2, 3, 2, 3, 3, 2, 0, 0, 1, 2, 2, 3, 1, 1, 1, 1, 0, 2, 2, 1, 2, 0, 1, 0, 1, 1, 1, 3, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1], [1, 2, 1, 4, 2], [1, 1, 2, 0], [1, 0, 1, 0, 1, 1], [], [], [], [2, 4], [1], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 19, 19, 8, 2, 31, 9, 5, 4, 6, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(divInt(max(( abs(max(mod(i0,i1), int(4.0))) - divInt(mod(saveOrd(saveChr(int(60.0))[int(13.0):int(9.0)]),int(1.0)),i0) ), ( ( int(6.0) - mod(i1,int(6.0)) ) * i2 )),int(4.0)),int(9876195.0))\\nloopBreak% = 0\\nwhile not int(2.0) \\ge abs(int(2.0)):{:\\ni1 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [5, 6], [2, 2], [0], [2, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = ( i2 - int(56.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in s1[mod(i1,int(0.0)):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [3], [0], [0], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [3, 5, 7], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 2, 3], [5, 0, 0], [1], [0], [2], [], [], [], [], [1], [0], [2, 0, 0, 0], [], [2, 2, 0, 2, 0, 0, 0, 1], [0, 1, 1], [], [1, 1], [0, 0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 8, 3, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( divInt(i2,divInt(i0,i0)) - i0 ) != int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 2], [0], [0, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 4, 7, 9, 5, 1, 1, 6, 4, 0, 4], [2, 0, 2, 1, 1], [], [3, 0, 1, 3, 0, 2, 3, 0, 2, 0, 1, 3, 1], [0, 1], [1, 1, 3, 2], [2], [1], [2], [], [], [2, 0], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 4, 0, 13, 2, 4, 1, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = max(i2, int(6.0)) \\ge max(i0, ( len(s2[i2:mod(i1,int(4795.0))]) * abs(int(116404.0)) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [0], [], [], [0, 3], [], [], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 2, 3, 2, 6, 8, 4], [0, 0, 0, 0, 2], [0, 0], [1, 3, 3, 3, 2, 2, 3, 1, 3, 3, 2, 3, 2, 2, 2, 1, 2, 3, 1, 2, 1, 3, 1, 3, 1, 3, 3, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 4, 4, 2, 1, 4, 4, 3, 3, 4], [2, 0, 2, 0, 1, 1], [0, 0], [4, 4, 4, 4, 3, 3, 5], [], [], [4, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0], [], [0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 5, 2, 31, 8, 12, 6, 2, 7, 0, 0, 10, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(5.0)\\ni0 = max(min(min(( ( saveOrd(getCharFromString(in1, int(6.0))) * saveOrd(in1) ) + abs(( max(( ( divInt(int(2.0),( saveOrd(in1[int(3.0):divInt(int(2.0),saveOrd(in1))]) * int(6.0) )) + len(in0) ) - int(8.0) ), len(in0[saveOrd(in2):])) - i0 )) ), int(4.0)), i0), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [1, 2, 4], [0], [0], [2, 1, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = divInt(int(1.0),int(24.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [2, 2], [5], [0, 1], [0], [], [2, 0], [], [], [], [], [], [2, 2, 0], [0], [2, 0, 0, 0], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(i2,i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [2, 2], [], [], [4, 0, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s2.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1):]:{:\\nres0 = in1[i0:i2] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [3, 0], [], [2], [2, 1, 2, 1, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [0], [0], [], [], [], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [3, 1, 6], [1, 2], [1], [1, 0, 0, 1], [], [2], [0], [], [1, 4, 1], [1], [0], [0, 4, 1], [0], [], [], [0], [9], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in1:{:\\ni1 += int(316.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 0, 1], [0, 8, 7, 5, 6, 3, 9, 2], [2], [0], [1, 2, 3, 1, 2, 1, 1], [0, 1], [3], [0], [1], [1], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 0, 0, 7, 2, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(0.0) \\g ( len(saveChr(int(8.0))) + mod(int(7.0),int(56392.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2, 0], [0], [1, 3, 2, 0, 2, 3, 2, 1, 2, 1, 0, 0], [0, 0, 0, 0], [1, 3, 2], [0, 2, 0, 1], [], [3, 2, 2, 5], [], [], [3, 4, 4, 0, 0, 0, 0], [1, 1, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 12, 4, 2, 4, 0, 2, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (saveChr(int(5.0)) + saveChr(max(( i1 + ( len(s2) * ( int(7.0) + ( int(5.0) - i2 ) ) ) ), i0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 0, 0], [2, 2], [1], [], [0], [], [], [3, 3], [], [0, 0], [], [], [0, 0], [], [], [], [1], [5], [1], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [0], [0, 1], [0], [], [], [], [1], [0], [1], [0], [], [], [], [], [], [1, 1, 0, 0, 0, 1, 1], [0, 3, 6, 5, 2, 6, 9], [0, 1, 1, 0], [0], [2, 0, 1, 1, 2, 1, 3, 0, 0, 3, 1], [1, 1], [0, 3], [0], [1, 0], [2, 1, 1], [], [0], [2, 4, 4, 0, 4, 0], [3, 3, 2], [2, 1], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 4, 1, 11, 2, 2, 0, 2, 3, 0, 1, 6, 3, 2, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s1.rstrip().strip()[mod(i0,int(0.0)):int(3.0)]:{:\\nb1 = divInt(int(6526.0),min(i1, i1)) \\l len(s1.capitalize())\\ni0 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [2, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [2, 0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [0, 6, 2, 0, 0, 4, 3, 0, 7, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 3, 2, 2, 3, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [2, 1], [2, 1, 2, 1, 2, 0], [1, 0, 1, 1], [4, 0], [1], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 0], [], [0], [], [], [0], [], [], [], [], [], [2, 0], [1], [3, 0], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0, 0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 1, 1, 1], [1, 1, 5, 7, 7, 2, 2, 8], [0, 0, 2, 1, 1, 1, 1], [], [1, 3, 2, 2, 2, 1, 3, 1, 0, 0, 3, 1, 2, 3, 2, 3, 3, 3, 2, 0, 0, 1, 2, 2, 2, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0], [1, 1, 4, 1, 0, 4, 3], [1, 0, 2, 1, 1, 2], [1, 0, 0], [5, 5, 3, 4], [], [], [3, 0, 2, 0, 0, 0, 1], [], [], [1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 7, 0, 29, 9, 7, 6, 3, 4, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\g max(mod(( divInt(int(1.0),max(int(5.0), i0)) - i0 ),saveOrd((in2 + in2[:int(77.0)]))), divInt(max(( min(saveOrd(in0), len(in1)) + ( i2 * i1 ) ), int(2.0)),( ( ( i1 - int(2.0) ) - i1 ) * i1 )))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [5], [0, 2], [0], [0], [2, 2], [], [], [], [0, 1, 1, 1], [6, 4, 3, 4], [0, 2, 2, 1], [], [2, 0, 1, 2, 3, 2, 0, 1, 2, 2, 2, 0, 0, 3, 2, 3, 3, 1], [0, 1, 1, 0, 1, 0], [4, 1, 4, 3], [0, 1, 1], [0, 0, 1], [0, 0], [], [], [4, 0, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 2, 2, 1, 0, 3, 1, 0, 1, 0, 2, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not s0.capitalize() in s0[:( i0 + int(64.0) )]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 2], [1], [0], [2, 1, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = divInt(int(4.0),int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 2, 0, 1, 2, 2, 1, 0], [1, 2, 2, 2], [1, 2, 1, 0, 1], [], [0, 0, 0], [], [], [], [5], [2, 1, 0, 2, 1], [0], [], [2], [], [], [1, 1], [1, 1, 1], [9, 1, 4], [1, 1, 2, 0, 2, 2, 1, 2, 1], [1, 1, 0], [1, 1, 2, 2, 0, 2, 0, 3, 2, 2, 1, 3, 3, 1, 0, 0, 0, 3], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [4, 3, 0, 4], [0, 0, 1], [1, 1, 1, 1], [0, 2, 2, 0, 1, 1], [1], [], [0, 2, 0, 0, 1, 4, 1, 1, 1, 1, 1, 2, 0, 1, 1], [3], [0], [2, 0], [3, 1, 0, 0, 2, 3, 3, 0], [7, 2, 8], [0], [4], [25, 14, 27]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [0, 1, 1, 1], [0, 8, 9, 1], [2, 1], [1], [2, 2, 1, 1, 1, 3], [0, 0], [3], [1, 0, 2], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 5, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= ( ( int(08.0) + int(9.0) ) * int(1.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [1, 0, 1], [], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 9, 0, 9, 5, 8, 3, 4, 9, 2, 1, 7, 3, 4, 6, 6], [2, 1, 2, 2, 1, 0, 1], [1, 0], [1, 2, 2, 3, 1, 1, 0, 1, 2, 0, 2, 0, 3, 1, 1, 2, 3, 3, 1, 3, 1, 2, 0, 3, 1, 0, 2, 1, 1], [1, 1, 1, 0, 1, 1, 0], [0, 0, 4, 1, 1, 3], [1, 0, 0], [1, 1, 0, 0, 0], [4, 5], [], [], [0, 4, 3, 3, 4, 0, 4], [0, 1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 16, 16, 7, 2, 29, 7, 6, 3, 5, 2, 0, 0, 7, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(0.0)\\nb1 = mod(mod(min(int(90.0), int(9.0)),i1),int(5.0)) \\ge divInt(i2,( i2 + min(int(8.0), int(3.0)) ))\\ni1 = divInt(saveOrd(in1),max(int(492.0), max(int(173.0), divInt(i0,len(getCharFromString(((saveChr(int(4.0)) + in2) + saveChr(i1)), ( int(6.0) + int(6.0) )))))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [2], [1, 1], [0], [], [2], [], [0], [], [0, 1, 1], [2, 3, 8], [2, 2, 0, 1, 1, 2, 0, 2, 2, 1], [], [3, 2, 2, 0, 2, 3, 2, 2, 3, 1, 2, 1, 0, 0, 2, 3, 0, 0, 2, 2, 0, 3, 0, 0, 3, 2, 3, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [4, 4, 1, 3, 4, 2, 2], [0, 1, 0, 0, 1, 1, 2], [0, 1, 1], [0, 0, 0], [], [], [0, 2, 0, 4, 0, 4, 4, 4], [2, 3, 3, 1], [2, 1], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 10, 0, 29, 10, 7, 7, 3, 3, 0, 0, 8, 4, 2, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s0) == ( ( i2 + ( saveOrd(s0[( divInt(max(int(23.0), mod(int(8.0),i2)),i0) - ( len(s0.capitalize()) + i1 ) ):i1]) + mod(( i2 - saveOrd(saveChr(i0).rstrip().strip()) ),i2) ) ) - abs(( abs(i2) * i1 )) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [0, 1, 1], [3, 8, 8], [2, 1], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [3, 3, 0, 2, 0, 3, 2, 2], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(38.0) \\le i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 2, 1, 0], [2, 0], [2, 1], [0], [0], [], [], [], [2], [2], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 8, 7, 5, 4, 6, 1, 2], [2, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0], [2, 0, 2, 1, 0, 2, 0, 0, 2, 0, 1, 0, 2, 0, 2, 0, 1, 2, 1, 2, 3, 2, 0, 3, 1, 3, 1, 2, 0, 3, 2, 2, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [2, 3, 3, 2], [0, 2, 2, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1], [3, 1, 3, 5, 3, 4], [], [0], [0, 4, 2, 2, 4, 0, 0, 2, 0], [3, 0, 1], [5], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 2, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 4, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [4, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[abs(len(in1)):]:{:\\ni0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [1, 1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 0, 0], [9, 9, 5, 3, 7, 0], [1, 2, 2], [1], [0, 2, 3, 2, 3, 1, 3, 3, 0, 0, 0], [1, 0], [1, 2], [0], [1], [1, 4], [], [], [2, 0, 0], [], [], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1[i1:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 1, 1, 0, 1], [3, 5, 3, 5, 7, 2, 9], [2], [0], [3, 2, 1, 2, 1, 1, 1], [1, 1], [1, 3], [], [1, 1], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 1, 1, 7, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = max(mod(int(3.0),mod(int(535.0),int(7.0))), int(29.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 1, 0, 0, 1], [1, 3, 5, 8, 7, 2, 0], [2, 0, 1, 1], [1, 0], [2, 0, 2, 1, 1, 1], [0, 0], [], [0, 0, 1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 3, 2, 6, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += ( i0 + ( int(1.0) - int(358.0) ) )\\ni1 = int(720.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [7], [], [1], [1], [], [], [], [], [5], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(7.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [1, 3], [], [0, 2, 0], [], [4], [3, 0], [1], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [2], [], [], [4, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [2], [1], [0], [], [], [], [], [], [0, 0, 1, 1], [6, 8, 2, 6], [2, 0, 2, 1, 0], [], [3, 1, 1, 0, 0, 2, 3, 0, 0, 0], [0, 1], [1, 1], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = max(int(682.0), int(6.0)) == i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [0], [3], [], [4], [], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1], [2, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 2], [1], [3, 2, 0, 0, 2, 3, 2, 2, 1, 2, 1, 2, 2, 2, 0, 0, 3, 2, 2, 3, 1, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0, 3, 3, 1, 3, 0, 2, 3, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [1, 2, 4, 0, 2, 1, 3, 1, 1, 3], [2, 0, 2, 1, 2, 2, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 1], [], [], [2, 4, 0, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 12, 1, 49, 17, 10, 6, 12, 2, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= max(divInt(i0,i0), divInt(abs(mod(divInt(int(6.0),divInt(int(0.0),divInt(divInt(divInt(i0,i2),saveOrd(saveChr(divInt(( min(int(0.0), ( int(7.0) + abs(int(3.0)) )) * int(6.0) ),divInt(( int(1.0) - i0 ),max(( ( int(4.0) * mod(i0,i2) ) * int(3.0) ), int(0.0)))))[:i0])),len(s1)))),max(int(4.0), max(i2, divInt(len(s1),i0))))),i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [1, 1, 3], [5], [0, 0, 0], [0], [], [0, 2, 0], [], [], [], [1], [0], [2], [], [3, 1, 3, 0], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 3, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b1:{:\\nb1 = not res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [0], [], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [], [], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0], [0], [2, 0, 0], [1], [], [1], [1], [], [], [], [], [], [], [], [0], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(i1,i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [3], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 4, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 0, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 4, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 8], [2, 1, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [0, 1], [1], [0, 3, 2], [1], [], [3, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (in0 + s2)\\ni2 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [0], [1, 1], [0], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 1, 0, 1], [0, 8, 5, 6, 8, 9, 2], [1, 1, 1], [1, 1], [2, 2, 1, 1, 3, 3, 2, 1, 2, 0, 1, 3, 1], [0, 0, 0, 1], [3, 2, 2], [1, 0, 2, 1, 2], [0], [1, 5], [], [0], [0, 4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 3, 2, 13, 4, 3, 5, 1, 2, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= ( ( int(0.0) + int(8.0) ) * len(s1) )\\nloopBreak% = 0\\nfor in2 in saveChr(abs(( int(5.0) - divInt(i1,int(68.0)) ))):{:\\ni1 *= abs(int(92.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0], [2], [0, 0], [], [0], [], [], [1, 3, 3], [1], [0, 0, 1], [0], [], [1, 0], [], [0], [], [0, 0, 1], [6, 9, 5], [0], [], [0, 3, 1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 3, 1, 3, 1, 0, 2, 0, 1, 0, 3, 3, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile True:{:\\nb1 = res0\\nres0 = i0 \\g abs(int(695.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [0], [0], [0], [], [1], [], [1], [], [0, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [], [], [1], [], [], [], [], [2, 3], [], [], [4, 0], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(int(1.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0], [3], [], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [3], [1], [0], [], [], [], [], [], [1, 0, 1], [4, 4, 4], [], [], [1, 1], [], [], [], [], [2, 2], [1], [], [4, 1, 3, 0, 4], [3, 1], [4], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(4.0) \\ge int(44.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [3, 6, 8], [1], [1], [1, 1, 3], [], [1, 4], [1], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(368.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0], [], [], [], [], [], [1], [8], [2], [1], [2, 1, 3], [1], [4], [2], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= mod(int(8.0),saveOrd(s0.capitalize()))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [1], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [1, 1, 1], [], [], [], [], [], [], [], [0, 0], [], [], [], [], [], [1], [5], [2, 1, 0, 1, 2, 0, 2], [1, 1, 0], [0, 0, 2, 0, 0, 0], [1, 0], [], [1, 1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 5, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\ni0 -= i1\\ni2 = divInt(i0,i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0], [8, 2, 2, 9], [0, 2], [0], [2, 1, 3, 2, 1, 1], [1, 1], [4], [], [1, 0], [1], [], [], [0, 0], [2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(int(8.0),saveOrd(s1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [0], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 2, 3], [2, 1, 1, 1, 2, 1], [], [0, 2, 0, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 0, 2, 2, 1], [1, 1, 0, 1, 1, 0, 0, 1], [1], [0, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1], [0, 1], [], [], [2, 2, 0], [], [0, 2], [1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 0, 15, 6, 0, 2, 4, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1[i2:mod(i1,divInt(int(1.0),( int(3.0) + mod(i1,int(9.0)) )))][:mod(( i1 + i2 ),int(4.0))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 2], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(02.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [3], [0, 2], [], [3], [1], [], [0], [], [], [], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = len(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 0, 1, 1], [], [0], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0:{:\\ns1 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 0, 8], [2, 1], [0], [3, 1, 2, 3, 1, 1, 1, 0], [0], [2, 0, 0], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(int(1.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1], [0, 6, 2, 8], [2], [0], [1, 0], [], [], [1], [], [3, 5, 5], [], [], [4, 3, 0, 0], [2, 2, 1, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 1, 0, 0, 0, 0, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (in2 + in2).capitalize()\\ni2 = int(0628.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [2, 0], [0], [0], [], [], [], [2], [3], [2], [0], [5], [], [], [], [], [1], [3], [0], [], [1, 0], [], [], [], [], [0, 0], [], [], [0, 4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = s0.endswith(s0.capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 4], [2, 0, 0, 0, 0], [1], [2, 1, 2, 3, 0, 3, 2, 0, 0, 0], [1, 0, 1], [2, 1, 1], [0, 2], [0, 0], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 5, 1, 10, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(24.0),( abs(i0) * max(divInt(i0,i0), i0) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [1], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [4, 0, 0, 0, 7, 6, 1, 4, 3, 3, 5, 8, 1, 5, 7], [2, 0, 0, 0, 2, 1, 2, 2, 0], [1], [1, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 2, 2, 2, 3, 0, 1, 2, 2, 1, 0, 2, 1, 3, 1, 1, 2, 1, 1, 3, 1, 2, 2, 1, 2, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 2, 4, 0], [2, 0, 1, 1, 2, 0, 2, 1, 1], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1], [], [], [2, 4, 0], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 6, 1, 38, 15, 4, 7, 9, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(4.0)\\ns1 = saveChr(mod(i0,int(0.0)))[( i0 + divInt(mod(int(0.0),mod(max(divInt(divInt(divInt(abs(i0),int(0.0)),divInt(( int(7.0) - i2 ),( int(6.0) - saveOrd(s1) ))),int(1.0)), int(4.0)),divInt(int(3.0),int(3.0)))),min(int(5.0), ( ( int(8.0) * ( int(1.0) + i1 ) ) * int(57.0) ))) ):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [1, 3], [1], [0], [0], [], [0], [], [], [], [1, 1, 1], [1], [0], [0], [3, 3, 1], [], [4, 4], [], [], [1, 4], [], [], [0, 4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [0], [0], [0], [], [1], [], [1], [], [1], [0], [0, 2], [], [2, 0, 1, 0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 1, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 9, 0, 33, 10, 6, 6, 4, 7, 1, 1, 15, 2, 0, 6, 1, 1, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1[:i0]),int(0.0)):][:len(s0)]:{:\\nin0 = s0[mod(i1,int(7.0)):i2][:int(5.0)][abs(i2):( divInt(( int(7.0) + i1 ),divInt(saveOrd(getCharFromString((\"\"R\"\" + saveChr(( i2 + ( len(in1) * ( int(2.0) - i1 ) ) ))), ( min(int(1.0), i0) + int(7.0) ))),int(7.0))) * i0 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [], [0, 0], [], [], [1, 1, 3], [], [0, 0], [], [], [1, 0], [], [0], [], [], [8, 4], [], [], [], [], [], [], [], [3, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\nb1 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [2], [1], [1], [0, 1, 0, 0, 1, 0, 1, 0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 2, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 2, 2, 1, 1], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in \"\"R\"\":{:\\nres0 = in2 not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0, 0], [], [2], [0], [], [], [], [], [], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [9, 4, 7], [2], [1], [2, 1, 1], [0], [], [0, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += ( int(9.0) - int(47.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 1], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [0, 1], [4, 9], [1, 2], [1], [3, 2, 0, 1], [0], [4], [2, 0], [], [3, 2, 0], [], [], [3, 0, 4, 3, 4, 0, 4, 0], [3, 2, 1], [5], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 1, 1, 2, 0, 3, 0, 0, 8, 3, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= saveOrd((in0 + (s2.capitalize() + saveChr(( i2 + int(49.0) ))).strip(s0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1, 0], [], [0, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 3, 1, 0, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = s0[saveOrd(s0):] not in in1[len(\"\"R\"\"):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [8], [1], [0], [2, 1, 3, 3], [1], [2, 4], [], [1], [0], [], [], [0, 1], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 4, 1, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = mod(int(8.0),abs(saveOrd(s0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [2], [0, 0], [], [0, 0], [], [], [3, 3], [0, 5], [1, 0, 1], [0, 0], [], [1], [], [0], [], [1, 0, 1], [6, 1, 3], [0, 2, 0], [], [1, 1, 0, 0, 0, 0], [0], [], [0], [], [], [], [], [], [], [1, 0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 2, 2, 3, 2, 0, 1, 0, 1, 0, 3, 3, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(6.0) \\l int(13.0):{:\\nres0 = True\\nres0 = i0 != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 1], [0], [], [0], [], [0], [], [], [1], [5], [1], [0], [], [], [], [], [], [1, 1, 0, 0, 0, 1, 0, 1], [5, 5, 0, 4, 7, 4, 8, 0], [0, 0], [], [1, 2, 3, 3, 1], [0], [2, 3], [0], [1], [2, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(5.0) != ( abs(len(s2)) + int(5.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 5, 8, 1], [2, 0, 0, 0, 2, 1, 2, 2, 0], [1], [1, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 2, 2, 2, 3, 0, 1, 2, 2, 1, 0, 2, 1, 3, 1, 1, 2, 1, 1, 0, 1, 2, 2, 1, 2, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 2, 4, 0], [2, 2, 2, 1, 2, 0, 2, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1], [], [], [4, 4, 0], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(4.0)\\ns1 = saveChr(divInt(i0,int(0.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [0, 2], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [1, 0], [1], [0], [], [], [2], [], [4, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [0, 2, 1, 1], [2], [1, 1, 2], [], [0], [], [], [], [4], [0, 0], [0], [], [2], [], [], [], [1, 0, 1], [8, 3, 2], [1, 0, 2, 1, 0, 2], [1, 1], [1, 3, 0, 1], [], [3], [1, 0], [], [4, 1], [1], [], [0, 4], [], [], [], [3], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 8, 1, 4, 0, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:max(len(in1), abs(int(0.0)))]:{:\\ni0 = saveOrd(in1[mod(i1,int(7.0)):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1, 1, 1], [8, 5, 3, 9, 2, 1], [0, 2], [0], [2, 1, 3, 2, 1, 1, 3, 3, 1, 1], [1, 0], [0, 0, 4], [0], [1, 0], [1], [], [], [2, 0], [2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 1, 1, 10, 2, 3, 1, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(int(8.0),min(( int(53.0) + int(9.0) ), min(saveOrd(s1[int(2.0):]), int(1.0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [1, 0], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [5, 9, 9], [1, 1, 2], [1, 1], [1, 3, 3, 0, 1], [], [3, 1], [1, 1], [], [], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(59.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [0, 0, 0, 1], [5, 9, 1, 4], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(5914.0) \\l i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 3, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [1, 0, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[int(0.0):]:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [1], [], [1, 1], [0, 8], [], [], [1, 1, 3, 1], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\g int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [2, 2], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [1], [1, 0], [], [0, 0], [], [], [1], [2, 5], [1, 1], [0, 0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 5, 1, 1, 9, 6, 6, 1, 2, 2, 0, 4, 7, 9, 2, 0, 0], [0, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 0], [0, 1], [1, 1, 1, 2, 1, 3, 1, 2, 2, 3, 3, 0, 0, 2, 0, 0, 2, 1, 0, 2, 2, 3, 2, 1, 3, 2, 2, 1, 1, 0, 2, 2, 2, 3, 3, 1, 1, 3, 3, 2, 0, 0, 3, 1, 2, 1, 0, 2, 1, 3, 3, 0, 1, 0, 3, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0], [0, 3, 4, 3, 0, 1, 3, 1, 0, 2, 2, 0, 3, 1, 1], [2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0], [1, 1, 1, 1, 0, 1, 1], [3, 1], [1], [], [2, 0, 4, 1, 4, 2, 2, 4, 4, 0, 4, 4], [0, 0, 1, 3, 3, 1], [0, 2], [1, 1, 1], [1], [], [17], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 6, 1, 19, 5, 3, 2, 3, 1, 1, 0, 4, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(4.0) == int(9.0):{:\\ni0 = int(5.0)\\n:}\\nb1 = ( int(1.0) * min(int(1.0), mod(mod(len(in0[:saveOrd(getCharFromString(\"\"r\"\", i1))]),i2),mod(i2,i2))) ) != ( int(9.0) + i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1, 1, 2, 1], [1, 1], [0, 0, 3], [1], [], [0, 0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += i1\\ni2 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1, 0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [1], [3, 0, 3, 3], [], [0, 4, 4], [0], [], [2, 2], [], [], [2, 0, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 3, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += min(i0, saveOrd(s2[saveOrd(s2):]))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [0], [], [], [], [], [], [1, 1, 0, 1], [5, 8, 5, 1], [1, 1, 2, 2, 0, 2], [0, 1], [3, 1, 0, 0, 2, 3, 1, 3, 2, 0, 0, 0, 3], [1, 1, 0], [0, 3, 1, 4], [2, 0, 1], [1, 0], [1], [], [], [2], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = min(int(5.0), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0, 2], [], [0], [], [], [1], [], [0], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 6], [2, 0], [1], [1, 0], [], [], [1], [], [5, 5], [], [], [4, 4, 4], [2, 2, 1, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 2, 0, 0, 1, 0, 1, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(46.0)).capitalize().capitalize()\\ni2 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 0, 0, 4, 8, 2], [0, 2, 0], [0], [0, 3, 2, 1, 1, 1, 3, 2, 1, 1, 2, 0, 1, 0, 0, 1], [0, 0, 1, 1], [1, 4, 4], [0, 1], [0, 1], [], [], [], [4, 0], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 6, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 == max(( int(1.0) + int(0.0) ), int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [0, 3], [3], [0, 1], [0], [], [1], [], [1], [], [0, 0, 1], [4, 1, 2], [0, 1, 1], [1, 1], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i1\\ni1 *= int(412.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [1, 1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 2, 9, 2], [0, 2, 2, 0, 1, 2, 1, 0, 0, 0, 1, 2, 1, 0, 2, 1, 2, 2, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 0, 2, 1, 2, 0, 2, 1, 0, 3, 3, 2, 2, 2, 1, 2, 1, 2, 0, 2, 0, 2, 3, 0, 0, 1, 2, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0], [3, 2, 2, 0, 3, 0, 1, 2, 1, 0, 0, 2, 4], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 22, 22, 19, 0, 80, 27, 13, 15, 12, 6, 1, 1, 15, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString(in1[abs(i0):], i2)):]:{:\\nres0 = ( ( abs(( i2 + int(0.0) )) != ( int(7.0) + min(i0, ( mod(( int(5.0) * i1 ),divInt(len(in1),( i2 + min(( divInt(int(7.0),i1) + ( max(int(7.0), i0) * int(1.0) ) ), int(7.0)) ))) - i0 )) ) or True ) and saveChr(i0)[divInt(int(7.0),abs(divInt(max(i1, ( ( ( int(9.0) - int(8.0) ) * divInt(int(5.0),i2) ) + int(0.0) )),int(4.0)))):min(i1, mod(int(8.0),( i0 + ( int(59.0) - i2 ) )))] not in in0[min(abs(( ( divInt(int(9.0),divInt(int(2.0),divInt(i1,mod(i2,divInt(saveOrd((\"\"R\"\" + s0.capitalize()).rstrip()),i2))))) + i0 ) + int(2.0) )), ( int(2.0) + int(9.0) )):int(2.0)] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0, 0, 0], [0, 0], [0, 1], [], [], [], [], [2], [], [], [4], [3], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [2], [1, 1], [0], [], [2], [], [0], [], [0, 1], [2, 3], [2], [], [0, 1], [], [4], [], [], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = i2 == int(23.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 9, 5, 8, 1], [2, 0, 0, 0, 2, 1, 0, 2, 0], [1], [1, 2, 0, 1, 2, 0, 2, 1, 1, 3, 1, 2, 2, 2, 1, 0, 1, 2, 2, 1, 2, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 2, 4, 0], [2, 2, 2, 1, 2, 0, 2, 1, 1], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [2, 1, 1], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 1, 9, 3, 0, 2, 2, 1, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(4.0)\\ns2 = saveChr(mod(i0,int(0.0)))[:( i0 * divInt(int(0.0),int(7.0)) )]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 1, 1], [2, 2, 0, 1, 0, 1], [1, 0], [1, 1, 1, 0], [0], [0, 0, 0], [], [], [0], [], [0, 2], [0], [0], [1], [], [0], [1], [1, 1, 1, 1], [6, 7, 8, 3], [1, 0, 2, 0, 2, 1, 0, 1], [1, 0, 0], [2, 3, 0, 0, 2, 1, 2, 2, 0, 3, 1, 3, 3, 0, 1, 2, 0, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0], [2, 4, 4, 2], [1, 2, 0, 2, 2, 2], [0, 0, 0, 0], [4, 3, 0, 4, 0, 5], [], [0], [0, 0, 0, 4, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 2, 2, 6, 3, 12, 4, 3, 3, 2, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif True:{:\\nloopBreak% = 0\\nfor in1 in in0:{:\\ni1 -= ( abs(i0) * i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = divInt(int(6.0),( divInt(i2,saveOrd(s0)) + int(7.0) ))\\n:}else:{:\\ni1 = saveOrd(in1)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [2], [0], [0], [], [], [0], [2], [2], [], [5], [], [], [], [], [], [], [2, 0, 2, 1, 0], [], [0], [], [], [], [], [4, 1, 0], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveChr(i2).endswith(in1):{:\\ns1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 1], [], [], [], [], [0], [5], [0, 0], [0], [], [2], [], [], [], [1, 1, 0, 0, 1, 1], [3, 1, 5, 0, 6, 2], [0, 0, 1, 1, 2], [0, 1], [2, 3, 3, 1, 1, 3, 0, 3, 3, 1, 0, 2, 0, 1], [0, 0], [0, 0, 0, 2, 0], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 4, 1, 14, 2, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( min(min(int(3.0), int(1.0)), min(i0, abs(min(int(506.0), i1)))) - ( i1 * int(2.0) ) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1], [1], [1], [0], [], [], [], [], [0], [1], [1], [1], [1], [3, 3, 1, 0], [], [4, 4], [0], [], [1, 4], [], [], [0, 4, 4], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += saveOrd(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 2, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0, 2], [1], [3, 2, 3, 1, 0, 0], [0], [2, 2, 2], [1, 0], [], [0, 4, 0, 1], [], [0], [3, 4, 0, 0], [0, 1], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 1, 0, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (getCharFromString(in1, abs(( abs(int(4.0)) - i0 ))) + s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1, 2], [2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(12.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [9, 5, 2], [2, 1, 0, 2], [0, 0], [0, 2, 0, 1], [0], [], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 2, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\ni0 = ( i2 + int(952.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0, 2], [3, 1], [0, 1, 1], [0, 0], [], [3, 0], [0], [], [], [1, 1], [5, 1], [0, 1, 2], [], [3, 1, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 2, 2, 3, 0, 6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( max(int(5.0), i0) \\ge i1 and int(1.0) \\g i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [1], [], [0], [], [], [], [3], [0, 1], [0], [], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 3, 2, 7, 4, 8, 2, 4, 4], [0, 2, 0, 0], [1], [3, 0, 2, 2, 1, 0, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 0, 0, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 3, 2, 3, 0, 1, 3, 1, 3, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 3, 1, 1, 2, 1, 0, 2, 0, 0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [3, 3, 1, 0, 3, 0, 1, 2, 1], [2, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [3, 1, 3, 4], [1], [], [0, 2, 4, 2, 4, 4, 0, 4, 1, 1, 0, 4, 4, 0, 2, 0], [3, 2, 2, 3, 0, 0, 2, 1], [0, 2], [1, 1, 1], [1], [], [24], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 4, 1, 7, 2, 1, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not len(in0) \\ge i0:{:\\ni2 *= divInt(divInt(int(7.0),i0),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 0, 0, 0, 1], [4, 2], [1], [0], [1, 2, 3, 3, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [1], [0], [2, 1], [0], [0, 1], [], [4], [0], [], [5], [], [], [2, 0], [], [1, 0], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [], [0, 0], [], [], [0, 0], [2], [0, 1], [0], [], [1], [], [0], [], [0, 1], [2, 3], [1], [], [3, 0], [], [4], [], [], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\nb0 = saveOrd(s0) == i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [0], [0, 0], [0, 0, 0], [1, 3, 2], [1, 0, 2], [], [3, 2, 2, 5], [], [], [3, 4, 4, 4, 0, 0, 0], [1, 1, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (saveChr(i1) + saveChr(i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [3], [], [3], [], [], [4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(in1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2, 2], [1], [2, 0, 0], [0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( i2 + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [], [2], [1], [3, 3], [], [2, 4], [1], [], [2, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [2, 1, 2, 0, 0, 1], [0, 0], [0, 0, 1, 2, 0], [0, 0], [0, 0, 0], [], [], [1, 2, 3, 3], [4], [1, 0, 0], [0], [], [1, 0], [], [0], [], [1, 0, 0, 1], [0, 8, 9, 0], [0, 0, 2, 1, 0, 2], [1], [2, 1, 3, 3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0], [1, 1, 1], [0, 3, 4, 4, 3, 2], [0], [0, 0], [2, 2, 3, 0, 5, 5, 3, 3, 5, 5], [], [0, 0], [0, 2, 0, 2, 0, 0, 2, 4, 2, 0, 0, 0], [2], [], [2, 1, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 6, 6, 2, 4, 2, 2, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 6, 1, 14, 2, 6, 1, 2, 10, 0, 2, 12, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s2:{:\\nb1 = divInt(int(0.0),min(len(in0[saveOrd(s0[:divInt(saveOrd(in2),len(in2[abs(i0):].capitalize()[:i0]))]):]), i2)) \\le i1\\nloopBreak% = 0\\nfor in0 in in0:{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\l int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 1, 0], [2, 0, 0, 2, 1, 0, 0, 2], [1], [2, 2, 2, 0, 3, 1, 0, 2, 2, 3, 2, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 0, 1], [1, 0], [1, 2, 2], [0, 1, 0, 1, 1], [0, 4], [], [], [4, 4, 0, 4, 1], [3, 3, 0], [5, 2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 7, 1, 17, 6, 2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= divInt(mod(divInt(i0,max(int(1.0), i0)),mod(( min(mod(i2,int(1.0)), int(0.0)) * i1 ),i0)),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 8], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(08.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [0], [0], [], [], [], [], [4, 2], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s2[i0:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [0], [1, 2], [], [], [], [], [4], [], [], [0, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [2, 0, 1], [0], [2, 3, 3, 0, 0], [0], [3, 2], [1], [1], [5], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 1, 2, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = ( len(in2[abs(i0):]) - i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [0, 2], [], [0, 2, 0], [], [0], [3, 0], [1], [], [], [0], [2], [2], [], [0, 0], [], [], [], [], [5, 4], [], [], [0, 4, 2, 0], [1, 2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [], [], [1], [], [], [], [], [5], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1], [9], [1], [], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 \\ge int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1], [2, 0, 0, 0, 2, 0, 0, 2, 0, 2], [1], [1, 2, 0, 0, 2, 3, 2, 2, 1, 2, 1, 2, 2, 2, 0, 0, 3, 2, 2, 3, 1, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0, 3, 3, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 2, 4, 0, 2, 1], [2, 0, 2, 1, 2, 2, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0], [1], [0, 2], [], [0, 0], [], [], [2], [1], [0, 2, 1], [0], [0], [2], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 0, 8, 1, 9, 6, 7, 8, 3, 3, 2, 8], [1, 2, 1, 2, 0, 2], [], [3, 0, 3, 0, 3, 2, 2, 2, 2, 1, 3, 3, 1, 1, 1, 1, 1, 0, 2, 1, 2, 1, 2, 1, 3, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 1, 1, 0, 3], [1, 2, 2, 2], [1, 1, 0, 0], [1, 1, 4, 5, 3, 2], [], [], [2, 2, 0, 0, 0, 0, 0], [], [], [1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 1, 10, 10, 4, 0, 26, 7, 6, 4, 3, 6, 0, 0, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not s1[len(s1):][:i1] in in1:{:\\nb2 = max(i2, max(( mod(mod(( int(5.0) - max(min(int(0.0), int(8.0)), int(1.0)) ),int(9.0)),int(6.0)) * i1 ), ( int(7.0) * ( int(8.0) * divInt(int(33.0),len(in2)) ) ))) \\g i2\\n:}else:{:\\nin0 = s2\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [1], [0], [], [], [], [], [2, 0], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0[i2:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1], [8, 2, 2, 9], [0, 2], [1], [2, 1, 3, 2, 1, 1], [0, 1], [4], [1, 2], [1, 1], [1], [], [], [2, 0], [2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 6, 2, 1, 2, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( int(8.0) * saveOrd(s1[mod(int(22.0),int(9.0)):]) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [0], [0], [], [], [1, 3], [5], [1], [0], [], [0], [], [], [], [0, 1], [9, 3], [0], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(93.0) != i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 2, 2, 2, 3, 0, 1, 1, 3, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0], [3, 1, 2, 0, 3, 0, 1, 2, 1, 3, 2, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 13, 0, 59, 19, 12, 9, 10, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = getCharFromString(in1, max(i0, int(0.0)))[abs(mod(i2,int(7.0))):] not in in0[mod(int(5.0),min(i2, ( divInt(( len(s0[i0:mod(min(( i1 + ( mod(( int(7.0) + i2 ),mod(max(int(4.0), i1),int(1.0))) * int(7.0) ) ), i2),i0)]) - mod(int(7.0),abs(int(9.0))) ),max(i0, ( ( ( int(8.0) + int(5.0) ) * divInt(int(0.0),i0) ) - int(4.0) ))) - i1 ))):mod(divInt(( len(saveChr(i0)) * int(8.0) ),int(59.0)),abs(saveOrd((\"\"R\"\" + in1.rstrip()))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [2], [0, 2], [], [0], [], [], [2], [5], [0, 2, 1], [0], [0], [2], [], [], [1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 8, 7, 3, 5, 1, 6, 7, 0, 0, 7, 9, 5, 5, 5], [2, 2, 0, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1], [], [3, 0, 3, 2, 1, 2, 1, 1, 3, 3, 3, 1, 2, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 2, 3, 1, 0, 0, 0, 2, 0, 1, 0, 2, 3, 0, 2, 3, 0, 0, 3, 3, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 3, 1, 2, 2, 2, 1, 1, 0, 0, 0, 2, 0], [0, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 1, 3, 5, 3, 2], [], [], [2, 2, 4, 0, 0, 0, 0], [3], [1], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 0, 9, 9, 5, 0, 23, 6, 5, 4, 2, 3, 0, 0, 6, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not s1.rstrip()[:min(i2, max(( int(3.0) + mod(int(87.0),int(35.0)) ), len(s1)))][:max(abs(int(1.0)), ( int(6.0) + ( mod(i2,i0) - int(7.0) ) ))] in in0:{:\\nb2 = ( i1 + int(0.0) ) != i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [0, 2], [1], [2, 1, 3], [0], [3], [1, 1], [1], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( int(5.0) - len(in0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [2], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1[i1:])]:{:\\nres0 = in0.endswith(s0[int(0.0):abs(mod(i1,int(7.0)))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 5], [2, 2], [], [0, 0], [], [], [], [], [4, 0], [], [], [4, 4, 0], [0, 0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = getCharFromString(getCharFromString(s0, i2), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [1, 0, 0, 0, 0, 0, 1], [6, 6, 4, 3, 8, 0, 4], [1, 2], [1], [2, 2, 3], [1], [], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1], [1, 1, 2, 4], [2, 0, 2], [1], [2, 1, 1, 0, 3, 1, 2], [0, 1], [1, 4], [1, 1], [0, 1], [2], [], [], [3], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= ( int(11.0) - int(24.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [], [], [1, 2], [0], [0, 0], [], [4], [], [], [4, 2], [], [0], [0], [], [], [], [0], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in s2:{:\\nb1 = i1 \\ge i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [1], [0], [1, 1], [4, 5], [1], [], [0, 1, 1], [], [], [], [], [3, 0, 2], [1], [], [0, 4, 2, 2, 0, 3, 1, 2, 0], [2, 0], [0], [2, 1, 2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [1], [2, 1], [], [], [], [], [], [5], [0, 1], [0], [], [2], [], [], [0], [], [], [2, 1, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [1, 1], [1], [0, 3, 1], [1], [], [3, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 6, 1, 7, 2, 0, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (in0 + s1)\\nif not i2 != ( i1 - i1 ):{:\\ni2 -= mod(i2,i1)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [0], [0], [0], [0], [], [], [0], [2], [2], [], [5], [], [], [], [], [], [], [2, 0, 2, 1, 0], [], [0], [], [], [], [], [4, 1, 0], [], [0], [3, 0, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = (in1 + s1).endswith(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1], [0, 2, 0, 1, 0, 0, 0], [2], [1, 0, 2, 2, 2, 2], [], [0, 0, 0, 0], [], [], [0], [2], [0, 0], [0], [], [1], [], [1], [], [1, 1, 1], [6, 2, 6], [0, 0, 1, 2, 0, 1, 1, 1], [0, 1, 0], [1, 2, 0, 0, 1, 1, 2, 0, 1, 0, 0], [0, 0], [4], [2, 1, 1], [], [0, 0, 1, 0, 3], [], [], [4, 0, 0, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(6.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [], [2, 0, 0, 0, 0, 0, 1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [5], [0], [0], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0], [2, 0], [2], [0], [0], [], [], [], [2], [1], [0], [], [], [], [], [0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 6, 0], [1, 1, 0, 2], [], [0, 0, 0, 3, 1, 1, 0, 0], [1], [2, 0], [], [1], [2, 0, 1], [], [0], [4, 0, 2, 4, 2], [2, 1], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 5, 0, 1, 0, 0, 3, 0, 1, 4, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 == i1:{:\\nloopBreak% = 0\\nfor s2 in s0.capitalize():{:\\ns1 = saveChr(i0)[abs(int(46.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 4, 9, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 2, 1, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 0, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 5, 0, 1, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString(s1[:len(in1)], i0)):]:{:\\nin0 = saveChr(i2)[int(0.0):mod(i2,int(7.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [2], [], [2], [], [], [], [], [1, 0, 1], [3, 1, 7], [2], [], [2, 1, 1, 0], [1], [], [0], [1], [4, 2, 0], [], [], [4, 2, 4, 0, 4, 0], [2, 2, 0], [1], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 4, 1, 0, 0, 1, 2, 0, 0, 6, 3, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = in1.capitalize()[mod(int(3.0),int(17.0)):].capitalize() == getCharFromString(s2, i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 1], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [1, 3], [], [0, 2, 0], [], [4], [3, 0], [1], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [2], [], [], [4, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 4], [2, 0, 0, 0], [1], [2, 1, 0, 3, 0, 3, 2, 0, 0, 0], [1, 0], [2, 1, 1], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(2.0),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [0, 1], [0], [0], [0], [], [], [1], [3], [1, 0], [0], [], [1], [], [0], [0], [1, 1], [7, 2], [0, 0], [0], [0, 1, 0], [], [], [], [], [0, 3, 0, 4], [], [0], [3, 0, 3, 3, 4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 1, 1, 2, 0, 3, 0, 0, 0, 0, 4, 0, 1, 7, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in0 + ((saveChr(i0) + s0) + in1)):{:\\nif int(7.0) \\ge i0:{:\\nb1 = True\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [1, 1], [6, 4], [2, 2, 2, 0, 0], [], [2, 2, 1, 0, 0, 2, 1, 2, 0, 0], [0, 1, 0, 0], [1, 1], [2, 1, 2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 10, 4, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( mod(int(6.0),i2) * i2 ) == ( int(4.0) - ( i2 * i0 ) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0], [0, 0], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [1, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [6, 9, 1], [2], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(6.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0], [], [], [], [], [], [1], [8], [2], [1], [2, 1, 3], [1], [4], [0], [1], [0], [], [], [0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += mod(int(8.0),saveOrd(s0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1):]:{:\\nb0 = in1[len(in0):] not in saveChr(divInt(int(0.0),i0)).capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [5, 7], [2, 1, 2, 0], [0], [3, 3, 3, 0, 3, 0, 2, 3, 1, 0], [0], [2, 2, 2, 1, 2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(abs(abs(i1)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [1, 0, 1], [8, 9, 7], [1], [], [1, 0], [], [], [], [], [0, 5, 4, 4, 3, 0, 4], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(8.0) \\le i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [0], [], [], [], [1], [3], [1], [0], [], [], [], [], [], [], [], [1, 2], [0], [0, 0], [], [4], [], [], [0, 2], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2:{:\\nb1 = i1 \\ge i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 7, 7, 8, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 0, 1, 3, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 0, 0, 2, 0, 2, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 3, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 0, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 4, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 2, 4, 0, 1, 0], [0, 0, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [5], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 8, 0, 3, 0, 0, 4, 1, 1, 11, 4, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"F\"\":{:\\nb2 = getCharFromString(in2, len(in1[i0:])) not in getCharFromString(in1[int(0.0):len(saveChr(abs(int(7.0))))].rstrip()[i2:], int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [], [], [], [], [], [], [], [], [0, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 0], [2], [1, 0], [], [0, 0], [], [], [0, 3, 3], [3], [1, 0, 1], [0], [], [1, 0], [], [1], [], [], [], [0, 2, 1, 0, 0, 2, 2], [0], [0, 0, 0], [], [], [], [], [0], [], [], [4], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\nb0 = i1 \\ge i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 0], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(20.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [0, 1], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 9], [2, 1, 0], [1, 1], [1, 0], [], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(2.0)\\ni1 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [0], [0, 2, 1], [0], [4], [3, 0], [1], [], [], [1, 1, 0, 1, 1, 1], [9, 4, 9, 2, 8, 3], [2, 1, 0], [], [1, 0, 0, 3, 2, 2, 3, 0, 3, 2, 1, 1, 1, 1], [1, 0, 1], [0, 4, 3], [0, 1], [0], [5], [], [], [0, 4, 0], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 1, 1, 2, 0, 3, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( in2.startswith(saveChr(int(9.0))) or i2 \\l i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [1, 1], [0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 0, 0, 1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 0, 0, 1], [2, 1, 2, 0, 0, 1], [1, 0], [1, 0, 0, 2], [0], [0, 0], [], [], [3, 2], [2, 5, 4], [1, 1, 1], [0, 0, 0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 5, 1, 1, 9, 6, 6, 1, 2, 2, 0, 4, 7, 9, 2, 0, 0], [0, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 0, 0], [0, 1], [1, 1, 1, 2, 1, 3, 1, 2, 2, 3, 3, 0, 0, 2, 0, 0, 2, 1, 0, 2, 2, 3, 2, 1, 3, 2, 2, 1, 1, 0, 2, 2, 2, 3, 3, 1, 1, 3, 3, 2, 0, 0, 3, 1, 2, 1, 0, 2, 1, 3, 3, 0, 1, 0, 3, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0], [0, 3, 4, 3, 0, 1, 3, 1, 0, 2, 2, 0, 3, 1, 1], [2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0], [1, 1, 1, 1, 0, 1, 1], [3, 1, 3, 4, 1, 5], [1], [0], [2, 0, 4, 1, 4, 2, 2, 4, 4, 0, 4, 4, 0, 0], [0, 0, 1, 3, 3, 1], [0, 2], [1, 1, 1], [1], [], [17], [], []], "fitness": 31, "mapping_values": [1, 6, 6, 2, 4, 1, 2, 0, 0, 2, 3, 3, 3, 0, 0, 0, 0, 1, 18, 18, 14, 1, 60, 16, 13, 9, 7, 6, 1, 1, 14, 6, 2, 3, 1, 0, 1, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(4.0) == int(9.0):{:\\ni0 = int(5.0)\\n:}\\nloopBreak% = 0\\nfor in0 in s1[:( int(1.0) * min(int(1.0), ( ( len(getCharFromString(\"\"r\"\", saveOrd(getCharFromString(saveChr(i1)[:i2][:mod(i2,i2)], ( int(9.0) + i1 ))))) * ( ( len(in0.lstrip()) + mod(int(6.0),min(mod(( int(6.0) * int(1.0) ),i1), mod(( divInt(max(len(saveChr(int(2.0)).strip()), int(2.0)),max(min(mod(i2,i2), abs(int(0.0))), mod(int(4.0),i1))) * ( int(7.0) * abs(min(i2, int(9.0))) ) ),i2))) ) * len(in1) ) ) + int(2.0) )) )]:{:\\nres0 = int(0.0) != i0\\nb2 = int(0.0) \\le i0\\ns1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [5, 1], [1], [0], [3], [], [4], [], [], [], [1], [], [4, 1], [2], [], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(\"\"R\"\".capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [2], [0, 1], [], [0], [], [], [1, 0], [3], [1, 0], [0], [], [0], [], [], [], [0, 0, 0, 0, 1], [0, 2, 6, 2, 9], [2, 0, 0], [0], [0, 1, 3, 0], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 5, 5, 3, 1, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i2 \\ge int(02629.0):{:\\nb1 = b0\\ni0 = abs(i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 1], [6, 0, 1, 7], [1, 1, 0, 0], [], [3, 2, 2, 1, 0, 1, 0, 2, 1, 2, 1, 2, 0, 0], [1, 0, 1, 1, 1], [0], [0], [0, 1, 0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 14, 5, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(divInt(( int(6.0) + i1 ),int(0.0)), i1) \\g mod(int(1.0),divInt(int(7.0),mod(i0,i0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1], [0, 7, 8, 7, 7, 7, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 2, 1, 2, 1, 0, 0, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 2, 1, 2, 1, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 11, 0, 34, 9, 8, 5, 4, 6, 1, 1, 15, 3, 2, 5, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1[len(in1):i0][i0:])]:{:\\nres0 = in0[:abs(mod(( int(0.0) + ( int(7.0) + min(i0, divInt(i2,( int(8.0) * i1 ))) ) ),divInt(len(saveChr(( i2 - min(max(( int(7.0) + i1 ), divInt(abs(int(7.0)),i0)), int(7.0)) ))),i0)))].rstrip()[i0:i2] not in (\"\"R\"\" + s0.lstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1], [3, 4, 2, 8], [0, 0, 1], [], [1, 2, 1, 3, 3, 1, 3, 0, 0, 1, 0], [0], [1, 1, 1], [2], [], [2, 5, 2, 3], [], [], [2, 3, 2, 0, 2, 0, 0, 0], [], [], [1, 2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 0, 11, 1, 3, 1, 0, 3, 0, 0, 6, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = (in2[int(3.0):] + s2[( int(4.0) * max(max(int(2.0), max(i0, i0)), int(8.0)) ):])[:i1]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 0, 0, 1, 1, 1], [6, 2, 5, 3, 7, 5, 0, 7], [1, 1, 0, 0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(625375.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [2], [], [0], [], [], [1], [], [1], [], [1], [8], [1, 0, 0, 0, 0, 1], [0], [1, 1, 3], [1], [4], [], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 7], [1], [1], [1], [], [], [2], [], [5, 0], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(47.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [], [1], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 0, 1, 1], [9, 5], [2], [0], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [], [0], [], [], [1, 0], [], [0], [], [], [0], [], [], [], [1], [3], [2], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(3.0)\\nb1 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0], [1], [0, 0], [], [3], [0], [], [3], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [0, 2], [1], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += len(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 1], [0, 1], [1], [2, 0, 1], [1], [], [1, 2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= mod(i1,int(01.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [], [], [2, 1], [1], [0, 0], [], [2], [1], [], [], [], [], [], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i2 != i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [1], [1, 0], [], [0], [], [], [1], [2, 5], [1, 1], [0, 0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 5, 1, 1, 9, 6, 6, 1, 2, 2, 0, 4, 7, 9, 2, 0, 0], [0, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 0], [0, 1], [1, 1, 1, 2, 1, 1, 1, 2, 2, 3, 3, 0, 0, 2, 0, 0, 2, 1, 0, 2, 2, 3, 2, 1, 3, 2, 2, 1, 1, 0, 2, 2, 2, 3, 3, 1, 1, 3, 3, 2, 0, 0, 3, 1, 2, 1, 0, 2, 1, 3, 3, 0, 1, 0, 3, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 4, 3, 0, 1, 3, 1, 0, 2, 2, 0, 3, 1, 1], [2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0], [1, 1, 1, 1, 0, 1, 1], [3, 1], [1], [], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 0, 1, 3, 3, 1], [0, 2], [1, 1, 1], [1], [], [17], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 1, 1, 7, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(4.0) == int(9.0):{:\\ni0 = int(5.0)\\n:}\\nb1 = mod(int(1.0),int(1.0)) != int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 0], [], [1, 1, 0], [], [0], [], [], [0, 2, 1], [5], [0, 2], [0], [], [0], [], [], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 0, 1, 1, 0], [0, 1], [0, 0, 3, 2, 2, 2, 2, 2, 1, 0, 0, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1], [2, 0], [0, 0], [1, 0, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\ni2 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0, 0], [0], [0, 0, 1], [0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [5], [1], [], [1], [], [1, 1, 1, 0, 1], [4, 5, 4, 0, 9], [0, 2, 0], [0], [1, 1, 0, 2, 3, 1, 1, 0], [0, 1], [1], [2, 0], [], [5, 2], [1, 1], [], [2, 0, 4], [1], [], [0], [3, 1], [], [15], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 1, 8, 1, 1, 1, 0, 1, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = in2[int(4.0):int(5.0)].endswith(saveChr(i0))\\ni2 = ( max(int(4.0), int(09.0)) * i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [], [], [2], [0], [3], [], [4], [], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = saveOrd(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [5, 0, 4], [0, 1, 1, 1], [1], [2, 3, 0, 3, 0], [0], [0, 3], [1, 0], [], [1], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 1, 2, 2, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( min(i1, len(s1.capitalize())) + i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [9, 4, 7], [2], [1], [2, 1, 1], [1], [], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= mod(int(9.0),int(47.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [2], [1], [0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 8, 4, 5], [1, 1], [], [1, 2, 1, 0], [0], [], [0, 0, 2, 1, 2, 1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(8.0) == ( int(8.0) + i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [2, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [], [], [], [], [], [], [], [1, 1], [9, 4], [1, 2], [0], [1, 1, 1], [], [], [], [1], [1, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1], [], [2, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [5], [0, 1], [0], [], [2], [], [], [], [1, 1], [2, 4], [2, 0, 0, 0], [1], [2, 1, 0, 3, 0, 3, 2, 0, 0, 0], [1, 0], [2, 1, 1], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 2, 0, 5, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not divInt(int(2.0),i2) != abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [0], [], [], [], [], [1, 2], [2, 1, 0, 2], [0, 0], [5], [3, 2], [1], [], [], [1, 1, 1, 1, 1, 1], [2, 9, 8, 4, 9, 2], [0, 0, 1, 2, 1, 1, 2], [1], [1, 1, 1, 2, 3, 2, 1, 3, 3, 2, 2, 2, 3, 1, 0, 0, 3, 0, 1, 2, 0, 0, 0, 3, 1], [0, 1, 1, 0, 0, 0, 1], [3, 1, 2, 0, 3, 2], [1, 2, 0, 2, 2], [0, 1, 0], [3, 5], [], [0], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2:{:\\ni0 -= int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [0], [0], [0], [0], [], [], [0], [4], [1], [0], [5], [], [], [], [], [1], [3], [0, 0], [], [0, 0, 1], [], [2], [], [], [4, 1, 5], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 \\le i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [2], [], [], [], [], [1, 1], [0, 2], [2, 0, 0], [], [2, 2, 0, 1, 1, 0], [0, 1], [], [1, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 6, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( divInt(i2,int(0.0)) - int(2.0) ) \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0, 1, 1], [1, 8, 4, 2, 7, 7], [1, 1], [1], [3, 3, 2, 3, 1, 1, 3, 1, 1, 0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [2, 0, 0, 0], [0], [0], [], [], [], [], [], [], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 2, 1, 10, 1, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += abs(min(divInt(min(int(1.0), int(84.0)),min(int(27.0), int(7.0))), i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [0], [0, 0], [0, 0, 0], [1, 3, 2], [1, 0, 2], [], [3, 2, 2, 5], [], [], [3, 4, 4, 4, 0, 0, 0], [1, 1, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (saveChr(i1) + saveChr(i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [5], [0, 0, 2], [0], [0], [2, 1], [], [0], [], [1, 1, 1, 1], [6, 4, 3, 4], [2, 2, 2, 1], [], [2, 0, 1, 2, 3, 2, 0, 1, 2, 2, 2, 0, 0, 3, 2, 3, 3, 1], [1, 1, 1, 0, 1, 0], [4, 1, 4, 3], [0, 1, 1], [0, 0, 1], [4, 0], [], [], [4, 0, 2, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1], [2, 1, 0, 0, 2, 0, 0, 2, 0, 2], [0], [1, 2, 0, 1, 2, 0, 2, 1, 1, 0, 3, 2, 2, 2, 0, 0, 1, 2, 2, 3, 1, 2, 1, 3, 1, 1, 0, 2, 2, 0, 3, 2, 0, 1, 0, 0, 0, 1, 1, 0, 3, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [1, 2, 4, 0, 1, 1], [2, 0, 1, 1, 2, 2, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 4], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 3, 1, 9, 3, 0, 0, 3, 1, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(42.0)\\ns1 = saveChr(divInt(i1,int(0.0)))[:divInt(i0,mod(int(7.0),int(3.0)))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [0, 0], [], [0], [], [], [2, 3], [2], [1], [0], [], [0], [], [], [], [1, 1], [6, 0], [1, 0, 1, 1], [0], [2, 3, 2, 0, 1, 0, 3, 2, 0, 1, 0], [0, 1, 1], [4, 3], [1, 1], [1, 0], [2, 1, 4], [], [], [2, 3, 2, 0, 0, 0], [], [], [0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 11, 3, 2, 1, 2, 3, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( saveOrd((s2[mod(i1,int(6.0)):] + s1)[i0:len(in1)]) - divInt(i1,int(0.0)) ) == i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [2], [0, 1], [0], [], [2], [], [], [], [1, 0, 1], [8, 9, 7], [2], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not int(8.0) == i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 2, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 3, 1, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 4, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0:{:\\nres0 = s1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [], [], [0, 1], [1], [0, 0], [], [2], [1], [], [], [], [], [], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 != i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in2 not in in2\\ni0 = len(in1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [1, 1], [6, 0], [0, 1, 1, 0], [0], [3, 1, 3, 3, 0, 2, 1, 2, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 1], [0, 2], [1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(int(6.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [3], [4], [1], [0], [], [], [], [], [], [1, 1, 1, 1], [6, 0, 1, 7], [1, 1, 2, 0], [], [3, 2, 2, 1, 0, 1, 0, 2, 1, 2, 1, 2, 0, 0], [1, 0, 1, 1, 0], [1], [1], [0, 1, 0, 1, 1], [1, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0, 0], [0], [], [2, 0, 3, 1, 1], [0], [1], [1], [], [5, 3], [], [], [4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 1, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(in0, ( i0 - max(int(0.0), int(0.0)) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [5, 7], [1, 0, 1, 2], [0], [3, 3, 0, 0, 3, 0, 2, 3, 1, 0], [0], [1, 2, 2, 1, 2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = max(abs(i0), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [1, 5], [], [], [], [], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 3, 5, 4, 6, 0, 4, 2, 4, 0, 3], [2, 0, 2, 1, 2, 0, 1, 1, 1, 0, 2], [0, 1, 1], [3, 3, 3, 2, 1, 1, 3, 1, 3, 2, 2, 2, 1, 0, 3, 3, 2, 0, 1, 0, 3, 2, 2, 3, 0, 2, 3, 3, 3, 0, 1, 3, 1, 3, 1, 0, 2, 3, 0, 3, 0, 1, 3, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 2, 0, 0, 0, 0, 0, 2, 1, 2, 1, 4, 2, 1, 1, 0, 1], [2, 2, 1, 1], [1, 1, 0, 1, 0], [0, 1], [], [], [4, 0, 0], [3], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 11, 1, 47, 9, 17, 4, 5, 2, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = max(abs(min(mod(int(3.0),int(2.0)), min(int(35.0), min(mod(( divInt(int(4.0),i0) * min(min(( i2 * int(6.0) ), i1), abs(mod(( max(i2, ( abs(max(saveOrd(s0.rstrip(s1)), i0)) - int(0.0) )) - abs(int(4.0)) ),max(int(2.0), i1)))) ),divInt(max(i1, min(i1, int(4.0))),max(int(0.0), i0))), i2)))), int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [8, 5], [2, 2, 2], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 1, 7, 7, 9, 8, 6, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 0, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 2, 0, 2, 1, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 3, 2, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 1, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 12, 0, 29, 9, 4, 3, 6, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s2[:len(getCharFromString(\"\"R\"\"[i1:int(0.0)], max(mod(i2,i2), i0)))] not in in0[int(7.0):min(i0, mod(( mod(int(5.0),i1) + ( i1 + divInt(i2,divInt(i0,( int(7.0) + i0 ))) ) ),divInt(i2,i2)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [0, 3], [], [0, 2], [], [0], [0], [], [], [], [0], [2], [2, 0], [], [0, 0], [], [], [], [], [1, 5, 2], [], [0], [0, 4, 4, 0], [1, 2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2:{:\\nb0 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [1], [0, 0, 3, 2, 0, 1, 2, 1, 1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [2, 0, 2], [], [0, 0], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [5, 6, 8, 9, 7, 0, 1, 2, 6, 7], [2, 1, 0, 0, 1], [], [0, 1, 1, 0, 0, 2, 0, 0, 3, 3, 3, 1, 1], [1], [2, 2, 4], [], [0], [2, 3, 2, 3, 1, 0, 2, 0], [], [], [4, 2, 0, 2, 2, 2, 0, 0, 2, 3, 3, 4, 4, 0, 3, 0, 2, 3, 4, 2], [2, 3, 2, 1], [2], [0, 1, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 11, 1, 3, 0, 1, 5, 0, 0, 8, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[i2:int(5.0)].capitalize()\\nb0 = int(68.0) == i1\\ns2 = in0[:i0][:divInt(i0,i1)][:abs(abs(saveOrd(s1)))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [], [1, 3, 2, 0, 2, 3, 3, 1, 2, 1, 0], [0, 0, 0], [1, 3, 2], [0, 0, 2], [1], [3, 2, 2, 5], [], [], [3, 0, 4, 4, 0, 0, 0], [1, 0, 3], [5], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (s2 + saveChr(int(5.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [1], [], [0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [0, 0, 1], [4, 9, 5], [1, 2], [0], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 \\ge int(495.0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0], [3], [], [4], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [0], [1], [0], [0], [], [], [], [], [], [0, 1], [0, 8], [0], [], [2, 2, 1, 1, 0, 3], [0, 0], [3], [1, 0], [], [1, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [], [0, 0], [], [], [2], [], [0], [], [], [1], [], [0], [], [], [], [1, 1], [0], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2, 1, 1], [], [], [], [], [3, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [5, 4], [], [], [4, 0], [3], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in1.strip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1, 1], [6, 1], [], [], [1, 1], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(6.0) \\l int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [0], [0], [0], [], [1], [], [1], [], [1], [0], [0, 2], [], [2, 0, 1, 0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 3], [5], [0], [0], [], [0], [], [], [], [], [], [2, 1], [1], [0, 0], [], [2], [1], [], [], [], [], [], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 2], [1, 1, 0, 2], [1], [2, 3, 0, 3, 1, 1, 0], [0, 0], [0, 1], [1, 2, 0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1], [], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 7, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= ( min(i1, max(int(2.0), int(2.0))) * i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 0, 1, 0, 0], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 1], [0, 0], [1, 5], [1, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 2, 2, 1, 3, 0, 3, 2, 2, 1, 0, 3, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 1, 1, 1, 0, 1, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 2, 2, 2, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1[saveOrd(in2):] not in in1[i0:]:{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 0], [0], [1], [1], [], [], [2], [], [4, 1, 4, 3], [], [], [4, 3, 0, 4, 3, 0, 0], [3, 2], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 4, 0, 0, 7, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(20.0)\\nin1 = (s1 + (in1 + in0).capitalize()).strip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [2], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [2], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 2], [2], [2, 2], [], [0], [], [], [], [], [0, 2], [], [2], [2], [], [], [0], [], [], [], [], [], [], [], [], [], [1, 4, 1, 4, 3], [0, 0, 0, 1], [], [0, 0, 3, 0], [], [], [], [3, 3, 0, 3], [], [], [], [5, 24, 8, 23]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1\\ns1 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 1, 1], [0, 3, 1, 2, 2, 6], [2, 0, 2, 2], [1, 1], [2, 0, 2, 1, 1, 1], [1, 0], [], [0, 1, 0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 3, 2, 6, 2, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(i0,( int(03.0) - int(122.0) ))\\ni2 += int(6.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0, 0], [], [], [], [], [], [0, 1, 1], [0, 9, 1], [1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(09.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0], [], [0, 1, 1], [], [0, 0], [], [], [1], [], [2], [], [1], [], [], [], [], [1, 1, 1, 1], [6, 3, 9, 6], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0], [0, 3, 3, 1, 0, 2, 0, 0, 3, 1, 2, 0, 1, 3, 3, 0, 1], [0, 0, 0], [3, 4, 3, 3], [0, 1, 0], [], [1, 0, 3, 1, 1, 5], [1], [], [2, 2, 0, 4, 1, 4, 4, 4, 2, 0, 1, 0], [1, 1, 1, 2], [], [0, 0, 2], [3], [], [], [], [10]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 1, 10, 1, 3, 1, 0, 1, 1, 0, 7, 3, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s1[i0:len(saveChr(saveOrd(\"\"\"\\\\\"\"\")))][int(6.0):i0] not in saveChr(( i0 + i0 ))\\ni0 = len(saveChr(int(3.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [], [0], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 1], [0, 5], [0, 2, 2, 1, 2], [1, 1], [0, 2, 0, 2, 1, 0, 0], [1, 1], [4], [1, 1, 0], [0, 0], [0, 5, 4, 4, 3, 0, 4], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 5, 1, 7, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 == divInt(i2,divInt(int(0.0),i2))\\ni1 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [1, 0], [], [], [], [], [], [], [1, 1, 1], [0, 4, 6], [0, 2, 0], [1], [0, 0, 3, 2, 0, 1, 2, 1, 1], [0, 0], [3], [1, 2], [], [2, 1, 4, 2], [1], [], [4, 2, 2, 3, 4, 4, 3, 0, 0, 3, 4, 0], [2, 0, 1], [], [1, 0], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [], [], [], [], [0, 2], [2], [0], [0], [], [0], [], [], [], [], [], [2, 0, 0, 2, 1, 0, 0], [1], [0, 1, 0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\ni2 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [0], [0], [], [], [0], [1], [0], [0], [], [1], [], [1], [], [0, 1], [0, 8], [0], [], [1, 2, 0, 0], [0], [3], [1], [], [1], [1], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 0], [1, 1, 1, 1], [], [2, 1, 2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 3, 2, 8, 5], [0, 0, 1, 1, 1, 0, 2, 1], [0, 1], [2, 0, 2, 0, 1, 1, 0, 0, 2, 2, 1, 0, 3, 1, 0, 1], [0, 1, 1, 0], [0, 1], [0, 1, 2, 1], [0, 0], [0, 3, 2], [1], [], [2, 0, 1], [], [], [0], [3], [], [], [], [15]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 6, 2, 0, 1, 1, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in0[( i0 + divInt(i0,int(0.0)) ):int(3.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 1, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 1, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(s0):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 1], [1], [3, 3, 0, 0, 0], [0], [1, 3], [1, 0], [], [5], [], [], [0], [3, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= max(len(in2), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [3], [], [3], [0], [], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += len(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1, 0, 0], [], [1, 1], [], [0], [], [], [2, 1], [], [], [], [], [], [], [], [], [1], [0], [1, 2], [1, 1], [3, 1], [], [3], [1, 1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 0, 1, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(in2)\\ni2 -= int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [], [0, 1], [1], [3, 0], [], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0, 1, 1], [], [], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [1, 4], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\g int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 0], [], [], [], [], [0], [0, 1, 1], [3], [], [3, 3, 2, 0, 3, 1, 1, 3, 1], [], [], [2, 3], [], [], [0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(s2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [2], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1, 0, 0, 0, 0], [], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 1, 0], [], [0], [], [], [0, 2, 1, 3], [5, 1], [0, 0, 0, 1, 1], [0, 0], [], [2, 3, 0], [1], [], [], [1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 6, 8, 3, 0, 1, 8], [2, 0, 2, 0, 1, 1, 0], [0], [0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 0, 1, 1, 0, 3, 0, 1, 0], [1, 0, 1, 0, 1], [2, 0, 2], [2, 0], [1, 1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 3, 2, 5, 2, 0, 3, 1, 0, 0, 8, 8, 6, 1, 18, 5, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not ( b2 or i2 != int(7.0) )\\ni0 = abs(mod(( mod(( mod(int(0.0),int(6.0)) * i2 ),int(8.0)) + int(3.0) ),i0))\\nb1 = min(i1, int(018.0)) \\g i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1], [], [], [], [], [], [], [], [], [0, 1], [9, 8], [0], [0], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(98.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [0, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 0, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 1, 1, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 1], [], [0], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 1], [0, 5], [0, 2, 2, 1, 2], [1, 1], [0, 2, 0, 2, 1, 0, 0], [1, 1], [4], [1, 1, 0], [0, 0], [0, 5, 4, 4, 3, 0, 4], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 6, 2, 0, 1, 2, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2[i0:]\\ni2 -= divInt(i2,divInt(int(0.0),i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 0], [], [], [1], [3], [1, 0], [1], [0, 0, 3], [1], [], [0], [1], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [0], [0], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0], [1], [2, 0], [], [0], [], [], [1, 1], [], [2, 0], [], [5], [0, 1], [], [1], [1], [1], [3], [0], [0], [1, 0], [], [], [], [], [0, 0, 5], [], [], [0, 4, 2, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 2, 0, 0, 0, 0, 3, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0.endswith(saveChr(int(3.0))):{:\\ns0 = in2[:i0]\\n:}else:{:\\nb1 = b1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 2], [5], [0, 1], [0], [], [2, 0], [], [], [], [1], [7], [2, 1, 1, 0, 2, 2], [], [2, 0, 2, 0, 1, 3, 0, 2, 0, 2, 0, 3, 0], [1, 0, 1, 1], [0, 2], [0], [0, 1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 6, 0, 13, 4, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not divInt(i2,( i1 + int(7.0) )) != min(i1, mod(i0,divInt(i2,abs(i2))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [0], [], [], [], [0, 2, 1, 0, 0, 2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [4], [1], [0], [], [], [], [], [], [], [], [1, 0], [0], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i1 \\le i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 0, 2, 0, 2, 3, 2, 1, 3, 2, 3, 0, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 11, 0, 49, 15, 9, 7, 8, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1[len(in2):]))[:i0]:{:\\nres0 = saveChr(int(0.0))[int(7.0):mod(i2,int(5.0))] not in in0[mod(int(7.0),abs(min(( mod(( int(2.0) + i2 ),divInt(i0,divInt(i1,( len((\"\"R\"\" + s0.rstrip())[:divInt(int(1.0),min(( max(i2, i2) + int(7.0) ), int(7.0)))]) * i2 )))) - i0 ), mod(int(9.0),abs(int(8.0)))))):max(i0, divInt(( ( int(5.0) + int(0.0) ) * ( int(4.0) - i1 ) ),int(8.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [0], [0], [0], [], [1], [], [1], [], [1], [0], [0, 2], [], [2, 0, 1, 0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 0, 1], [0], [1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0, 0], [0], [3, 2, 3, 1, 3, 0], [0], [2, 2, 2], [1, 2], [], [0, 4, 0, 1], [], [0], [4, 4, 0, 0], [3, 2], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 6, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(( abs(int(4.0)) - abs(i0) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0, 2, 0], [0, 0], [3, 1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(int(4.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0, 2], [1], [0], [0], [], [0], [], [], [], [0, 1], [7, 0], [1, 0, 1, 2], [], [2, 0, 2, 0, 0, 2, 0, 1], [0, 0, 1], [], [0, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 7, 3], [2, 1, 1, 0, 2, 1], [], [0, 2, 0, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 0, 2, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0], [1], [0, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1], [0, 1], [], [], [2, 2, 0], [], [0, 2], [1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 0, 15, 6, 0, 2, 4, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1[i2:mod(i1,divInt(int(1.0),( int(3.0) + mod(i1,int(9.0)) )))][:mod(( i0 + i2 ),int(4.0))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [3], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (in2 + \"\">\"\")\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [3, 0], [], [4], [], [], [4, 2, 4, 5], [], [], [4, 3, 0, 2, 0, 0], [0, 1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = getCharFromString((s2 + in1[:saveOrd(in2)]), i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 1], [2, 0, 1, 0], [0], [1, 1, 2], [0], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [0, 8, 1], [2, 0, 0, 2], [1, 0], [3, 3, 1, 0, 3, 0, 1], [], [2, 0, 0], [1], [], [4, 4, 0, 4], [], [0], [4, 4, 0, 0], [3, 2], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 2, 7, 0, 3, 1, 0, 4, 0, 1, 4, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in1.capitalize().rstrip():{:\\ni2 -= abs(min(int(0.0), i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = min(i2, int(81.0))\\ns0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [2], [1], [0], [], [0], [], [], [], [1, 0, 1, 1, 1], [7, 3, 3, 4, 9], [1, 2, 2], [], [2, 2, 1, 2, 1, 2, 2, 3, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1], [2], [], [0, 1, 1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 13, 5, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = divInt(mod(int(7.0),mod(int(33.0),divInt(mod(abs(i1),i2),int(4.0)))),i2) == int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1], [1, 2, 0, 1, 0, 0, 0], [2], [1, 0, 2, 2, 2, 2], [], [0, 0, 0, 0], [], [], [0], [2], [0, 0], [0], [], [1], [], [1], [], [1, 1, 1], [6, 2, 6], [0, 0, 1, 2, 0, 1, 1, 1], [0, 1, 0], [1, 2, 0, 0, 1, 1, 2, 0, 1, 0, 0], [0, 0], [4], [2, 1, 1], [], [0, 0, 1, 0, 3], [], [], [4, 0, 0, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(6.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [8, 9, 1], [1], [1], [1], [], [], [1], [], [1, 0], [], [], [0], [], [], [], [3, 0], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 0, 1], [9, 9, 0, 3, 9, 5], [0, 2, 2], [1], [2, 0, 1, 1, 1, 1, 3, 3, 0, 0, 0], [1, 0], [1, 2], [0], [1], [1, 4], [], [], [2, 2, 0], [], [], [2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 1, 0, 0, 1, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1[mod(i0,int(9.0)):][int(9.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [0], [1], [0], [4], [], [], [], [], [0, 1, 0, 1], [0, 5, 5, 7], [1, 1], [], [3, 1, 2, 0, 2, 2, 3, 0, 3, 3], [0, 1, 1], [2, 4, 4, 4], [0], [0, 1], [2, 5], [], [], [4, 4, 0, 0], [1, 2], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 3, 4, 1, 2, 2, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = abs(int(05.0)) \\l ( i1 + divInt(mod(saveOrd(saveChr(i1)),saveOrd(s2.capitalize())),saveOrd(in2)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [0, 1, 1], [0, 9, 2], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(09.0) \\l int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [2, 1, 1], [0, 0], [1, 3, 0], [], [2], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(2.0)\\ni1 = abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 1, 1], [9, 9, 0, 3, 9, 5], [0, 2, 1, 0], [1], [2, 0, 1, 2, 1, 1, 3, 3, 0, 0, 0], [1, 0], [1, 0], [0], [1], [4, 4], [], [], [2, 2, 0], [], [], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 4, 0, 11, 2, 2, 1, 1, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in1[mod(i0,int(9.0)):( int(9.0) + int(039.0) )][max(min(i2, i1), i0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 3], [1], [1], [0], [], [0], [], [], [], [1, 1, 1], [1], [], [], [3, 1, 1], [], [4, 4], [], [], [1, 4], [], [], [0, 4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s1) \\g int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 2, 0, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 12, 0, 49, 16, 9, 7, 9, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 == in1[len(in1):][len(in0[mod(mod(i0,( i2 + int(0.0) )),i2):int(7.0)].capitalize()[abs(i0):divInt(divInt(divInt(int(5.0),i1),( min(( i2 + divInt(len(saveChr(( min(i1, mod(max(int(7.0), i2),int(6.0))) * int(1.0) ))),i0) ), i0) - divInt(int(7.0),abs(int(7.0))) )),max(i0, ( ( ( int(9.0) + int(8.0) ) * mod(int(5.0),i1) ) - int(0.0) )))]):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [2], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [1], [0], [], [], [2], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [3], [1], [0], [], [], [], [], [], [1, 1], [9, 4], [1, 2], [0], [1, 1, 1], [1], [], [], [1], [1, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(9.0) \\ge int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 0], [1, 1, 1, 1], [], [2, 1, 2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 2, 2, 8, 5], [0, 0, 1, 1, 1, 0, 2, 1], [0, 1], [2, 0, 2, 0, 1, 1, 0, 0, 2, 2, 1, 0, 3, 1, 0, 1], [0, 1, 1, 0], [0, 1], [0, 1, 2, 1], [1, 0], [0, 3, 2], [1], [], [1, 0, 1], [], [], [0], [3], [], [], [], [15]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = \"\",\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [2], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = getCharFromString(saveChr(int(0.0)), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [2, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2, 1, 2, 2, 1], [0, 1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [0, 1], [1, 0, 0], [0, 3, 0], [1], [], [3, 0, 1, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (in0 + \"\"R\"\")\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [1], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [3, 7], [2], [], [2, 2, 1, 0, 1], [1, 1], [], [], [1, 1], [2, 2, 2], [], [], [4, 3, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 2, 0, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(mod(mod(int(3.0),i2),int(7.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 0, 1], [4, 3, 3, 0, 3, 7], [1, 1], [0], [2, 1, 2, 0, 2, 1, 3], [1, 0, 1], [3], [1], [0, 0], [2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 2, 1, 7, 3, 1, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = divInt(int(43.0),( i1 - divInt(int(3037.0),len(s2)) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 1, 7, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 1, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ns1 = s1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [0], [0], [0], [0], [], [], [1], [2], [1], [0], [5], [], [], [], [], [0, 0, 1, 0, 1, 0, 1], [0, 0, 4, 8, 8, 0, 1], [2, 0, 2, 1, 0], [], [1, 3, 1, 1], [], [1], [], [], [4, 1, 0], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(004.0) == max(int(88.0), int(01.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s0[len(in2):] not in \"\"R\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [0], [0], [], [1], [], [1], [], [0, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [0, 0, 0, 1], [5, 9, 1, 4], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(5914.0) \\l i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [0], [2], [2], [], [5], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [4, 1, 0], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in saveChr(i0):{:\\nb0 = s1.endswith(s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [], [], [], [], [0, 3], [5, 1], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1], [0, 4, 9, 0, 0, 4, 3, 0, 8, 4, 4, 4, 2, 4, 0, 2], [0, 0, 2, 0, 0, 0, 1, 2], [1], [0, 2, 2, 2, 1, 3, 2, 1, 1, 1, 0, 0, 2, 0, 2, 2, 3, 2, 2, 0, 1, 0, 3, 1, 2, 0, 2, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0], [2, 1, 3], [2, 1, 2, 0, 2, 0], [1, 1, 1, 1, 1], [4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 16, 16, 7, 0, 29, 11, 3, 6, 5, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 != ( ( mod(int(0.0),abs(( int(49.0) * int(00.0) ))) - int(430.0) ) * i0 )\\nres0 = i2 \\g ( i0 + ( mod(max(mod(mod(i0,int(8.0)),i0), len(in1)),int(44.0)) * mod(i1,( int(424.0) + int(02.0) )) ) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [0, 0, 0, 1], [5, 9, 1, 4], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(5914.0) \\l i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [0], [1, 1], [0], [0], [], [], [], [4], [1], [0], [], [], [], [], [], [0], [3], [1, 2, 0, 0], [1, 1], [0, 0, 0, 1], [], [2], [0, 2], [], [1, 4, 1], [1], [0], [0, 4, 1], [0], [], [], [0], [9], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += i2\\nloopBreak% = 0\\nfor s1 in in1:{:\\ni0 *= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 1, 2, 7, 4, 9, 2, 2], [0, 0, 2, 2], [1, 1], [2, 0, 2, 1, 1, 1], [0, 1], [], [0, 0, 1, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 3, 2, 6, 2, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( i0 + mod(int(0.0),int(0127.0)) )\\ni2 -= int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [0], [], [2], [], [2], [], [], [], [], [0, 0, 1], [0, 9, 8], [0], [], [0, 1], [], [], [], [], [4, 1, 3], [], [0], [4, 0, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 2, 0, 1, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in saveChr(i0):{:\\nb0 = s1 == saveChr(int(098.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 1, 0], [2], [0, 0, 2], [], [0], [], [], [1, 2], [2, 1], [1, 0, 1], [0, 0], [], [1], [], [1], [], [1, 1, 1, 1, 1], [0, 8, 9, 8, 5], [1, 2, 0, 1, 2, 1, 2, 2], [], [2, 0, 3, 1, 2, 1, 0, 2, 0, 3, 1, 3, 0, 3, 0, 0, 1, 3, 0, 2, 2, 0, 1, 1], [0, 1, 0, 0, 0, 1], [4, 1, 4, 0, 1, 2], [2, 0, 2, 1], [1, 1], [1, 1], [1], [], [0, 1], [], [], [], [0], [16], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( i1 * saveOrd(s1) ) == int(0.0):{:\\nb1 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [9, 7, 2], [1, 0, 1], [1, 0], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i0\\ni1 = int(972.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0], [2, 1, 1], [1], [1, 2], [], [0], [], [], [0], [], [0], [], [], [0], [], [], [0], [], [9], [0, 1], [0], [3, 0], [], [2], [], [], [5, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif b0:{:\\ni0 = abs(i1)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 5, 1], [], [], [4, 0, 0], [3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2.lstrip(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [0], [1], [1], [0], [], [], [], [0], [], [1, 1], [0, 8], [2, 1], [1], [2, 2, 1, 1, 1, 3], [0, 0], [3], [1, 0, 2], [], [1, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [0, 1], [1], [0, 3, 0], [1], [], [3, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (in0 + s0)\\ni1 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [], [2, 0, 0], [0], [], [0], [], [2, 5], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 1, 0, 1, 0, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2[:( i0 + i1 )].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [1], [1, 1], [0], [0], [], [], [3], [], [0], [0], [], [0], [], [], [0], [0, 0, 1, 0, 1, 1, 1], [4, 8, 1, 4, 5, 0, 9], [0, 0, 0, 2, 0, 0], [1, 0], [3, 3, 1, 2, 3, 0, 1, 3, 2, 2, 3, 1, 3, 1, 0, 0, 0], [0, 0, 0], [2, 0, 0, 1, 1, 3], [1, 0, 1, 0], [], [0, 4, 0, 4], [], [0], [4, 4, 0, 0], [3, 2], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 7, 7, 6, 2, 17, 3, 6, 4, 0, 1, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif res0:{:\\ni0 -= abs(min(int(481.0), ( min(i0, int(45.0)) + max(( ( max(int(0.0), len(s0.capitalize().rstrip())) - int(9.0) ) + i0 ), i2) )))\\ni0 = i0\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [1, 1], [1], [0, 3, 2], [1], [], [3, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (in0 + s2)\\ni1 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [3], [1], [0], [], [], [], [], [], [1, 1, 0, 0, 0, 1], [9, 9, 0, 3, 9, 5], [0, 2, 2], [1], [2, 0, 1, 2, 1, 1, 3, 3, 0, 0, 0], [1, 0], [1, 2], [0], [1], [1, 4], [], [], [2, 2, 0], [], [], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 1, 0, 6, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = mod(i0,int(9.0)) \\ge ( int(9.0) + int(0395.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 8], [1], [0], [1], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(08.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 9, 1, 5, 4, 5, 9, 0, 3, 9, 4, 1, 4], [1, 1, 0, 0, 2, 2], [1, 0], [1, 2, 2, 2, 0, 2, 3, 3, 1, 1, 1, 0, 1, 3, 3, 3, 1, 0, 1, 3, 1, 0, 0, 3], [0, 0, 0, 1], [0, 2, 3, 2, 3, 0, 2, 0], [1, 0, 2, 0], [0], [0, 2], [], [], [4, 0, 2, 2, 2, 4, 0], [3, 2], [1], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 4, 2, 13, 4, 2, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(29.0)\\ni1 = ( ( ( i0 + divInt(min(abs(int(1.0)), int(54.0)),int(5.0)) ) * i0 ) + int(9.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [4], [1], [0], [], [], [], [], [], [1], [5], [1], [], [3, 3], [], [4, 4], [], [], [0, 5], [], [], [4, 0, 0], [3], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s0.strip()) \\le saveOrd(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s0.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 0, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 1, 2, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 0, 34, 11, 6, 4, 7, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[len(in2):].startswith(\"\"R\"\"[mod(int(0.0),i0):mod(int(7.0),int(0.0))].capitalize()[( int(7.0) * int(6.0) ):divInt(i2,divInt(divInt(int(1.0),i2),( abs(( i0 + divInt(min(( len(saveChr(i1)) * mod(min(int(7.0), i2),int(7.0)) ), int(9.0)),i1) )) - i2 )))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 6, 2, 9, 0, 4, 3, 0, 8, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [1], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 2, 0, 3, 2, 2, 3, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 1], [2, 1, 2, 1, 2, 0], [1, 0, 1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 1, 0], [], [0], [], [], [0, 2, 1], [4], [0, 1], [0], [], [0], [], [], [], [1, 1, 1, 0, 1, 0, 1], [7, 0, 6, 9, 1, 2, 4], [2, 0, 2, 0, 1, 1, 0], [0], [0, 0, 3, 2, 2, 2, 1, 2, 1, 1, 1, 1, 3, 0, 0, 0], [1, 0, 1, 1, 0], [2, 0], [1, 0], [0, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 7, 7, 3, 1, 12, 4, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\ni2 = i0\\nb1 = i2 \\le abs(divInt(( divInt(int(7.0),mod(int(0.0),int(6.0))) - int(91.0) ),int(24.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [2], [1], [1], [], [], [2], [], [], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0], [1], [2, 0, 0], [1], [], [1], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= divInt(i0,i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1], [3, 2, 3, 5], [2], [1], [1, 1, 1, 2, 1, 1], [1], [1, 2], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [0, 1, 1, 1], [], [1, 1, 2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1, 1], [0, 3, 2, 8, 5], [0, 1, 1, 1, 1, 0, 2, 1], [1, 1], [1, 3, 2, 0, 1, 1, 0, 3, 2, 2, 0, 0, 3, 1, 0, 1], [0, 1, 1, 0], [0, 1], [0, 2, 1, 2], [0, 0], [0, 3, 2], [1], [], [2, 0, 4], [], [], [0], [3], [], [], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 2, 6, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(0.0)\\ni1 *= min(( i1 - int(32.0) ), int(8.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 0], [2, 0, 0, 0, 2, 1, 0, 2, 0], [1], [1, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 2, 2, 2, 0, 0, 1, 2, 3, 3, 1, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 2, 4, 2], [0, 0, 2, 1, 2, 1, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 4, 2], [], [], [0, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1\\ns2 = saveChr(int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 0, 0], [], [1, 1, 0, 0], [], [0, 0], [], [], [0, 2, 0], [5], [0, 1], [0], [], [0], [], [], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 0, 1, 1, 0, 0], [0, 1], [0, 0, 3, 2, 1, 2, 2, 2, 1, 1, 0, 2, 0, 0, 0, 2, 3, 0], [1, 0, 1, 0, 1, 1], [2, 0], [2, 0, 2], [1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 0, 4, 0, 2, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 8, 2, 15, 5, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\ni2 *= i0\\nb0 = b2\\nb0 = abs(mod(int(7.0),( divInt(( int(0.0) + int(6.0) ),i1) * mod(i1,i0) ))) != i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0, 1, 2], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [1, 1], [8, 4], [2], [], [2, 1, 3, 1, 0], [1], [0], [], [1], [0], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0], [], [], [], [], [0], [2, 3], [1, 1], [0, 0], [], [], [], [], [0], [1, 1], [5, 6], [1, 1, 0, 2], [], [0, 0, 1, 3, 1, 1, 0, 0], [1], [2, 0], [], [1], [2, 0], [], [], [3, 2, 2, 3, 0], [1], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 == i1:{:\\nb0 = int(5.0) \\ge abs(int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2, 2], [1], [2, 0, 0], [0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( i2 + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [5, 3], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in0[:i0].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1, 0, 0, 0], [1], [2], [], [0], [], [], [], [], [2, 0], [], [5], [0, 1], [], [1], [0], [1], [3], [0], [0], [1, 0], [], [], [], [], [0, 0, 5], [], [], [2, 4, 2, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = saveChr(int(3.0))[:i0]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [9, 4, 7], [2], [0], [2, 1, 1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(int(9.0),int(47.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 2], [0], [2, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = ( i2 - int(5.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 3], [5], [0, 1, 0], [0], [], [3, 0], [1], [], [], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1], [9, 7, 4, 8, 2, 9, 0, 1, 1, 1, 3], [1, 0, 0, 0, 2], [], [2, 3, 1, 2, 2, 1, 3, 2, 1, 3, 2, 3, 3, 2, 3, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0], [3, 4, 3, 1, 1, 0], [0, 2, 1, 2], [1, 0, 1], [1, 4, 0, 2], [], [], [2, 0, 2, 4, 4, 0, 0, 0], [3, 3], [5, 0], [0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 11, 11, 5, 0, 25, 7, 6, 4, 3, 4, 0, 0, 8, 2, 2, 2, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( ( len(s1[int(9.0):mod(divInt(int(7.0),saveOrd(in1.lstrip().strip(s0)[:( int(4.0) + len(s2) )])),mod(max(max(( min(( int(8.0) * int(29.0) ), i1) - i0 ), i0), i0),i2))]) * int(0111.0) ) != int(3.0) or res0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [1, 4], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\g int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [0], [], [], [], [1], [3], [1], [0], [], [], [], [], [], [], [], [1, 2], [0], [0, 0], [], [4], [], [], [0, 2], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2:{:\\nb1 = i1 \\ge i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 2], [0], [0, 0, 1], [0], [], [3, 0], [1], [1], [], [1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 5, 1, 9, 5, 2, 4, 2, 3], [1, 1], [], [3, 1, 2, 0, 1, 0, 3, 0, 1, 1], [0, 1], [1, 0, 4], [1], [0], [0, 1], [], [], [4, 4, 0, 0], [1, 3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 2, 2, 2, 0, 6, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( b2 or max(int(0.0), ( i1 - int(5.0) )) \\l i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [2, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [1], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2], [0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [3, 0], [3], [1, 0], [0], [], [0], [], [], [], [0, 1], [0, 6], [2], [], [3, 1, 3, 0], [], [2, 4], [], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(int(06.0)) \\ge saveOrd(in2):{:\\nres0 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 4, 9, 8, 1, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 2, 2, 0, 1, 2, 1, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 0, 0, 2, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [22], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 0, 9, 1, 3, 0, 1, 5, 0, 1, 8, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nin1 = in0[:len(saveChr(i0)[int(0.0):max(mod(int(7.0),int(5.0)), int(7.0))].rstrip())]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [3], [1], [0], [], [], [], [], [], [1], [6], [2, 0, 2, 1, 1], [], [3, 0, 1, 0, 0, 2, 3, 0, 2, 0], [0, 1], [1, 1], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = max(i2, int(6.0)) \\ge i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [], [2, 0, 0], [0], [0], [2], [], [4, 2], [], [], [4, 4, 0], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(( i2 * i1 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 1, 2], [1], [0, 1], [], [0], [], [], [1, 1], [], [0, 2], [], [3, 0], [0], [], [], [0], [], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [1], [], [0], [], [], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [], [0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 8, 5, 3, 9, 9, 0, 7, 9, 0], [0], [1], [1, 2, 1, 3, 1, 1], [0], [1], [1], [], [3, 0], [], [], [3, 0, 2, 4], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 0, 0, 6, 1, 1, 1, 0, 2, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (s0 + saveChr(int(3.0))[( int(8.0) - max(int(5.0), int(399079.0)) ):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [6, 4, 4, 9, 9, 0, 0, 2, 7, 0, 4, 9, 3], [2, 0, 0, 0, 0, 0, 1], [], [2, 2, 1, 0, 3, 2, 1, 2, 0, 0, 1, 2, 2, 0, 0, 3, 2, 2, 1, 1, 3, 2, 0, 2, 1, 2, 3, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 1, 3, 3], [2, 1, 1, 2, 1, 0], [1, 1, 0, 0, 1], [], [1], [], [4, 1], [1], [], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 7, 0, 29, 11, 4, 6, 5, 0, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( mod(int(64.0),i2) * max(( int(4.0) - ( i0 - i0 ) ), int(9.0)) ) == ( mod(i0,i0) * max(divInt(divInt(int(9002.0),int(70.0)),len(saveChr(( i0 - mod(int(4.0),( len(\"\"R\"\") + i1 )) )))), int(93.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = max(i0, int(0.0)) != abs(mod(i2,int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [3, 5, 2, 5], [], [], [3, 4, 3, 0, 0, 0], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (getCharFromString((in2 + s2), int(0.0)) + in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [1], [0], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [6, 2, 8], [2], [0, 1, 1], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(628.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1, 0], [1], [0, 0, 3], [1], [], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [2, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nin1 = in0[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1], [1, 2, 0, 1, 0, 0, 0], [2], [1, 0, 2, 2, 2, 2], [], [0, 0, 0, 0], [], [], [0], [2], [0, 0], [0], [], [1], [], [1], [], [1, 1, 1], [6, 2, 6], [0, 0, 1, 2, 0, 1, 1, 1], [0, 1, 0], [1, 2, 0, 0, 1, 1, 2, 0, 1, 0, 0], [0, 0], [4], [2, 1, 1], [], [0, 0, 1, 0, 3], [], [], [4, 0, 0, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(6.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [1, 0], [4, 0], [1, 2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ni1 += int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 0], [2], [0, 2], [], [0, 0], [], [], [2, 3, 3], [3], [1, 0, 1], [0], [], [1, 0], [], [1], [], [1, 1], [9, 6], [1, 0, 0, 2, 2, 2, 0, 1], [], [0, 0, 3, 2, 2, 3, 2, 2, 3, 0, 1, 0, 1, 0, 0, 0, 0], [0, 1, 0, 1], [0, 1, 1], [0, 1], [0, 0], [0], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 8, 0, 17, 4, 3, 2, 2, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 \\ge i0\\ns0 = saveChr(min(( divInt(max(( divInt(max(i0, int(9.0)),i2) + int(6.0) ), i2),i2) - i0 ), i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [1, 1], [6, 4], [2, 0, 2, 0, 0], [], [2, 2, 1, 0, 0, 2, 1, 0, 0, 0], [0, 1, 0], [1, 1], [0, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 8, 3, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( mod(int(6.0),i2) + i0 ) == ( int(4.0) - i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 1], [], [0, 0], [], [], [3, 2, 3], [], [0], [], [], [1], [], [0], [], [1, 1], [5, 7], [0, 2], [1], [0, 2, 1, 1], [0], [], [2, 0], [], [1, 1, 1, 2], [], [], [3, 3, 4, 0, 0, 2, 0, 0], [2, 3], [1], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 1, 0, 2, 0, 4, 0, 0, 7, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = ((s1.capitalize() + s1) + s2[:i0])\\ni2 *= ( int(5.0) + int(7.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [0, 3], [3], [0, 1], [0], [], [1], [], [1], [], [0, 0, 1], [4, 1, 2], [0, 0, 1], [1, 1], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\ni1 *= int(412.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [1], [], [0], [], [], [], [1], [0, 1], [0], [], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 3, 2, 7, 4, 8, 2, 4, 4], [2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0], [1], [3, 0, 2, 2, 1, 0, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 0, 0, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 3, 2, 3, 0, 1, 3, 1, 3, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 3, 1, 1, 2, 1, 0, 2, 0, 0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [4, 1, 1, 1, 4, 2, 4, 4, 3, 4, 4, 0, 1, 4], [0, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [3, 1, 3, 4], [1], [], [0, 2, 4, 2, 4, 4, 0, 4, 1, 1, 0, 4, 4, 0, 2, 0], [3, 2, 2, 3, 0, 0, 2, 1], [0, 2], [1, 1, 1], [1], [], [24], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 4, 1, 7, 2, 1, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not saveOrd(in0) \\g i2:{:\\ni1 += divInt(divInt(int(7.0),i1),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [], [0], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 1], [0, 5], [0, 2, 2, 1, 1], [1, 1], [0, 2, 0, 2, 1, 0, 0], [1, 1], [4], [1, 1, 0], [0, 0], [0, 5, 4, 4, 3, 0, 4], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 5, 1, 7, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 == divInt(i2,divInt(int(0.0),i2))\\ni1 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [1, 1, 2], [], [0], [], [], [3], [], [2], [], [0], [], [], [], [], [0, 1], [3, 1], [2, 1, 0], [1, 0], [3, 1, 0], [], [3], [2, 2], [], [1, 5, 2], [], [], [4, 0, 0, 4], [3, 1], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 1, 1, 0, 3, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= len(s1.strip())\\ni1 = int(31.0)\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1, 1], [0, 1, 8, 7, 3], [0, 1], [1], [2, 3, 2, 1, 2, 0, 1, 1], [0, 0, 1], [2], [0, 0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 2, 1, 8, 3, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( abs(( int(01.0) + divInt(i1,int(87.0)) )) * int(3.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [2], [1, 1], [], [0, 0], [], [], [2], [2], [1, 0], [0], [], [1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [3, 2, 8, 7, 3, 3, 4, 4, 0, 1], [0, 2, 2, 1, 0, 1, 1], [1, 0], [3, 0, 3, 3, 1, 2, 1, 2, 2, 0, 1, 3, 1, 0, 3, 1, 1, 2, 0, 1, 3, 1, 2, 1, 0, 3, 3], [0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 4, 1, 3, 2, 4], [1, 2, 2, 1, 0], [0, 0], [4], [1], [], [4, 2, 4, 1], [3, 2], [2], [2], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 7, 2, 25, 5, 6, 4, 2, 0, 1, 0, 4, 2, 1, 1, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(i0, max(min(int(3.0), ( int(2.0) - divInt(( i2 * int(8.0) ),min(int(7.0), i2)) )), saveOrd(\"\"U\"\".capitalize()[int(3.0):].strip()))) == int(3.0):{:\\ni1 *= divInt(i0,int(4.0))\\ni1 = max(int(4.0), ( int(01.0) - i1 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 2], [1], [0], [1], [], [], [], [], [5, 0], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(42.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 6, 2, 9, 0, 4, 3, 0, 8, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 2, 0, 3, 2, 2, 3, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 1], [1, 1, 2, 1, 2, 0], [1, 0, 1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [0], [0], [0], [0], [], [], [0], [4], [1], [0], [5], [], [], [], [], [1], [3], [0, 2], [], [1, 0, 1], [], [2], [], [], [4, 1, 5], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(3.0) \\le i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [], [], [], [1, 3], [1], [0, 1], [0], [], [0], [], [], [], [], [], [0, 2, 2], [1], [0, 0, 3], [], [3], [1], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b1:{:\\nres0 = i0 \\g i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [0], [2], [1], [0], [], [], [], [], [], [], [], [2, 0, 0, 2, 1, 0, 0], [0, 0], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [1], [], [], [], [], [], [], [1, 0, 1], [9, 5, 2], [2, 1, 0, 2], [0, 0], [0, 2, 0, 1], [0], [], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 2, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\ni0 = ( i2 + int(9.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nin1 = in0[abs(i1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [1], [2], [0, 0, 0, 0, 1, 0], [0], [], [3, 3, 2, 1, 1], [0, 1], [1, 1], [], [1, 1], [2, 1], [0, 0], [], [2, 3, 2, 0, 1, 0, 3, 2, 0, 1], [0, 1], [3], [0], [1], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 6, 1, 0, 5, 2, 2, 0, 1, 1, 2, 0, 6, 2, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( ( not False and ( len(in0) + mod(i0,int(2.0)) ) == i0 ) or False )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [2, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [0, 1], [7, 4], [0, 0], [], [1, 3, 0], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(74.0) \\l abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 1], [4, 8, 0, 8, 6], [2, 0], [1], [2, 1, 1], [0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 1, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += ( int(48.0) + int(086.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [2], [0, 1], [], [], [], [], [2], [4, 4], [1, 0], [0, 0], [], [1], [], [1], [], [1, 1, 1, 0, 1, 1], [0, 0, 2, 3, 6, 8], [1, 0], [1], [3, 2, 0, 1, 3, 1, 3, 1, 3, 1], [0], [4, 1, 2], [2, 1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 3, 3, 2, 1, 8, 1, 3, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(in2) \\le ( i1 * int(0.0) )\\nloopBreak% = 0\\nwhile False:{:\\ni0 -= max(int(0.0), abs(int(2.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 0], [], [0], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [1, 1], [6, 0], [1, 1, 1, 1], [0], [2, 3, 0, 0, 1, 0, 3, 2, 0, 1], [0, 1, 0], [4, 3], [1, 1], [0], [2, 1, 4], [], [], [2, 3, 2, 0, 0, 0], [], [], [0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 6, 1, 1, 1, 0, 2, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = ( saveOrd((s2[i1:] + s1)[i1:int(6.0)]) - i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [4, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [1, 2], [1], [0], [], [], [2], [], [1, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ni1 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1], [1], [1, 2], [], [0, 0], [], [], [0], [], [0], [], [], [0], [], [], [0], [1], [9], [1], [1], [3, 1], [], [2], [1], [], [4, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= abs(int(9.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [5], [1], [0], [], [], [], [], [], [0, 1, 1], [3, 5, 8], [2, 1], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(35.0) != i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 6, 0, 7, 8, 1, 2, 8, 8], [0, 1, 2, 1, 2, 2], [1], [1, 2, 3, 1, 2, 2, 2, 0, 0, 3, 2, 2, 0, 0, 1, 1, 2, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0], [2, 0], [1, 1, 2, 0, 1], [0, 0], [0, 1, 2, 0], [], [], [0, 2, 2, 4, 0], [0], [], [1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 1, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= int(0607.0)\\ns0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [2], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 0], [1, 1, 1, 1], [], [2, 1, 2, 2], [], [], [], [], [], [], [], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 3, 2, 8, 5], [1, 0, 1, 1, 0, 2, 1, 1, 2], [0, 1], [3, 0, 2, 0, 1, 3, 0, 0, 2, 2, 1, 0, 3, 1, 0, 1], [0, 1, 1, 0], [0, 1], [0, 1, 2, 1], [0, 0], [0, 3, 2], [1], [], [2, 0, 1], [], [], [0], [3], [], [], [], [15]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 0, 8, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in0[min(i1, ( i0 + int(0.0) )):max(i1, i1)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [1, 1, 2], [], [0], [], [], [3], [], [2], [], [0], [], [], [], [], [1, 0, 0, 1], [3, 1, 5, 1], [2, 1, 0], [1, 1], [3, 1, 0], [], [4], [0, 2], [], [1, 5, 2], [], [], [4, 0, 0, 4], [3, 1], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 0, 1, 2, 0, 3, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += saveOrd(s1.lstrip())\\ni1 *= int(3.0)\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1], [0], [3, 0, 1, 1], [], [2], [2], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(i1)\\ns2 = in0[:int(4.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2], [1], [0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [], [0], [], [5, 3], [], [], [4, 4, 0], [0, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(in0.capitalize(), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [2, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ni2 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [0], [2, 0], [0], [0, 0], [], [], [0, 2], [2], [2, 0], [], [5], [1], [], [0], [], [], [], [2, 0, 2, 1, 0], [], [0], [], [], [], [], [2, 0, 0], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(i2)\\nb0 = s0.endswith(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1], [0, 0, 0, 0, 2, 0, 0, 2, 0, 2], [1], [1, 2, 0, 0, 2, 3, 2, 2, 1, 2, 1, 2, 2, 2, 0, 0, 3, 2, 2, 3, 1, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0, 3, 3, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 2, 4, 0, 2, 1], [0, 0, 2, 1, 2, 2, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 1, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(s0[len(in2):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 1, 1, 1, 2, 1, 0, 2, 2, 0, 0, 2, 2, 0, 1, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 0, 2, 2, 0, 1, 1, 2, 0, 1], [0, 2, 0, 0, 0, 0, 1, 0, 2, 1], [2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 0, 1, 2, 0, 2, 2, 2, 1, 2, 0, 0, 0, 2, 2], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 2, 0, 3, 0, 2, 1, 2, 3, 0], [0, 2, 1], [0, 0, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 2, 1], [0, 0, 0], [1, 1, 4, 4, 3, 0, 4, 2, 1, 1], [2, 1, 3, 3, 1, 0], [0, 0], [0, 1], [1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 9, 1, 8, 5, 8, 9, 7, 6, 2, 7, 0, 1, 5, 7, 8, 4, 6, 9, 2, 5, 4, 7, 6, 8, 0, 4, 2, 1, 9, 7, 0, 0, 8, 5], [2, 0, 0, 2, 0, 2, 0, 2, 2, 1, 1, 1, 1, 2, 0, 2, 2, 0, 1, 1, 0, 0, 1, 1, 1, 2, 0, 2, 1, 0, 1, 1, 1, 2, 1, 0, 0, 2, 0], [0, 1, 1], [0, 3, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 2, 1, 1, 3, 0, 0, 2, 3, 2, 3, 3, 0, 2, 2, 3, 0, 1, 3, 2, 1, 1, 1, 1, 1, 3, 2, 3, 0, 3, 0, 1, 0, 1, 0, 0, 2, 1, 0, 3, 1, 0, 3, 2, 3, 1, 3, 1, 2, 0, 3, 1, 0, 0, 1, 1, 3, 1, 1, 3, 3, 2, 2, 1, 1, 1, 3, 2, 3, 1, 3, 2, 1, 3, 1, 0, 3, 0, 2, 0, 0, 3, 2, 3, 3, 3, 0, 0, 3, 3, 1, 2, 0, 3, 3, 0, 3, 0, 0, 2, 1, 2, 3, 1, 1, 0, 1, 3, 2, 0, 3, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [3, 3, 2, 0, 4, 0, 3, 3, 0, 2, 1, 0, 4, 4, 1, 1, 1, 1, 0, 4, 2, 2, 4, 4, 2, 3, 0, 0, 4, 2, 4, 3], [2, 0, 2, 0, 1, 2, 0, 2, 0, 2, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [2, 3, 4, 3, 4, 3, 2, 0, 2, 1, 0, 3, 2, 0, 2, 5, 2, 3, 4, 3, 3, 2, 2, 4, 4, 0, 2, 5, 5, 5, 3, 5, 0, 0, 3, 3, 1, 5, 1, 2, 3, 3, 5, 3, 3, 3, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 3, 3, 0, 0, 4, 4, 4, 0, 1, 4, 1, 4, 2, 2, 2, 0, 1, 4, 4, 1, 2, 1, 2, 0, 0, 4, 0, 4, 1, 0, 2, 4, 0, 0, 0, 0, 4, 4, 1, 1, 2, 0, 2, 1, 4, 2, 1, 4, 4, 1, 0, 2, 1, 2, 4, 3, 2, 0, 1, 1, 4, 0, 4, 0, 1, 2, 4, 3, 3, 4, 0, 1, 0, 1, 0, 2, 4, 3, 0, 0, 1, 0, 2, 1, 2, 1, 0, 0, 4, 4, 3, 0, 1], [1, 0, 2, 2, 1, 3, 3, 1, 2, 0, 3, 1, 1, 0, 2, 1, 3, 1, 1, 0, 2, 2, 1, 0, 1, 0], [3, 1, 4, 5], [0, 2, 0, 1, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2], [0, 2, 2, 3, 0, 2, 2, 2, 0, 3, 2, 3, 3, 0, 3, 0, 2, 0, 1, 2, 1, 3, 0, 0, 3], [8, 10, 1, 1, 14, 6, 1], [16, 7, 21], [8, 2, 0, 7, 6, 9, 1], [0, 4, 22, 13, 26, 27, 30, 9]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 6, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in0:{:\\nin1 = in0\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = saveChr(len(in0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1], [7, 7, 5, 3], [2, 2], [0], [1, 3, 2, 0, 2, 3, 2, 1, 2, 1, 0, 1], [0, 0, 0, 0], [1, 3, 2], [1, 0, 2, 0], [], [3, 2, 2, 5], [], [], [3, 4, 4, 4, 4, 0, 0], [1, 1, 2, 3], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 4, 2, 4, 0, 3, 0, 0, 7, 4, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (saveChr(int(7.0)) + saveChr(max(( i2 - ( len(s2.rstrip(s2).capitalize()) + ( int(7.0) * ( int(5.0) + i2 ) ) ) ), int(3.0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1], [8, 2, 2, 5], [2, 0, 2, 1], [1], [3, 3, 1, 2, 3, 1, 2, 0, 0, 3, 0], [0, 1], [1, 2, 0, 2], [2, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 11, 2, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= max(abs(int(8.0)), ( min(int(2.0), mod(i0,i2)) - abs(i1) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 0], [3], [1], [0], [], [0], [], [], [], [0, 1], [7, 4], [0], [], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 \\ge int(74.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 5], [1], [], [0, 1, 1], [], [], [], [], [5, 0, 2], [1], [], [3, 4, 1, 0, 1, 3, 0, 2, 0], [2, 0], [0], [2, 1], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 4, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (\"\"R\"\".capitalize() + s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [0, 9, 6, 9, 5, 6], [2, 2, 0, 0, 2, 0, 1, 2, 1, 1], [], [2, 3, 2, 1, 1, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 2, 2, 3, 0, 2, 2, 3, 0, 0, 1, 3, 2, 3, 1, 0, 0, 0, 3, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 3, 2, 1, 3, 2, 3, 4, 2, 1, 0, 1], [2, 0, 0, 0, 0], [0, 1, 0, 1], [5, 5, 1, 2], [1, 1], [], [3, 0, 0, 4, 4, 1, 2, 0, 4, 2, 0, 2, 4, 1], [0, 3, 0, 2, 1], [0], [2, 0, 1], [1, 1], [], [17, 0], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (in2 + s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [9, 4, 7], [2], [0], [2, 1, 1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(int(9.0),int(47.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0], [1], [], [0], [1], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 4, 8, 2], [2, 0, 2, 1, 2], [0], [3, 0, 1, 0, 2, 3, 3, 2, 1, 0, 1, 1, 3, 2, 3, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0], [0, 1, 1, 1, 0, 0], [4, 1, 4, 3, 0, 0], [1, 2, 0], [0, 1, 0], [4, 4, 5], [], [], [2, 4, 0, 0, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = saveOrd(saveChr(i0)[:int(1.0)])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1, 1, 2], [0, 0], [0, 0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 4], [2, 0, 0, 0], [1], [2, 1, 0, 3, 0, 3, 2, 0, 0, 0], [1, 0], [2, 1, 1], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(2.0),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [1, 8, 6], [1, 1], [1], [3, 1, 0, 3, 1, 1, 1, 0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [2, 0, 0], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += abs(int(18.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [1, 0, 1], [3], [0, 0], [0], [], [0, 0], [], [], [], [1], [0], [2], [], [0, 1, 3, 0], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b1:{:\\nb0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 2, 3], [2, 0, 1, 0, 1, 1], [], [3, 2, 0, 1, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 0, 2, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0], [1], [0, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1], [0, 1], [], [], [2, 2, 0], [], [0, 2], [1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 4, 0, 15, 5, 1, 1, 4, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1[max(mod(i2,int(1.0)), int(3.0)):divInt(int(9.0),( i0 + int(4.0) ))][:mod(mod(i1,i0),int(2.0))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [0, 0, 0, 1], [], [0, 0], [1], [0, 0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = i0 \\ge i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [0, 9, 6, 9, 5, 6], [2, 2, 0, 0, 2, 0, 1, 2, 1, 1], [], [2, 3, 2, 1, 1, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 2, 2, 3, 0, 2, 2, 3, 0, 0, 1, 3, 2, 3, 1, 0, 0, 0, 3, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 3, 2, 1, 3, 2, 3, 4, 2, 1, 0, 1], [2, 0, 0, 0, 0], [0, 1, 0, 1], [5, 5, 1, 2], [1, 1], [], [3, 0, 0, 4, 4, 1, 2, 0, 4, 2, 0, 2, 4, 1], [0, 3, 0, 2, 1], [0], [2, 0, 1], [1, 1], [], [17, 0], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (in2 + s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [5, 5], [], [], [4, 0, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [1], [0], [0], [], [0], [], [], [], [1, 1, 1], [1], [], [], [3, 3, 1], [], [4, 4], [], [], [1, 4], [], [], [0, 4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [5], [1], [], [1], [], [1, 1, 1], [7, 5, 4], [0, 2, 0], [0], [1, 1, 0, 2, 3, 1, 1, 0], [0, 1], [1], [2, 0], [], [5, 2], [1, 1], [], [1, 0, 4], [1], [], [], [3, 1], [], [15], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\",\"\".endswith(in2)\\ni0 = int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [1], [0], [0], [], [0], [], [], [], [1, 1, 1], [1], [], [], [3, 3, 1], [], [4, 4], [], [], [1, 4], [], [], [0, 4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [5, 9], [2, 1, 2], [1, 1], [1, 3, 3, 3, 2], [], [3, 1], [1, 1], [], [], [], [], [1], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [3], [0, 0, 1], [], [1], [], [], [], [3, 0, 3], [24], [], [], [6, 23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 1, 0, 0, 0, 3, 1, 0, 0, 2], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"#Y>\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [0], [2], [0], [4], [], [], [], [], [1, 1, 0, 0, 0, 0, 0, 0, 1], [8, 5, 5, 7], [1, 1], [], [3, 1, 2, 0, 2, 2, 3, 0, 3], [0, 1], [2, 4, 4], [0], [0], [4, 2], [], [], [4, 4, 0, 0], [1, 3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 4, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveChr(abs(int(8.0))).startswith(in1.lstrip(s2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [2], [0], [0], [], [], [], [], [0], [1], [], [4, 1, 2], [1, 1], [4], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = saveChr(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 2, 2], [1, 2], [1], [0], [0], [], [], [2], [5, 3], [1, 2, 1], [0, 0], [1], [], [], [], [0], [0, 1, 1, 0, 0], [2, 4, 7, 1, 6], [2, 0], [0], [0, 1, 1, 1], [], [], [], [], [2, 0, 2, 4], [], [], [4, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [2], [0], [0], [], [1], [], [0], [], [0, 0, 1, 0, 0, 0], [1, 8, 8, 8, 1, 2], [2, 0, 2, 1, 0], [], [3, 1, 1, 0, 3, 2, 3, 2, 0, 0], [1, 1], [2, 1], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [3, 8, 8], [2, 1, 0, 1], [], [2, 0, 3, 3, 3, 0, 0, 0], [0], [4, 1, 0], [2], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 1, 3, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( i2 * saveOrd(in0) ) \\le max(min(i1, i0), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [2], [1, 1], [], [0, 0], [], [], [1], [5], [1], [0], [], [], [], [], [], [0, 0, 1, 1], [9, 7, 2, 0], [1, 2, 1, 0], [0, 0], [0, 1, 1, 0], [], [], [2, 2], [1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\nloopBreak% = 0\\nwhile int(972.0) != int(0.0):{:\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 0], [0], [0, 0, 1], [0], [], [1], [], [4, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0, 0], [0], [3, 0, 1], [0], [3], [2, 2], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1, 0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [1], [1], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 5], [1, 0], [], [0, 2, 2, 1, 0], [0], [], [1], [], [5, 0, 2], [1], [], [3, 4, 4, 0, 0, 3, 1, 2, 0], [3, 0], [1], [2, 1], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 5, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (getCharFromString(s0, i1).rstrip() + s2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [2, 2, 9], [1, 2, 1, 2], [1], [2, 3, 0, 3, 1, 1, 1], [1, 0], [0, 1], [1, 2, 0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 1, 7, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= mod(min(i2, max(int(2.0), int(2.0))),int(9.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 3, 2, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = in1[len(in0):].startswith(s0[mod(int(0.0),i0):( int(7.0) + int(5.0) )].capitalize()[( int(7.0) + abs(i2) ):i2])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [3, 8], [0], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(38.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 0], [2], [0, 2], [], [0, 0], [], [], [0, 3, 3], [3], [0, 0, 1], [0], [], [1, 0], [], [1], [], [], [], [0, 2, 1, 0, 0, 2, 2], [], [0, 0], [], [], [], [], [0], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\ns0 = saveChr(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 0, 1, 0, 0, 1], [9, 9, 0, 3, 9, 5, 6, 1, 8], [1, 2, 2, 1], [1], [2, 0, 1, 2, 1, 1, 3, 2, 0, 0, 0], [1, 0, 1], [1, 2], [0], [1, 0], [1, 4], [], [], [2, 2, 0], [], [], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 4, 0, 11, 3, 1, 1, 2, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1[mod(i1,int(99.0)):( int(0395.0) + int(618.0) )][max(divInt(i2,i2), i1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [], [0], [], [], [1], [5], [1, 0], [0], [], [1], [], [1], [0], [1, 0], [7, 7], [1], [], [1, 0, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) != i1:{:\\nb1 = False\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [1], [8, 4], [1], [0], [1], [], [], [], [], [3, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(8.0)\\nin0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [], [], [], [], [], [], [], [1, 1], [9, 4], [1, 2], [0], [1, 1, 1], [], [], [], [1], [1, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [], [], [1], [], [], [], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:int(1.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 1], [0], [], [2], [], [0], [], [], [1], [5], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 0, 0, 0, 0], [5, 5, 0, 4, 6, 4, 8, 0], [], [], [1, 2, 3, 3, 0], [1], [2, 3], [], [1], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(len(in0), i1):]:{:\\nb2 = getCharFromString(in1, int(0.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [4], [1], [0], [], [], [], [], [], [1], [5], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(5.0) \\le i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 2, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [3, 3, 1], [], [], [], [1, 1], [4, 9], [0, 2], [1], [3, 2, 1, 1, 3, 0], [0], [2, 3, 2], [1, 0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 0, 1], [], [0], [4, 4, 0, 0], [3, 0], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 1, 0, 2, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString(in1, abs(( int(4.0) - int(9.0) ))).rstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [1, 1, 0, 1], [4, 5, 0, 1], [1, 0, 1], [], [0, 2, 2, 1, 0, 3, 2, 2, 1, 3, 1, 0], [0, 0, 0, 1], [3, 3], [1, 2, 0], [0], [5, 0, 2], [1], [], [3, 4, 4, 0, 0, 3, 1, 2, 0], [3, 0], [1], [2, 1], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 12, 4, 2, 3, 1, 3, 1, 0, 9, 2, 1, 1, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 != ( ( int(4.0) - i0 ) * len((getCharFromString(in2, ( divInt(int(5.0),len(s0)) + int(01.0) )).rstrip() + (\"\"R\"\" + s2[i1:]))) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 2], [], [0, 0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [8, 4], [], [], [], [], [], [], [], [3, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\nin0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [0], [0], [], [1], [], [1], [], [0, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [2, 1], [1], [0], [], [], [0], [], [4, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4], [1], [], [1], [], [], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"F\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 2], [], [0], [], [], [0], [], [], [], [1, 1], [4, 5], [0, 0], [1], [2, 0, 1], [0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [2], [0, 1], [0], [], [2], [], [], [], [0, 0, 1], [8, 9, 7], [2], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not int(897.0) == i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [0], [0], [], [], [], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [3, 1, 6], [1, 2], [1], [1, 0, 0, 1], [], [2], [0], [], [1, 4, 1], [1], [0], [0, 4, 1], [0], [], [], [0], [9], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in1:{:\\ni1 += int(316.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 0, 1, 0, 0, 1, 0, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 3, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\nres0 = in1[len(in0):].startswith(s0[mod(int(8.0),i1):mod(int(757.0),int(617.0))].capitalize()[( int(79.0) + abs(i2) ):i2])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [0, 1], [1], [0, 3, 2], [1], [], [1, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = \"\"R\"\"\\ni2 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 0, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [1], [0], [3, 1], [], [2], [0], [], [0, 4, 5, 1], [], [0], [4, 4, 0, 0], [3, 2], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in1.capitalize().strip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 0], [], [0, 1, 0], [], [0], [], [], [0, 2, 1], [5], [0, 1], [0], [], [0], [], [0], [], [1, 1, 1, 0, 1, 0, 1], [7, 0, 6, 1, 1, 2, 4], [2, 0, 2, 0, 1, 1, 0], [0], [0, 0, 3, 2, 2, 0, 1, 2, 1, 1, 3, 1, 3, 0, 0, 0], [1, 0, 1, 0, 0], [2, 0], [1, 0], [0, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1], [1], [0], [], [0], [], [], [1], [0], [1, 0], [0], [], [1], [], [1], [0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [7, 4, 0, 9, 6, 7, 3, 6, 9, 5, 8], [1, 2, 1, 2, 1], [], [1, 1, 0, 1, 0, 2, 3, 0, 2, 2, 0, 2, 1, 2, 1, 3, 0, 3, 1, 0], [1, 0, 1, 0, 0, 1, 0], [2, 1, 2], [1, 2, 2, 2], [1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(740967.0) \\l int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [], [], [0, 1], [1, 1], [0], [], [0, 1], [], [], [1], [], [3, 3], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 != int(11.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [1], [], [], [1, 1], [4, 1], [0, 0], [1], [3, 0, 1, 1], [], [2], [2], [0, 1, 0], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [2], [2, 1], [], [0], [], [], [], [], [2], [], [0], [], [], [], [], [], [], [0, 1, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [1, 1], [1], [0, 3, 2, 1], [1], [], [3, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 6, 1, 7, 2, 0, 2, 1, 4, 1, 0, 9, 3, 2, 1, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile (s0 + in0) in s2:{:\\ns1 = getCharFromString(\"\"R\"\"[i0:].rstrip(), ( i1 - i1 )).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= mod(i2,i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [0, 2], [0], [2, 0, 1], [0], [], [1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( i2 - int(5.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [3, 9], [2, 0], [1], [0], [], [], [1], [1, 0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [1, 1, 0], [0], [3, 2, 0, 2, 1, 3, 0], [1, 1], [0, 4], [], [1, 1], [0, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 7, 2, 2, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = min(mod(i1,mod(int(5.0),saveOrd(s0))), i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [3, 3], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [0], [0], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [1, 2, 2], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 0, 0, 1, 1, 1], [4, 9, 2, 6, 9, 5, 4, 8, 9], [0, 2, 0], [1], [1, 2, 2, 3, 1, 1, 2, 0, 2, 0, 0, 1], [1, 1, 0, 1], [0], [0], [0, 0, 1], [2, 2], [], [], [2, 0, 0, 2, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s2[int(4.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [4], [1], [0], [], [], [], [], [], [1], [3], [1, 1, 1], [1], [2, 0, 1, 2, 0, 0], [1, 1], [], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 6, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = mod(i1,int(3.0)) \\le divInt(i1,i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [1, 0], [2], [1, 1, 2], [], [0], [], [], [], [4], [1], [0], [], [], [], [], [], [0, 1], [2, 9], [0, 2, 2, 1, 0, 2], [1, 1], [2, 3, 0, 0, 3, 1], [1], [2, 2], [1, 2], [0], [4, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 2, 6, 1, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= divInt(abs(i2),i2)\\ni1 *= abs(int(29.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 3, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\ni0 = abs(i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 3, 1, 7, 7, 2, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0, 1, 2], [1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 3, 2, 2, 1, 1, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 4, 2, 0, 0, 0, 1, 2, 1, 2, 1], [2, 0, 2, 1, 0, 2, 2, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 1, 1, 3, 0, 8, 1, 3, 0, 1, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[max(saveOrd(in1), i1):]:{:\\nres0 = ( b2 or i2 != abs(mod(i2,int(0.0))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [4, 2, 8], [0, 0], [0], [2, 1, 0], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = divInt(int(4.0),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 1, 1, 0, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 34, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:len(in1)]:{:\\nres0 = in1 == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 417}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 35, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 38, 11, 8, 4, 7, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(in1):mod(int(7.0),i0)]):][mod(int(7.0),int(5.0)):]:{:\\nres0 = in0[:( int(7.0) + abs(i2) )].capitalize()[i2:divInt(divInt(int(6.0),i0),divInt(min(( i1 + ( len(saveChr(divInt(min(i2, ( max(int(1.0), i1) * int(7.0) )),int(7.0)))) - i2 ) ), i0),mod(int(9.0),abs(int(8.0)))))].startswith((\"\"R\"\" + s0.rstrip()))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 341}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 40, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[:mod(len(in1),i0)]:{:\\nres0 = in1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 476}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [], [], [], [], [0, 3], [5, 1], [1, 0, 2, 0], [0, 0], [2], [3, 1], [1], [1], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 6, 7, 0, 0, 4, 3, 0, 8, 4, 4], [0, 2, 0, 0, 0, 0, 1, 2], [1], [0, 2, 2, 2, 1, 3, 2, 1, 1, 1, 3, 0, 2, 0, 2, 0, 3, 2, 2, 0, 2, 0, 3, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 4, 3], [0, 1, 2, 1, 2, 0], [1, 0, 1, 1], [2, 4, 5], [], [], [0, 0, 0], [], [], [], [], [], [], [], []], "fitness": 40, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 1, 4, 1, 1, 2, 1, 1, 0, 8, 8, 1, 0, 11, 4, 2, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 != ( ( mod(int(3.0),abs(( int(67.0) + int(00.0) ))) - int(430.0) ) * saveOrd(s2) )\\nres0 = ( in1 == in2 or False )\\n", "other_info": {}, "test_fitness": 418}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 40, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[:len(in1)]:{:\\nres0 = in1[min(i0, int(0.0)):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 476}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 2, 3, 1, 7, 7, 9, 4, 3, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [1, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 0, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 2, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2, 0], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 41, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(5.0):]:{:\\nres0 = in1 not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 587, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 3, 1, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 2, 0, 11, 4, 2, 1, 3, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s1):]:{:\\nres0 = ( ( mod(mod(int(2.0),i0),( i2 + int(7.0) )) != divInt(int(5.0),len(\"\"R\"\")) or True ) and in1 not in in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 4, 4, 4, 2, 0, 2, 3, 4, 4, 0, 1, 0], [0, 1, 3, 2, 2], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 46, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 13, 0, 50, 16, 8, 8, 8, 6, 1, 1, 17, 5, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1[len(getCharFromString(saveChr(i0), int(0.0))):max(mod(i2,int(7.0)), mod(int(5.0),min(i2, ( mod(( int(7.0) + i0 ),( len(in1[( i0 - ( i1 * divInt(int(2.0),i1) ) ):( min(i2, i0) - divInt(int(1.0),i0) )].rstrip()) + i2 )) * divInt(int(7.0),max(int(7.0), abs(i1))) ))))])][mod(( ( int(9.0) - int(8.0) ) - divInt(int(5.0),i1) ),int(0.0)):]:{:\\nres0 = (in0.capitalize().capitalize() + \"\"R\"\")[:int(4.0)] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 651}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 47, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[:len(in1)]:{:\\nres0 = in1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 581}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 0, 3, 2, 0, 2, 2, 0, 3, 0, 3, 2, 2, 3, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.rstrip():{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 7, 8, 5, 0, 0, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 1, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 0, 2, 1, 3, 0, 0, 1, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 4, 2, 4, 2, 0, 2, 3, 1, 0, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 5, 0, 14, 2, 4, 0, 2, 5, 0, 1, 10, 3, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s1):]:{:\\nres0 = getCharFromString(in1, len(saveChr(i0))) not in in0[int(0.0):min(mod(i2,i2), mod(int(7.0),min(i0, i0)))].rstrip()[:int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 54, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 9, 0, 38, 12, 8, 5, 7, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[max(max(i0, int(0.0)), abs(mod(i2,int(7.0)))):]:{:\\nres0 = in1 not in in1[mod(int(5.0),min(i2, ( divInt(( len(in0) + i0 ),divInt(min(( i1 + ( divInt(( int(7.0) * i2 ),divInt(max(int(4.0), i1),int(1.0))) - int(7.0) ) ), i2),i0)) + mod(int(7.0),abs(int(9.0))) ))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 688}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [], [], [], [], [2, 3], [4, 1], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 6, 2, 0, 0, 4, 3, 0, 8, 4, 4, 7, 9], [0, 0, 0, 0, 0, 0, 1, 2], [1], [0, 2, 2, 2, 1, 3, 2, 1, 1, 1, 0, 0, 2, 0, 2, 1, 3, 2, 2, 0, 1, 1, 3, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 1, 3], [2, 1, 2, 1, 2, 0], [1, 0, 1, 1], [4], [], [], [0], [3, 2], [], [], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 13, 13, 5, 0, 23, 8, 3, 5, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 \\le ( ( mod(int(0.0),abs(( int(62.0) * int(00.0) ))) - int(430.0) ) * i0 )\\nres0 = i0 \\g ( i0 - ( int(8.0) * max(divInt(mod(i0,int(44.0)),int(79.0)), len(in1)) ) )\\n", "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [3], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 4, 7, 6, 1, 1, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [1, 1, 3, 3], [1, 4], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 10, 0, 38, 11, 8, 4, 7, 7, 1, 1, 17, 4, 2, 5, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(in1):mod(int(0.0),i0)]):][mod(i2,int(7.0)):]:{:\\nres0 = saveChr(divInt(int(4.0),saveOrd(in1[:i0])))[i0:divInt(divInt(int(7.0),i1),divInt(min(( i2 + ( len(saveChr(( min(i1, ( max(int(6.0), i2) + int(1.0) )) * int(1.0) ))) - i0 ) ), i0),mod(int(7.0),abs(int(9.0)))))] not in (s0.rstrip(\"\"R\"\").rstrip() + in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 2, 1, 1, 2, 1, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nres0 = in1.startswith(\"\"R\"\"[len(in1):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [3], [1], [0], [], [], [], [], [], [1], [4], [0], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(4.0) \\ge i0\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 0, 0, 1], [1, 0, 0, 1], [2], [0, 1, 2, 1], [], [0, 0], [], [], [3], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [6, 7, 1], [0, 1, 2, 1, 0, 2, 2], [1, 0], [0, 2, 0, 0, 2, 0, 1, 3, 0], [0, 1], [2], [1, 1], [1], [4, 1], [], [], [0], [], [], [1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 4, 4, 0, 4, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 7, 2, 9, 2, 1, 2, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le ( i1 - i2 )\\ni1 -= mod(i0,int(671.0))\\nin1 = s1\\ni2 = abs(i2)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [], [0, 0], [], [], [3, 2, 3], [], [0], [0, 0], [], [1], [], [0], [], [], [], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\nres0 = True\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [0, 1, 0], [], [0, 0, 1], [], [0], [], [], [3, 0, 1], [], [0, 0], [], [], [2, 0], [], [1], [], [], [], [0, 0, 0, 2], [0], [3, 0], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not b0\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [1], [1], [0], [], [], [], [], [], [1], [3], [1], [0], [3, 1], [], [4], [], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2) \\g int(3.0)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [2], [1], [0], [], [], [], [], [], [1, 1], [2, 2], [2], [0], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(2.0) == int(2.0)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 1], [6, 0, 4, 1, 5], [], [], [1, 1], [], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(6.0) \\l int(0415.0)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 0], [0], [0, 0], [0], [0, 0], [], [], [0, 3], [2], [2, 2], [], [5, 3], [], [], [], [], [], [], [2, 0, 2, 1, 0], [], [0, 2, 0, 0], [1], [], [], [0], [4, 1, 0], [], [0], [4, 0, 0, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 4, 1, 0, 0, 1, 2, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveChr(i2).endswith(in1)\\nres0 = s1 != saveChr(divInt(i0,i2))\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 2, 2, 1, 2, 0, 1, 0, 0], [0, 0, 1], [1, 1, 2, 2, 0, 1, 2, 1], [0, 0], [0, 0, 0, 0, 0, 0], [], [], [2], [], [2, 0], [], [1], [1], [], [1], [0], [1, 1, 0, 0, 0, 1, 1, 1], [6, 6, 5, 4, 7, 2, 1, 7], [2, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 2, 0, 2, 0], [1, 1, 0, 0], [0, 2, 1, 0, 3, 2, 1, 0, 3, 0, 0, 1, 0, 2, 0, 0, 1, 1, 3, 3, 0, 0, 0], [1, 1, 0], [0, 1, 1, 4], [2, 1, 2], [0, 1], [4, 2, 2, 3, 1, 0, 2, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 0], [0, 0, 2, 4, 2, 1, 2, 1, 4, 4, 4, 0, 3, 3, 1, 2, 0, 1, 1], [3, 1, 3, 2], [1, 0], [0, 1, 2, 0], [2, 1, 2, 2, 1, 0, 2, 3, 2, 1], [11], [16, 2, 6], [4, 0, 3, 8, 5], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 3, 8, 2, 6, 0, 0, 1, 0, 2, 0, 1, 1, 0, 1, 1, 8, 8, 15, 4, 23, 3, 4, 3, 2, 9, 10, 2, 19, 4, 2, 4, 10, 1, 3, 5, 1], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i0\\ni0 -= divInt(int(6.0),i0)\\nin1 = s2\\nloopBreak% = 0\\nfor s2 in in0:{:\\nloopBreak% = 0\\nfor s1 in \"\"4q0\"\"[:min(mod(int(6.0),i0), max(i1, i1))].rstrip()[int(5472.0):i1]:{:\\ns0 = \"\"3\"\"[( i0 * i0 ):]\\nif saveChr(int(1.0)) not in s2.capitalize().lstrip():{:\\nb2 = False\\n:}\\ni1 = int(7.0)\\ns1 = ((\"\"cL8\"\" + s1[max(saveOrd(\"\"&\"\"), i2):i0]) + \"\"5g\"\")\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 7, 2, 1, 6, 6, 0, 4], [0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 0, 2, 2], [1, 0], [2, 0, 2, 0, 3, 0, 3, 1, 2, 0, 3, 1, 3, 2, 0, 3, 2, 3, 2, 2, 2, 1, 2, 3, 0, 2, 0, 1, 3, 0, 3, 3, 1, 3, 1, 0, 0, 2, 1, 0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0], [0, 4, 1, 1, 1, 1, 2, 2, 2, 3, 1], [0, 2, 1, 2, 1, 2], [0, 0, 1, 0, 0, 0], [2], [1], [], [4, 1, 0], [0], [], [], [2], [], [], [7], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 13, 2, 40, 11, 11, 6, 6, 1, 1, 0, 3, 1, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( i2 * divInt(i1,min(i2, saveOrd(getCharFromString(\"\"7\"\", int(27.0))))) )\\ni0 = ( i2 - max(int(2.0), max(( i1 * max(divInt(max(mod(divInt(( int(1.0) - divInt(abs(i2),divInt(i0,int(6.0))) ),abs(i2)),abs(len(s2))), int(6.0)),max(int(0.0), i0)), i2) ), ( int(4.0) * i2 ))) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [7], [], [], [1], [], [], [], [], [2], [1], [], [4, 1, 4], [2, 1], [4], [], [0], [25], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"Z\"\".capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [2], [0], [0], [0], [], [1], [], [0, 1], [0, 8], [0], [], [1, 2, 0, 0], [0], [3], [1], [], [1, 0], [1], [], [0, 3, 0, 1], [], [], [], [2], [], [], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 4, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s1 in (s0 + \"\"9\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 2, 2, 1, 0, 1, 0, 0, 2, 0, 1], [2, 1, 1, 1], [2, 0, 1, 0, 0, 0, 2], [], [0, 0, 0], [], [], [1, 2, 2, 2], [3, 1, 1], [1, 2, 1, 1, 0, 0, 2], [0, 0, 0], [2, 4], [2, 0], [], [], [1, 0, 1], [1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 4, 4, 5, 5, 6, 6, 6, 7, 1, 6, 8, 6, 6, 9, 4, 1, 5, 9], [1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 0, 1, 1], [0, 0], [0, 0, 1, 2, 1, 2, 3, 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 3, 3, 1, 3, 1], [1, 0, 0, 0, 0], [3, 3, 0, 3], [1, 1, 1, 1], [1, 1], [1, 0, 5, 0, 2, 0, 5], [1, 1], [], [0, 0, 4, 2, 0, 4, 0, 1, 2, 4, 1], [1, 3, 2], [0], [0, 1], [3, 0], [15], [], [], [18]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 2, 5, 0, 3, 0, 0, 4, 3, 6, 3, 1, 2, 0, 0, 1, 19, 19, 6, 1, 22, 5, 4, 4, 1, 5, 1, 0, 8, 2, 1, 1, 1, 0, 0, 0, 1], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s0\\nloopBreak% = 0\\nwhile i1 \\ge i2:{:\\nif in2 == saveChr(int(0.0)):{:\\nb1 = mod(int(4.0),( len(s0[int(4.0):i1]) - int(5.0) )) \\g int(56.0)\\n:}else:{:\\ni2 = ( i1 - ( ( i1 - int(6.0) ) - len(s2.lstrip()) ) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = min(int(67168669.0), len(\"\"/\"\")) \\g int(4159.0)\\nb2 = not b2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [], [], [], [], [2, 0], [], [0, 2], [], [5], [1], [], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 3, 7, 0, 4, 5, 5, 3, 1, 6, 9, 3, 8, 5, 2, 9, 7, 6, 8, 7, 9, 1, 1, 0, 8, 9, 4, 2], [2, 1, 1, 0, 1, 1, 1, 0, 1, 2, 1, 0, 2, 0, 1, 2, 2, 2, 1, 0, 1], [1], [0, 2, 3, 1, 3, 3, 1, 0, 2, 0, 3, 1, 2, 0, 2, 2, 2, 2, 0, 1, 0, 3, 0, 0, 2, 0, 2, 1, 2, 3, 2, 0, 1, 3, 1, 2, 2, 1, 0, 1, 3, 2, 0, 0, 0, 1, 2, 1, 1, 1, 1, 2, 3, 3, 0, 0, 1, 2, 2, 2, 3, 1, 2, 0, 3, 0, 1, 3, 2, 3, 1, 1, 3, 3, 2, 2, 3, 0, 3, 2, 1, 1, 2, 0, 3, 1, 1, 1, 0, 1, 3, 3, 1], [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 3, 1, 0, 4, 2, 4, 4, 3, 2, 0, 4, 4, 3, 3, 4, 1, 0, 4], [2, 1, 1, 2, 2, 0, 2, 0, 2, 1, 2, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1], [1, 1, 4, 2, 1, 0], [1, 1, 1, 1, 1, 1, 0, 1], [], [3, 0, 2, 4, 0, 2, 2, 2, 1, 4, 2, 2, 4, 2, 2, 1, 0, 1, 2, 4, 4, 3, 2, 2, 0, 2, 1, 2, 1, 4, 0, 4, 1, 4, 1, 0], [3, 0, 1, 0, 0, 1, 1, 2], [5], [2, 0, 1, 1, 2, 0, 1, 0, 0, 1, 2, 0, 0], [3, 0, 2, 3, 2, 0, 0, 1], [23, 24, 19], [19], [0, 1], [23, 7]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 0, 1, 0, 28, 28, 21, 0, 93, 25, 21, 12, 13, 6, 8, 0, 36, 8, 1, 13, 8, 3, 1, 2, 2], "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\nb0 = (s1 + s1.strip(\"\">\"\"[:i2][:divInt(max(int(1.0), max(max(int(3.0), i1), ( i1 * len(getCharFromString(saveChr(int(7.0))[( i0 - divInt(mod(divInt(( i1 - int(0.0) ),i1),max(i1, i0)),mod(i1,divInt(int(4.0),( min(mod(i2,int(5.0)), saveOrd(\"\"X\"\"[int(5.0):( divInt(int(3.0),i1) * int(1.0) )][:abs(( i0 * i2 ))])) + i0 )))) ):int(6.0)][divInt(int(9.0),int(3.0)):], int(8.0))) ))),int(5.0))][( saveOrd(in1) * saveOrd(\"\"0\"\") ):i1])[i2:]).endswith(getCharFromString(getCharFromString((s2[int(2.0):][:( ( ( len(\"\"$\"\"[int(9.0):( i2 + abs(i2) )]) * int(7.0) ) - min(divInt(saveOrd(\"\"1\"\"[int(6.0):int(8.0)]),saveOrd(saveChr(len(s1)))), mod(( len(saveChr(i1)) * saveOrd(\"\"Y\"\") ),divInt(int(7.0),int(9.0)))) ) - mod(i0,max(int(1.0), int(1.0))) )] + \"\"Tt\"\".capitalize()), int(0.0)), i1)[int(89.0):min(saveOrd(s0), int(42.0))])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [2], [1, 1], [], [], [], [], [0], [5], [0, 0, 2, 1], [0], [5], [2, 3], [1], [], [], [1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [9, 8, 5, 0, 6, 6, 5, 1, 1, 4, 2, 8, 9, 5, 1, 0, 7, 1, 7], [0, 0, 1, 1, 2, 1, 1, 1, 0, 1, 1, 2, 0, 0], [1, 1], [2, 3, 0, 1, 1, 3, 0, 3, 3, 1, 0, 2, 1, 3, 2, 2, 3, 0, 0, 2, 2, 2, 3, 3, 2, 0, 0, 1, 0, 0, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 0, 2, 2, 1, 1, 3, 3, 3, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 0, 2, 3, 3, 0, 2, 4, 1, 2], [2, 2, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [3, 3, 3, 5, 3, 3], [0, 0, 0, 1, 1, 1, 1], [], [1, 2, 3, 3, 3, 4, 2, 4, 0, 0, 1, 0, 1, 1, 2, 0, 0, 2, 4, 0], [3, 3, 2], [5, 3], [1, 1, 1, 2], [2, 0, 1, 3, 1, 1, 1], [9], [9, 14, 12, 21], [1], [14]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 0, 1, 4, 1, 1, 2, 1, 0, 0, 19, 19, 14, 2, 53, 16, 11, 7, 11, 6, 7, 0, 20, 3, 2, 4, 7, 1, 4, 1, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not ( \"\"1Jj+\"\".endswith((((in0.lstrip(in0)[:( max(i0, int(9.0)) * int(8.0) )].strip(\"\"o\"\") + in0) + \"\"m\"\") + \"\"v\"\")[:min(i0, min(abs(int(506.0)), i1))]) or mod(int(6.0),len(in2[:mod(( len(in0) * i1 ),i2)])) != mod(( mod(min(abs(mod(i1,i1)), int(5.0)),i1) - i0 ),divInt(divInt(mod(int(1.0),int(142.0)),int(8.0)),int(9.0))) ):{:\\ni1 -= ( mod(int(5.0),int(1.0)) - i1 )\\ni2 += mod(( int(07.0) + int(1.0) ),saveOrd(in0.capitalize()[max(abs(mod(i0,i0)), int(7.0)):]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [2], [], [0], [], [], [1, 2, 2], [], [2], [], [0], [], [], [], [], [1, 1, 0, 0, 1, 0, 1, 1, 1], [4, 9, 2, 6, 9, 5, 4, 8, 9], [0, 2, 1, 2, 0, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 1, 1, 2, 0, 2, 0, 0, 1, 2, 3, 0, 3, 2, 2, 1, 0, 0, 2, 2, 0, 1, 0, 3, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0], [0, 0, 2, 4, 4], [0, 1, 2], [0, 0, 1, 1, 0], [2, 2, 0, 1, 1], [0, 1, 1, 1], [], [3, 0, 2, 4, 4, 3, 2, 4, 2, 1, 4, 1, 0, 2, 1, 0, 2, 0], [1, 3, 3, 0], [2, 3], [2, 0, 2, 2, 1], [3, 2, 2, 0], [8], [], [1, 7], [27]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 10, 0, 29, 8, 5, 3, 5, 5, 4, 0, 18, 4, 2, 5, 4, 1, 0, 2, 1], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile (s2 + saveChr(int(4.0))[min(divInt(min(int(9.0), int(269.0)),divInt(i0,( i2 + i1 ))), int(54.0)):]) in (\"\"\\\\\\\\1\"\"[mod(abs(i2),saveOrd(getCharFromString(\"\"7\"\", mod(( int(8.0) - i0 ),i2)))):].lstrip(s2)[divInt(( i2 * int(9.0) ),i2):saveOrd(\"\"I\"\"[i1:])] + s0).strip():{:\\ns1 = s1[:i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 2, 3, 1, 2, 0, 1, 0], [0, 0, 0], [1, 0], [2, 1, 0, 0, 1, 0], [1, 1, 0], [5], [17, 21], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 13, 0, 52, 16, 8, 8, 8, 6, 3, 1, 16, 2, 0, 6, 3, 1, 2, 0, 0], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:len(getCharFromString(getCharFromString(in0[i0:int(0.0)], max(mod(i2,min(mod(int(7.0),len((\"\"r\"\" + s0[i2:( mod(( int(5.0) + i0 ),mod(int(7.0),( i0 + ( i1 * divInt(int(2.0),i1) ) ))) - ( min(i2, i0) + divInt(int(1.0),i0) ) )])[:i2])), mod(int(7.0),max(int(7.0), abs(i2))))), ( ( ( int(9.0) * int(8.0) ) - divInt(int(5.0),i1) ) - int(0.0) )))[int(4.0):int(8.0)], int(59.0)))] not in \"\"vF\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [3, 3, 2, 0, 3, 1, 1, 3, 1, 0, 0], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [0, 1, 1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0], [0, 1, 1, 1, 3], [17], [3, 7, 20], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 16, 16, 10, 0, 51, 15, 11, 7, 8, 6, 5, 1, 16, 3, 1, 3, 5, 1, 3, 0, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nloopBreak% = 0\\nwhile in1[len(in0):] not in \"\"Rd\"\":{:\\nb1 = ( abs(i0) != min(mod(int(0.0),int(7.0)), ( int(5.0) + len(getCharFromString(\"\"h\"\"[i1:divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len(saveChr(divInt(int(1.0),i1))), divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2)) )),i1)], ( int(8.0) - min(( min(i2, mod(divInt(( int(5.0) + int(0.0) ),( int(4.0) * i0 )),int(8.0))) - i0 ), int(59.0)) ))) )) or ( (\"\"u\"\" + s0.rstrip()).endswith(\"\";\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [2, 0, 1, 2, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0, 2], [17], [], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 7, 7, 9, 0, 31, 9, 6, 5, 4, 6, 2, 0, 16, 3, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[:len(in2)].startswith(in1[len(in1):]):{:\\nres0 = ( i0 != int(0.0) or ( getCharFromString(in0[i1:mod(i2,int(7.0))], i2)[int(5.0):abs(i1)].endswith(saveChr(mod(( divInt(int(7.0),i2) * ( saveOrd((\"\"R\"\" + s0.rstrip())) + divInt(i1,( len(\"\"3\"\") - ( int(2.0) * i0 ) )) ) ),( min(int(1.0), i0) - int(7.0) )))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [0, 0, 1, 9, 9, 2, 9, 6, 4, 1, 1, 2, 8, 0, 5, 6, 9, 8, 3, 9, 2, 4, 5, 5, 2, 0, 8, 3, 5, 8, 5, 4, 0, 2, 6, 2, 5, 5, 7, 9, 7, 6, 0, 0, 3, 6, 3, 8, 2, 2, 2, 2, 5, 3, 5, 5, 8, 5, 5, 2, 1, 2, 2, 0, 7, 0, 3, 5, 3, 0, 2, 5, 5, 5, 9, 7, 5, 9, 8, 5, 9, 2, 8, 0, 7, 6, 2, 8, 2, 0, 2, 4, 1, 7, 5, 3, 6, 2, 8, 3, 6, 4, 0, 9, 7, 5, 8, 4, 2, 6, 1, 8, 8, 5], [1, 1, 0, 1, 2, 1, 1, 0, 1, 0, 2, 1, 0, 0, 2, 1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1, 2, 0, 2, 1, 1, 0, 2, 1, 0, 1, 2, 1, 1, 1, 0, 0, 2, 0, 2, 1, 2, 0, 0, 0, 2, 1, 0, 0, 0, 2, 1, 0, 0, 2, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 1, 1, 2, 0, 1, 2, 0, 1, 2, 2, 2, 1, 0, 2, 2, 0, 2, 1, 0, 2, 0], [0], [0, 1, 2, 1, 2, 3, 2, 2, 1, 2, 3, 0, 2, 0, 3, 3, 3, 1, 3, 3, 3, 3, 2, 3, 3, 1, 0, 1, 0, 1, 3, 2, 1, 3, 2, 1, 0, 3, 0, 1, 0, 2, 1, 1, 0, 1, 2, 3, 1, 0, 1, 2, 0, 2, 0, 2, 2, 3, 0, 2, 2, 1, 0, 2, 1, 2, 0, 3, 3, 3, 1, 3, 1, 2, 0, 2, 0, 1, 0, 2, 3, 1, 3, 2, 1, 3, 2, 3, 0, 3, 1, 1, 3, 2, 2, 2, 2, 3, 2, 3, 2, 2, 3, 3, 2, 1, 1, 3, 0, 2, 0, 0, 0, 1, 3, 1, 0, 3, 0, 3, 0, 1, 0, 3, 2, 2, 2, 1, 1, 1, 2, 2, 0, 1, 2, 3, 2, 0, 1, 2, 2, 2, 3, 2, 0, 1, 3, 3, 1, 1, 3, 2, 3, 0, 3, 1, 3, 2, 2, 1, 0, 2, 2, 0, 3, 3, 0, 2, 2, 0, 2, 2, 3, 2, 0, 3, 1, 3, 2, 0, 0, 3, 3, 0, 1, 3, 3, 2, 1, 2, 1, 1, 2, 3, 0, 1, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 3, 1, 2, 2, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 0, 1, 1, 0, 2, 1, 3, 1, 0, 0, 3, 1, 2, 3, 3, 3, 2, 2, 3, 3, 1, 0, 3, 2, 1, 1, 0, 1, 1, 1, 3, 2, 3, 2, 2, 1, 0, 2, 2, 2, 0, 3, 0, 2, 1, 2, 3, 3, 0, 3, 1, 1, 0, 1, 1, 3, 1, 3, 0, 1, 3, 0, 3, 3, 1, 3, 2, 3, 3, 1, 3, 3, 0, 0, 0, 2, 2, 3, 1, 2, 2, 3, 3, 3, 1, 0, 1, 3, 2, 3, 3, 3, 2, 2, 3, 2, 0, 0, 2, 1, 3, 0, 0, 2, 0, 0, 3, 1, 3, 1, 3, 2, 1, 3, 0, 0, 0, 2, 1, 1, 0, 0, 3, 1, 2, 0, 2, 3, 0, 3, 0, 3, 0, 0, 3, 2, 2, 1, 0, 1, 2, 1, 2, 2, 2, 3, 3, 3, 0, 2, 3, 1, 0, 0, 3, 0, 0, 0, 2, 2, 1, 0, 1, 2, 3, 1, 3, 1, 0, 3, 1, 3, 2, 2, 3, 3, 1, 2, 2, 3, 2, 1, 3, 3, 3, 2, 1, 3, 0, 0, 0, 2, 2, 1, 3, 0, 1, 2, 1, 0, 0, 2, 3, 3, 2, 3, 0, 0, 1, 3, 2, 2, 1, 1, 1, 3, 2, 1, 0, 0, 1, 2, 3, 2, 0, 3, 0, 2, 0, 3, 1, 0, 3, 1, 1, 2, 1, 1, 2, 1, 0, 0, 3, 1, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [4, 2, 2, 2, 3, 1, 3, 4, 0, 4, 0, 2, 0, 0, 4, 1, 1, 3, 1, 2, 1, 2, 2, 1, 1, 1, 4, 0, 3, 3, 2, 2, 0, 1, 1, 3, 3, 0, 4, 1, 2, 0, 1, 0, 0, 0, 4, 0, 2, 0, 0, 4, 3, 2, 1, 0, 0, 1, 3, 4, 1, 2, 2, 1, 0, 0, 0, 2, 3, 3, 4, 0, 1, 0, 4, 2, 1, 1, 1, 2, 1, 4, 4, 0, 3, 4, 3, 0, 3, 1, 1, 0, 4, 0, 1, 0, 3, 1, 3, 0, 3, 0, 0, 4, 2, 0, 4, 0, 1, 1, 2, 3, 4, 0, 0, 2, 4, 3, 0, 1, 0, 0, 0, 3, 3, 3, 1], [0, 1, 2, 2, 2, 1, 0, 2, 0, 1, 1, 1, 0, 2, 0, 2, 2, 2, 0, 0, 1, 1, 2, 2, 0, 2, 2, 2, 2, 1, 0, 2, 2, 0, 0, 1, 1, 1, 1, 2, 2, 1, 2, 1, 0, 2, 0, 1, 1, 0, 2, 2, 0, 0, 0, 2, 2, 0, 2, 0, 1, 2, 2, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0], [0, 5, 3, 1, 2, 0, 4, 0, 3, 3, 3, 2, 1, 4, 0, 2, 4, 3, 4, 4, 2, 4, 2, 0, 5], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [3, 1, 4, 2, 2, 3, 4, 1, 1, 1, 4, 0, 2, 4, 1, 0, 2, 4, 4, 4, 2, 4, 1, 3, 4, 2, 4, 4, 4, 0, 2, 0, 4, 4, 0, 2, 2, 0, 2, 0, 4, 2, 0, 1, 2, 0, 1, 2, 1, 1, 3, 0, 3, 0, 3, 2, 3, 2, 1, 2, 4, 0, 2, 2, 0, 1, 4, 1, 4, 1, 3, 4, 1, 1, 2, 2, 2, 2, 1, 2, 1, 0, 0, 2, 2, 4, 1, 1, 0, 0, 2, 0, 4, 2, 2, 1, 2, 4, 2, 0, 4, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2, 1, 0, 1, 2, 0, 0, 4, 0, 4, 0, 4, 4, 2, 1, 4], [3, 2, 0, 0, 1, 3, 3, 2, 2, 0, 0, 0, 0, 1, 2, 2, 0, 1, 3, 0, 3, 2, 1, 2, 0, 1, 2, 0, 1, 1], [4, 5, 3, 3, 3], [1, 0, 2, 1, 1, 2, 0, 2, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 2, 0, 1, 1, 1, 1, 1, 2, 2, 0, 1, 1, 2, 0, 1, 0, 2, 0, 1, 1, 2, 2], [3, 2, 3, 0, 1, 3, 0, 0, 0, 0, 2, 2, 0, 2, 2, 3, 3, 1, 1, 2, 3, 1, 3, 1, 1, 3], [4, 2, 24, 16, 12, 8], [5, 22, 23, 7, 0, 5], [7, 3, 9, 3, 0, 7], [30, 7, 19, 30, 29, 24, 22, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 114, 109, 1, 466, 121, 127, 64, 57, 25, 26, 0, 126, 30, 5, 40, 26, 6, 6, 6, 8], "tree_depth": 98, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\ns0 = (\"\"_\"\" + (\"\"7\"\".capitalize() + \"\"$\"\")[int(0.0):( int(0.0) + divInt(saveOrd(\"\"E\"\"),( ( int(1.0) - ( abs(i0) * mod(i1,abs(abs(len(getCharFromString(in2, int(9.0)))))) ) ) * max(len(getCharFromString(\"\"f\"\", saveOrd(in0))[min(divInt(saveOrd(saveChr(min(int(9.0), i2))[:int(2.0)]),i1), int(9.0)):]), abs(divInt(int(6.0),min(( int(4.0) * i1 ), min(i0, int(1.0)))))) )) )][:i1].rstrip(\"\":CY\"\".capitalize()[:( int(1.0) - int(28.0) )].lstrip((getCharFromString(getCharFromString(getCharFromString(s1, i0), int(0.0)), divInt(saveOrd(s2[int(5.0):i2]),int(6.0)))[divInt(i1,( i0 + ( divInt(max(i0, ( divInt(int(9.0),i2) * divInt(int(8.0),divInt(i1,max(len(getCharFromString(saveChr(max(int(3.0), abs(int(9.0)))), ( i1 + ( i1 - int(2.0) ) ))), i1))) )),mod(max(int(4.0), abs(divInt(int(5.0),abs(divInt(max(i1, max(int(5.0), int(2.0))),max(( ( mod(( saveOrd(s0) - ( min(( divInt(len(in1[len(s0[mod(int(0.0),int(8.0)):abs(i1)]):( i0 - i2 )][i2:]),int(3.0)) + abs(int(5.0)) ), i0) * min(i1, max(i1, int(8.0))) ) ),i0) + max(mod(divInt(divInt(int(5.0),int(4.0)),int(0.0)),mod(divInt(i1,int(2.0)),mod(len(in0[divInt(i1,int(6.0)):( ( divInt(len(\"\"Q\"\"),( i2 * int(2.0) )) * min(saveOrd(in0[:int(5.0)]), int(5.0)) ) * max(( abs(i0) + min(int(7.0), max(( ( int(9.0) + i2 ) - mod(( i1 - min(min(i1, ( ( i0 * divInt(( min(( i2 * saveOrd(\"\"M\"\") ), int(7.0)) + min(( i1 * i0 ), abs(min(i1, int(6.0)))) ),min(saveOrd(\"\"3\"\"[( int(0.0) * mod(int(0.0),int(3.0)) ):]), mod(len(\"\"9\"\"),i2))) ) * int(6.0) )), int(3.0)) ),( divInt(int(8.0),int(2.0)) * abs(i1) )) ), i1)) ), int(2.0)) )].capitalize()),( i1 - max(int(2.0), ( ( i0 + mod(i0,i2) ) * i0 )) )))), i2) ) * min(i1, min(i2, i0)) ), int(2.0))))))),int(5.0))) + i0 ) )):].capitalize() + (in0 + (s2 + ((\"\"I\"\"[divInt(int(3.0),max(int(5.0), i0)):i2] + s1.capitalize()[len(in1[int(5.0):( saveOrd(\"\"3\"\") + max(abs(( ( abs(max(int(8.0), i1)) - min(mod(int(5.0),int(5.0)), i0) ) - int(2.0) )), int(1.0)) )][int(2.0):min(( min(mod(( int(2.0) - i0 ),( ( ( i0 - abs(i2) ) * ( int(0.0) * ( len(getCharFromString(\"\"0\"\", len(saveChr(i1)))) - saveOrd(\"\"_\"\") ) ) ) * int(7.0) )), int(0.0)) - i0 ), int(3.0))]):int(5.0)])[:min(int(3.0), max(i0, int(0.0)))] + (\"\"^\"\".lstrip(\"\"w\"\") + \"\"x\"\"[:min(i2, saveOrd(\"\"7\"\"[:abs(int(2.0))]))][:max(mod(max(max(int(5.0), abs(max(i1, i1))), i1),( divInt(saveOrd(s0),int(5.0)) + divInt(mod(saveOrd(s2),min(len(getCharFromString(\"\"?\"\", int(5.0))[:i0][:int(9.0)]), saveOrd(\"\"h\"\"))),( len(in1) * min(len(in0), ( ( max(mod(i1,i1), divInt(int(7.0),max(i0, i1))) + ( i0 - i1 ) ) - min(int(5.0), saveOrd(in1[int(9.0):])) )) )) )), min(( int(8.0) + max(i1, i1) ), i1))][divInt(int(5.0),int(9.0)):i1][i2:])))))).strip(\"\"=\"\"[min(int(2.0), mod(i0,mod(len(in1[:i2].capitalize()[:max(i0, len(saveChr(i2)))]),i2))):min(mod(mod(int(8.0),i2),int(0.0)), ( int(7.0) * divInt(( mod(len(getCharFromString(\"\"a\"\"[:min(min(i2, mod(saveOrd(s2),int(6.0))), i2)][:i2][abs(i1):i1][i2:], divInt(mod(int(2.0),i0),int(8.0)))[( min(int(2.0), saveOrd(\"\"f\"\")) * int(0.0) ):i1][:min(int(2.0), max(( ( max(abs(int(4.0)), ( ( len(in1[mod(int(1.0),saveOrd(s2)):]) + min(min(( int(7.0) + abs(i2) ), i0), i1) ) + ( divInt(int(5.0),saveOrd(saveChr(i2))) * int(3.0) ) )) * mod(int(6.0),i2) ) + i2 ), divInt(len(s0),min(mod(max(i1, i0),int(2.0)), min(( divInt(int(8.0),int(3.0)) * int(6.0) ), min(divInt(int(4.0),i2), i2))))))][int(0.0):( min(divInt(i0,len(in2.capitalize())), i2) + ( i1 - len(getCharFromString(saveChr(int(9.0)), i0)) ) )][len(\"\"\\\\\\\\\"\"[int(7.0):]):].capitalize()),int(5.0)) * ( int(8.0) * int(4.0) ) ),( int(2.0) + i2 )) ))][i0:].lstrip(saveChr(max(int(618.0), int(85.0)))))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [8, 0, 0], [2, 1, 2, 2, 2, 1, 0], [1], [0, 3, 2, 1, 0, 0, 0, 1, 3, 0, 0], [0], [0, 1], [1, 0], [], [2, 0], [1], [], [3, 2, 2, 3, 4, 1, 4, 0], [1, 0], [], [1, 1], [1], [], [9], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 7, 1, 11, 1, 2, 2, 0, 2, 1, 0, 8, 2, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\ns2 = ((saveChr(min(( int(80.0) + i2 ), i2)) + \"\"j\"\")[:i2][:int(0.0)] + getCharFromString(s0, max(i1, i0)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 0], [], [0, 0], [], [], [0], [], [0], [], [], [1], [], [0], [], [1], [4], [0, 2], [1], [1, 1, 0, 1, 0, 2, 3, 0, 2, 2, 0, 2, 1, 2, 1, 3, 0, 3, 1, 0], [], [], [], [], [1, 1, 5, 2], [0, 0, 0, 0, 0, 1], [], [3, 2, 4, 4, 0, 3, 1, 0], [2, 3], [0], [1], [2, 1, 2, 1, 1, 0], [11], [18, 11, 5], [7, 8], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 3, 6, 0, 8, 2, 1, 1, 6, 1, 3, 2, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = (s1.lstrip().capitalize()[:int(4.0)] + (\"\"7s8lfL\"\" + in2))\\nb0 = True\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 0, 1, 0, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 2, 2, 1, 1, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 2, 2, 0, 1, 1, 1], [2, 1, 1, 0, 2, 2, 1, 0, 1, 2, 2, 1, 2, 2, 1, 2, 0, 2, 2, 0, 2, 2, 1, 1, 2, 0, 1, 0], [0, 1, 2, 1, 2, 1, 2, 1, 1, 0, 2, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 2, 1, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [3, 3, 2, 0, 2, 0, 1, 3, 1, 0, 2, 3], [5, 0, 3, 4, 2, 5, 5, 2, 4, 3, 3, 1, 4, 2, 0, 3, 5, 0], [0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 1, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 1, 2, 1, 1, 0, 1, 0, 1, 2, 2, 2, 1, 1, 1, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 4, 0, 4, 2, 5, 5, 5, 4, 2, 0, 0], [0, 0, 1, 0, 3, 2, 2, 3, 0, 3, 3, 2, 3], [0, 1, 1, 0, 1], [0], [1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 5, 4, 6, 5, 1, 2, 3, 1, 2, 3, 1, 0, 6, 5, 0, 5, 7, 3, 8, 2, 0, 3, 5, 8, 8, 0, 1, 0, 9, 8, 6, 4, 6, 4, 0, 1, 1, 5, 8, 9, 3, 6, 6, 1, 0, 2, 6, 4, 7, 4, 0, 2, 7, 7, 3, 0, 7, 7, 0, 0, 8, 7, 2, 1, 1, 7, 7, 5, 1, 7, 3, 0, 3, 7, 2, 1, 2, 5, 2, 4, 9, 2, 5, 3, 6, 3, 9, 2, 8, 0, 4, 0, 9, 6, 1, 1, 0, 5, 7, 3, 2, 4, 8, 4, 5, 2, 8, 7, 6, 3, 0, 3, 7, 4, 4, 8, 0, 9, 6, 4, 2, 6, 5, 8, 8, 3, 3, 2, 3, 6, 9, 3, 5, 9, 0, 9, 4, 1, 5, 0, 1, 0, 1, 7, 6, 2, 2, 3, 8, 4, 0, 7, 7, 1, 8, 2, 8, 9, 1, 7, 4, 8, 9, 1, 1, 5, 9, 0, 1, 9, 7, 1, 9, 5, 8, 6, 2, 9, 3, 4, 0, 0, 6, 8, 5], [0, 1, 1, 0, 0, 0, 2, 0, 2, 0, 1, 0, 0, 2, 0, 2, 1, 0, 2, 1, 1, 1, 0, 0, 2, 2, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 2, 2, 2, 2, 1, 1, 2, 0, 0, 1, 0, 2, 2, 0, 1, 1, 0, 0, 0, 2, 0, 2, 2, 1, 2, 0, 0, 1, 1, 1, 0, 2, 1, 2, 0, 0, 0, 2, 2, 2, 1, 0, 1, 2, 2, 0, 1, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 2, 2, 2, 0, 1, 1, 0, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 2, 1, 0, 2, 0, 2, 1, 2, 0, 0, 2, 2, 0, 2, 0, 1, 1, 1, 1, 2, 2, 2, 1, 0, 0, 0, 2, 2, 1, 2, 0, 2, 0, 2, 0, 2, 2, 0, 1, 0, 2, 2, 2, 1, 2, 0, 1, 0, 1, 1, 0, 0, 2, 0, 1, 0, 2, 2, 1, 2, 2], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [2, 3, 3, 2, 2, 0, 2, 0, 2, 2, 1, 2, 0, 2, 1, 2, 1, 1, 2, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 0, 3, 1, 2, 2, 1, 2, 0, 1, 2, 2, 2, 2, 1, 3, 2, 2, 1, 1, 3, 1, 1, 3, 0, 1, 1, 1, 3, 0, 2, 2, 2, 3, 2, 3, 0, 0, 0, 3, 0, 3, 2, 3, 1, 2, 0, 3, 2, 2, 3, 3, 3, 1, 0, 3, 1, 0, 1, 1, 1, 2, 0, 2, 1, 0, 3, 3, 3, 1, 2, 0, 1, 0, 2, 2, 2, 1, 0, 3, 0, 3, 1, 3, 0, 3, 2, 3, 3, 0, 0, 3, 0, 3, 3, 0, 2, 2, 1, 2, 1, 0, 0, 3, 3, 0, 0, 0, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 0, 3, 2, 0, 2, 1, 1, 3, 0, 0, 2, 0, 3, 2, 2, 2, 2, 1, 2, 3, 0, 1, 1, 2, 2, 1, 0, 1, 3, 2, 1, 1, 0, 0, 2, 3, 1, 3, 3, 2, 2, 1, 3, 0, 2, 0, 2, 1, 3, 3, 2, 3, 0, 0, 3, 0, 2, 2, 0, 0, 3, 0, 3, 1, 0, 3, 1, 1, 3, 2, 0, 3, 3, 1, 0, 2, 3, 3, 1, 2, 3, 0, 1, 3, 2, 0, 1, 1, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 1, 1, 3, 1, 1, 3, 3, 3, 1, 0, 3, 0, 3, 1, 3, 3, 1, 3, 3, 2, 2, 2, 3, 0, 2, 2, 1, 2, 3, 2, 3, 2, 0, 2, 1, 2, 3, 3, 0, 0, 1, 3, 0, 0, 1, 3, 0, 2, 2, 0, 3, 2, 1, 0, 0, 1, 1, 0, 3, 2, 2, 0, 2, 3, 3, 0, 2, 1, 1, 1, 2, 1, 1, 1, 3, 2, 2, 0, 1, 2, 0, 2, 1, 3, 3, 1, 0, 3, 1, 0, 1, 1, 3, 0, 1, 2, 2, 0, 0, 3, 0, 3, 2, 3, 3, 1, 3, 2, 0, 0, 3, 1, 0, 0, 1, 1, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 0, 2, 2, 0, 1, 3, 1, 3, 1, 3, 1, 2, 1, 2, 1, 1, 3, 3, 0, 0, 1, 1, 0, 2, 3, 1, 2, 1, 1, 3, 2, 1, 0, 2, 1, 2, 3, 2, 1, 0, 0, 3, 1, 0, 0, 3, 3, 0, 0, 0, 1, 3, 0, 3, 2, 3, 3, 3, 1, 2, 3, 3, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 2, 1, 3, 0, 1, 2, 1, 2, 2, 3, 3, 2, 1, 0, 2, 2, 2, 2, 1, 3, 3, 1, 2, 1, 0, 3, 1, 2, 0, 1, 0, 0, 0, 2, 2, 2, 2, 2, 1, 1, 3, 3, 1, 3, 3, 0, 0, 3, 3, 1, 2, 0, 3, 1, 1, 3, 3, 1, 1, 2, 1, 1, 0, 3, 1, 2, 0, 3, 0, 1, 2, 2, 2, 3, 3, 0, 0, 1, 0, 3, 1, 2, 2, 0, 0, 3, 2, 2, 1, 0, 1, 2, 3, 2, 2, 1, 3, 1, 1, 2, 3, 1, 3, 1, 0, 1, 2, 3, 3, 2, 0, 1, 2, 3, 2, 3, 0, 2, 1, 0, 3, 0, 1, 0, 2, 3, 3, 3, 2, 0, 1, 0, 3, 2, 0, 3, 3, 1, 0, 3, 2, 0, 0, 3, 2, 2, 3, 2, 3, 2, 2, 2, 0, 0, 0, 0, 1, 3, 3, 3, 3, 1, 3, 3, 1, 1, 3, 1, 2, 2, 0, 2, 2, 0, 0, 3, 3, 2, 1, 1, 3, 0, 3, 0, 0, 2, 1, 2, 1, 2, 2, 3, 3, 0, 1, 2, 1, 2, 2, 3, 2, 1, 1, 1, 0, 0, 3, 2, 0, 3, 2, 1, 3, 1, 2, 1, 2, 3, 0, 3, 3, 1, 2, 0, 1, 3, 3, 3, 1, 0, 3, 0, 3, 0, 3, 3, 1, 3, 0, 3, 0, 3, 1, 3, 2, 2, 3, 3, 2, 0, 3, 0, 0, 0, 0, 1, 3, 1, 3, 2, 3, 1, 1, 0, 0, 1, 0, 1, 3, 1, 0, 3, 2, 0, 0, 0, 2, 1, 0, 1, 2, 1, 1, 0, 3], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 4, 4, 1, 0, 0, 1, 2, 2, 2, 4, 1, 2, 2, 3, 4, 1, 3, 1, 0, 3, 1, 3, 0, 0, 1, 2, 2, 4, 1, 2, 4, 1, 0, 3, 4, 3, 2, 1, 4, 0, 0, 4, 1, 0, 1, 1, 1, 1, 0, 1, 1, 2, 0, 3, 1, 3, 2, 3, 3, 3, 0, 2, 4, 4, 4, 4, 0, 2, 4, 3, 2, 3, 2, 4, 3, 4, 0, 3, 1, 0, 0, 4, 3, 2, 3, 1, 2, 3, 3, 1, 1, 1, 4, 2, 0, 2, 3, 3, 0, 1, 3, 1, 4, 4, 2, 1, 4, 1, 4, 2, 1, 0, 4, 1, 3, 0, 1, 1, 1, 4, 3, 2, 0, 4, 0, 1, 4, 3, 0, 2, 4, 2, 4, 3, 0, 3, 4, 2, 0, 3, 0, 3, 4, 4, 4, 0, 4, 0, 2, 0, 0, 3, 2, 3, 0, 2, 0, 3, 0, 3, 4, 0, 3, 0, 4, 3, 4, 2, 4, 1, 3, 3, 0, 3, 2, 1, 4, 2, 1, 4, 2, 2, 4, 4, 1, 3, 1, 2, 1, 4], [0, 1, 1, 2, 0, 2, 1, 2, 2, 2, 1, 1, 0, 2, 0, 2, 2, 1, 2, 2, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 2, 2, 1, 0, 0, 2, 2, 0, 2, 0, 1, 1, 2, 1, 2, 1, 0, 2, 1, 1, 2, 1, 2, 2, 0, 0, 2, 1, 0, 1, 2, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 1, 2, 1, 1, 0, 0, 2, 2, 2, 0, 2, 0, 1, 1, 0, 1, 0, 0, 2, 1, 0, 0, 2, 2], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 3, 0, 0, 5, 2, 1, 5, 5, 1, 5, 0, 3, 5, 4, 3, 0, 0, 2, 4, 4, 1, 2, 0, 1, 2, 3, 0, 5, 5, 3, 3, 5, 2, 3, 1, 3, 1, 1, 5, 2, 0, 1, 5, 0, 5, 4, 4, 5, 3, 1, 2, 0, 3, 4, 3, 3, 0, 2, 1, 4, 0, 0, 0, 4, 3], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [2, 0, 2, 1, 1, 0, 4, 2, 2, 2, 2, 1, 2, 2, 4, 4, 0, 4, 1, 1, 4, 0, 3, 4, 4, 2, 1, 2, 4, 0, 4, 1, 4, 1, 0, 4, 2, 4, 0, 1, 1, 2, 4, 0, 4, 2, 0, 1, 1, 2, 4, 4, 2, 4, 1, 2, 0, 1, 0, 0, 1, 0, 1, 2, 1, 2, 2, 2, 4, 4, 2, 0, 1, 2, 4, 0, 1, 4, 2, 2, 1, 2, 2, 4, 4, 1, 1, 4, 2, 1, 0, 1, 0, 0, 0, 4, 2, 1, 0, 2, 0, 0, 0, 1, 1, 4, 2, 0, 0, 0, 1, 4, 2, 4, 4, 2, 0, 2, 4, 4, 1, 0, 0, 4, 1, 1, 0, 4, 4, 4, 2, 4, 1, 1, 0, 3, 2, 1, 0, 3, 1, 3, 0, 4, 1, 2, 2, 0, 0, 1, 0, 1, 4, 4, 4, 1, 4, 0, 2, 4, 1, 0, 1, 1, 4, 0, 2, 1, 4, 4, 2, 4, 2, 2, 4, 2, 1, 2, 1, 4, 1, 2, 1, 4, 4, 4, 2, 0, 2, 1, 1, 4, 1, 2, 0, 4, 4, 4, 4, 1, 0, 1, 2, 1, 0, 0, 0, 2, 2, 2, 0, 2, 0, 2, 1, 0, 2, 1, 4, 0, 1, 1, 2, 0, 4, 4, 4, 4, 4, 2, 0, 0, 1, 2, 2, 4, 0, 0], [3, 0, 3, 1, 2, 1, 1, 1, 2, 0, 0, 1, 1, 1, 2, 2, 3, 3, 1, 2, 0, 2, 3, 3, 2, 0, 0, 3, 3, 1, 1, 0, 0, 3, 3, 1, 0, 0, 3, 0, 2, 2, 2, 2, 1, 0, 0, 2, 3, 1, 3, 1, 2, 1, 3, 2, 3, 1, 1, 2, 3, 3, 2], [4, 0, 4, 1, 1, 2, 0, 3, 2, 0, 5, 4, 0, 2, 5, 4, 2], [0, 2, 0, 0, 1, 0, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 0, 1, 2, 2, 2, 2, 0, 2, 0, 0, 2, 2, 0, 1, 1, 0, 0, 0, 2, 1, 2, 1, 0, 2, 1, 2, 0, 1, 0, 1, 1, 2, 1, 0, 0, 2, 1, 0, 0, 0, 1, 0, 0], [2, 2, 3, 0, 3, 1, 1, 0, 0, 1, 0, 1, 3, 2, 3, 3, 1, 2, 1, 2, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1, 3, 1, 1, 3, 0, 2, 3, 0, 3, 1, 0, 3, 2, 2, 1, 1, 2, 3, 1, 2, 0, 1, 1, 2, 1, 0, 1, 1, 0, 0, 3, 0, 0, 3, 3, 0, 1, 2], [20, 7, 25, 19, 1, 4, 7, 20, 7, 4, 7, 7, 6, 10], [12, 11, 0, 19, 17, 10, 8, 4, 12, 6, 14, 1, 25, 20, 16, 11, 25, 23, 0, 4, 8], [6, 0, 8, 1, 9, 5, 4, 2, 2, 0, 0, 8, 5, 2, 0, 8], [18, 14, 0, 0, 13, 17, 30, 29, 0, 14, 13, 4, 15, 26, 30, 10, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 56, 56, 28, 28, 6, 11, 0, 0, 12, 18, 43, 18, 12, 13, 5, 1, 9, 188, 188, 187, 13, 730, 192, 191, 95, 100, 67, 68, 6, 238, 63, 17, 59, 68, 14, 21, 16, 17], "tree_depth": 81, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\nloopBreak% = 0\\nwhile b2:{:\\nif ( min(saveOrd(in0[mod(( i0 + divInt(i1,( mod(int(1.0),( i1 - ( int(0.0) - ( int(1.0) * int(5.0) ) ) )) + divInt(i0,i0) )) ),( int(4.0) * saveOrd(\"\"6\"\"[divInt(max(i0, ( i2 - i0 )),min(int(6.0), divInt(( int(5.0) * ( i2 * int(1.0) ) ),mod(mod(mod(mod(int(2.0),min(divInt(( int(3.0) * int(1.0) ),max(int(2.0), int(3.0))), abs(i0))),int(1.0)),int(0.0)),int(6.0))))):]) )):abs(i1)]), ( ( mod(abs(divInt(saveOrd(\"\"0\"\"),i0)),i0) - i2 ) - max(i0, abs(( abs(int(5.0)) + divInt(i2,len(in2)) ))) )) * divInt(divInt(saveOrd(\"\"/\"\"[max(len(getCharFromString(in0.lstrip(), int(0.0))[:i1][:max(int(5.0), i0)]), int(7.0)):int(3.0)][:int(8.0)][mod(i2,( int(2.0) + i1 )):min(len(saveChr(max(int(0.0), ( i1 * int(3.0) )))), i1)][( mod(divInt(int(5.0),i0),len(\"\"U\"\")) * i0 ):min(int(8.0), min(i2, max(( abs(abs(i2)) - i0 ), saveOrd(\"\"+\"\"))))].rstrip(s0.capitalize())),i1),max(abs(i2), mod(divInt(int(8.0),( int(0.0) * i1 )),i0))) ) != saveOrd((saveChr(max(i0, i0)) + saveChr(i0))):{:\\nif \"\"m\"\"[:i0] not in saveChr(mod(mod(int(1.0),min(i0, len(s0))),i1))[mod(divInt(i2,saveOrd(\"\"l\"\".capitalize())),mod(i0,divInt(int(0.0),int(9.0)))):]:{:\\ni0 = len(getCharFromString(\"\"H\"\", i2))\\nin2 = s2\\n:}else:{:\\nloopBreak% = 0\\nfor s1 in getCharFromString(saveChr(i2)[( i2 * abs(mod(( ( mod(int(8.0),( max(i2, int(6.0)) + int(4.0) )) - mod(mod(int(6.0),i1),int(4.0)) ) + saveOrd(in2) ),( int(0.0) + int(1.0) ))) ):], i1):{:\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nin2 = \"\"ZaT\"\"\\n:}\\nloopBreak% = 0\\nwhile True:{:\\ni0 -= mod(min(int(1.0), min(saveOrd(\"\"t\"\"), mod(mod(int(5.0),max(i1, divInt(i0,( int(8.0) + min(max(mod(max(i2, i2),max(i0, mod(divInt(i1,i1),max(i0, min(int(9.0), i0))))), max(int(3.0), int(6.0))), max(divInt(i0,abs(min(int(6.0), i2))), divInt(len(saveChr(max(int(1.0), ( len(s1) + i0 )))[:int(0.0)]),abs(( i2 + int(2.0) ))))) )))),int(6.0)))),int(4740.0))\\nloopBreak% = 0\\nwhile mod(i2,( ( i1 - ( divInt(len(saveChr(i2)),int(2.0)) + int(7.0) ) ) * len(in2[int(7.0):]) )) \\l int(307.0):{:\\nif b0:{:\\nloopBreak% = 0\\nfor s0 in \"\"\"\":{:\\nif ( not \"\"8\"\".startswith(\"\"\"\".rstrip(in0[len(\"\"*\"\"):])[min(abs(int(7.0)), i0):].capitalize().capitalize()[saveOrd(in2):]) and in1 in \"\"r\"\" ):{:\\nloopBreak% = 0\\nwhile i0 \\ge saveOrd(in0):{:\\ns0 = \"\"1\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile int(0.0) \\le saveOrd(\"\"k\"\"[saveOrd(saveChr(int(0.0)).rstrip()[min(abs(( mod(mod(saveOrd(s0[i1:]),( ( int(8.0) * ( len(\"\"9\"\") - ( abs(divInt(i1,mod(int(7.0),( len(s2.capitalize()[abs(i1):]) + i0 )))) + int(2.0) ) ) ) * saveOrd(\"\"i\"\") )),i2) * i1 )), int(1.0)):][len(getCharFromString(\"\"5\"\"[i2:][mod(( i0 + saveOrd(\"\".\"\".rstrip().capitalize()[( int(1.0) * i0 ):i0][int(7.0):int(7.0)]) ),i2):min(( ( i2 + ( len(\"\"4\"\") - max(i2, ( int(5.0) - int(1.0) )) ) ) * int(7.0) ), ( int(3.0) - int(0.0) ))], int(3.0))):][:min(divInt(( i1 * int(7.0) ),divInt(i0,mod(int(2.0),min(saveOrd(\"\"2\"\"[int(1.0):].strip()), i1)))), len(in1))]):int(2.0)]):{:\\ni2 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 -= int(5.0)\\nif \"\"e\"\".startswith(in1):{:\\nloopBreak% = 0\\nwhile not int(2.0) == abs(i1):{:\\nb2 = int(4.0) != ( mod(i2,i2) + len(s1) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ns2 = s0\\n:}else:{:\\ni1 *= i1\\nb0 = \"\"_\"\"[max(( abs(len(s1)) - int(9.0) ), len(s2[divInt(i0,i1):max(int(2.0), i0)])):].capitalize() == in0\\nloopBreak% = 0\\nwhile ( i1 != int(5.0) or s0.endswith(\"\"2\"\") ):{:\\ni1 = int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( i0 - divInt(mod(mod(i1,divInt(mod(( i0 * i1 ),mod(divInt(i2,int(6.0)),max(int(3.0), max(int(9.0), saveOrd(\"\"^\"\"))))),int(2.0))),divInt(int(8.0),mod(int(0.0),int(4.0)))),abs(min(i1, i2))) ) == int(0.0):{:\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nfor in2 in getCharFromString(in2[:int(9.0)], i1):{:\\nres0 = in0.endswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin2 = \"\"m\"\"\\ns2 = getCharFromString(in0[( abs(int(6.0)) - ( int(1.0) * int(1.0) ) ):len(saveChr(( int(0.0) * i2 ))[mod(int(5.0),divInt(len(saveChr(( int(7.0) + i2 ))),i2)):min(int(3.0), i2)])].lstrip(\"\"\"\").lstrip()[:i0], max(len(s1), i1))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i1 \\le i0:{:\\ni1 = int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( max(i1, saveOrd(in0)) \\ge ( saveOrd(getCharFromString(\"\"go+B0\"\", abs(max(int(484.0), mod(saveOrd(\"\"*\"\"),max(int(5.0), ( int(2.0) + saveOrd(s1) ))))))) * i2 ) or ( ( ( mod(int(8.0),i2) - mod(abs(int(763.0)),( int(037.0) + max(i1, int(4.0)) )) ) - ( int(48.0) * divInt(divInt(min(saveOrd(getCharFromString(saveChr(( int(0.0) * i1 ))[divInt(( ( divInt(int(9.0),max(len(\"\"E\"\"), int(6.0))) - divInt(int(4.0),i1) ) + min(int(2.0), mod(i2,int(6.0))) ),i1):i1].lstrip().strip(), i1)), ( mod(divInt(divInt(( int(5.0) + int(8.0) ),max(max(int(8.0), max(saveOrd(\"\"!\"\"), i0)), i0)),len(s1)),abs(int(3.0))) * ( i0 * min(int(3.0), int(2.0)) ) )),saveOrd((\"\"b\"\"[min(int(3.0), int(6.0)):] + in2))),( int(9.0) * int(3.0) )) ) ) \\ge i2 and (\"\"H,0\"\" + (s2 + getCharFromString(\"\"8z\"\", max(int(5.0), ( i1 - saveOrd(s0[i0:][:int(9.0)]) ))))).endswith(s1) ) ):{:\\nloopBreak% = 0\\nfor in2 in \"\"u\"\":{:\\ni2 = mod(mod(divInt(len(s0),min(i0, i2)),int(0.0)),i1)\\nb1 = abs(int(9.0)) \\g mod(( i2 + i0 ),saveOrd(\"\"5\"\"))\\ni0 = divInt(( int(4.0) * i2 ),int(150.0))\\nloopBreak% = 0\\nwhile mod(abs(( divInt(int(1.0),saveOrd(getCharFromString(getCharFromString(\"\"[\"\", int(0.0)).strip(in2.capitalize()), int(1.0)))) - mod(len(\"\"q\"\".capitalize()[:int(7.0)]),min(int(6.0), i2)) )),int(22.0)) \\le ( len(in1) * saveOrd(\"\"2U\"\") ):{:\\nloopBreak% = 0\\nwhile not divInt(i0,int(3.0)) == ( abs(( min(i2, divInt(int(8.0),i0)) - len(\"\"l\"\") )) - i1 ):{:\\nif ( int(4.0) \\l i1 or in1.capitalize().startswith(\"\"z\"\"[( min(len(saveChr(saveOrd(getCharFromString(getCharFromString(\"\"0\"\"[divInt(i1,int(0.0)):i1], saveOrd(\"\"x\"\"[:divInt(i2,saveOrd(\"\"H\"\".capitalize()))]))[min(int(7.0), i2):][:saveOrd(\"\"a\"\"[divInt(i2,i1):min(divInt(( abs(( min(( mod(divInt(i0,i0),i0) + i2 ), int(7.0)) + min(len(saveChr(abs(len(in2[:int(1.0)].lstrip()))).rstrip(\"\"e\"\"[:min(abs(int(8.0)), int(2.0))])), min(int(8.0), mod(( i2 * mod(( i1 * i2 ),len(\"\"E\"\")) ),min(( int(9.0) * int(1.0) ), len(saveChr(i0)))))) )) + saveOrd(\"\"H\"\") ),i2), i0)])], ( int(7.0) * ( int(4.0) + ( ( min(len(in0[i2:]), int(8.0)) - ( int(9.0) - divInt(( min(divInt(int(1.0),int(1.0)), int(5.0)) + i0 ),i2) ) ) - saveOrd(saveChr(divInt(i2,len(\"\"_\"\".capitalize().strip()))).capitalize()) ) ) ))[( int(9.0) + saveOrd(s1) ):])).capitalize()), int(0.0)) + divInt(int(1.0),divInt(abs(i0),saveOrd(\"\"H\"\"))) ):max(int(9.0), mod(i1,int(7.0)))]) ):{:\\nif \"\"G\"\"[:len(s2)] == s0:{:\\nb0 = in0 in in1[len(in0[:min(int(1.0), i0)]):][len(\"\"\"\\\\\"\"\"[i2:abs(i2)]):max(saveOrd(in0), int(9.0))][abs(i2):max(i1, saveOrd(\"\"?\"\"[int(5.0):abs(( ( abs(saveOrd(s0.strip(\"\"K\"\"))) * ( i2 - saveOrd(\"\"i\"\") ) ) + i0 ))]))]\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i1 \\ge i0:{:\\nloopBreak% = 0\\nfor s2 in s1[i1:int(8.0)]:{:\\ni1 = max(int(6.0), len(saveChr(divInt(max(int(2.0), int(9.0)),i0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(3.0) != i0:{:\\nloopBreak% = 0\\nfor in1 in saveChr(int(4.0)):{:\\nb2 = abs(int(0.0)) \\l i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = s0[:max(( i0 + i2 ), i2)].strip().rstrip(s0).capitalize()\\ni1 = ( int(0.0) * i2 )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = \"\"8\"\" in in1.capitalize()[int(6.0):( int(8.0) * int(5.0) )][i2:saveOrd(in0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [0, 2], [0], [2], [2], [], [], [], [1], [0], [2, 0, 0], [], [2, 3, 0, 1, 0, 0], [0, 1], [4], [1, 1], [0], [5, 3], [0, 1, 0, 0, 0, 1], [], [4, 3, 0, 4, 3, 1, 4, 0, 1], [1, 2, 2], [0], [], [3, 0, 2, 1, 3, 1], [4], [0, 11], [1], [12, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 3, 1, 1, 1, 0, 2, 6, 0, 9, 3, 0, 0, 6, 1, 2, 1, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not saveChr(( saveOrd((in2 + (\"\")E\"\" + in0.capitalize()).capitalize())) - i2 )) == \"\"1a\"\\\\\"l\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 2], [], [2, 3, 2, 0, 0, 3, 1, 3], [1, 0], [2, 2, 3], [2], [0], [3, 3, 5], [0, 1, 1], [], [3, 3, 4, 0, 2, 1, 4, 1, 4, 0], [0, 2, 2], [], [2], [3, 2, 3], [], [], [0], [7, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 8, 2, 3, 1, 1, 3, 3, 0, 10, 3, 0, 1, 3, 0, 0, 1, 2], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = ((getCharFromString(in0, divInt(abs(( i2 * i2 )),abs(int(3.0)))) + \"\"$0\"\"[len(\"\"/\"\".capitalize()):]) + in2.capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [3, 1, 7], [1, 1, 0], [0], [2, 3, 1, 1, 3, 2, 0, 3, 3, 3, 3, 0], [1, 0], [4, 4, 4, 2, 2, 2], [0], [1], [5, 0, 0], [1, 1], [], [4, 2, 4, 4, 2, 4, 1, 4, 1], [3, 2, 1, 0, 2], [1], [2, 1], [1, 0], [25], [0], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 12, 2, 6, 1, 1, 0, 2, 0, 9, 5, 1, 2, 2, 1, 1, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = mod(saveOrd(saveChr(int(3.0)).capitalize()[int(17.0):].rstrip()),saveOrd(getCharFromString(\"\"a\"\", ( i1 + saveOrd(\"\"Z\"\".capitalize()) ))[:abs(abs(abs(i0)))]))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 1, 2, 1, 2, 0, 0, 0, 0], [0, 2], [0, 2, 2, 1, 2, 1, 1], [0], [0, 0, 0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1], [6, 1, 9, 5, 5, 0, 5, 2, 5, 0, 5, 4, 6, 4, 1, 2, 8, 6, 9, 0, 7, 6, 9, 5, 2, 0, 3, 1], [2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 2, 2, 0, 2, 1, 1, 1, 1, 1, 0, 1], [1, 0, 0], [1, 1, 3, 1, 3, 0, 2, 0, 2, 0, 1, 1, 2, 1, 0, 3, 2, 0, 1, 1, 2, 1, 1, 2, 0, 2, 3, 2, 1, 0, 1, 2, 0, 2, 0, 0, 0, 3, 2, 2, 0, 3, 0, 2, 0, 2, 1, 2, 1, 0, 2, 1, 0, 2, 3, 3, 1, 2, 1, 2, 1, 0, 1, 2, 1, 3, 1, 1, 0], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [3, 4, 0, 1, 3, 0, 1, 1, 3], [0, 2, 0, 0, 0, 0, 2, 1, 2, 2, 0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0], [5, 3, 2, 5, 0, 1, 1, 0, 5, 4, 1, 5, 4], [0, 1, 0, 1, 1, 1, 1, 0, 1], [0], [1, 4, 3, 0, 3, 2, 1, 0, 4, 2, 4, 0, 3, 3, 3, 3, 4, 4, 2, 0, 2, 1, 1, 0, 3, 4, 1, 2, 0, 1, 2, 4, 2, 4, 4, 0, 4, 0, 0], [0, 3, 3, 2, 3, 3, 3, 1, 2, 1], [0, 1, 3, 2, 5], [1, 2, 2, 0, 0, 2, 1], [1, 2, 0, 3, 1, 3, 2, 0, 2], [22, 5], [17, 25], [3, 8, 1], [27, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 2, 7, 1, 4, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 28, 28, 21, 3, 69, 20, 9, 11, 10, 13, 9, 1, 39, 10, 5, 7, 9, 2, 2, 3, 2], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(6.0) \\l int(1.0)\\nin2 = \"\"r3\"\"\\nloopBreak% = 0\\nfor in0 in getCharFromString((s2 + (\"\"W\\\\\\\\\"\"[:len(in2)] + s0.rstrip()[int(955.0):].lstrip())), saveOrd(((((s1[i2:].lstrip(\"\"z\"\"[mod(i1,( i1 + int(0.0) )):int(5.0)]).capitalize() + \"\"+\"\") + s1) + (\"\"8\"\".strip() + s0[( int(2.0) * i0 ):min(( i2 + int(5.0) ), int(0.0))])) + \"\"F1\"\"))):{:\\nin2 = saveChr(( int(5.0) + int(4.0) ))[:divInt(i2,mod(max(( int(6.0) + i1 ), int(4.0)),mod(i0,( i2 + i2 ))))].strip(in1.capitalize())[i2:]\\nloopBreak% = 0\\nwhile len(saveChr(( mod(i2,min(i0, divInt(i2,divInt(int(1.0),( int(2.0) * i1 ))))) - ( int(8.0) * i1 ) ))) \\le divInt(max(max(int(6.0), divInt(int(9.0),divInt(int(0.0),i1))), int(769.0)),( int(52.0) * len(s1) )):{:\\ni1 += int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = in1\\ni1 = int(31.0)\\ni0 = i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], [8, 6, 1, 6, 6, 6, 9, 8, 8, 9, 2], [0, 2, 2, 1, 2, 1, 1, 2, 0, 2, 1, 2, 1], [0], [3, 3, 3, 3, 2, 2, 2, 0, 1, 1, 2, 0, 2, 0, 2, 0, 3, 0, 2, 1, 0, 3, 2, 0, 2, 3, 1, 0, 0, 1, 0, 2, 0, 2, 1, 3, 2, 1, 0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1], [2, 4, 3, 0, 3, 2, 2, 3], [2, 2, 2, 1, 2], [1, 0, 1, 1, 0, 0, 0], [4, 2, 4, 2], [0, 1, 0, 0, 0, 1, 1, 0, 1], [], [4, 4, 0, 2, 4, 3, 3, 0, 0, 2, 2, 3, 1, 1, 2, 2, 2, 1, 1], [2, 1, 0], [1, 0], [2, 2, 2, 0, 1, 2], [2, 2, 3, 0, 2, 2, 3, 0, 3], [4, 5], [], [4, 8, 0, 1], [25, 21, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 13, 1, 39, 12, 8, 5, 7, 4, 9, 0, 19, 3, 0, 6, 9, 2, 0, 4, 3], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(abs(saveOrd(s2))).capitalize()\\ni0 = len(getCharFromString(((in1 + s2) + (\"\"48\"\" + \"\"@E01\"\")[min(( ( mod(i2,int(8.0)) * int(6.0) ) * divInt(i2,mod(i1,mod(i2,len(\"\"<\"\"[i1:][:( int(1.0) * i1 )][abs(divInt(i2,divInt(abs(int(6.0)),i0))):i2])))) ), int(66.0)):][i1:]), ( i2 - ( int(98.0) * len(\"\"F&\"\") ) ))[divInt(int(892.0),i1):])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [0, 3], [3], [0, 1], [0], [], [1], [], [1], [], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [4, 1, 2, 0, 0, 3, 0, 3, 8, 2, 1, 1, 1, 1], [0, 2, 0, 1, 2], [1, 1], [3, 1, 3, 1, 1, 3, 1, 3, 0, 0, 1, 2, 3, 1, 3, 1, 0], [1], [2, 4, 1, 3, 1, 3], [2, 2], [0], [3, 5, 4, 3, 3], [1, 0, 1, 1, 0, 0, 1], [], [4, 2, 3, 0, 2, 4, 0, 4, 3, 4, 1, 0, 1, 4, 3, 3, 1, 4, 2, 1, 4, 0, 0], [3, 3, 3, 3, 2, 0, 0], [3, 2, 3, 2], [0, 0, 0], [1, 3, 2, 1, 3, 0, 2], [11], [10, 4], [4, 6], [5, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 5, 2, 17, 1, 6, 2, 1, 5, 7, 0, 23, 7, 4, 3, 7, 1, 2, 2, 2], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(int(4.0))\\ni2 *= saveOrd((in0 + in2.strip()[int(1.0):int(20030.0)])[max(int(38.0), len((\"\"k\"\".strip() + in1).lstrip(\"\"\"4\"\"))):i0].lstrip(((\"\"e\"\" + getCharFromString(\"\"<L6\"\"[i1:int(211.0)], divInt(max(int(1.0), len(getCharFromString(in0, int(1.0)))),i2))) + in0).capitalize()))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1], [1, 2, 2, 1, 0, 0, 2, 0], [0, 2, 1], [1, 0, 1, 1, 1], [0], [0, 0, 0], [], [], [2], [4, 3], [2, 1, 1], [0, 0], [0], [3], [], [1], [0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [5, 9, 6, 7, 2, 8, 8, 2, 1, 2], [0, 1, 2, 1, 2, 1, 2, 1, 2, 2, 0, 0, 1, 0, 0], [1, 1, 0, 1], [0, 1, 0, 0, 3, 1, 3, 0, 0, 2, 0, 2, 3, 1, 3, 0, 0, 0, 1, 0, 3, 1, 0], [0, 1], [1, 4, 0, 1, 0], [2, 0, 0, 0], [1], [3, 4, 3], [1, 1, 1], [0], [3, 2, 0, 4, 3, 0, 4, 1, 1, 1], [1, 3], [0], [0], [0, 3, 3], [5], [], [], [18, 1]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 1, 3, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 10, 10, 15, 4, 23, 2, 5, 4, 1, 3, 3, 1, 10, 2, 1, 1, 3, 1, 0, 0, 2], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i1\\nloopBreak% = 0\\nfor in0 in (in1[int(5.0):i2] + saveChr(i1)):{:\\nloopBreak% = 0\\nwhile (in0 + \"\"F\"\".lstrip()) in \"\"/\"\":{:\\nb2 = max(int(96.0), saveOrd(\"\"\\\\\\n\"\")) \\le i2\\ni1 += i2\\ni1 = ( i2 + mod(min(int(7.0), max(i2, i0)),i0) )\\nif int(28821.0) \\ge i1:{:\\ni0 += min(int(2.0), i0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1], [1, 2, 1, 2, 2, 0, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 2, 2, 1, 0, 0, 1, 1, 0], [2, 1, 1, 1, 2, 1, 1], [1, 0, 2, 1, 0, 0, 1, 1, 1, 1, 0, 1, 2, 2, 1, 1, 2], [], [0, 0, 0, 0, 0, 0], [], [], [2, 0, 0, 1, 1], [4, 3, 2, 0], [0, 2, 1, 2, 2, 2, 2, 0, 0, 1, 2, 0, 0, 1, 0, 1], [0, 0, 0, 0], [0, 4, 2, 2, 2, 4], [1, 2, 2, 3, 2, 0], [1], [0], [0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [2, 5, 2, 4, 7, 5, 0, 2, 3, 8, 2, 3, 5, 4, 7, 5, 7, 4, 2, 8, 6, 4, 9, 6, 7, 6, 4, 0, 4], [1, 1, 0, 2, 1, 0, 1, 2, 2, 2, 2, 1, 1, 2, 0, 1, 0, 1, 2, 2, 1, 2, 0, 0, 0, 0, 0, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1], [3, 0, 0, 3, 1, 0, 0, 3, 2, 3, 1, 0, 1, 1, 1, 3, 1, 2, 1, 3, 3, 1, 0, 3, 1, 0, 0, 1, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 3, 0, 2, 1, 0, 0, 2, 1, 3, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 2, 2, 3, 1, 4, 3, 4, 0, 0], [1, 2, 2, 2, 1, 2, 1, 2, 1, 0], [0, 0, 0, 0], [5, 2, 0, 1, 2, 2, 1, 2, 4, 1, 5, 5, 4, 5, 1, 1, 4, 3, 0, 3, 4], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1], [], [0, 1, 4, 0, 0, 4, 4, 2, 0, 3, 2, 1, 3, 3, 1, 3, 3, 1, 4, 4, 1, 1, 0, 3, 0, 1, 1, 4, 0, 4, 1, 1, 2, 0, 0, 2, 1, 0, 1, 0, 3, 3, 0, 4, 3, 0, 2, 4, 2, 2, 4, 2, 2, 0, 1, 1, 0, 2, 3, 4, 3, 0, 2, 4, 4, 1, 4, 1, 4, 0, 4, 1, 4, 1], [3, 3, 0, 3, 3, 3, 3, 2, 3, 0, 2, 1, 3, 2, 3, 2, 2], [2, 1, 0, 4, 5, 3, 0, 2, 3], [1, 1, 0, 1, 2, 0, 2, 2, 2, 0, 1], [1, 2, 0, 3, 3, 0, 0, 3, 2, 3, 3, 2, 2, 1, 0, 3, 3, 2, 2, 1, 3, 1, 1, 2, 0], [1, 1, 13, 13, 21], [14, 21, 7, 23, 1], [7, 3, 9, 0, 7, 4, 1], [7, 22, 30, 16, 11, 11, 4, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 24, 24, 7, 17, 0, 6, 0, 0, 5, 4, 16, 4, 6, 6, 1, 1, 5, 29, 29, 28, 9, 56, 7, 10, 10, 4, 21, 25, 0, 74, 17, 9, 11, 25, 5, 5, 7, 8], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(in2)\\nloopBreak% = 0\\nwhile True:{:\\nb2 = \"\"o7\"\" in s2.strip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif i1 \\le i0:{:\\nif s0.startswith(getCharFromString(s1[:abs(int(2.0))], i2).rstrip()):{:\\ns2 = (\"\"B\"\"[:i1] + ((\"\"$=\"\" + ((\"\"B\"\" + \"\"N\"\".rstrip(\"\"_\"\").lstrip()) + s2)) + (s1 + \"\"3\"\")))\\n:}else:{:\\ni0 *= abs(divInt(len(\"\"-\"\"),int(5.0)))\\nb0 = s2.strip(\"\"(\"\".lstrip(\"\"9\"\")) == in1[i1:int(2.0)]\\nb0 = s1 == \"\"0\"\"[:int(4.0)]\\ni2 *= int(750.0)\\n:}\\n:}\\ni2 = max(int(238.0), ( int(2.0) * saveOrd(in2) ))\\nif \"\"v\"\" == in2:{:\\ni2 -= len(((in1 + (in2 + getCharFromString(s1[int(3.0):][i2:], saveOrd(\"\"N\"\"))[int(5.0):][i1:i1].lstrip()[int(47.0):]).capitalize()) + \"\"(!\"\"))\\n:}else:{:\\ni2 *= i0\\nb1 = not not ( i1 - i0 ) \\ge int(57.0)\\nloopBreak% = 0\\nwhile s1.startswith(((in1 + saveChr(i1)[:int(42.0)]).capitalize() + \"\"7\"\".strip())[i2:i2]):{:\\nif ( not int(8.0) == i1 or b1 ):{:\\nif int(6.0) \\l min(i2, divInt(int(4.0),i0)):{:\\ni0 *= i0\\nin0 = \"\"4\"\".capitalize()\\n:}\\ns0 = in0.lstrip(\"\"h\"\".capitalize())\\n:}\\ni0 = ( int(967.0) - min(divInt(int(6.0),int(4.0)), divInt(int(0.0),i0)) )\\ni1 += int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin1 = \"\"!xb1V\"\".capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [2], [0, 0, 0, 0, 1, 0], [0], [], [3, 3, 2, 1, 1], [1, 1], [0, 1], [], [1, 0], [2, 2], [0, 2], [], [2, 3, 2, 0, 1, 0, 3, 2, 0, 1], [0, 1], [3], [0], [1], [3, 3], [1], [], [1], [], [], [], [0], [22], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 6, 1, 0, 5, 2, 2, 0, 1, 1, 2, 0, 6, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( ( not True or ( len(\"\"W\"\") + mod(i0,int(2.0)) ) == i2 ) or False )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 2], [], [0, 0], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 1], [0, 3], [1, 0, 1], [], [1, 1, 0, 3, 0, 0], [], [3], [], [], [3, 2], [0, 0, 0, 0, 1], [], [4, 2, 4, 2, 4, 1, 0], [2, 3, 1], [5], [0, 1], [2, 1, 0, 1, 2], [8], [1, 1], [0, 4], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 6, 0, 1, 0, 0, 2, 5, 0, 7, 3, 1, 2, 5, 1, 2, 2, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\l int(3.0)\\nin0 = saveChr(i1)[:len(\"\"0bIb4\"\")].strip(s2)[i0:i1].capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [3], [1], [0], [], [], [], [], [], [1], [6], [2, 0, 2, 1, 1], [], [3, 0, 1, 0, 0, 2, 3, 0, 2, 0], [0, 1], [3, 1], [2], [1], [], [0, 0, 0, 1], [], [1], [], [], [], [3, 0, 3, 1], [7], [22], [], [8, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 4, 0, 1, 0, 0, 0, 4, 1, 1, 0, 2], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = len(\"\"%Hw\"\") \\ge i2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 1, 1, 1], [1], [1, 0, 1], [], [], [], [], [1], [0], [1, 2], [0], [4], [], [], [], [1], [1, 1, 1], [9, 3, 5], [0, 0, 0, 0, 1], [0, 1], [0, 1, 3, 2, 2, 1, 1, 0, 0], [0, 1], [3], [0, 0], [1], [4], [0, 1, 1], [], [1, 4, 2, 0, 1], [3], [0], [2], [2, 1, 2], [], [20], [0, 1], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 3, 3, 5, 2, 9, 2, 1, 2, 1, 1, 3, 0, 5, 1, 1, 1, 3, 0, 1, 2, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i0 \\l int(9.0):{:\\ni0 = len(\"\"0u\"\")\\n:}else:{:\\nb1 = in1[( mod(int(3.0),int(5.0)) + i0 ):].lstrip().startswith(\"\"1\"\")\\ni0 += i1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 2, 1], [], [0, 0], [], [], [1, 0, 1], [], [0, 0], [], [], [1, 0], [], [1], [], [1, 0, 1, 1], [6, 9, 7], [0, 1], [0], [3, 0, 3, 1, 3, 1], [1, 1], [2, 2, 4], [], [], [0, 1, 1], [1], [], [2, 2, 0, 3, 0, 1], [], [], [2, 0], [3], [], [], [], [21]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 3, 3, 2, 1, 6, 0, 3, 0, 0, 3, 1, 0, 6, 0, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ns0 = s1[abs(i0):abs(int(6.0))][saveOrd((s1 + \"\"<\"\")):]\\ni1 = int(97.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [0, 0, 2], [], [0], [], [], [3, 3, 2], [5], [1, 2], [0], [4], [0], [], [], [], [1], [8], [0, 1, 1], [], [2, 1, 0, 2, 3, 3, 3], [1, 0], [4, 4, 4], [2], [0], [5, 2, 5, 0, 1, 4], [0, 0, 0, 0, 1, 1], [], [3, 0, 0, 3, 0, 1, 1, 0, 4, 0], [1], [], [], [0, 2, 2, 2, 0, 1], [20, 1], [7], [6, 9, 9], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 2, 1, 2, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 7, 2, 3, 1, 1, 6, 6, 0, 10, 1, 0, 0, 6, 2, 1, 3, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = divInt(int(8.0),i0) != ( saveOrd((in2 + s2)) * saveOrd((in2 + \"\"U699B\"\")) )\\nres0 = \"\"h\"\".startswith(s0)\\ns1 = saveChr(saveOrd(in1))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [1], [2], [0], [0], [], [], [], [], [1, 1, 1], [1, 0, 3], [2, 0], [], [3, 3, 1, 0, 3, 1, 2, 0, 3, 1], [0], [4, 4, 1, 3], [0], [], [1, 4, 1, 0, 2], [1, 0, 0, 0, 0, 0, 1], [], [0, 4, 4, 3, 3, 4, 3, 0, 2, 4, 0, 0, 1, 1, 0, 4], [0, 1, 0, 3, 1], [3], [0], [1, 1, 0, 2, 2, 2, 1], [23], [1, 8, 13], [3, 7, 0], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 10, 1, 4, 1, 0, 5, 7, 0, 16, 5, 1, 1, 7, 1, 3, 3, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1 in getCharFromString(saveChr(saveOrd(((getCharFromString((in1 + s1.lstrip(s0)[saveOrd(\"\"b\"\"):int(1.0)]), i2) + \"\"iX370n\"\") + s2))), max(int(0.0), ( i0 + len(saveChr(int(3.0))) )))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [1, 3], [0, 1], [0], [3, 1, 0], [], [], [], [2, 2], [], [], [8, 6], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 3, 0, 0, 0, 2, 0, 0, 2, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = (\"\"86\"\" + in0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [], [2], [], [5], [1], [], [1], [], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [6, 7, 0, 1, 6, 2, 6, 9, 5, 6], [2, 2, 1, 0, 2, 0], [], [0, 0, 2, 2, 0, 1, 1, 3, 2, 1, 2, 0, 2, 0, 1, 2, 1, 3, 1, 3, 3, 0], [1, 0, 1, 0, 1, 1], [2, 0, 4, 3], [0, 0], [1, 0, 0, 0], [1, 5], [0, 1, 1], [], [4, 4, 2, 3, 3, 2, 2, 0, 1, 4, 0, 1, 4], [0, 2, 1, 1], [], [1, 0, 1], [2, 0, 0], [5, 14], [], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 6, 0, 22, 6, 4, 2, 4, 2, 3, 0, 13, 4, 0, 3, 3, 2, 0, 1, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = getCharFromString(((s1[:i2][i2:mod(( i1 + int(6.0) ),int(7.0))] + \"\"9F\"\") + saveChr(abs(divInt(int(0.0),( i0 + divInt(i2,int(1.0)) )))))[:divInt(int(62695.0),min(int(6.0), saveOrd(in2)))].capitalize(), len(\"\"O\"\")).endswith(saveChr(i0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 1], [1, 0], [0, 2, 0, 0, 0, 1, 1, 1, 1, 1], [0], [0, 0, 0, 0], [], [], [0, 3, 3, 2, 1, 0], [0, 2, 0], [0, 0, 1, 1, 1], [0, 0, 0], [], [0, 0], [], [], [1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1], [5, 9, 1, 2, 2, 4, 0, 5, 5, 5, 5, 8, 7, 6, 9, 3, 0, 1, 7, 0, 4, 4, 1, 3, 9, 0], [1, 1, 2, 1, 2, 2, 0, 0, 2, 2, 1, 1, 2, 0, 1, 1, 0, 2, 1, 0, 1], [1, 1, 1, 0, 0], [1, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 0, 3, 2, 0, 1, 2, 0, 3, 2, 1, 2, 0, 3, 1, 2, 2, 1, 0, 1, 2, 0, 0, 1, 1, 0, 2, 0, 3, 0, 1, 2, 2, 0, 3, 2, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0], [1, 1, 1, 0, 3], [2, 2, 2, 0, 2, 1, 1, 2, 2, 0], [1, 1, 0, 1, 0, 1], [4, 3, 1, 0, 3], [1, 0, 1], [0], [0, 3, 4, 4, 3, 4, 4, 0, 4, 1, 0, 1], [2, 0, 3, 1, 0], [4], [], [1, 1, 2], [], [3, 12], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 12, 12, 2, 10, 1, 4, 0, 0, 6, 3, 5, 3, 0, 2, 0, 0, 1, 26, 26, 21, 5, 48, 13, 5, 10, 6, 5, 3, 1, 12, 5, 1, 0, 3, 0, 2, 1, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\nin1 = in0\\nif res0:{:\\nloopBreak% = 0\\nfor s1 in (getCharFromString((saveChr(int(5912.0)).rstrip(s0) + getCharFromString(\"\"d\"\", i1)), int(240.0)).capitalize() + in0):{:\\nb2 = int(55.0) \\l int(5.0)\\nb1 = ( int(5.0) * i1 ) == mod(i2,int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = i1 \\l max(mod(i2,int(769.0)), divInt(i2,max(mod(int(3.0),( i0 * max(int(0.0), ( ( int(1.0) * i0 ) + int(7.0) )) )), ( i2 * i2 ))))\\ni1 -= int(04.0)\\n:}else:{:\\ni1 -= int(413.0)\\ni2 *= i0\\ni1 = ( i1 * min(i0, int(90.0)) )\\n:}\\ni2 = divInt(mod(i1,len(\"\"m5\"\")),( i0 + i1 ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 0], [2, 0, 0, 0, 2, 1, 0, 2, 0], [1], [3, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 2, 2, 2, 0, 0, 1, 2, 3, 3, 1, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 2, 4, 2, 2, 3], [0, 0, 2, 1, 2, 1, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 2, 2], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [], [2, 4, 0, 4, 1, 2, 3, 1, 4, 0], [1, 2, 0], [], [1, 1], [2, 2, 0, 3, 2, 0, 2, 2, 3, 0, 1], [10, 2, 22], [25], [8, 5, 4, 4, 6], [5, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 7, 0, 39, 15, 6, 6, 9, 4, 11, 0, 10, 3, 0, 2, 11, 3, 1, 5, 2], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = saveChr(max(divInt(i2,int(0.0)), divInt(i0,mod(divInt(int(0.0),divInt(abs(divInt(divInt(divInt(i0,i0),int(0.0)),divInt(saveOrd(s1),abs(int(7.0))))),( int(3.0) + abs(int(6.0)) ))),int(1.0)))))[:( ( int(4.0) + i2 ) * len(\"\"85K\"4C4\"\".capitalize()) )]\\ns2 = (\"\"6#Wz\"\" + getCharFromString(s2, ( ( int(3.0) - ( i1 * i0 ) ) - int(0.0) )))[:int(4.0)]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [2, 1, 2, 0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 2, 2, 0], [1, 2, 1, 2, 1, 2, 0, 0], [2, 2, 2, 2, 1, 0, 2, 0], [0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [2, 0], [5, 4, 0, 5], [1, 2, 0, 0, 2, 2, 1, 0, 1, 1], [0, 0, 0, 0], [5, 3, 3], [1, 1, 3], [0], [1, 1], [0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 4, 1, 3, 3, 2, 7, 4, 0, 7, 0, 7, 3, 8, 2, 2, 4, 6, 0, 6, 0, 8, 3, 8, 2, 2, 4, 4, 2, 8], [0, 2, 2, 2, 0, 0, 2, 1, 0, 0, 2, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 2, 2, 1, 0], [0], [2, 1, 1, 0, 0, 1, 0, 3, 0, 2, 0, 0, 1, 2, 2, 3, 3, 0, 0, 1, 2, 1, 0, 1, 2, 0, 3, 1, 2, 0, 2, 2, 2, 1, 3, 2, 0, 3, 0, 3, 3, 0, 2, 0, 2, 2, 1, 1, 2, 2, 1, 2, 1, 0, 3, 3, 0, 2, 0, 2, 0, 1, 1, 2, 2, 1, 1, 1, 3, 3, 3, 1, 3, 3, 0, 2, 2, 2, 0, 2, 3, 2, 2, 3, 3, 3, 0, 1, 0, 3, 1, 2, 1, 1, 2, 1, 0, 2, 3, 0, 3, 0, 3, 1, 2, 3, 1, 1, 3, 2, 0, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [4, 4, 3, 2, 4, 0, 0, 0, 2, 2, 0, 4, 3, 0, 4, 3, 3, 0, 2, 1, 0, 3, 2, 2, 2], [0, 1, 0, 0, 2, 1, 2, 2, 2], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [2, 0, 0, 0, 2, 1, 1, 0, 1, 5, 3, 4, 4, 5, 5, 2, 5, 3, 0, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [0, 3, 2, 0, 0, 0, 1, 2, 1, 1, 4, 4, 0, 0, 2, 2, 2, 1, 2, 2, 1, 4, 2, 0, 0, 1, 2, 0, 1, 2, 4, 4, 4, 2, 1, 0, 0, 0, 0, 1], [2, 2, 0, 1, 1, 2], [], [2, 1, 2, 1, 1, 1, 1, 2, 0, 2, 0], [2, 2, 2, 3, 2, 1, 1, 3, 0], [6], [25, 18], [6, 4, 8, 3], [4, 19]], "fitness": 9223372036854775807, "mapping_values": [1, 16, 16, 8, 8, 2, 7, 0, 0, 2, 4, 10, 4, 3, 3, 1, 2, 3, 31, 31, 28, 1, 112, 32, 25, 9, 23, 20, 9, 2, 40, 6, 0, 11, 9, 1, 2, 4, 2], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif divInt(int(5.0),int(64.0)) != i0:{:\\ns2 = s0\\n:}\\nloopBreak% = 0\\nwhile (s0[i2:] + s0).endswith(s2):{:\\ns1 = \"\"6\"\"\\ns1 = \"\"4\"\"[:int(133.0)]\\ns0 = \"\"8\"\"\\nif False:{:\\ni2 = i2\\nloopBreak% = 0\\nwhile False:{:\\nif s1.capitalize().capitalize() != in2:{:\\nloopBreak% = 0\\nwhile \"\"!\"\"[:saveOrd(\"\"3\"\"[:i0][:mod(i0,i2)])][:int(2.0)][divInt(mod(saveOrd(getCharFromString(in0[len(in1):], i1)),i0),int(7.0)):] != \"\"z\"\":{:\\nb2 = ( int(4.0) + i0 ) \\le int(0.0)\\nin1 = in2[mod(i2,abs(int(7.0))):mod(i1,mod(mod(divInt(int(0.0),saveOrd(\"\"s\"\")),mod(i0,min(i0, min(min(i1, mod(i0,divInt(divInt(int(7.0),int(3.0)),( divInt(int(8.0),( int(2.0) - i0 )) + abs(abs(i1)) )))), mod(i1,( i1 + int(2.0) )))))),int(4.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in saveChr(mod(mod(int(6.0),int(0.0)),int(6.0)))[min(saveOrd(saveChr(len(\"\":\"\"[int(0.0):min(saveOrd(s2), i0)].capitalize()))), ( ( divInt(i1,divInt(len(in2),mod(( len(in0) * min(abs(i1), int(8.0)) ),i0))) - max(int(3.0), ( int(8.0) * int(2.0) )) ) * mod(int(2.0),i2) )):]:{:\\nloopBreak% = 0\\nfor s0 in in0:{:\\nb0 = ( mod(min(i2, len(\"\"G\"\")),i1) \\l abs(int(4.0)) and divInt(abs(int(4.0)),int(2.0)) != abs(( i0 * int(8.0) )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [], [2], [], [4], [], [], [], [], [], [], [], [], [], [], [3], [], [], [0, 0, 3], [0, 0, 1], [], [0, 1, 4, 0], [], [], [], [3, 2, 3], [], [], [5], [19, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 2, 0, 0, 0, 3, 0, 0, 1, 2], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = s0.startswith(\"\":5!\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1], [2, 1, 2, 2, 1, 1, 0, 1], [0, 2, 1], [2, 1, 2, 0, 1], [0], [0], [], [], [2], [5, 1], [1, 1, 2], [0, 0], [0], [], [], [], [0], [1, 0, 1, 1, 1, 1, 1, 1], [5, 8, 6, 4, 0, 5, 5, 7], [0, 0, 2, 2, 2, 2], [0, 1], [2, 1, 1, 0, 3, 1, 2, 3, 2, 1, 2, 1, 3, 1, 0, 2, 0, 2, 3, 1, 0], [1, 0, 0, 1, 0, 1], [4, 2, 0, 4], [1, 2, 0, 1], [0, 1, 0], [5, 0, 1, 3, 4, 3, 5, 2, 1], [1, 1], [0], [0, 0, 1, 0, 0, 0, 3, 0, 1], [], [], [], [0, 1], [5], [6], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 1, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 8, 8, 6, 2, 21, 6, 4, 4, 3, 9, 2, 1, 9, 0, 0, 0, 2, 1, 1, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0:{:\\ns1 = in0\\nloopBreak% = 0\\nwhile divInt(int(5.0),int(86.0)) != i0:{:\\nif saveOrd(\"\"F\"\") \\g int(4.0):{:\\ni0 = ( abs(( int(0.0) - mod(int(5.0),min(int(5.0), i2)) )) * ( i2 + divInt(saveOrd(in1),int(7.0)) ) )\\n:}\\nin0 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = s2 in (s1 + \"\"g\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= i2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 4, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 3, 0, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1, 0, 0, 0, 1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0, 0, 2, 2, 3], [17, 17], [], [3, 9], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 12, 1, 5, 0, 1, 6, 5, 1, 16, 3, 1, 5, 5, 2, 0, 2, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[:len(in1[len(in1):i0][int(0.0):])]:{:\\nres0 = getCharFromString(in0[:abs(mod(saveOrd(saveChr(i2)),i2))], int(7.0))[len((\"\"R\"\" + s0.rstrip())):i2] not in \"\"R39;\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 9], [2, 1, 0, 1, 2], [1, 1], [1, 3, 0, 2, 3, 2, 0, 0, 3], [1, 1], [0, 2, 3], [1, 0], [1, 0], [], [0, 0, 0, 0, 1], [], [4, 1], [2], [], [], [3, 2, 2, 3, 2], [], [], [6, 5, 9], [30, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 2, 9, 2, 3, 2, 2, 0, 5, 0, 2, 1, 0, 0, 5, 0, 0, 3, 2], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(2.0)\\ni1 += min(i0, mod(abs(divInt(i1,i2)),len(\"\"_65,9\"\".capitalize())))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1], [2, 2, 0, 0, 2, 2, 0], [2, 1, 1, 1], [2, 2, 2], [], [0, 0, 0], [], [], [], [1], [2, 2, 1, 2], [0], [0, 5, 2], [], [], [], [0, 0, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [3, 9, 7, 2, 3, 1, 1, 2, 6, 4, 2, 8, 7, 0, 1, 1, 7, 4, 3, 3, 1, 7, 3, 4, 4, 2, 0, 0, 2, 9, 7, 1, 7, 8, 7, 5, 3, 2, 7], [1, 0, 0, 0, 0, 1, 0, 1, 2, 2, 0, 0, 2, 1, 2, 1, 2, 0, 2, 2, 1, 2, 2, 1, 0], [], [2, 0, 2, 2, 1, 2, 1, 2, 3, 1, 0, 3, 1, 1, 0, 2, 2, 3, 0, 3, 1, 0, 2, 2, 1, 0, 2, 2, 1, 1, 3, 0, 3, 2, 2, 3, 3, 1, 3, 1, 3, 3, 3, 2, 3, 1, 2, 0, 0, 0, 0, 1, 0, 3, 1, 0, 2, 1, 2, 1, 1, 0, 1, 3, 3, 2, 0, 0, 3, 2, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 3, 2, 2, 3, 1, 0, 0, 0, 3, 1, 3, 3, 2, 2, 0, 1, 3, 1, 1, 3, 1, 1, 1, 0, 2, 3, 3, 3, 1, 3, 3, 2, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 2, 2, 0, 1, 2, 3, 0, 4, 0, 4, 1, 0, 2, 4, 0, 1, 0, 1, 4, 4, 0, 4, 0, 2, 3, 1, 2, 3, 3, 0, 3], [1, 0, 1, 2, 1, 1, 1, 1, 2, 2], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [3, 3, 5, 0, 5, 4, 0, 4, 0, 1, 3, 1, 2, 2, 5, 3], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [], [0, 3, 0, 3, 3, 1, 2, 4, 2, 0, 4, 0, 4, 2, 2, 1, 2, 4, 2, 4, 2, 2, 0, 0, 4, 2, 2, 1, 0, 0, 4, 1, 0, 2, 4, 0, 4, 4, 1, 1, 0, 2, 1, 1, 1, 0, 3, 4, 1, 1, 0], [2, 0, 2, 2, 3, 3, 1, 0, 0, 1, 2], [0, 5], [2, 0, 0, 0, 0, 1, 2, 1, 1, 0, 0, 1], [3, 0, 0, 2, 3, 1, 3, 2, 3, 1, 2, 3, 0, 0, 3, 2, 3, 0, 3, 2], [11, 21, 4, 16, 22], [3, 16], [0, 2, 5, 1, 2], [23, 21, 2, 27, 31, 31, 10, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 4, 3, 0, 3, 0, 0, 0, 1, 4, 1, 3, 0, 0, 0, 3, 39, 39, 25, 0, 115, 28, 32, 10, 18, 16, 20, 0, 51, 11, 2, 12, 20, 5, 2, 5, 8], "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in0 in (in0 + ((\"\">L\"\" + in2[( i1 - divInt(divInt(int(3.0),mod(int(9.0),mod(len(getCharFromString(s0, int(7.0))),i0))),abs(int(2.0))) ):int(31.0)].capitalize()[i0:]) + \"\"V0\"\"[divInt(divInt(abs(i0),min(int(1.0), i0)),mod(( int(2.0) + i1 ),divInt(( int(6.0) - int(4.0) ),max(i0, abs(( ( len(in2[:min(int(2.0), saveOrd(in1))][int(8.0):].lstrip()[:min(saveOrd(\"\"<\"\"[max(mod(min(int(7.0), mod(i1,i2)),i2), i0):int(0.0)][:i0].strip(s0)), abs(int(1.0)))].capitalize()[i2:mod(int(1.0),( int(7.0) * int(4.0) ))]) - i1 ) - int(3.0) )))))):saveOrd(in1)][min(divInt(i2,i1), max(mod(i2,int(3.0)), i0)):int(173442.0)].capitalize())):{:\\nif saveChr(mod(min(( max(mod(saveOrd(\"\"d\"\"),saveOrd(s0)), ( ( min(int(0.0), i2) - i2 ) - i1 )) * saveOrd(getCharFromString(s1, int(0.0))[min(abs(divInt(mod(i2,int(2.0)),len(getCharFromString(saveChr(int(9.0)), int(7.0))))), max(int(1.0), int(7.0))):int(8.0)]) ), i2),( abs(len(\"\"\\\\\\t\"\")) * len(\"\"2\"\") ))).endswith(in0):{:\\ns1 = \"\"\\\\\\\\\"\"[:int(75.0)]\\n:}\\ns2 = \"\"q\"\"\\nif min(len(\"\"5`EQ`1\"\\\\\"\"\"), divInt(int(327.0),i1)) \\g i0:{:\\nif s2 == (\"\"W&\"\".capitalize() + \"\"2\"\"):{:\\nin2 = in0\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2, 1], [1, 0], [1, 0, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 33, 9, 7, 5, 4, 5, 2, 1, 16, 5, 1, 4, 2, 1, 0, 0, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1[len(in1):i0]))[:int(0.0)]:{:\\nres0 = saveChr(abs(mod(i1,int(7.0))))[i2:int(5.0)] not in (\"\"R\"\" + saveChr(saveOrd(in0))).capitalize().rstrip()[i2:mod(( divInt(int(7.0),i1) + ( len(\"\";\"\") + divInt(i2,( min(( int(2.0) * i1 ), ( max(int(1.0), i0) - int(7.0) )) + int(7.0) )) ) ),i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 2, 2, 0, 1, 0, 1, 0, 1], [0, 1], [2, 0, 0, 0, 2, 2, 2], [0], [0, 0, 0], [], [], [2, 0, 0], [4, 4], [1, 1, 0, 2, 2], [0, 0], [4, 3], [2], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 8, 0, 7, 5, 4, 4, 0, 7, 1, 9, 1, 8, 3, 0, 0, 8, 7, 7, 1, 7, 2, 2, 3, 4, 7, 6, 8, 9, 5, 6, 2, 1, 8, 9, 8, 0, 7, 8, 5, 4, 7, 2, 5, 5, 4, 9, 6, 8, 4, 0, 5, 1, 5, 1, 4], [2, 1, 0, 1, 2, 1, 1, 1, 2, 0, 1, 0, 0, 2, 1, 1, 1, 1, 1, 2, 0, 1, 2, 0], [1], [0, 0, 3, 3, 2, 2, 2, 2, 3, 1, 3, 3, 2, 3, 1, 2, 1, 1, 3, 2, 0, 0, 3, 1, 2, 3, 3, 1, 1, 0, 2, 3, 0, 1, 1, 3, 2, 2, 3, 0, 2, 2, 1, 3, 3, 3, 1, 1, 1, 2, 1, 1, 0, 1, 1, 0, 3, 0, 2, 1, 0, 2, 2, 1, 1, 1, 2, 3, 1, 2, 1, 3, 1, 1, 1, 1, 2, 2, 1, 3, 0, 2, 0, 1, 0, 1, 1, 3, 3, 0, 3, 3, 2, 2, 1, 1, 3, 3, 1, 1, 2, 3, 2, 0, 1, 2, 3, 3, 1, 2, 1, 2, 3, 1, 3, 3, 2, 2, 0, 0, 1, 3, 1, 1, 3, 1, 2, 2, 1, 3, 3, 3, 3, 2, 3, 2, 0, 2, 0, 2, 1, 3, 3, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [3, 4, 2, 4, 4, 1, 4, 2, 2, 1, 4, 0, 0, 0, 2, 1, 2, 2, 2, 0, 4, 1, 3, 2, 4, 3, 2, 3, 3, 0, 1, 2, 0, 3, 2, 1, 3, 0, 0, 3, 4], [0, 0, 1, 2, 1, 2, 1, 2, 0, 0, 2, 1, 1, 2, 0, 1, 1, 0, 2, 2, 0, 0, 2], [1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1], [2, 0, 0, 4, 4, 4, 2, 0, 3, 5, 0, 0, 2, 1, 2, 4, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1], [0], [2, 0, 3, 1, 2, 3, 1, 2, 3, 0, 4, 1, 1, 0, 2, 0, 2, 1, 1, 2, 4, 2, 2, 4, 4, 4, 1, 2, 4, 1, 1, 1, 2, 2, 0, 4, 1, 4, 4, 2, 2, 4, 1, 4, 0, 0, 2, 1, 2, 0, 4, 0, 2, 1, 0, 4, 2, 0, 1, 2, 0], [0, 3, 3, 2, 3, 1, 2, 2, 1, 0, 1, 3, 2], [3, 0, 5, 1], [2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 0, 0, 0, 1, 0, 0, 1, 2], [0, 1, 1, 3, 0, 2, 3, 2, 3, 3, 3, 0, 3, 3, 0, 3, 1, 3, 1], [2, 13, 22, 24], [8, 7, 3, 7], [7, 9], [11, 16, 21, 26, 12, 20, 20, 5, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 2, 7, 1, 3, 0, 0, 3, 2, 5, 2, 2, 1, 0, 0, 1, 56, 56, 24, 0, 150, 37, 41, 23, 14, 17, 19, 1, 61, 13, 4, 18, 19, 4, 4, 2, 9], "tree_depth": 65, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0[i2:]\\nloopBreak% = 0\\nfor s0 in (\"\"C\"\" + (\"\"i\"\" + (in1 + getCharFromString(\"\"h\"\", i1))[len(\"\"(\"\"):saveOrd(in1)])[mod(divInt(mod(mod(abs(int(9.0)),saveOrd(in1[saveOrd(\"\"N\"\"[divInt(max(int(8.0), ( int(0.0) + int(7.0) )),saveOrd(\"\"7\"\")):divInt(i0,i1)]):abs(int(5.0))])),divInt(abs(max(int(4.0), int(4.0))),i2)),( saveOrd(\"\"-\"\".strip(saveChr(i1)[:int(0.0)]).capitalize().lstrip()[int(7.0):][min(( ( min(i1, mod(divInt(int(1.0),min(abs(max(int(9.0), int(1.0))), int(8.0))),( int(3.0) + int(0.0) ))) - i1 ) * int(0.0) ), int(8.0)):i2].lstrip(\"\"9\"\")[:abs(i0)]) - ( int(7.0) * i1 ) )),( divInt(int(7.0),int(1.0)) - int(72234.0) )):( abs(int(768.0)) * ( int(9.0) + abs(int(56.0)) ) )]):{:\\nif int(2.0) \\le int(18.0):{:\\nb2 = int(9.0) \\le ( ( int(8.0) + min(i0, mod(i0,int(0.0))) ) * i2 )\\nb0 = not \"\"<\"\".startswith(\"\"[)\"\")\\n:}else:{:\\nb0 = s2[int(7.0):int(8.0)][:saveOrd(\"\"W\"\".capitalize())] != saveChr(max(i1, len(getCharFromString(\"\";\"\", abs(( ( int(5.0) - int(4.0) ) - saveOrd(saveChr(len(s0))) )))[int(7.0):int(2.0)][( abs(( i1 * int(5.0) )) + ( len(in0) - len(\"\";\"\"[:int(5.0)]) ) ):( int(4.0) - ( min(int(9.0), max(abs(divInt(( i1 + i1 ),int(6.0))), min(int(8.0), int(4.0)))) * len(in2[int(0.0):( ( int(5.0) * abs(max(len(s0.rstrip()), min(( min(( i1 + divInt(i2,mod(int(1.0),len(\"\"Y\"\"[saveOrd(s0):int(5.0)]))) ), i0) + int(1.0) ), i1))) ) * i2 )]) ) )]))).capitalize()\\ns2 = s1[:i0].capitalize()\\ns2 = \"\"\"dh\"\"\\nin1 = in2[int(4.0):]\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0], [9, 9, 0, 3], [1, 2, 2, 2], [1], [2, 0, 1, 2, 2, 3, 1, 3, 0, 0, 0, 3], [1, 0, 1], [1, 2, 3], [1], [0, 1], [1, 4], [1], [], [2, 2, 0, 1], [], [], [1, 0], [2], [], [], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 12, 3, 3, 1, 2, 2, 1, 0, 4, 0, 0, 2, 1, 0, 0, 1, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1[divInt(i1,int(9.0)):( mod(max(int(90.0), abs(i2)),i2) - i2 )][:len(\"\"0\"\")]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [1], [2, 0, 1, 0, 2, 0], [0], [1], [], [], [], [], [1, 0, 1], [3, 2, 9], [2, 0, 2, 1, 1, 0, 2], [], [3, 2, 0, 0, 3, 2, 3, 0, 0, 0, 1, 2, 1, 0, 0, 1], [0, 1, 0, 0], [4, 1, 1], [2, 2, 1], [1], [4, 1], [0, 1, 0, 1, 1, 0, 1], [], [3, 2, 4, 1, 2, 2, 4, 1, 3, 0, 1, 0], [2, 2], [], [2, 1, 2], [1, 3, 1, 2, 2, 2, 2], [], [16, 24], [4, 8, 8, 2], [7]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 5, 0, 11, 2, 3, 1, 1, 2, 5, 0, 12, 2, 0, 3, 5, 0, 2, 2, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = (\"\"q$\"\".capitalize()[saveOrd(\"\"y4\"\".capitalize()[( i2 * i0 ):][:max(mod(max(i2, i1),i1), int(3.0))]):] + (in1 + \"\"8\"\")) not in s1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [0], [3, 0, 2, 0, 3], [1], [4, 3], [], [0], [4, 4], [0, 1, 1], [], [4, 2, 4, 1, 1], [1, 0], [], [1], [2, 3, 1], [], [24], [6], [30]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 1, 2, 0, 1, 1, 3, 0, 5, 2, 0, 1, 3, 0, 1, 1, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(saveOrd(getCharFromString(\"\"6_\"\", i1)[:divInt(i2,len(\"\"y\"\"))]))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1], [], [2, 1, 1, 2, 2, 1, 2, 1], [], [0, 0, 0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], [2, 3, 4, 1, 7, 7, 0, 1, 1, 1, 5, 8, 8, 2, 4, 7], [1, 1, 2, 2, 0, 0, 1, 0, 1, 2, 2, 2, 0, 1, 1, 0, 2, 2, 2, 1, 0, 2, 2, 1], [1, 0, 1, 0], [1, 2, 0, 3, 0, 3, 2, 1, 3, 3, 3, 1, 2, 0, 2, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 0, 2, 1, 2, 3, 0, 0, 3, 2, 2, 0, 2, 1, 1, 0, 3, 0, 0, 2, 2, 3, 2, 1, 3, 2, 1, 3, 0, 2, 1, 0, 0, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 0, 4, 0, 1, 4, 2, 2, 1, 2, 3, 1], [1, 2, 0, 0, 2, 1, 0, 2, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [5, 1, 5, 1, 2, 4, 0, 4], [1, 1, 0, 1, 0, 1, 1, 1], [], [4, 2, 0, 3, 3, 2, 4, 0, 2, 4, 1, 0, 4, 2, 4, 1, 1, 1, 3, 2, 1, 3, 4, 1, 0], [2, 3, 2, 0, 1, 1], [1], [0, 2, 2, 2, 1], [1, 0, 2, 0, 0, 1, 0, 3], [1, 18, 6, 0], [1, 23], [7], [5]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 0, 8, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 24, 4, 60, 17, 12, 9, 10, 8, 8, 0, 25, 6, 1, 5, 8, 4, 2, 1, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s1[int(2.0):divInt(i1,saveOrd(((in2.rstrip()[i1:] + \"\"b\"\".capitalize()[min(divInt(int(3.0),saveOrd(s1)), min(max(int(4.0), ( i2 - mod(i2,( i0 * i0 )) )), int(1.0))):]) + getCharFromString(saveChr(i1)[divInt(i0,saveOrd(\"\"B\"\")):], ( i1 + ( int(7.0) + divInt(abs(i2),i2) ) )))))].capitalize()\\ni2 *= abs(( ( i0 - divInt(int(7.0),int(0.0)) ) + i1 ))\\ni1 = max(i0, i2)\\ns2 = \"\"7S\"\"\\nin1 = \"\"Gx\"\"\\ni2 *= ( mod(abs(mod(int(11158.0),len((\"\"A\"\"[:mod(int(8.0),max(i2, mod(int(2.0),i1)))] + (saveChr(i0) + \"\"\"\"\"))))),i2) - int(47.0) )\\ns0 = in1\\ni2 = i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 2, 5, 8, 9, 4, 5, 9, 2, 1, 8, 2, 0, 2, 9, 4, 9, 9, 0, 4, 1, 4, 5], [2, 1, 1, 0, 1, 1, 2, 2, 1, 2, 2, 0, 2, 2, 1, 1, 0, 0, 2, 1, 0, 0, 2], [], [3, 1, 0, 2, 3, 0, 1, 1, 3, 0, 2, 2, 3, 0, 2, 0, 1, 0, 2, 1, 0, 1, 3, 3, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 2, 3, 1, 3, 3, 1, 2, 2, 3, 3, 0, 1, 0, 1, 3, 2, 3, 2, 3, 0, 0, 0, 2, 0, 1, 0, 2, 1, 0, 2, 2, 3, 2, 2, 2, 3, 0, 3, 2, 3, 3, 2, 0, 1, 3, 2, 1, 3, 1, 0, 0, 3, 1, 2, 0, 3, 1, 0, 1, 3, 2, 3, 1, 3, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 4, 1, 1, 1, 4, 0, 1, 0, 0, 2, 3, 1, 4, 2, 4, 1, 2, 0, 2, 4, 4, 3, 4, 1, 1, 3, 4, 2, 4], [1, 2, 2, 0, 1, 0, 2, 0, 1, 1, 1, 2, 1, 2], [1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [5, 4, 4, 1, 4, 2, 3, 1, 2, 2, 2, 3], [1, 1, 1, 0, 1], [], [4, 3, 2, 0, 3, 2, 0, 4, 2, 4, 2, 3, 3, 3, 0, 2, 0, 0, 4, 4, 2, 0, 1, 0, 2, 1, 0, 0, 0, 1, 2, 0, 1], [0, 0, 1, 1, 1], [], [0, 2, 0, 0, 0, 2, 2, 1], [2, 1, 0, 1, 0], [6, 18], [23, 13], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 23, 23, 0, 100, 26, 30, 14, 12, 12, 5, 0, 33, 5, 0, 8, 5, 2, 2, 1, 0], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString((in1[min(int(82.0), i2):mod(saveOrd((in1[i1:] + getCharFromString(saveChr(int(5.0))[int(89.0):max(i1, divInt(( max(i0, divInt(i1,int(4.0))) - i1 ),( int(5.0) * i2 )))], int(9.0)))),max(saveOrd((((s1 + in1[( min(( int(2.0) * max(min(( int(1.0) + i2 ), divInt(min(divInt(abs(int(8.0)),len(s2)), max(int(2.0), ( mod(saveOrd(saveChr(abs(i1))),int(0.0)) - i2 ))),int(2.0))), saveOrd(saveChr(mod(max(( abs(i2) + i0 ), i2),mod(i2,int(9.0)))))) ), i1) * mod(int(4.0),i1) ):( divInt(min(( divInt(( abs(i0) + saveOrd(in0[( saveOrd(\"\"8\"\") - len(s1) ):]) ),divInt(i0,int(9.0))) - saveOrd(\"\"x\"\"[( int(9.0) - max(int(0.0), i2) ):]) ), i1),max(int(4.0), ( i0 * len(s2) ))) - int(1.0) )]) + s2) + s2)[i0:int(4.0)]), saveOrd(\"\"G\"\")))] + in0[:( abs(int(5.0)) * saveOrd(\"\"nS\"\") )]), i2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [2, 2, 1, 2, 1, 1, 0, 2, 0, 0, 2, 1, 2, 1, 2, 1, 2, 0, 1, 2, 0], [2, 1, 1, 0, 0, 1, 0, 1, 2], [0, 0, 1, 2, 2, 0, 1, 2, 1, 1, 0, 0], [0, 0, 0], [0, 0, 0, 0, 0], [], [], [2, 3, 3, 3, 3, 1], [1, 0], [1, 0, 0, 2, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0], [0, 0], [2, 0, 5, 3], [1, 2, 0, 2, 1, 1, 2, 1], [], [1, 1, 0, 0], [0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 0, 0, 4, 8, 0, 3, 4, 6, 9, 8, 2, 8, 6, 4, 0, 1, 0, 4, 5, 6, 4, 9, 9, 3, 9, 3], [0, 2, 2, 1, 0, 0, 2, 2, 2, 2, 2, 0, 2, 0, 0, 2, 0, 2], [0, 0, 0, 1], [3, 3, 2, 1, 0, 0, 3, 2, 3, 1, 2, 1, 1, 0, 1, 0, 2, 3, 1, 2, 0, 3, 2, 2, 1, 0, 1, 3, 3, 2, 2, 1, 1, 1, 1, 1, 2, 2, 0, 0, 1, 0, 2, 2, 2, 2, 1, 2, 2, 3, 1, 3, 3, 1, 1, 2, 1, 2, 0, 2, 1, 1, 2, 0, 0, 0, 1, 3, 1, 1, 1, 0], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [3, 2, 2, 3, 3, 0, 3, 1, 1, 1, 4, 1], [1, 1, 0, 1, 0, 1, 0, 2, 0, 0, 1, 2, 2], [0, 1, 1, 0, 1, 1, 0, 1, 1], [2, 0, 5, 0, 3, 5, 2, 1, 0, 3, 3, 1, 0, 2, 4, 2, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0], [2, 4, 1, 0, 3, 4, 0, 4, 4, 4, 0, 0, 2, 4, 4, 4, 0, 4, 0, 4, 4, 0, 4, 0, 4, 4, 0, 0, 1, 1, 0, 1, 2, 1, 1, 4, 4, 1, 4], [1, 3, 2, 3, 2, 2, 3, 3, 2, 3, 1, 1, 3, 1, 0, 2, 1], [1, 5, 0, 5, 4, 0], [2, 0, 1], [3, 2, 2, 0, 1, 1, 0], [23, 3], [0, 25], [2, 2], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 21, 21, 9, 12, 3, 5, 0, 0, 6, 2, 14, 2, 4, 8, 0, 4, 4, 27, 27, 18, 4, 72, 21, 12, 13, 9, 17, 7, 3, 39, 17, 6, 3, 7, 2, 2, 2, 1], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(saveChr(abs(divInt(int(1.0),i0)))[i2:]) \\g abs(mod(len(\"\"&\"\"),int(0.0))):{:\\nif False:{:\\nb2 = not s2 == (s0.rstrip() + in2.capitalize().strip(s0).capitalize())\\nif res0:{:\\nres0 = not in0.strip(in2.capitalize()).lstrip().capitalize()[( int(0.0) - int(4.0) ):i2] in saveChr(int(8.0)).rstrip(s2)\\n:}else:{:\\ni1 = i0\\ns1 = saveChr(( len(s0) - int(0.0) ))\\nloopBreak% = 0\\nfor in0 in saveChr(( i0 + min(mod(( int(3.0) - i2 ),int(4.0)), len(in0)) )).lstrip():{:\\ns1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = \"\"2\"\".endswith(\"\"2\"\")\\n:}\\nloopBreak% = 0\\nfor s2 in in1:{:\\ni2 = max(( divInt(int(6.0),int(9.0)) + int(8.0) ), int(2.0))\\nif \"\"X\"\" != \"\"a\"\"[:int(8.0)]:{:\\ns2 = \"\"z\"\"\\nloopBreak% = 0\\nfor s1 in getCharFromString(\"\"D\"\".capitalize(), ( mod(i2,i2) - int(6.0) )):{:\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif False:{:\\ni2 += mod(( ( ( int(4.0) * divInt(mod(max(int(0.0), max(saveOrd(saveChr(int(1.0))), int(0.0))),mod(int(4.0),( i0 + ( int(5.0) + int(6.0) ) ))),( i0 - i2 )) ) * i0 ) * int(4.0) ),max(int(9.0), int(9.0)))\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = True\\nloopBreak% = 0\\nwhile int(393.0) \\l i2:{:\\nb1 = not True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [5], [2], [0], [], [], [], [], [], [], [], [0, 1], [1], [0, 0], [], [2], [1], [], [5], [0, 1], [], [1], [], [], [0], [0, 3], [14], [], [], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 1, 0, 0, 1], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = \"\"O#\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [], [1, 3, 2, 0, 2, 3, 3, 1, 2, 1, 0], [0, 0, 0], [1, 3, 2], [0, 0, 2], [1], [3, 2, 2, 5], [0, 1], [], [1, 0, 4, 4, 0, 0, 0], [1, 0, 3], [5], [], [1, 0], [12], [23], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"xM\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 2, 2, 1, 0, 2, 2, 1, 1, 1, 0, 0], [0, 0, 1, 2], [1, 1, 2, 0, 2, 1, 0, 2, 1, 0, 0], [0, 0], [0, 0, 0, 0, 0, 0], [], [], [1, 1, 1, 0, 3, 1], [], [0, 0, 2, 0, 2, 0, 2], [], [2, 0, 5], [2, 0, 0, 1], [], [0], [1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [5, 0, 4, 9, 9, 0, 7, 9, 8, 4, 2, 5, 4, 2, 0, 8, 8, 2, 0, 8, 6, 1, 1, 6, 3, 2, 7, 4, 2], [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 0, 2, 2, 1, 0, 1, 0, 0, 2, 1, 1], [1, 0, 1, 1], [2, 3, 0, 0, 0, 1, 1, 1, 0, 3, 3, 2, 1, 0, 2, 1, 3, 3, 2, 2, 2, 3, 0, 2, 0, 2, 2, 0, 0, 1, 1, 0, 2, 1, 2, 3, 2, 3, 1, 3, 3, 3, 3, 0, 3, 2, 0, 1, 1, 3, 2, 3, 0, 1, 1, 0, 1, 0, 3, 2, 0, 3, 3, 0, 1, 1, 2, 2, 3, 0, 3, 3, 1, 0, 0, 3, 0, 1, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 4, 1, 3, 1, 1, 3, 3, 2, 4, 4, 3, 1, 0, 1, 2, 3, 3, 3, 1, 3, 1], [1, 0, 0, 2, 1, 2, 0, 0, 1, 1], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0], [1, 4, 3, 5, 3, 1, 0, 0, 0, 1, 1, 1, 0, 4, 2, 0, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0], [4, 1, 0, 4, 0, 0, 3, 3, 1, 4, 0, 3, 4, 4, 1, 4, 2, 0, 2, 0, 2, 1, 0, 4, 2, 1, 2, 0, 1, 3, 4, 0, 0, 2, 4, 0, 1, 1, 2, 1, 4, 1, 1, 1, 2, 3, 0, 2, 4, 2, 1, 0, 2, 1], [0, 0, 2, 2, 3, 0, 1, 0, 3, 0, 2], [2, 4], [1, 2, 0, 2, 0, 2, 2, 0, 2, 0, 0], [1, 0, 1, 1, 3, 2, 2, 0, 0, 3, 2, 0, 1, 3, 3], [2, 8, 5, 8], [8, 21, 2, 4], [0, 1, 0], [18, 27, 26, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 15, 15, 4, 11, 2, 6, 0, 0, 6, 0, 7, 0, 3, 4, 0, 1, 1, 29, 29, 26, 4, 80, 17, 22, 10, 10, 18, 15, 2, 54, 11, 2, 11, 15, 4, 4, 3, 4], "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( min(i1, i1) + i1 )\\ni1 = int(504.0)\\ns1 = getCharFromString(\"\"i\"\", int(9.0))\\nb1 = not b1\\nloopBreak% = 0\\nfor in1 in in0:{:\\nloopBreak% = 0\\nfor in2 in getCharFromString(in0, int(90798425.0)):{:\\ns1 = s0\\ni0 += i0\\nif ((\"\"C\"\" + s0.capitalize()) + (\"\"v\"\".strip().capitalize() + getCharFromString(s0[:saveOrd(s1[max(divInt(int(4.0),i0), mod(int(2.0),len(\"\"c\"\"[max(mod(mod(mod(max(i0, ( i0 * divInt(mod(i2,i1),int(0.0)) )),int(8.0)),i0),divInt(int(8.0),( len(s1) - ( len(saveChr(int(2.0))) * abs(saveOrd(\"\"/\"\"[saveOrd(s1[len(\"\"0\"\"):i2]):])) ) ))), max(( i2 + int(0.0) ), int(8.0))):min(mod(max(i0, int(6.0)),int(1.0)), i2)]))):])], int(1.0)))) == (getCharFromString(s0, i2) + in1):{:\\nloopBreak% = 0\\nwhile b1:{:\\nb0 = s2.rstrip(\"\"1\"\")[abs(divInt(i1,len(\"\"I\"\"))):] in \"\"F\"\"[len(getCharFromString(\"\"\\\\\\\\\"\", i0)):]\\ns0 = \"\"0\"\"\\ni1 += int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nres0 = True\\n:}\\nb1 = \"\"Ie\"\".endswith((s1 + \"\"[\"\"[int(3.0):( ( len(s2) - i0 ) - max(len(\"\"?\"\"[int(2.0):i0]), i2) )].capitalize()[max(i1, int(7.0)):])[i1:int(42.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [2, 0], [2], [0], [0], [], [], [], [1], [0, 1], [0], [], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 3, 2, 7, 4, 8, 2, 4, 4], [2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0], [0], [3, 0, 2, 2, 1, 0, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 0, 0, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 3, 2, 3, 0, 1, 3, 1, 3, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 3, 1, 1, 2, 1, 0, 2, 0, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [4, 1, 1, 1, 4, 2, 4, 4, 3, 4, 4, 0, 1, 4], [2, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0], [0], [3, 1, 3, 4], [1], [0], [0, 2, 4, 2, 4, 4, 0, 4, 1, 1, 0, 4, 4, 0, 2, 0], [3, 2, 2, 3, 0, 0, 2, 1], [0, 2], [1, 1, 1], [1], [], [24], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 0, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 3, 0, 8, 2, 1, 1, 1, 4, 1, 1, 9, 4, 2, 2, 1, 0, 1, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not saveOrd(in0) \\g i2:{:\\nloopBreak% = 0\\nfor s1 in in0.capitalize().capitalize()[:divInt(( int(7.0) * i1 ),i1)].lstrip()[:int(4.0)]:{:\\nin1 = \"\"y\"\".strip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [2], [], [], [], [], [], [], [2, 0], [], [5], [0, 1], [], [1], [0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [3, 1, 2, 7, 3, 9, 4, 8, 0, 2, 6], [0, 2, 2, 0, 1, 2], [0], [1, 0, 2, 3, 3, 3, 3, 1, 2, 1, 1, 2, 3, 2, 0, 3, 0, 2, 3, 0, 2, 3, 1, 1, 3, 2, 0, 0, 1], [0, 1, 0, 0, 1, 1, 1], [4, 0, 1, 1, 3, 2, 1, 3, 0], [1, 2, 0], [1, 0, 1, 1], [0, 0, 5, 5, 2], [1, 1], [], [0, 4, 2, 0, 3, 0, 2, 1, 0, 1], [1], [], [0, 1], [1, 1], [], [18, 22], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 11, 11, 6, 0, 29, 7, 9, 3, 4, 5, 2, 0, 10, 1, 0, 2, 2, 0, 2, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0.endswith(saveChr(int(31273.0))):{:\\ns0 = in2[i0:( saveOrd((in2 + \"\"s\"\"[:min(max(max(int(9.0), mod(int(4.0),int(8.0))), ( len(s2) - ( i2 * abs(i2) ) )), divInt(max(i0, mod(len(\"\"w\"\"),int(0.0))),int(2.0)))])) + min(mod(i1,i2), int(6.0)) )]\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 2, 1, 1, 2, 0, 1, 0, 1, 2, 2, 0, 0], [2, 1, 0, 0], [0, 1, 2, 0, 2, 0, 0, 1, 2], [0, 0], [0, 0, 0, 0], [], [], [3, 1, 3, 1], [4, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0], [4, 4], [1, 2, 1, 1], [], [0, 0, 1], [1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 4, 2, 3, 6, 8, 4, 7, 8, 0, 3, 3, 3, 2, 5, 4, 9, 5, 8, 6, 9, 9, 6, 6, 9, 3, 3, 3, 4, 4, 9, 1, 3, 0, 0, 1, 8, 4, 2, 9, 1, 0, 1, 0, 2, 6, 4, 5, 6, 6, 8, 5, 9, 3, 2, 2, 1, 6, 0, 1, 8, 4, 1, 3, 7, 3, 4, 7, 4, 0, 9, 5, 0, 3, 4, 5, 2, 6, 5, 3, 7, 7], [1, 0, 2, 2, 0, 0, 0, 1, 2, 2, 1, 1, 2, 0, 2, 2, 0, 1, 2, 1, 1, 0, 2, 1, 2, 1, 2, 0, 2, 0, 2, 1, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 0], [1, 0], [1, 2, 0, 1, 1, 1, 3, 1, 3, 1, 2, 1, 1, 1, 3, 0, 0, 3, 0, 0, 3, 3, 1, 1, 0, 1, 1, 2, 3, 3, 0, 0, 1, 0, 3, 3, 1, 1, 0, 1, 2, 3, 2, 1, 1, 3, 0, 0, 3, 3, 2, 3, 2, 3, 0, 3, 3, 0, 0, 0, 0, 1, 0, 3, 2, 2, 3, 0, 0, 1, 3, 0, 2, 3, 3, 2, 2, 1, 3, 3, 1, 1, 0, 3, 0, 1, 1, 0, 3, 2, 1, 2, 3, 3, 1, 1, 2, 0, 1, 0, 1, 3, 1, 1, 3, 3, 3, 0, 3, 2, 1, 2, 3, 2, 2, 1, 3, 0, 3, 2, 3, 3, 0, 1, 0, 1, 2, 2, 2, 3, 2, 3, 1, 3, 2, 2, 0, 3, 1, 1, 2, 0, 0, 3, 3, 1, 2, 1, 3, 3, 2, 2, 3, 0, 3, 1, 3, 3, 0, 3, 2, 3, 2, 1, 0, 2, 2, 1, 2, 1, 1, 2, 1, 2, 3, 3, 1, 3, 2, 1, 1, 0, 2, 1, 3, 2, 3, 1, 1, 3, 2, 3, 3, 0, 3, 1, 1, 2, 0, 0, 1, 2, 0, 1, 2, 1, 2, 3, 2, 3, 2, 1, 3, 1, 0, 2, 1, 1], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0], [3, 1, 4, 1, 3, 2, 2, 4, 2, 4, 3, 2, 1, 0, 3, 3, 2, 3, 0, 1, 1, 2, 0, 1, 2, 2, 1, 0, 4, 2, 2, 1, 0, 2, 0, 0, 0, 2, 2, 4, 2, 3, 2, 4, 2, 2, 0, 0, 4, 3, 4, 4, 3, 1, 0, 4, 4, 2, 2, 4, 1, 0, 2, 2, 2], [1, 1, 1, 2, 1, 2, 1, 0, 2, 0, 2, 1, 1, 0, 1, 0, 0, 1, 0, 0, 2, 2, 1, 0, 2], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0], [5, 1, 4, 3, 5, 3, 3, 2, 0, 1, 3, 2, 5, 1, 5, 1, 0, 1, 2, 1, 3, 4, 5, 3, 0, 1, 3, 2, 0], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0], [0, 3, 0, 0, 4, 2, 1, 4, 0, 2, 2, 2, 3, 0, 2, 3, 1, 3, 1, 1, 1, 2, 0, 3, 2, 4, 2, 2, 3, 2, 4, 3, 3, 0, 2, 4, 0, 4, 0, 1, 1, 3, 3, 3, 3, 2, 3, 0, 0, 1, 2, 0, 0, 4, 1, 3, 3, 3, 2, 1, 1, 0, 3, 2, 3, 1, 4, 2, 2, 2, 0, 2, 1, 4, 2, 2, 2, 0, 1, 2, 4, 4, 1, 1, 0, 2, 3, 0, 4, 2, 4, 2, 1, 4, 0, 1, 2, 0, 4, 1, 2, 0, 1, 4, 1, 1, 1, 0, 4, 1, 1, 2, 3, 2, 2, 1, 0, 0], [2, 2, 0, 2, 0, 2, 1, 0, 2, 3, 2, 3, 0, 3, 1, 0, 0, 1], [4, 0, 4], [2, 0, 0, 2, 1, 0, 0, 2, 2, 2, 0, 1, 0, 2, 1, 1, 2, 2, 0, 0, 2, 2, 1, 0, 1, 0, 2, 1, 0, 0, 0], [3, 2, 0, 1, 0, 0, 1, 0, 1, 3, 0, 3, 0, 3, 0, 1, 0, 0, 2, 1, 2, 3, 3, 2, 0, 1, 1, 1, 1, 3], [21, 15, 9, 9, 1, 25, 11, 18, 16, 25], [22, 8, 25, 0, 20, 17, 25, 11, 23, 7, 15], [1, 0, 1, 2], [26, 24, 22, 21, 25, 10, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 13, 13, 4, 9, 2, 4, 0, 0, 4, 1, 7, 1, 2, 4, 0, 3, 1, 82, 82, 44, 2, 218, 48, 65, 25, 24, 29, 30, 2, 118, 17, 3, 31, 30, 10, 9, 4, 7], "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in2.startswith((s1 + in1))\\nloopBreak% = 0\\nwhile True:{:\\ni1 -= int(0.0)\\nin0 = \"\"[\"\"[( i0 - int(4.0) ):].capitalize()\\nif not True:{:\\nb1 = int(2.0) \\le int(36.0)\\nin2 = in0.capitalize()\\nres0 = (in0 + (\"\"1\"\" + (\"\"Vw\"\" + \"\"P\"\"))[:len(\"\"J\"\")])[int(8.0):][max(int(4.0), divInt(int(7.0),int(8.0))):int(0.0)][saveOrd(s2[i2:i2]):max(i0, i0)].startswith((getCharFromString((((s0 + getCharFromString(s1, len(in0.capitalize()))[abs(int(3.0)):int(3325.0)]) + \"\"i\"\").capitalize()[i0:] + \"\"J\"\")[int(4958.0):][int(699.0):], ( abs(saveOrd((((((s2 + in2)[:i1] + \"\"z?\"\") + s1[i2:int(6.0)]) + in2) + saveChr(i2)))) - abs(saveOrd(\"\"B\"\")) ))[int(69.0):int(3.0)] + (((\"\"=Z\"\"[i1:] + \"\"<\"\") + s1) + ((\"\"L\"\" + getCharFromString(s0[int(3.0):][mod(len(\"\"a\"\"[mod(int(3.0),int(4.0)):abs(i1)]),i2):][:max(min(( len(s1[divInt(len(\"\"S\"\"),i0):][abs(len(\"\"Q\"\".capitalize().rstrip(\"\"0\"\")[:i2])):][i2:i0].capitalize()) * i1 ), int(4.0)), i2)], min(mod(( max(i1, i1) - int(9.0) ),max(i0, divInt(abs(min(mod(divInt(int(1.0),max(abs(int(3.0)), int(0.0))),i2), abs(i1))),int(0.0)))), int(1.0))))[:i2] + s2))))\\nb1 = False\\n:}else:{:\\nloopBreak% = 0\\nfor s1 in (in0 + getCharFromString(\"\"u\"\"[max(( int(8.0) * ( min(saveOrd(in1.rstrip(\"\"1\"\")), int(4.0)) - int(2.0) ) ), ( i1 + int(9.0) )):i2], int(1.0))[:abs(int(0.0))].lstrip())[int(1.0):abs(max(min(i0, abs(( int(0.0) * divInt(min(mod(( int(2.0) + min(i2, min(( abs(abs(i0)) * int(6.0) ), i2)) ),int(4.0)), mod(( ( saveOrd(in2[mod(abs(int(5.0)),len(saveChr(( divInt(i1,abs(int(6.0))) - int(6.0) )))):]) - mod(i0,i0) ) + saveOrd(\"\"@\"\") ),abs(int(8.0)))),( int(5.0) - abs(min(( mod(min(i1, saveOrd(in0[:int(9.0)])),len(\"\"\"\\\\\"\"\")) + saveOrd(getCharFromString(\"\"2\"\", i1)) ), saveOrd(\"\"Z\"\"))) )) ))), ( len(\"\"rz\"\") + mod(int(3.0),i2) )))]:{:\\nloopBreak% = 0\\nfor s0 in s1:{:\\ni0 = divInt(divInt(int(2.0),divInt(int(2.0),int(1.0))),( int(6.0) - ( max(min(int(0.0), saveOrd(getCharFromString(\"\"l\"\", ( int(1.0) + int(8.0) )))), i2) + divInt(int(4.0),saveOrd(\"\"x\"\")) ) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = (\"\"/\"\"[( abs(int(1.0)) * int(37.0) ):abs(( saveOrd(s2) * max(i0, min(int(3.0), int(4.0))) ))][divInt(i0,i2):int(7409.0)] + s0)[divInt(i0,int(5.0)):( int(03452.0) - mod(abs(divInt(abs(( int(6.0) + abs(int(5.0)) )),i0)),( int(37.0) * int(7.0) )) )]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [1, 0, 2], [], [0], [], [], [3], [], [2], [], [1], [], [], [], [], [0, 1], [9, 1], [0, 2, 0], [1, 1], [3, 1, 0], [], [4], [0, 2], [], [4, 4, 2], [0, 1, 0, 0, 1], [], [4, 0, 0, 4, 1, 1], [3, 1], [5], [], [0, 0, 0, 3, 3], [13, 19, 15], [], [], [28, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 1, 0, 3, 5, 0, 6, 2, 1, 0, 5, 3, 0, 0, 2], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += saveOrd(in1.strip(in1))\\nres0 = saveChr(int(91.0)) not in \"\"NT\"\"\\ns2 = \"\"P]*\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 0, 1], [2, 0, 2, 1, 0], [1, 1], [1, 2, 0], [], [0, 0], [], [], [0], [0, 2, 3], [1, 1, 1], [0, 0, 0], [], [], [], [], [1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [2, 6, 1, 5, 4, 5, 0, 7, 0, 1, 5, 4, 5, 4, 9], [1, 0, 0, 2, 0, 2, 0, 0], [1], [3, 0, 3, 1, 3, 0, 3, 1, 1, 3, 0, 3, 3, 0, 0, 2, 1, 0, 1, 3, 1, 3, 2, 1, 0], [0, 1], [3, 0, 3, 0, 1, 2, 1, 0, 2], [2, 1], [0], [2, 1], [0, 0, 0, 0, 1, 1], [], [2, 0, 3, 1, 4, 4, 1], [1, 2], [], [2], [2, 1, 3, 1, 2, 2], [], [3, 10], [1, 1, 8], [14]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 2, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 2, 15, 15, 8, 1, 25, 2, 9, 2, 1, 2, 6, 0, 7, 2, 0, 1, 6, 0, 2, 3, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(s2[i1:]) \\l min(int(2.0), len((\"\"1d+k1\"\" + saveChr(i0)))):{:\\ni0 *= min(int(615.0), int(45.0))\\n:}else:{:\\nif max(i2, abs(max(i0, i2))) == ( int(0701.0) - i0 ):{:\\ns1 = \"\"8\"\".capitalize()\\nb0 = int(54.0) \\ge min(int(54.0), abs(divInt(int(9.0),i0)))\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [2], [1, 1], [], [0, 0], [], [], [], [3], [0, 1], [0], [], [2], [], [], [], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [4, 6, 0, 1, 1, 5, 1, 6, 6, 4, 8, 1, 3, 0, 1, 9, 2], [2, 0, 1, 0, 1, 2, 1, 2, 0], [1, 0], [2, 2, 3, 2, 1, 3, 2, 0, 0, 1, 2, 2, 3, 1, 2, 1, 1, 3, 2, 3, 1, 2, 0, 1, 0, 0, 1, 2, 0, 1, 0], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [1, 2, 1, 4, 0], [1, 1, 2, 0], [1, 0, 1, 0, 1, 1, 0, 0], [], [1], [], [1], [], [], [], [2], [], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 17, 17, 9, 2, 31, 10, 5, 3, 8, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= mod(divInt(max(( int(4.0) - abs(mod(i0,i1)) ), int(60.0)),divInt(mod(max(int(11.0), mod(int(5.0),int(1.0))),saveOrd(\"\"8\"\")),( min(int(6.0), divInt(i0,int(6.0))) * i1 ))),i2)\\nloopBreak% = 0\\nwhile not int(4.0) \\ge divInt(i1,int(8130192.0)):{:\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 0, 0], [2, 0], [0, 2], [0], [0, 0], [], [], [0], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 9, 3, 7, 1, 2, 1, 3, 5, 6, 1, 8, 2, 6, 7, 9, 7, 3, 4, 0, 5, 3, 6, 3, 5, 6, 1, 2, 2, 0], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 0, 2, 1, 1, 0, 1, 2, 0, 2], [], [1, 1, 1, 1, 2, 1, 3, 1, 2, 0, 3, 3, 3, 2, 3, 2, 2, 2, 3, 3, 2, 0, 1, 1, 0, 0, 1, 2, 2, 2, 1, 2, 0, 0, 2, 2, 2, 2, 2, 1, 0, 1, 3, 2, 3, 1, 3, 1, 0, 3, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 2, 3, 0, 1, 0, 1, 3, 0, 3, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 2, 0, 2, 4, 2, 0, 0, 1, 1, 4], [1, 0, 0, 1, 1, 2, 1, 0, 2, 2, 1, 1, 2], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0], [3, 3, 3, 3], [1], [0], [4, 0, 1, 0], [1], [], [], [1], [], [3], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 31, 31, 19, 0, 74, 24, 14, 13, 11, 4, 1, 1, 4, 1, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(14.0) \\g int(9371213.0):{:\\nloopBreak% = 0\\nfor in0 in saveChr(int(5618.0)):{:\\nb0 = int(2679.0) \\le ( int(73.0) - max(int(4.0), ( i2 + min(max(max(( abs(( divInt(( min(abs(( i0 + int(0.0) )), int(5.0)) - i2 ),i1) - int(3.0) )) * mod(( ( int(6.0) - divInt(i2,i0) ) + divInt(( ( mod(( int(3.0) * i1 ),int(5.0)) * saveOrd(in0) ) - ( abs(int(6.0)) - min(int(1.0), i0) ) ),min(i1, ( divInt(mod(i0,i0),i2) * divInt(mod(divInt(i1,i1),i0),i1) ))) ),divInt(max(i2, int(2.0)),i0)) ), int(2.0)), max(i2, saveOrd(\"\"d\"\"))), int(0.0)) )) )\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 3, 2, 0, 3, 1, 1, 3, 1, 2], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1, 1, 0, 0, 1, 0, 1], [0], [2, 3, 0, 2, 0, 4, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 0, 1], [0, 1, 3, 1, 2, 2, 2], [17], [19, 5], [4, 1, 0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 10, 0, 50, 16, 10, 6, 10, 4, 7, 1, 16, 4, 1, 3, 7, 1, 2, 3, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1[min(mod(len(getCharFromString(\"\"R\"\", i0)),abs(( int(0.0) + int(7.0) ))), divInt(int(5.0),min(i1, divInt(( ( int(7.0) + i2 ) - divInt(len(saveChr(int(7.0))),i0) ),max(max(divInt(int(1.0),i1), divInt(len(\"\"t\"\"[:int(7.0)]),mod(int(7.0),int(9.0)))), i2))))):i1])[( int(8.0) - max(divInt(abs(i2),( ( divInt(int(5.0),int(0.0)) + mod(int(4.0),i0) ) * int(8.0) )), i0) ):]:{:\\nres0 = (\"\";f4\"\" + in1.capitalize()).rstrip() not in \"\"10\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [0], [1, 2], [0], [], [], [], [0], [], [0, 0], [], [], [2, 0], [], [], [], [1, 1, 1], [9, 5, 4], [0, 0], [1], [3, 1, 1, 1, 0], [], [1], [0], [], [3, 1, 2, 1], [1], [0], [0, 3, 4, 3, 1, 3, 4, 0], [1, 1], [], [], [0], [18], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 1, 5, 0, 1, 1, 0, 4, 1, 1, 8, 2, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in s1:{:\\ni0 += max(int(9.0), int(5.0))\\ns2 = (saveChr(int(4.0)) + (\"\"S\"\" + (saveChr(i0) + s1)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 1, 2, 0, 0, 1, 0, 1, 1], [2], [0, 2, 2, 0, 2, 2, 1, 1], [], [0, 0, 0], [], [], [0, 3, 1], [], [0, 2, 2], [], [5, 3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 4, 5, 7, 2, 7, 3, 7, 3, 6, 6, 7, 9], [2, 0, 2, 1, 2, 1, 1, 2, 1, 2, 2, 0, 1, 2, 0, 0, 0, 0, 1, 1], [0, 1], [1, 3, 2, 2, 0, 1, 1, 3, 1, 2, 3, 3, 3, 1, 1, 3, 1, 2, 2, 0, 3, 1, 3, 0, 1, 0, 2, 2, 1, 2, 0, 3, 2, 0, 0, 1, 2, 2, 0, 0, 3, 2, 1, 0, 0, 0, 3, 0, 0, 0, 3, 2, 0, 0, 1, 2, 3, 3, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 3, 4, 3, 2, 2, 2, 2, 0, 1, 1, 0, 3, 1], [0, 2, 0, 2, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 1], [5, 4, 2, 2, 4, 3, 2, 2, 0, 0, 1, 1], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [], [3, 2, 4, 1, 4, 2, 2, 3, 0, 0, 4, 2, 4, 4, 2, 0, 2, 1, 1, 1, 0, 1, 4, 3, 4, 4, 1, 3, 1, 1, 3, 1, 3, 3, 0, 3, 2, 1, 1, 3, 1, 0, 0, 3, 1, 4, 0], [1, 3, 2, 3, 0, 1, 1, 0, 2], [3, 5], [1, 1, 1, 0, 0, 2, 1], [2, 1, 2, 2, 1, 0, 3, 3, 1, 3, 2, 1, 2, 0, 3, 3, 2, 3, 3, 3, 0, 2, 0, 3], [3, 3, 11, 13], [1, 4, 23, 15], [2, 9, 2, 8, 5, 8, 8], [2, 20, 27, 17, 2, 8, 28, 31, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 1, 8, 0, 3, 0, 0, 3, 0, 3, 0, 2, 1, 0, 0, 0, 14, 14, 20, 2, 60, 14, 14, 9, 6, 12, 24, 0, 47, 9, 2, 7, 24, 4, 4, 7, 9], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\nin2 = (saveChr(int(6.0))[:min(( divInt(i2,int(2.0)) + int(4.0) ), len(\"\"2\"\"))] + (in1 + s2)[:int(5.0)][:( saveOrd(getCharFromString(s2[len(\"\"b\"\"[abs(int(7.0)):]):int(2.0)], abs(int(7.0))).strip(\"\"9\"\")[divInt(( i0 * abs(int(3.0)) ),abs(i2)):int(7.0)].capitalize()) + i1 )].lstrip(\"\"2eD\"\"))\\nloopBreak% = 0\\nwhile in1.endswith(\"\"\\\\\\t\"\"):{:\\nin0 = saveChr(mod(( int(3.0) * ( i2 + min(divInt(i1,i1), int(6.0)) ) ),divInt(( i2 + i1 ),max(mod(int(6.0),i2), i2))))\\nb1 = (saveChr(i0) + getCharFromString(\"\";\"\", max(i1, i2))) != (\"\"x\"\" + \"\"\\\\\\\\\"\")\\ns2 = (\"\"8p5\"\" + ((s2 + (\"\"D.\\\\\\t8%\"\"[:i0] + \"\"]\"\")) + (\"\"`L\"\" + s0)))\\ns0 = s1\\ni0 = min(( i0 + i0 ), int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= ( len((\"\"8N-\"\" + s1.capitalize())) - max(i1, int(9.0)) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 1, 0, 1], [6, 7, 8, 8], [2, 0, 2, 2, 0], [], [3, 1, 1, 0, 2, 2, 3, 0, 1, 2, 1, 0], [1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1], [1, 2], [1], [], [0, 0, 0, 0, 1], [], [4, 1], [3], [1], [], [2, 3, 1, 3, 2], [], [21], [7, 8], [24, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 0, 5, 0, 2, 1, 1, 0, 5, 0, 1, 2, 2], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = len(\"\"7?v,8\"\".rstrip()) == int(6.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [0], [0], [], [], [], [], [2, 5], [0, 1], [], [4, 1, 0], [2], [], [1], [0, 1], [25], [7], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"Zh\"\".capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1], [1, 2, 2, 2, 0, 0, 1], [2, 0, 2], [0, 2, 1, 2], [0], [0, 0], [], [], [1, 2], [4], [0, 0, 2, 2, 1], [0], [3, 4], [0, 3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 9, 2, 8, 0, 4, 2, 1, 0, 3, 4, 9, 3, 9, 6, 0, 7, 1, 8, 8, 6, 3, 3, 9, 1, 1, 4, 7, 8, 7, 8, 2, 6, 4, 6, 9, 2, 3, 6, 0, 2, 6, 4, 3, 1, 9, 1, 5, 2], [0, 0, 0, 1, 1, 2, 0, 2, 2, 1, 1, 0, 1, 2, 1, 1, 1, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 2, 2, 0, 1, 2, 2, 1, 1, 0, 2, 0], [1], [0, 1, 1, 1, 2, 3, 3, 2, 3, 1, 0, 0, 1, 2, 0, 3, 3, 2, 0, 3, 0, 0, 1, 3, 1, 1, 3, 3, 2, 2, 2, 2, 3, 2, 1, 1, 1, 0, 2, 0, 2, 3, 1, 3, 2, 0, 2, 0, 3, 3, 2, 2, 1, 1, 1, 1, 3, 3, 0, 0, 1, 1, 1, 1, 1, 2, 3, 2, 3, 1, 3, 1, 1, 2, 1, 3, 0, 1, 0, 3, 1, 2, 0, 3, 2, 3, 2, 3, 0, 1, 0, 2, 1, 3, 2, 1, 0, 0, 0, 0, 2, 0, 2, 3, 1, 1, 0, 3, 2, 0, 1, 1, 2, 0, 3, 0, 1, 1, 3, 0, 1, 2, 2, 1, 1, 2, 1, 0, 3, 2, 2, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 1, 1, 2, 1, 0, 0, 3, 3, 3, 0, 3, 2, 2, 2, 0, 3, 0, 1, 1, 3, 1, 3, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0], [2, 1, 3, 2, 0, 2, 3, 3, 1, 0, 0, 0, 1, 2, 4, 0, 0, 3, 1, 3, 3, 4, 1, 0, 0, 0, 1, 0, 3, 4, 0, 1, 2, 2, 3, 1, 3, 2], [0, 0, 2, 0, 1, 1, 0, 2, 1, 1, 0, 1, 0, 2], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1], [3, 2, 3, 5, 0, 2, 1, 0, 5, 1, 1, 3, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [3, 4, 1, 2, 4, 3, 3, 4, 2, 3, 2, 2, 2, 2, 4, 2, 4, 0, 2, 1, 2, 4, 4, 2, 1, 2, 1, 4, 1, 1, 3, 2, 2, 4, 4, 4, 4, 1, 2, 4, 0, 0, 0, 2, 2, 4, 2, 0, 4, 4, 1, 4, 4, 1, 1, 1, 0, 0, 3, 2, 4, 3, 4, 4, 2, 0, 3, 4, 4, 1, 4, 4, 4, 0, 4, 0, 1, 1, 4, 4, 2, 0], [1, 2, 3, 1, 3, 2, 3, 0, 3, 2, 2, 1, 3, 3, 0, 0, 1, 2, 1, 3, 1, 3, 0, 2, 3, 2, 0, 1, 1], [3, 2, 5, 5, 4, 5, 5, 0, 0], [2, 1, 1, 2, 0, 2, 1, 1, 1, 1, 2, 0, 2, 2, 1, 1, 1, 1, 2, 2], [1, 1, 1, 3, 0, 2, 2, 3, 2, 0, 0, 3, 1, 1], [20, 14, 20], [23, 14, 16, 7, 23], [2, 4, 4], [21, 16, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 1, 2, 0, 0, 2, 1, 5, 1, 2, 2, 1, 0, 0, 49, 49, 38, 1, 165, 41, 38, 14, 28, 14, 14, 1, 82, 29, 9, 20, 14, 3, 5, 3, 3], "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b2\\nloopBreak% = 0\\nwhile ( (saveChr(i0) + \"\"x\"\") != (((saveChr(int(2.0))[int(9.0):][int(2.0):divInt(abs(max(( len(in0.strip()[:int(8.0)]) + i0 ), i0)),int(0.0))][divInt(i1,abs(min(mod(i1,abs(i2)), i0))):][:int(4.0)] + \"\"o\"\"[:len(\"\"q\"\"[:int(2.0)].strip(\"\"<\"\"[int(1.0):]).capitalize()[:len(getCharFromString(\"\"U\"\", max(mod(divInt(mod(mod(min(divInt(int(0.0),int(3.0)), int(4.0)),i2),mod(i2,( min(int(9.0), min(divInt(i1,divInt(i1,max(abs(divInt(mod(int(3.0),int(9.0)),int(6.0))), int(0.0)))), saveOrd(\"\"2\"\"))) + min(i0, i1) ))),int(7.0)),int(1.0)), int(8.0))))])])[:int(8.0)].lstrip((saveChr(int(6.0)).capitalize().capitalize().strip(\"\"4\"\")[mod(min(mod(len(s2.rstrip(in0)[int(3.0):]),max(int(3.0), int(9.0))), divInt(int(1.0),len(in2))),i2):][int(1.0):i1] + s0[:len(getCharFromString(getCharFromString(\"\"-\"\", int(4.0)), divInt(i1,saveOrd(saveChr(( max(divInt(min(i1, int(7.0)),i2), divInt(int(8.0),min(divInt(int(7.0),i0), i1))) * i2 ))))))].strip(\"\"4\"\".capitalize())[:i1][:mod(i0,( min(int(8.0), int(2.0)) + i1 ))])) + \"\"O\"\") + \"\"U\"\").capitalize()[max(mod(i2,int(6.0)), int(4.0)):] and s2.startswith(s1) ):{:\\nloopBreak% = 0\\nfor s0 in (saveChr(mod(i0,min(i2, int(6.0))))[:int(9.0)] + (saveChr(len(in2[i2:])).strip((getCharFromString(\"\"!\"\", int(2.0)).lstrip() + s1.capitalize().lstrip().capitalize())) + getCharFromString(s1, ( divInt(int(3.0),int(6.0)) - ( int(0.0) - i2 ) )))):{:\\nloopBreak% = 0\\nwhile saveOrd(\"\"h\"\") \\le ( ( ( min(( i0 + divInt(i1,divInt(int(2.0),i2)) ), ( int(6.0) * int(4.0) )) - divInt(int(3.0),i2) ) - i1 ) + max(abs(abs(i1)), len(\"\"x\"\")) ):{:\\nin0 = saveChr(( mod(( i0 - max(i2, int(1.0)) ),int(9.0)) + len(saveChr(int(1.0))) ))\\ni0 *= abs(int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in1[int(2.0):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 2, 2, 0, 1], [0, 1, 0], [2, 2], [0, 0], [0], [], [], [], [], [2], [], [1], [], [], [], [0], [1, 1, 1], [3, 9, 2], [0, 0, 2, 0, 2, 1], [], [1, 1, 0, 0, 3, 0, 3, 0, 0, 0], [1], [1, 2, 3], [2], [], [1, 5, 2, 3, 1, 1, 0, 4, 0], [1, 0, 1, 0, 1], [0, 0], [2, 2, 2, 0, 2, 2, 0, 0, 3, 1, 4, 1, 0, 3, 0, 1], [0], [], [1, 2, 2, 2, 0], [1, 1, 3, 1, 1], [], [17, 7, 22, 14], [], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 2, 2, 6, 0, 10, 0, 2, 0, 0, 9, 5, 2, 16, 1, 0, 5, 5, 0, 4, 0, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[int(3.0):][int(9.0):][:i0]:{:\\nif s2[i0:max(i2, abs(i0))][i2:] not in in0:{:\\nloopBreak% = 0\\nfor s1 in (\"\"r\"\" + getCharFromString(\"\"h\"\", i1)):{:\\ns1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin1 = (s0 + \"\"wo\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1, 0, 0, 0, 2, 0, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 1, 1, 2, 3, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 0, 3, 2, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 1, 3, 0, 1, 2, 1, 4, 1, 3, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 23], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 14, 14, 18, 1, 61, 17, 13, 9, 8, 6, 2, 0, 16, 3, 1, 4, 2, 2, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[max(i0, i2):]:{:\\nres0 = ( abs(mod(int(0.0),int(7.0))) != ( max(len(in1), i2) + ( divInt(( divInt(i0,( min(( i1 + max(abs(divInt(int(5.0),i2)), ( max(int(7.0), i1) * int(7.0) )) ), int(1.0)) - i2 )) + i0 ),divInt(int(7.0),saveOrd(getCharFromString(in0[divInt(max(i0, ( ( ( int(7.0) * int(9.0) ) - mod(int(8.0),i2) ) - int(5.0) )),int(0.0)):len(saveChr(i1))], max(divInt(i0,i0), i0))[i2:int(4.0)]))) * i0 ) ) or ( (\"\"R\"\" + s0.rstrip()).endswith(\"\"X\"\") and True ) )\\n:}else:{:\\ni1 = int(8.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [1], [2], [], [0], [], [], [], [], [2, 0], [], [5], [0, 1], [], [1], [0], [1], [3], [0], [0], [1, 0], [], [], [], [], [0, 0, 5, 1], [1, 0, 0, 1], [], [0, 4, 2, 0, 2, 1, 3, 0, 1], [3], [3], [1, 2], [2, 0, 3, 0], [5, 18], [], [1], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 2, 0, 0, 0, 0, 4, 4, 0, 9, 1, 1, 2, 4, 2, 0, 1, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0.endswith(s0[:int(3.0)].lstrip(\"\"1\"\"[i0:])):{:\\nin2 = (s1 + \"\"F>S\"\")\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [2, 2, 0, 2, 1, 0, 0, 2, 2, 0, 1, 2, 0], [0, 2, 2, 0, 0, 1], [1, 0, 2, 0, 0, 1, 0], [0, 0, 0], [0, 0, 0, 0, 0], [], [], [0, 1, 2, 1, 2], [5, 0, 2], [1, 0, 2, 2, 1, 2, 0, 0, 0, 2, 1], [0, 0, 0], [3, 0, 5, 4], [2, 0, 2, 3], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 0, 6, 6, 0, 3, 0, 5, 7, 4, 8, 2, 8, 3, 1, 6, 5, 4, 0, 3, 0, 9, 8, 6, 1, 3], [0, 0, 0, 0, 2, 0, 2, 1, 0, 2, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 2, 2, 2, 0, 1, 1, 0, 2, 2, 1, 2, 2, 2, 1, 0, 0, 1, 2, 2], [1, 1], [0, 2, 3, 0, 3, 3, 3, 1, 2, 3, 3, 0, 0, 2, 3, 2, 3, 0, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 3, 3, 2, 0, 3, 0, 3, 2, 2, 3, 2, 2, 1, 1, 2, 2, 2, 0, 0, 0, 0, 2, 0, 0, 1, 1, 3, 3, 1, 3, 0, 3, 3, 3, 0, 2, 1, 3, 1, 0, 2, 0, 2, 0, 2, 0, 3, 1, 1, 3, 2, 2, 0, 1, 0, 0, 1, 1, 3, 1, 2, 0, 0, 1, 2, 2, 3, 1, 2, 3, 2, 0, 1, 2, 3, 2, 3, 3, 3, 2, 1, 0, 0, 1, 0, 2, 2, 2, 0, 3, 1, 2, 1, 2, 3, 1, 1, 2, 3, 0, 2, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [2, 4, 0, 3, 3, 3, 3, 3, 2, 2, 3, 2, 1, 4, 2, 3, 3, 0, 4, 0, 1, 4, 4, 2, 0, 1, 2, 3, 4, 1, 2, 0], [2, 2, 0, 2, 1, 1, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 0, 0, 1, 2, 0, 1], [1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [4, 0, 2, 0, 0, 2, 3, 1, 1, 1, 0, 1, 4, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0], [4, 0, 3, 2, 2, 0, 0, 2, 1, 2, 2, 1, 0, 1, 4, 0, 1, 1, 4, 2, 1, 2, 2, 1, 4, 2, 2, 4, 1, 0, 2, 0, 2, 4, 1, 4, 4, 1, 0, 1, 2, 2, 0, 4, 1, 0, 1, 4, 1, 2, 1, 1, 0], [1, 0, 1, 2, 1, 3, 2, 0, 3, 0], [3, 3], [0, 2, 2, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 2, 1], [3, 1, 1, 2, 1, 3, 3, 0, 0, 2, 2, 0, 1, 1, 3, 2], [12, 24, 25], [9, 12, 9, 18, 10], [4, 6, 4, 9], [21, 12, 26, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 13, 13, 6, 7, 3, 5, 0, 0, 5, 3, 11, 3, 4, 4, 1, 0, 1, 27, 27, 39, 2, 133, 37, 32, 22, 17, 15, 16, 3, 53, 10, 2, 15, 16, 3, 5, 4, 4], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in saveChr(i0):{:\\nloopBreak% = 0\\nwhile ( abs(i0) * saveOrd(s0) ) != min(len((s2[int(9.0):][( len(s0) * len(\"\"<\"\"[i0:]) ):i0] + \"\"j\"\"[:( len(s0) + ( len(\"\"m\"\") * i2 ) )][( int(2.0) - int(0.0) ):i0])), i2):{:\\ni1 -= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not getCharFromString(s2, i2) != \"\"4\"\":{:\\nb0 = \"\"j\"\" in saveChr(int(6.0))\\nin0 = \"\")\"\"[:mod(( abs(abs(mod(i2,len(\"\"[\"\"[:i0][:abs(divInt(( max(mod(mod(int(6.0),int(0.0)),divInt(mod(( i1 + i0 ),i0),i2)), ( i0 + i0 )) * int(3.0) ),int(0.0)))])))) + saveOrd(saveChr(abs(int(5.0)))[len(\"\"M\"\"):i1][:len(s1)].capitalize()) ),min(saveOrd(s1[:i0]), mod(int(7.0),min(int(4.0), i2))))]\\nb1 = mod(i2,( i2 * ( i0 * max(int(8.0), int(2.0)) ) )) \\l saveOrd(\"\"Y\"\".lstrip(getCharFromString(\"\"6\"\", mod(( i1 * int(8.0) ),i1)).capitalize())[:i0])\\nloopBreak% = 0\\nfor s1 in s0:{:\\nloopBreak% = 0\\nfor s1 in \"\"4\"\":{:\\nb2 = in1[int(3.0):][int(1.0):saveOrd(\"\"Z\"\".lstrip(s0))].endswith(\"\"s\"\")\\ni2 += int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b1:{:\\nb2 = not ( getCharFromString(\"\"k\"\", divInt(i2,i1)).startswith(\"\"`\"\"[:int(5.0)]) or ( ( abs(int(4.0)) * ( min(( i2 * int(0.0) ), divInt(max(( abs(len(\"\"9\"\")) + saveOrd(s0) ), ( int(3.0) + i2 )),i2)) - int(0.0) ) ) * i1 ) == divInt(divInt(divInt(i0,max(int(9.0), divInt(int(8.0),( abs(int(6.0)) + int(1.0) )))),mod(min(i0, ( i1 - i2 )),int(3.0))),i2) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [0], [0], [], [], [], [2], [5, 2], [1, 1], [0, 0], [], [], [], [], [0], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 8, 5, 3, 4, 2, 8, 7, 5, 6, 8, 7, 8, 2, 3, 0], [0, 0, 1, 0, 2, 0, 2, 2, 1, 2], [], [0, 3, 1, 2, 0, 3, 1, 2, 2, 1, 3, 2, 2, 3, 0, 1, 2, 3, 2, 0, 2, 2, 3, 1, 0, 0, 3, 1, 1, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 1, 3, 1, 3, 1, 3, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0, 4, 2, 1, 4, 1, 4, 1], [2, 0, 1, 2, 1, 2, 0], [0, 0, 0, 0, 0, 0], [2, 0], [1], [], [0, 2, 0, 1], [], [], [0], [2], [], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 16, 16, 10, 0, 49, 13, 12, 7, 6, 2, 1, 0, 4, 0, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i0 != max(int(5.0), divInt(i0,min(int(85.0), divInt(( int(34.0) * max(( divInt(max(i1, int(2.0)),divInt(min(divInt(i0,divInt(( saveOrd(s2) + int(8.0) ),i2)), i0),abs(int(7.0)))) - int(5.0) ), i2) ),max(( i2 * int(6.0) ), ( int(8.0) - saveOrd(s0[i1:( ( int(7.0) * max(int(8.0), saveOrd(\"\"8\"\")) ) + int(2.0) )]) )))))):{:\\nb2 = max(i2, int(3.0)) == int(0.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 1], [0, 0, 2, 2, 1], [1, 1], [2, 1, 2], [], [0, 0], [], [], [], [4], [2, 1], [0], [2], [], [], [], [0, 0], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 1, 0, 3, 5, 4, 9, 5, 3, 4, 3, 2, 0, 2], [0, 2, 2, 2, 2, 0, 0, 1, 0, 1, 2, 1, 0, 0, 0, 2], [1], [2, 0, 1, 2, 0, 1, 3, 3, 0, 0, 0, 2, 0, 0, 2, 1, 3, 3, 0, 2, 0, 3, 1, 1, 1, 1, 2, 2, 0, 2, 3, 3, 3, 0, 2, 1, 3, 3, 3, 3, 0, 2, 2, 3, 1, 1, 1, 2, 2, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 2, 0, 4, 0, 0, 2, 4, 4, 3, 4, 1, 2], [1, 2, 1, 2, 1, 1, 2, 0, 1], [1, 1, 1, 1, 0], [1, 4, 3, 3, 2, 1, 5, 0, 4, 4, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [], [2, 3, 0, 3, 3, 3, 2, 3, 4, 0, 3, 3, 3, 1, 3, 1, 0, 1, 1, 4, 0, 1, 4, 2, 3, 2, 4, 1, 1, 0, 0, 2, 1, 0, 2, 1, 4, 0, 1, 0, 1], [3, 2, 0, 3, 0], [2, 5], [1, 0, 0, 1, 2, 2], [3, 1, 2, 3, 1, 2, 1, 1, 0, 2, 2, 3, 3, 0], [18, 17], [18, 21, 7, 22], [5, 0, 9, 1], [7, 1, 31, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 2, 0, 0, 0, 1, 2, 1, 1, 0, 0, 0, 2, 14, 14, 16, 1, 52, 13, 13, 9, 5, 11, 14, 0, 41, 5, 2, 6, 14, 2, 4, 4, 4], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = (in1 + ((((in0.strip() + (((\"\"$s\"\" + (\"\"5\"\" + in0)) + \"\"\\\\\\n\"\") + \"\"v\"\"))[mod(i0,int(5.0)):( i2 - int(10.0) )] + s2.capitalize()) + \"\"0\"\") + getCharFromString((\"\"h\"\".strip(\"\"w\"\")[:max(abs(i2), i2)] + s1)[i2:mod(i0,i0)], ( int(35.0) * min(saveOrd(in2), i1) ))))[:mod(i0,min(int(4.0), int(9.0)))]\\ni1 -= int(5.0)\\nif \"\"S91\"\"[int(34.0):] == s0:{:\\nif ( mod(i2,( min(abs(saveOrd(\"\"`\"\"[i1:])), ( int(3.0) * saveOrd(getCharFromString(in1, len(\"\">\"\"))) )) - saveOrd(in1) )) - max(i0, ( ( abs(int(2.0)) * int(0.0) ) + int(2.0) )) ) \\le ( divInt(i0,i0) - i2 ):{:\\ns1 = \"\"R\"\"\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 8, 8, 7, 9, 6, 2, 9, 0, 0, 7], [0, 1, 2, 2, 2, 2, 2, 2, 0, 2, 2, 1, 0, 2], [1], [2, 3, 0, 1, 3, 2, 3, 2, 2, 2, 2, 0, 1, 3, 1, 2, 1, 2, 0, 0, 3, 0, 1, 1, 1, 0, 2, 2, 3, 3, 1, 2, 0, 3, 0, 0, 3, 0, 2, 0, 2, 1, 3, 0, 3, 1, 0, 1, 3], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1], [4, 2, 3, 4, 4, 1, 1, 0, 2, 3, 0, 3], [0, 2, 1, 2, 1, 1, 2, 2, 2], [0, 0, 0, 1, 0], [5, 1, 4, 1, 3, 2], [1, 1, 0, 1, 1, 1], [], [3, 4, 1, 3, 3, 0, 4, 2, 3, 2, 0, 2, 4, 4, 4, 2, 2, 1, 4, 0, 4, 1, 2, 4, 0, 2, 4, 0, 1, 0, 1], [3, 2, 1, 1, 3, 1, 3, 0, 3], [5, 5, 3, 3], [1, 2, 0, 2, 1, 1, 1], [2, 0, 1, 2, 2, 1], [12], [17, 1], [0, 5, 9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 14, 1, 49, 13, 12, 9, 5, 6, 6, 0, 31, 9, 4, 7, 6, 1, 2, 3, 0], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( saveOrd((\"\"0\"\".strip(((in2 + (s1[i1:] + saveChr(int(5.0))[abs(divInt(len(saveChr(( divInt(divInt(( i2 * int(8.0) ),saveOrd(\"\"M\"\"[:int(8.0)][( int(7.0) - ( i2 * i2 ) ):].strip(saveChr(saveOrd(in1))))),i2) - int(9.0) ))),int(6.0))):int(2.0)])[:i2].capitalize()) + \"\"r5\"\".lstrip(getCharFromString(s1, ( ( max(max(int(9.0), mod(i2,min(i0, i2))), abs(i2)) - ( i1 * divInt(int(0.0),len(in0.lstrip(\"\"9\"\")[:i0])) ) ) * min(int(0.0), i2) ))[:int(7.0)]))) + s2)) * len(\"\"b\"\") )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1, 1, 1], [0], [0, 1, 4, 0, 1], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0, 2, 2], [17], [19], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 2, 1, 5, 1, 0, 0, 2, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = \"\"R\"\" not in getCharFromString(in0, len(\"\"6\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [], [2], [], [1], [], [], [], [], [0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 3, 6, 3, 7, 5, 7], [2, 0, 0, 2, 1, 0, 0, 2], [1], [2, 2, 2, 1, 3, 3, 0, 2, 2, 3, 2, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1], [1, 0, 1], [2, 2, 2, 0], [0, 1, 0, 1], [0, 4], [1, 1], [], [4, 4, 0, 4, 1, 4, 1], [3, 3, 0, 0], [5, 2], [], [0, 1], [13], [14], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 20, 6, 3, 3, 3, 1, 2, 0, 7, 4, 2, 0, 2, 1, 1, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s0.strip().strip(getCharFromString(\"\"N\"\", divInt(( mod(int(1136.0),max(min(i2, ( ( max(divInt(i0,i0), int(3.0)) * i2 ) * i1 )), i0)) * i0 ),i2))) not in getCharFromString(\"\"o\"\", int(757.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 3, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 1, 3, 0, 1, 4, 1, 2, 0], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 4], [], [], [20]], "fitness": 9223372036854775807, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s2):] not in getCharFromString(saveChr(i1)[:i2][abs(mod(i2,int(0.0))):( int(7.0) + max(len((\"\"R\"\" + s0.rstrip())), ( divInt(( int(5.0) * i0 ),divInt(min(( i1 * max(saveOrd(\"\"E\"\"), ( int(7.0) - i2 )) ), divInt(max(int(3.0), i1),int(1.0))),int(7.0))) + i2 )) )], i0)[( int(7.0) * abs(divInt(min(i0, divInt(( ( int(9.0) - int(8.0) ) - ( i1 * i0 ) ),int(5.0))),i0)) ):int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 13, 0, 51, 15, 11, 9, 6, 6, 2, 1, 16, 3, 1, 5, 2, 2, 0, 0, 0]}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [5], [1], [], [1], [], [1, 1, 1], [4, 5, 4], [0, 2, 0], [0], [1, 1, 0, 2, 3, 1, 1, 0], [0, 1], [1], [2, 0], [], [5, 2], [1, 1], [], [4, 3, 4, 4, 1, 1], [1, 0, 2], [], [], [3, 1], [], [15], [], [15]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 3, 0, 0, 0, 0, 0, 2, 0, 6, 3, 0, 0, 2, 0, 1, 0, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveChr(int(4.0)).endswith((getCharFromString(\"\",\"\".capitalize(), int(5.0)) + \"\"p\"\"))\\ni0 = i2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 0, 0, 1, 0, 1], [6, 7, 8, 8, 2, 9], [2, 0, 0, 2, 0], [], [3, 1, 1, 2, 2, 2, 1, 0, 1, 2, 1, 0, 3], [1, 1, 0], [1, 1, 3], [1, 2], [1, 0], [0, 4, 3, 2], [1, 0, 0, 0, 0, 1, 1], [], [3, 3, 4, 1, 2, 3, 4, 1, 0, 0, 1, 2, 2, 1, 0], [2, 3, 0], [1], [2, 2], [2, 3, 1, 3, 1, 1, 3], [], [20, 14, 6], [1], [24, 9, 18, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 3, 0, 1, 0, 0, 3, 6, 0, 10, 2, 1, 1, 6, 0, 3, 1, 2], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = ((\"\"1\"\".capitalize() + (\"\"?u&og\"\".rstrip() + in1)[max(int(6.0), int(788.0)):]) + in0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 0], [], [], [], [], [3], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [0, 9, 6, 9, 5, 6], [2, 2, 0, 0, 2, 0, 1, 2, 1, 1, 0, 0, 1, 0], [], [2, 3, 2, 1, 1, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 2, 2, 3, 0, 2, 2, 3, 0, 0, 1, 3, 2, 3, 1, 0, 0, 0, 3, 0, 1, 0, 2, 0, 0, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [1, 3, 2, 1, 3, 2, 3, 4, 2, 1, 0, 1], [2, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1], [5, 5, 1, 2, 3], [1, 1], [], [3, 0, 0, 4, 4, 1, 2, 0, 4, 2, 0, 2, 4, 1], [0, 3, 0, 2, 1], [0], [2, 0, 1], [1, 1], [], [17, 0], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 14, 0, 43, 11, 12, 6, 5, 5, 2, 0, 14, 4, 1, 3, 2, 0, 2, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (in2 + s1)\\nres0 = ( max(divInt(int(0.0),int(9.0)), mod(len(getCharFromString(\"\"r\"\".lstrip(), ( abs(max(len(s2[abs(divInt(i2,i2)):]), len(getCharFromString(in0[( mod(saveOrd(\"\"a\"\".capitalize()[:i0]),( mod(abs(i0),i2) * int(6.0) )) + max(( min(int(9.0), i0) + i1 ), i2) ):max(i1, int(5.0))], i1)))) + ( i0 + i0 ) ))),i1)) + i0 ) \\g int(6.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 1, 1, 1], [0, 3, 1, 1, 7, 3], [2, 0, 2, 2, 2], [1, 0], [2, 0, 2, 2, 1, 1, 3, 3, 3, 0, 2, 1, 0, 0], [0, 0, 1, 0], [4, 1, 1], [2, 0, 2, 2], [1], [2, 1], [1], [], [3, 1, 4, 0], [1], [], [], [2], [], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 1, 14, 4, 3, 4, 1, 2, 1, 0, 4, 1, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = (\"\"5\"\" + saveChr(( i2 * ( mod(int(0.0),int(311.0)) + saveOrd(s1) ) )))\\ni0 *= max(max(i2, ( int(7.0) * i2 )), i2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 1], [2, 2, 1, 0, 1], [0, 2], [1, 1, 1], [0], [0], [], [], [0, 3], [3], [0, 1], [0], [], [2], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], [5, 1, 0, 6, 7, 8, 0, 6, 4, 8, 0, 4, 1, 4, 8, 9], [0, 1, 2, 0, 2, 1, 1, 1, 2, 1, 2, 2, 0], [0, 0, 1], [1, 0, 3, 1, 3, 2, 3, 0, 0, 0, 2, 3, 1, 3, 3, 3, 2, 2, 1, 0, 3, 1, 0, 2, 0, 1, 2, 1, 0, 2, 2, 3, 0, 1, 3, 3, 1, 1, 3, 1, 2, 1, 0], [1, 0, 1, 0, 1, 0, 0, 1, 1], [2, 3, 2, 1, 2, 1, 0, 1, 1, 4, 2, 0], [2, 0, 2, 2, 2], [1, 1, 0, 0, 0], [0], [0, 1, 1, 1, 1, 1, 1], [0], [1, 4, 3, 2, 2, 1, 3, 1, 4, 4, 2, 1, 1, 1], [0, 3, 3], [4, 1], [2, 1, 2], [3, 0, 2, 1, 3, 3, 0], [14, 5], [15], [7], [28, 17, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 16, 16, 13, 3, 43, 9, 12, 5, 5, 1, 7, 1, 14, 3, 2, 3, 7, 2, 1, 1, 3], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"]O\"\":{:\\nloopBreak% = 0\\nwhile not int(5.0) \\ge i0:{:\\ni1 = abs(int(1.0))\\ni2 = len(getCharFromString((\"\"7\"\"[:mod(abs(i0),i2)][i1:] + (\"\"p\"\" + \"\".\"\"[( max(int(0.0), abs(max(min(mod(( int(6.0) * i1 ),max(int(7.0), i1)), divInt(i2,int(8.0))), ( int(0.0) + i1 )))) * ( divInt(max(i2, int(6.0)),saveOrd(\"\",\"\")) * abs(int(4.0)) ) ):].rstrip().rstrip(\"\"F\"\"))), int(80.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= min(int(41.0), divInt(int(489.0),i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 2, 0, 2, 1, 0, 1], [2, 2, 1], [1, 1, 0, 1, 1], [], [0, 0, 0], [], [], [2], [5, 0], [1, 1, 0, 2, 0, 0, 2, 2], [0, 0], [1, 4, 4], [3, 2, 2], [0], [], [1], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [4, 5, 4, 1, 7, 6, 0, 4, 7, 1, 9, 2, 1, 0, 7, 4, 2], [2, 0, 2, 2, 0, 2, 0, 0, 1, 2, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 0], [0, 1, 3, 3, 3, 2, 3, 0, 1, 1, 0, 0, 3, 3, 1, 0, 2, 2, 2, 3, 0, 1, 1, 2, 1, 2, 1, 2, 2, 3, 2, 2, 2, 1, 0, 3, 0, 3, 0, 3, 3, 0, 0, 2, 2, 1, 3, 0, 0, 1, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 2, 1, 3, 4, 4, 4, 3, 4, 0, 3, 0], [0, 1, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [5, 3, 2, 3, 0, 4, 1, 0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1], [], [4, 4, 0, 4, 0, 3, 1, 1, 1, 2, 1, 2, 2, 0, 1, 0, 4, 4, 4, 0, 0, 3, 1, 3, 1, 0, 3, 0, 1], [2, 3, 1, 0, 1, 3], [4, 0], [1, 2, 2], [3, 0, 2, 2, 2, 0, 1, 3, 1, 2, 0, 3, 2, 0, 3], [13, 6, 11, 20], [7, 21], [5, 4, 3, 7, 7], [18, 18, 18, 26]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 0, 3, 0, 0, 1, 2, 8, 2, 3, 3, 1, 0, 1, 17, 17, 17, 4, 51, 13, 13, 7, 8, 8, 15, 0, 29, 6, 2, 3, 15, 4, 2, 5, 4], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\nloopBreak% = 0\\nwhile int(4.0) != min(min(abs(divInt(max(i2, int(541.0)),int(7.0))), i2), i0):{:\\nloopBreak% = 0\\nwhile len(in2.rstrip(saveChr(saveOrd(in0))).capitalize()) \\l int(60.0):{:\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( (\"\"/N\"\" + \"\"5\"\") not in \"\"4\"\" and not not \"\"3G\"\"[:mod(( mod(saveOrd(s2[i0:][int(4.0):]),int(7.0)) - ( int(1.0) + ( int(9.0) - mod(( saveOrd(\"\"h\"\") - ( divInt(mod(int(2.0),i1),len(in0)) + i2 ) ),saveOrd(getCharFromString(saveChr(i1), min(len(s0.lstrip()), i0)))) ) ) ),i0)].startswith(in1) ):{:\\nb2 = (\"\"/\"\" + (\"\"v7L/\"\" + s1)).startswith((s0 + \"\"7U[\"\"))\\n:}else:{:\\ni0 -= divInt(divInt(int(1.0),min(i1, i1)),int(074.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(2.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 0, 2, 2, 2, 2, 2, 1, 0, 1, 2, 1, 2, 2, 2, 0, 1, 2, 1, 0, 0, 0], [2, 0, 2, 0, 1, 2, 1, 1, 0, 1], [1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 2, 1], [0, 0, 0], [0, 0, 0, 0, 0, 0], [], [], [1, 1, 1, 3], [0, 5, 0, 5, 4], [1, 2, 1, 2, 1, 0, 2, 2, 1, 0, 0, 2, 0, 1], [0, 0, 0, 0, 0], [2, 5, 1, 2, 1], [1, 3, 1, 2], [0], [1, 1], [0, 1, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 8, 8, 4, 4, 3, 2, 6, 8, 9, 8, 8, 7, 4, 4, 5, 8, 1, 8, 8, 3, 1, 8, 8, 4, 0, 2, 1, 8, 2, 6, 1, 2, 7, 3, 4, 3, 3, 1, 0, 3, 6, 9, 1, 8, 3, 2, 5, 4, 0, 0, 9, 5, 2, 1, 4, 4, 1, 8, 4, 6, 3, 6, 1, 8, 8, 9, 7, 4, 0, 8, 5, 5, 3, 0, 3, 0, 2, 3, 6, 6, 5, 8, 1, 1, 4, 1, 4, 4, 2, 2, 4, 4, 8, 2, 9, 2, 4, 6, 0, 3, 0, 2, 8, 5, 0, 9, 9, 8, 0, 7, 7, 8, 7, 2, 0, 4, 5, 8, 0, 1], [1, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 1, 2, 2, 1, 1, 1, 0, 0, 1, 1, 0, 2, 0, 2, 2, 0, 2, 0, 1, 1, 1, 2, 2, 0, 1, 1, 0, 0, 1, 2, 0, 0, 1, 0, 2, 1, 0, 1, 1, 0, 2, 2, 1, 1, 1, 2, 0, 2, 0, 2, 1, 0, 0, 0, 1, 2, 2, 0, 2, 1, 1, 1, 0, 0, 1, 2, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 2, 2, 0, 1, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1], [1, 2, 2, 2, 2, 2, 1, 0, 3, 2, 3, 1, 3, 1, 0, 3, 1, 3, 2, 1, 2, 3, 0, 1, 2, 2, 2, 3, 2, 1, 1, 2, 3, 3, 1, 0, 3, 3, 3, 0, 3, 3, 0, 3, 0, 0, 3, 2, 3, 3, 1, 2, 1, 0, 1, 2, 0, 0, 2, 0, 3, 1, 1, 2, 1, 2, 1, 2, 2, 0, 1, 1, 1, 2, 0, 2, 1, 3, 3, 3, 2, 0, 1, 1, 1, 2, 0, 3, 2, 2, 0, 0, 1, 1, 0, 0, 3, 1, 0, 0, 2, 2, 3, 2, 2, 1, 0, 0, 0, 2, 3, 0, 2, 3, 3, 3, 0, 1, 3, 0, 1, 2, 3, 3, 0, 2, 1, 0, 3, 2, 1, 1, 0, 2, 3, 0, 3, 2, 1, 2, 3, 0, 3, 0, 3, 1, 0, 1, 2, 1, 0, 2, 3, 1, 2, 0, 3, 2, 3, 3, 2, 1, 3, 3, 2, 2, 2, 0, 0, 1, 0, 2, 3, 2, 3, 1, 1, 2, 0, 2, 2, 0, 1, 1, 3, 0, 0, 2, 1, 2, 2, 0, 3, 3, 1, 3, 1, 1, 3, 0, 1, 0, 3, 2, 3, 2, 1, 0, 3, 2, 2, 2, 2, 1, 3, 3, 1, 3, 0, 2, 1, 0, 3, 0, 1, 2, 3, 2, 2, 0, 1, 3, 1, 1, 3, 2, 3, 2, 0, 2, 0, 2, 1, 3, 3, 3, 2, 2, 1, 1, 0, 0, 2, 1, 3, 1, 0, 2, 0, 3, 3, 0, 3, 3, 2, 3, 1, 0, 3, 2, 0, 2, 3, 0, 3, 3, 0, 3, 1, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 3, 2, 0, 1, 1, 2, 3, 1, 1, 1, 2, 3, 0, 0, 2, 0, 0, 0, 1, 3, 3, 1, 0, 2, 3, 1, 0, 3, 0, 3, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 3, 3, 3, 1, 3, 0, 3, 1, 1, 2, 0, 2, 2, 0, 3, 0, 2, 2, 1, 3, 0, 3, 1, 1, 2, 2, 1, 3, 0, 1, 0, 2, 1, 1, 0, 3, 1, 2, 2, 0, 1, 2, 1, 3, 0, 3, 1, 1, 3, 3, 2, 2, 3, 2, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 2, 1, 0, 2, 1, 0, 0, 2, 0, 2, 2, 3, 1, 0, 1, 1, 3, 2, 0, 2, 2, 0, 2, 0, 3, 0, 2, 2, 3, 1, 2, 2, 3, 1, 0, 1, 3, 0, 3, 2, 1, 1, 1, 3, 0, 1, 1, 3, 1, 2, 3, 0, 3, 3, 1, 2, 3, 0, 1, 2, 1, 3, 1, 2, 1, 3, 0, 3, 3, 3, 3, 3, 1], [0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 4, 4, 0, 4, 3, 4, 2, 4, 3, 1, 0, 4, 3, 4, 3, 4, 4, 4, 3, 2, 0, 3, 2, 3, 1, 3, 1, 2, 3, 2, 1, 3, 0, 3, 3, 1, 4, 0, 0, 4, 2, 4, 4, 3, 0, 4, 2, 4, 0, 1, 3, 4, 0, 2, 3, 0, 1, 4, 4, 3, 4, 2, 2, 1, 3, 4, 4, 4, 2, 3, 2, 0, 2, 4, 0, 0, 3, 2, 0, 2, 0, 0, 4, 2, 3, 4, 0, 1, 0, 4, 2, 2, 3, 0, 2, 4, 4, 1, 0, 4, 1, 1, 2, 4, 1, 0, 4, 2, 1, 4, 1, 3, 2, 2, 2, 2, 1, 4, 3, 3, 2, 0, 1, 3, 4], [1, 0, 2, 2, 2, 1, 2, 1, 2, 0, 2, 2, 1, 2, 0, 2, 2, 2, 2, 2, 0, 0, 2, 1, 0, 0, 1, 2, 0, 2, 0, 1, 1, 2, 0, 1, 0, 2, 1, 1, 1, 2, 2, 0, 0, 1, 1, 1, 1, 1, 2, 2, 1, 2, 0, 1, 2, 0, 2, 2, 0, 0, 2, 0, 2, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 5, 4, 2, 1, 5, 2, 0, 4, 1, 2, 4, 3, 5, 5, 0, 2, 5, 3, 4, 1, 3, 4, 1, 3, 3, 0, 0, 1, 3, 3, 1, 0, 3, 3, 1, 3, 1, 5, 4, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0], [0, 4, 2, 2, 4, 2, 2, 1, 2, 4, 4, 2, 4, 0, 1, 1, 1, 0, 0, 0, 1, 4, 1, 4, 1, 2, 1, 0, 1, 3, 2, 2, 1, 4, 3, 3, 1, 4, 3, 3, 4, 2, 4, 1, 0, 3, 2, 4, 4, 4, 1, 0, 1, 0, 2, 1, 1, 0, 0, 2, 2, 4, 1, 4, 4, 2, 2, 2, 0, 4, 1, 1, 0, 4, 2, 4, 4, 2, 0, 2, 2, 2, 1, 1, 2, 2, 2, 1, 4, 0, 2, 2, 1, 0, 0, 4, 4, 1, 1, 4, 0, 4, 1, 4, 2, 2, 4, 0, 2, 1, 4, 2, 1, 4, 0, 2, 0, 4, 0, 0, 2, 4, 4, 4, 0, 4, 0, 2, 2, 4, 2, 1, 2, 2, 2, 2, 0, 4, 0, 4, 2, 4, 2, 0, 4, 0, 2, 2, 2, 2, 2, 1, 1, 1, 4, 1, 4, 0, 2, 3, 2, 4, 0, 2, 2, 1, 2, 0, 4, 4, 2, 2, 4, 0, 0, 0, 0, 2, 1, 4, 4, 1, 0, 0, 4, 3, 3, 0, 0, 0], [0, 3, 3, 0, 3, 2, 3, 3, 0, 2, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 2, 3, 3, 1, 2, 0, 3, 0, 2, 2, 2, 2, 0, 3, 3, 1, 1, 3, 1, 1, 1, 1, 0, 0, 3, 0, 2, 2, 2], [1, 4, 4, 3, 0, 5, 1, 2, 1, 4, 3, 1], [2, 2, 2, 0, 2, 1, 2, 2, 0, 1, 2, 2, 1, 0, 1, 0, 2, 1, 2, 1, 0, 0, 0, 0, 1, 2, 0, 2, 2, 2, 1, 0, 0, 0, 1, 2, 0, 2, 1, 2, 0, 1, 0, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 1, 2], [1, 0, 0, 3, 1, 1, 0, 0, 2, 0, 1, 0, 1, 2, 3, 3, 0, 0, 2, 0, 0, 1, 3, 0, 2, 3, 0, 1, 2, 2, 2, 3, 1, 3, 2, 2, 1, 1, 0, 0, 0, 2, 3, 1, 0], [15, 24, 13, 25, 5, 19, 19, 15, 2, 12, 8, 19, 5, 3, 0, 7], [13, 5, 7, 24, 12, 5, 20, 16, 10, 25, 11], [1, 7, 3, 9, 7, 9, 6, 4, 1, 9], [16, 21, 8, 20, 2, 6, 29, 29]], "fitness": 9223372036854775807, "mapping_values": [1, 22, 22, 10, 12, 3, 6, 0, 0, 4, 5, 14, 5, 5, 4, 1, 2, 4, 121, 121, 113, 6, 468, 123, 126, 67, 59, 46, 45, 3, 190, 49, 12, 55, 45, 16, 11, 10, 8], "tree_depth": 73, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(08.0)\\ni2 = ( mod(divInt(( divInt(int(8443.0),i0) + min(( saveOrd(s0) * int(2.0) ), saveOrd(getCharFromString(\"\"n\"\"[int(6.0):i2][min(int(8.0), saveOrd(getCharFromString(s0.rstrip(\"\"P\"\")[:mod(int(9.0),divInt(len(\"\"Y\"\"),i2))], int(8.0)).rstrip(\"\"-\"\")[divInt(( divInt(saveOrd(s0),( int(8.0) * int(7.0) )) * divInt(abs(saveOrd(s0)),int(4.0)) ),i2):])):].rstrip()[len(s1):][max(min(i0, saveOrd(\"\"f\"\")), len(\"\"h\"\".capitalize())):], i2))) ),saveOrd(\"\"N\"\".lstrip(\"\"Z\"\"[i0:]))),i2) - len(in2) )\\nloopBreak% = 0\\nwhile ( saveOrd(\"\"1FyTm7<%T\"\") * saveOrd((\"\"P\"\"[int(4.0):mod(int(581.0),i2)][int(88.0):] + ((\"\"3C\"\" + getCharFromString(((saveChr(( i1 - i0 ))[:mod(i1,saveOrd(\"\"M\"\"))].capitalize() + in1) + (getCharFromString(saveChr(int(3.0)), int(1.0))[mod(int(8.0),( int(8.0) * ( ( i2 + int(4.0) ) * int(0.0) ) )):] + saveChr(int(2.0)))), ( i2 * mod(int(1.0),len(\"\"f\"\")) ))) + s2).lstrip())) ) \\l abs(min(( i1 - int(8.0) ), int(2.0))):{:\\nloopBreak% = 0\\nfor s1 in \"\";\"\":{:\\nloopBreak% = 0\\nwhile in2 == \"\"I\"\"[int(61.0):]:{:\\nloopBreak% = 0\\nfor s2 in \"\"9\"\":{:\\nif divInt(i0,len(s0)) != divInt(mod(i2,i1),int(2.0)):{:\\nb1 = in1.endswith(getCharFromString(\"\"\\\\\\t\"\", int(7.0))[i0:i0][:abs(int(3.0))])\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = i1\\nb1 = i0 \\l divInt(divInt(len(getCharFromString(saveChr(( divInt(int(4.0),i0) * i1 )), i2)),( max(i2, ( len(s1[max(abs(i1), int(3.0)):][len(saveChr(i1)):int(3.0)][:( abs(max(i1, divInt(int(1.0),i0))) + len(\"\"T\"\") )]) * mod(int(0.0),int(3.0)) )) * i0 )),( min(i1, len(\"\"u\"\")) * mod(int(6.0),( len(s2) * i1 )) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nin1 = saveChr(max(i0, saveOrd(getCharFromString(in0[int(9.0):].capitalize(), i2)[:int(1.0)])))\\nif \"\"7\"\"[( int(8.0) * i0 ):divInt(min(int(3.0), mod(i2,min(( saveOrd(\"\"9\"\") + abs(( int(2.0) + saveOrd(\"\"6\"\"[:saveOrd(in2.strip(\"\"#\"\"[( ( ( i2 * i0 ) - int(5.0) ) + i2 ):mod(len(in2),( min(int(4.0), int(0.0)) + ( i0 - ( divInt(i1,int(0.0)) * int(9.0) ) ) ))][saveOrd(s0):]))][i1:i1][( int(5.0) + divInt(( i2 * abs(saveOrd(saveChr(int(2.0)).rstrip())) ),min(int(1.0), int(4.0))) ):max(i2, int(4.0))]) )) ), i0))),len(\"\"q\"\"))][( saveOrd(\"\"^\"\") + ( int(1.0) - i1 ) ):min(( ( divInt(divInt(int(8.0),abs(len(s2.capitalize()))),int(4.0)) - min(i1, mod(int(6.0),i0)) ) * max(i0, int(3.0)) ), ( saveOrd(getCharFromString(\"\"4\"\", mod(( i1 + int(6.0) ),saveOrd(getCharFromString(in2, int(1.0))[int(8.0):][len(\"\"1\"\"[( saveOrd(\"\"k\"\"[:( i2 - mod(i0,( int(8.0) + abs(abs(max(( mod(int(9.0),int(7.0)) * i0 ), i1))) )) )].capitalize()) - mod(int(4.0),len(in0.capitalize())) ):]):].strip())))) - int(0.0) ))][:i0] not in in1[mod(i2,saveOrd(s1.capitalize())):saveOrd(in0)]:{:\\nif getCharFromString(in1.rstrip(), i1).capitalize()[saveOrd(s1.rstrip(saveChr(abs(mod(len(\"\"z\"\"[int(8.0):]),i0)))[:abs(( i1 - divInt(min(i1, abs(saveOrd(in0[i0:][:min(int(5.0), i2)][( min(len(saveChr(abs(( mod(mod(int(5.0),i2),min(mod(i1,int(3.0)), int(0.0))) * divInt(abs(int(3.0)),int(0.0)) )))), int(2.0)) * ( min(i1, i1) + ( i2 + i0 ) ) ):][i2:int(3.0)]))),min(saveOrd(in0), int(6.0))) ))][i0:( abs(int(6.0)) - i2 )])):len(saveChr(i1)[saveOrd(s0[:i0]):i0].lstrip(saveChr(divInt(i0,i1))))] == s0:{:\\nloopBreak% = 0\\nfor s1 in \"\"F\"\"[i2:][i2:][( i0 - i2 ):][min(max(min(int(5.0), saveOrd(\"\"D\"\")), i1), abs(int(8.0))):][int(1.0):( i1 - ( ( i1 - abs(i0) ) - mod(mod(int(1.0),len(\"\"A\"\")),i0) ) )]:{:\\nb1 = min(int(4.0), int(1.0)) != mod(divInt(int(4.0),abs(i1)),int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni2 *= i0\\n:}else:{:\\nif ( False and saveChr(mod(int(2.0),int(2.0))) not in \"\"9\"\" ):{:\\ni0 = i1\\n:}\\nres0 = not saveOrd(saveChr(int(4.0))) \\le ( mod(i0,int(4.0)) * ( int(8.0) - saveOrd(in0) ) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = (getCharFromString(s1, i0)[max(int(2.0), int(9.0)):min(saveOrd(\"\"^\"\"[:divInt(( max(mod(int(2.0),int(4.0)), ( ( ( max(abs(saveOrd(s0[int(6.0):( max(int(0.0), divInt(int(3.0),i2)) * mod(int(0.0),i1) )])), i0) + ( i0 - ( mod(min(int(2.0), i0),int(8.0)) * int(5.0) ) ) ) + saveOrd(getCharFromString(getCharFromString(in0, ( i0 * mod(divInt(i2,divInt(i2,abs(i0))),divInt(mod(max(int(0.0), divInt(( saveOrd(in0) * int(9.0) ),i1)),int(9.0)),max(i1, len(s1)))) ))[:mod(int(8.0),int(0.0))][int(7.0):].rstrip(), abs(i0))) ) + int(7.0) )) + int(8.0) ),abs(int(7.0)))][( abs(i1) * abs(max(int(2.0), ( saveOrd(in0) + i0 ))) ):int(0.0)]), ( int(4.0) * len(\"\"l\"\"[int(5.0):]) ))] + \"\"H\"\".capitalize().capitalize())[( int(8.0) - len(s1) ):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= abs(min(max(len(in2), saveOrd(((in1 + s1) + s2).capitalize())), int(01.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 1, 2, 0, 2, 2, 2, 2, 1, 1, 2, 0, 1, 0, 1], [2, 2, 2, 1, 1, 1, 2], [0, 1, 1, 1, 2, 1, 0, 2, 0], [], [0, 0, 0, 0], [], [], [1, 3, 0, 0, 3], [0, 2, 0, 0, 4, 3], [0, 1, 2, 1, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0], [3], [1, 0, 2, 0], [], [1], [1, 1, 0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 9, 5, 6, 8, 7, 8, 7, 0, 5, 7, 2, 6, 0, 8, 8, 9, 0, 3, 2, 6, 8], [1, 1, 0, 2, 1, 0, 2, 1, 2, 1, 0, 1, 1, 0, 1, 1, 2], [0, 0, 1, 0], [0, 0, 1, 3, 1, 1, 0, 1, 1, 0, 2, 3, 2, 3, 2, 1, 0, 0, 1, 2, 1, 1, 2, 0, 2, 3, 3, 0, 0, 2, 3, 2, 2, 2, 1, 3, 0, 1, 0, 0, 3, 1, 1, 1, 1, 1, 0, 3, 2, 1, 1, 1], [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 3, 3, 4, 0, 4, 2, 1], [2, 1, 2, 1], [0, 0, 1, 1, 1, 1, 0, 0], [4, 4, 1, 1], [0, 1, 1, 1, 0, 1], [], [1, 1, 4, 0, 2, 1, 2, 0, 2, 4, 4, 1], [2, 1, 1], [], [1, 1, 1], [0, 3, 0, 0, 0, 2], [4, 0, 12, 7], [], [1], [27]], "fitness": 9223372036854775807, "mapping_values": [1, 16, 16, 7, 9, 0, 4, 0, 0, 5, 6, 11, 6, 1, 4, 0, 1, 3, 23, 23, 17, 4, 52, 11, 9, 4, 8, 4, 6, 0, 12, 3, 0, 3, 6, 4, 0, 1, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\nloopBreak% = 0\\nwhile i1 \\l i1:{:\\ni0 = int(7.0)\\nloopBreak% = 0\\nwhile \"\"E\\\\\\\\\"\" != \"\"A\"\":{:\\ni2 = max(int(495.0), int(6.0))\\nloopBreak% = 0\\nwhile i1 == int(87.0):{:\\nif int(87.0) \\l i0:{:\\nif ( max(divInt(len(in1.capitalize()),divInt(int(0.0),i2)), i1) * int(5.0) ) \\l ( int(7.0) - int(2.0) ):{:\\nif mod(i2,mod(len(\"\"M\"\"[:saveOrd(in1[:i1])]),i0)) \\le ( min(mod(mod(divInt(int(6.0),saveOrd(saveChr(i1)[:int(0.0)])),i1),i0), abs(int(8.0))) * int(8.0) ):{:\\ni1 -= int(9.0)\\n:}\\ns1 = saveChr(int(0.0))\\nloopBreak% = 0\\nwhile res0:{:\\ni1 = int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = not i2 \\ge max(divInt(int(2.0),int(6.0)), int(8.0))\\n:}\\n:}else:{:\\ns1 = \"\"H1\"\"\\nb0 = res0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 3], [], [2], [], [2], [], [], [], [], [], [], [1], [0], [0], [], [], [], [], [5, 5], [0, 0, 1], [], [0, 3, 4, 1], [1], [], [], [2, 0, 2], [0], [], [3, 1], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 0, 4, 1, 0, 0, 3, 1, 0, 2, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = in2 == (saveChr(i1) + \"\"3A1\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [2, 0, 2, 1, 2, 1, 2, 0, 0, 2, 0, 0, 2, 0, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 1, 1], [2, 2, 2, 1, 1, 0, 0, 1, 0, 1, 2], [2, 1, 1, 2, 0, 2, 2, 1, 0, 2, 1, 2, 2, 0, 1, 0], [0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 2, 1, 0, 1, 2], [1, 5, 0, 2, 0, 0, 0], [1, 0, 1, 1, 1, 1, 2, 2, 1, 1, 2, 0], [0, 0, 0, 0, 0, 0, 0], [3, 3, 0], [0, 0], [], [1], [1, 1, 0, 1], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 5, 5, 0, 6, 1, 2, 1, 5, 5, 4, 4, 3, 8, 0, 3, 7, 4, 7, 3, 7, 3, 4, 7, 0, 6, 9, 6, 8, 3, 6, 0, 9, 8, 6, 8], [1, 2, 1, 2, 0, 0, 2, 2, 1, 1, 0, 1, 1, 2, 0, 2, 2, 1, 0, 1, 0, 2, 2, 1, 0, 2, 1, 0, 2, 2, 0, 1, 0, 2, 0, 0, 2, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 2], [1, 0, 1, 0, 1], [1, 1, 1, 2, 1, 3, 0, 0, 1, 2, 1, 1, 0, 0, 2, 1, 0, 2, 1, 0, 1, 0, 1, 0, 3, 1, 1, 1, 2, 0, 2, 0, 2, 0, 0, 0, 3, 0, 0, 2, 1, 0, 0, 3, 2, 0, 0, 2, 0, 1, 3, 2, 0, 3, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 3, 3, 3, 1, 3, 1, 1, 0, 0, 0, 2, 3, 1, 2, 1, 0, 1, 0, 3, 3, 2, 1, 3, 1, 0, 3, 0, 3, 3, 0, 2, 1, 0, 3, 3, 3, 2, 3, 1, 0, 2, 1, 1, 0, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 2, 2, 0, 3, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [2, 4, 2, 4, 1, 0, 4, 0, 4, 1, 2, 0, 3, 2, 1, 2, 0, 1, 0, 0, 1, 4, 3, 0, 4], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 0, 0, 0, 2, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [3, 0, 2, 3, 5, 5, 1, 1, 4, 1, 0, 5, 3, 4, 4, 3, 0, 3, 1, 5, 4, 5, 3, 1, 2, 4], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0], [2, 4, 2, 4, 0, 0, 1, 2, 0, 1, 3, 4, 2, 1, 0, 4, 4, 4, 0, 2, 2, 4, 1, 0, 0, 3, 0, 2, 4, 1, 4, 0, 2, 1, 3, 3, 3, 3, 1, 1, 2, 4, 4, 0, 4, 0, 3, 4, 0, 4, 2, 3, 2, 4, 1, 4, 4, 0, 2, 1, 2, 4, 0, 2, 1, 1, 0, 0], [2, 0, 1, 2, 0, 0, 0, 0, 1, 0, 0, 1, 2, 3, 3, 3, 1, 1], [0, 4, 1], [2, 1, 2, 0, 1, 2, 0, 2, 1, 0, 0, 2, 0, 2], [0, 3, 3, 3, 0, 2, 1, 2, 3, 1, 1, 3, 0], [17, 6, 17], [18, 18, 8], [5, 6], [0, 9, 19, 18, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 27, 27, 11, 16, 3, 10, 0, 0, 6, 7, 12, 7, 3, 2, 0, 0, 4, 36, 36, 49, 5, 129, 25, 25, 15, 13, 26, 13, 3, 68, 18, 3, 14, 13, 3, 3, 2, 5], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(4.0) \\g int(5.0):{:\\nin0 = getCharFromString(s0, int(5.0))[:( int(0.0) + abs(i1) )].capitalize()[i2:]\\nloopBreak% = 0\\nwhile b0:{:\\ni1 *= int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( int(12.0) + int(1.0) ) != i2:{:\\ni0 = i0\\nif divInt(int(5.0),i2) \\l divInt(int(5.0),i2):{:\\ns2 = in0\\n:}else:{:\\nb2 = int(4.0) == i1\\nif int(4.0) \\l i1:{:\\nin2 = \"\"R\"\"\\n:}else:{:\\nin2 = s1[saveOrd(\"\"\"\"):]\\n:}\\nloopBreak% = 0\\nfor s1 in (saveChr(int(3.0)) + \"\"&\"\"[int(8.0):int(0.0)]):{:\\ni0 *= ( i1 + ( i1 * mod(i2,i0) ) )\\nloopBreak% = 0\\nfor in1 in s1:{:\\nif getCharFromString(getCharFromString(s0, i2), abs(i2)).capitalize() != getCharFromString(\"\":\"\", i1)[( int(3.0) * i0 ):][:i1]:{:\\nb1 = in2 != in0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = (in1 + getCharFromString(\"\"G\"\", saveOrd(saveChr(divInt(i0,i2))))[( i2 - int(7.0) ):max(( i1 * min(int(4.0), int(7.0)) ), ( divInt(int(3.0),( int(7.0) - divInt(int(3.0),int(4.0)) )) + divInt(( saveOrd(in0) + min(saveOrd(\"\"5\"\"[int(7.0):]), max(int(0.0), int(6.0))) ),i0) ))])\\ni2 = i1\\ns0 = ((((\"\"s6\"\" + \"\"/\"\") + getCharFromString(getCharFromString(in0, i0), mod(abs(int(9.0)),divInt(int(6.0),i2)))[:int(8.0)]) + saveChr(i2)) + s1)\\n:}\\nloopBreak% = 0\\nfor in2 in (in1.capitalize() + (\"\"s\"\".rstrip(saveChr(min(len(in2), ( int(3.0) + abs(int(6.0)) ))).rstrip())[i0:max(i1, abs(min(i0, mod(int(0.0),i2))))] + \"\"i\"\"[max(min(min(divInt(max(int(9.0), i0),( int(8.0) * int(6.0) )), i0), i2), i2):])[i1:saveOrd(saveChr(len(in0))[min(i0, int(8.0)):i1])].lstrip()):{:\\nif i0 \\l divInt(mod(i1,saveOrd(\"\"\"\"[i0:])),i1):{:\\nloopBreak% = 0\\nwhile i0 \\l i1:{:\\ns1 = \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = s2 in in1\\n:}\\ni1 -= i2\\nb1 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [6, 9], [0, 1, 1, 0], [0], [2, 0, 3, 3, 0, 2, 1, 2, 0, 3], [1, 1, 1], [3, 1], [0], [1, 1, 0], [3], [0, 1], [], [3, 0, 4, 1], [2], [], [], [2, 1], [], [15], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 1, 1, 0, 1, 1, 2, 0, 4, 1, 0, 0, 2, 0, 1, 1, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(i1,len((in0 + \"\"4p\"\".capitalize())))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 1], [1, 1, 1], [0, 1], [], [0], [], [], [3], [1, 5], [1, 2, 0, 1], [0, 0], [1], [1], [], [1], [0, 0, 0], [1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 2, 5, 8, 2, 1, 4], [2, 2, 2, 0, 0, 2, 2, 2, 2, 1, 2, 2, 1], [0], [0, 3, 1, 0, 3, 0, 0, 0, 1, 2, 1, 2, 3, 2, 3, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 0], [4, 4, 2, 1], [2, 1, 2], [0], [1, 4, 3, 0, 1], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1], [], [2, 4, 4, 0, 0, 3, 3, 1, 2, 3, 1, 3, 4, 2, 0, 4, 0, 1, 4, 3, 3, 1, 1, 0, 2, 2, 2, 4], [0, 1, 3, 2, 3, 1], [4, 3], [1, 1, 2, 1, 2, 0], [0, 2, 2, 1, 3, 0, 1, 1, 0, 0, 2, 1, 2], [25, 23, 19, 24], [17, 17, 18, 5], [7, 2, 9, 4], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 3, 2, 0, 0, 0, 0, 1, 2, 4, 2, 1, 1, 0, 1, 3, 8, 8, 13, 1, 26, 4, 4, 3, 1, 5, 13, 0, 28, 6, 2, 6, 13, 4, 4, 4, 1], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i2 \\g saveOrd(getCharFromString(saveChr(int(0.0)), i2)[:saveOrd(s1)]):{:\\nif in1 not in ((\"\"Z\"\" + (\"\"72\"\" + (in0[i2:].rstrip(s0.capitalize()) + \"\"r&X\"\"))[:i0]) + ((\"\"rsT\"\" + \"\"Y9f4\"\") + s1).lstrip(saveChr(i0)[int(0.0):( int(2.0) * ( abs(divInt(max(( int(5.0) - i2 ), i2),i2)) * i2 ) )][i1:][:int(82.0)])):{:\\nif False:{:\\nres0 = i2 != int(14.0)\\n:}\\ni2 = i1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1], [0, 1, 0, 1, 0], [], [2, 0, 0, 2, 0], [], [0, 0, 0], [], [], [2, 3, 0, 1], [3], [0, 1, 0], [0], [], [1, 0], [], [0], [], [1], [0], [2, 1, 0, 2, 0, 2, 1, 0], [], [0, 0, 0, 2, 1, 3, 0, 3, 3, 3, 0, 0, 2, 0, 0], [1, 0], [2, 3, 4, 2], [0], [1], [0, 5, 3, 4], [1, 1, 1], [], [0, 2, 4, 2, 4, 4, 2, 4, 4, 1, 0, 4, 1, 1], [1, 0, 2, 3, 3, 3], [4, 5, 2], [0, 0, 1], [0, 2, 1], [24], [6], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 0, 5, 0, 3, 0, 0, 4, 1, 3, 1, 0, 2, 0, 1, 0, 1, 1, 8, 0, 15, 2, 4, 1, 1, 4, 3, 0, 14, 6, 3, 3, 3, 1, 1, 1, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\nb2 = True\\nres0 = i2 \\ge i1\\nin0 = saveChr(i0)[mod(int(0.0),abs(i2)):len(getCharFromString(\"\"Y\"\".strip(in1).rstrip(\"\"4\"\".strip())[:saveOrd(\"\"g\"\")].capitalize(), abs(i0))[i2:( i1 + i0 )])]\\nb0 = b1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [0, 0, 2, 0, 2], [], [5, 0], [2, 3, 2], [1], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 9, 4, 9, 3, 2, 4], [0, 1, 1, 0, 0, 1, 1, 2, 2], [1], [3, 0, 2, 3, 3, 0, 0, 1, 1, 0, 3, 3, 2, 1, 2, 2, 0, 2, 3, 2, 1, 2, 1, 0, 2, 0, 0, 3, 0, 3, 1, 1, 1], [1, 0, 1, 0, 0, 1, 0, 1], [2, 4, 2, 0, 2, 4, 1, 4], [2, 1, 0, 1], [1, 0, 1, 0], [5, 0, 3, 3, 4], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], [], [0, 3, 2, 3, 1, 1, 3, 1, 3, 1, 0, 2, 2, 4, 2, 4, 2, 0, 4, 0, 1, 4, 2, 3, 1, 0], [1, 2, 0, 2], [], [2, 1, 2, 0, 2, 0], [0, 2, 1, 2, 0, 3, 3, 1, 3, 2, 0, 0, 2, 0, 2], [21, 16, 0, 17, 3], [18, 18], [9, 8, 1, 2, 6], [20, 6, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 5, 0, 2, 3, 1, 0, 0, 8, 8, 9, 0, 33, 8, 8, 4, 4, 5, 15, 0, 26, 4, 0, 6, 15, 5, 2, 5, 3], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not ( in2.endswith(((\"\"V9s8\"\" + \"\"Q;\"\")[abs(i0):] + (\"\"#\"\" + (\"\"s\"\\\\\"1AR\"\" + s0)))) or not saveChr(mod(saveOrd(in0[abs(i1):].capitalize()[i1:int(1.0)]),int(7.0)))[i0:][:min(abs(( int(9.0) * divInt(( i0 - ( saveOrd(getCharFromString(in0, mod(int(4.0),( int(9.0) + i1 )))) - divInt(i1,i2) ) ),max(i2, saveOrd(\"\"2\"\"))) )), int(3.0))] in (\"\"D6\"\" + in1)[int(2.0):int(4.0)].capitalize() )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 2, 0, 2, 1, 1, 1, 1, 1, 1, 0], [1, 0], [0, 2, 2, 2, 1, 1, 1, 0, 2, 2], [0], [0, 0, 0, 0], [], [], [1, 2], [1, 2, 5], [1, 1, 1], [0, 0, 0], [], [], [], [], [1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [0, 8, 5, 2, 6, 1, 3, 8, 7, 8, 8, 4, 6, 4, 9, 8, 9, 8, 3, 4, 1, 4, 0, 4, 0, 1, 0, 2, 3, 0, 1, 0, 3, 6, 0, 4, 7, 3, 9], [1, 0, 0, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 0, 1, 1, 2, 0], [0, 0, 1], [1, 2, 3, 1, 1, 0, 1, 1, 0, 2, 3, 0, 1, 3, 3, 1, 1, 1, 1, 3, 2, 1, 0, 3, 2, 2, 0, 2, 2, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 1, 0, 0, 2, 3, 0, 3, 2, 0, 3, 0, 2, 3, 2, 1, 1, 1, 1, 0, 0, 3, 2, 3, 0, 1, 3, 0, 3, 0, 3, 2, 3, 1, 3, 1, 2, 2, 1, 0, 2, 3, 1, 3, 2, 0, 1, 1, 1, 0, 2, 2, 3, 2, 1, 3, 3, 0, 3, 0, 1, 3, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [3, 1, 0, 3, 3, 4, 1, 2, 1, 2, 2, 1, 3, 1, 3, 4, 2, 0, 2, 3, 0, 4, 2, 4, 3, 3, 1], [1, 1, 2, 2, 1, 0, 0, 0, 1, 0, 1, 1, 2, 1, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [1, 3, 0, 5, 3, 1, 2, 2, 1, 3, 1, 1, 3, 3, 2, 3, 5, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0], [0, 3, 3, 4, 1, 1, 2, 2, 3, 0, 0, 2, 0, 4, 2, 2, 2, 0, 1, 3, 3, 1, 2, 2, 4, 1, 2, 0, 4, 0, 2, 1, 1, 3, 2, 0, 2, 4, 4, 1, 3, 3, 1, 0, 1, 1, 0, 2, 2, 0, 0, 4, 0], [2, 3, 1, 3, 1, 3, 1], [4, 1, 1], [0, 0, 0, 0, 2, 1, 2, 1, 2, 1, 1, 2, 0, 2], [0, 2, 2, 0, 3, 3, 0, 0, 3, 0, 3, 1, 3, 3, 1, 3, 3, 0, 1], [20, 20, 25, 16, 5, 14], [15, 15, 22], [4, 1], [7, 8, 26, 7, 21, 27, 18, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 12, 12, 2, 10, 1, 4, 0, 0, 2, 3, 3, 3, 0, 0, 0, 0, 1, 39, 39, 26, 3, 105, 25, 27, 15, 11, 19, 19, 1, 53, 7, 3, 14, 19, 6, 3, 2, 8], "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(0.0) \\g ( len(s1) - int(8.0) )\\nin0 = ((\"\"U4\"\".capitalize() + \"\"1U$%Z\"\") + (s0 + in2)[int(52.0):i1][int(6.0):int(1.0)])\\nif i0 == ( max(i0, int(3.0)) - min(len(in0[int(8.0):int(7.0)]), int(8846.0)) ):{:\\ns1 = s2[:int(4.0)][len(\"\"Q\"\"):][( int(989.0) * i2 ):saveOrd(((\"\"[\"\" + saveChr(mod(( i2 * divInt(( int(8.0) - int(3.0) ),divInt(divInt(( ( divInt(max(abs(max(int(4.0), i1)), i1),( abs(i2) + abs(divInt(i2,max(i1, ( len(\"\"F\"\") + ( int(1.0) + int(4.0) ) )))) )) - int(0.0) ) + int(4.0) ),i1),i1)) ),max(divInt(len(s2[i2:]),int(0.0)), saveOrd(s1.rstrip()))))[:i2][abs(i2):]) + \"\"$\"\"[:min(( abs(int(1.0)) - len(\"\"p\"\") ), int(0.0))]))].rstrip((in0[:mod(mod(int(2.0),i2),divInt(min(int(3.0), saveOrd(saveChr(( i1 - int(0.0) ))[int(1.0):])),int(0.0)))] + \"\"<\"\".rstrip()))\\n:}else:{:\\nloopBreak% = 0\\nfor s1 in ((\"\"\\\\\\\\p/\"\" + s1) + \"\"@\"\"):{:\\nin0 = \"\"Ow\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i1\\ni1 = ( ( abs(divInt(int(3.0),saveOrd(in0))) * len(s2[i1:][len(in0):i0]) ) - int(6.0) )\\ni1 -= max(int(04.0), i1)\\nb2 = i2 != i0\\n:}\\nin2 = saveChr(int(739.0))\\ns0 = s1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [2], [0, 2], [0], [0], [2], [], [0], [], [1, 1, 1], [2, 3, 0], [0, 1, 1, 1, 1, 1, 2, 0], [], [3, 1, 3, 2, 2, 2, 3, 0, 0, 1, 2, 2, 0, 2, 3, 2, 0, 3, 3, 0, 2, 3, 3, 3, 0, 3, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 0], [4, 3, 3, 0, 4, 0, 4, 0, 4, 4], [0], [0, 1, 0, 1, 0, 1, 0], [0, 3, 5, 2, 0], [1, 1, 1, 0, 0, 1, 1, 1, 1], [], [0, 3, 3, 0, 2, 1, 3, 1, 2, 0, 2, 2, 2, 1, 1, 1, 4, 1, 1, 0, 2, 0], [3], [1], [2, 2, 0, 2, 1, 2], [0, 1, 2, 1, 2, 1, 1, 0, 2], [7, 12], [4, 14, 21, 23], [9, 4, 0], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 3, 3, 8, 0, 29, 8, 10, 1, 7, 5, 9, 0, 22, 1, 1, 6, 9, 2, 4, 3, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not s0 in ((in0 + \"\"H\"\"[saveOrd((\"\"e\"\" + in2[int(2.0):])):]) + \"\"9\"\"[:len(\"\"o4v\"\")][divInt(mod(divInt(len(\"\"x\"\"),i0),i1),int(3.0)):][mod(divInt(i1,mod(min(divInt(i1,saveOrd(\"\"M\"\".rstrip())), min(i1, ( saveOrd(\"\"0\"\") + min(saveOrd(s2), i1) ))),saveOrd(s0[i2:]))),int(0.0)):i0])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [3], [0], [0], [1], [0, 1, 0, 1, 0, 1, 1], [], [2], [], [0, 2, 4, 0, 0], [1, 1], [], [3, 3, 3, 0, 0, 1, 3, 3, 3, 0, 1, 0, 4], [1], [], [], [3, 0], [24], [], [], [31]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 5, 2, 0, 13, 1, 0, 0, 2, 1, 0, 0, 1], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (((s2 + in1) + \"\"`\"\") + (((s0 + \"\"Y\"\") + s0) + saveChr(int(3.0))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 9, 1, 4, 3, 1, 1, 1, 7, 8, 1, 2, 5, 9, 1, 7, 8], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 0, 1, 1, 1, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 2, 2, 2, 2, 0, 1, 2, 3, 0, 2, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 3, 2, 1, 3, 1, 3, 0, 2, 2, 2, 0, 2, 2, 1, 0, 0, 1, 1, 3, 2, 0, 0, 3, 2, 0, 1, 1, 3, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [3, 3, 1, 0, 4, 1, 1, 2, 1, 1, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 5, 4, 4, 2, 0, 4], [1, 1], [0], [2, 0, 0, 4, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 2, 0], [1, 0], [2, 1, 0, 0, 1], [0, 0], [17, 15], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 18, 0, 64, 20, 12, 11, 9, 6, 2, 1, 16, 4, 0, 4, 2, 2, 0, 0, 0], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(saveChr(i0))) not in s2[int(4.0):max(mod(i2,int(9.0)), mod(int(1.0),min(( mod(( divInt(i2,int(4.0)) + ( saveOrd((\"\"R\"\" + getCharFromString(s0, i0))[( divInt(i0,( int(3.0) + i1 )) * ( max(i1, i2) - divInt(int(1.0),i0) ) ):max(( int(1.0) + abs(int(1.0)) ), max(i0, ( ( divInt(i2,divInt(( int(7.0) * i2 ),i0)) - int(8.0) ) - int(1.0) )))]) * max(( i1 + i1 ), max(mod(i1,int(2.0)), int(5.0))) ) ),len(\"\"P\"\")) + i0 ), int(9.0))))].capitalize()[:i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1], [2, 2, 0, 0, 1, 1, 1], [0, 0], [1, 0, 1, 1, 0], [0, 0], [0, 0], [], [], [3, 2], [], [0, 2, 2, 2], [], [0, 0, 1], [3], [1], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 4, 0, 5, 9, 7, 1, 2, 9, 5, 2], [0, 2, 2, 0, 0, 2, 0, 1, 0, 2, 0, 2, 0, 1, 0, 1, 1, 0, 0, 2, 2, 0], [0, 0, 0], [3, 1, 3, 0, 2, 1, 3, 3, 3, 2, 0, 3, 2, 0, 0, 0, 3, 1, 1, 0, 2, 3, 2, 0, 2, 1, 2, 3, 1, 2, 2, 1, 3, 3, 3, 1, 0, 1, 2, 2, 0, 0, 1, 0, 0, 1, 2, 3, 0, 0, 1, 2, 0, 0, 2, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0], [4, 1, 0, 3, 0, 0, 2, 1, 1, 0, 4, 2, 1], [2, 0, 0, 2, 1, 0, 0, 2, 0, 2], [0, 1, 1, 0], [5, 2, 1, 5, 4, 1, 1, 1], [1, 1, 1], [0, 0], [0, 0, 2, 0, 4, 2, 1, 4, 0, 1, 2, 2, 4, 0, 2, 1, 0], [1, 1, 0], [], [0, 2, 1, 1, 1], [2, 1, 2], [], [15], [8, 7], []], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 2, 5, 2, 2, 0, 0, 2, 0, 4, 0, 3, 1, 1, 0, 0, 12, 12, 22, 3, 58, 14, 13, 10, 4, 8, 3, 2, 17, 3, 0, 5, 3, 0, 1, 2, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s2:{:\\nloopBreak% = 0\\nfor s1 in in2:{:\\ni0 = saveOrd(in1[int(7.0):max(i2, ( int(1.0) * min(len(saveChr(min(divInt(i2,min(( i0 + i0 ), i2)), abs(int(4.0))))), int(0.0)) ))])\\nres0 = ( \"\"8\"\"[i0:] in saveChr(( max(mod(i1,mod(int(5.0),( max(int(9.0), ( divInt(int(7.0),min(saveOrd(s1), abs(int(1.0)))) + i0 )) * int(2.0) ))), ( ( i2 - i0 ) + int(9.0) )) + i2 )) or \"\"p\"\" in getCharFromString(s1, i0)[:int(5.0)][:( max(i1, i0) * int(2.0) )] )\\ni1 = ( i1 + i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = ( i2 * i2 )\\nb2 = \"\"7\"\"[:i0] not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1], [1, 2, 2, 0, 1, 1, 0, 1, 2, 0, 0, 2, 2, 1, 2, 1, 0, 1, 0, 0, 1], [1, 2, 2, 2, 0, 1], [1, 0, 0, 0, 2, 1, 0, 1, 0, 1, 1, 2, 1, 2, 2], [0], [0, 0, 0, 0, 0, 0, 0], [], [], [0, 3, 2, 3, 0, 0, 3, 0], [2, 3], [0, 0, 2, 0, 1, 2, 0, 0, 0, 1, 0, 0, 2], [0, 0], [4, 5, 3], [1, 1, 0, 0, 1, 3, 0, 2], [1], [0, 0, 1], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 8, 6, 0, 1, 6, 0, 0, 3, 9, 2, 1, 6, 8, 0, 2, 5, 8, 1, 4, 1, 0, 4, 8, 5, 8, 3, 8, 8, 1, 1, 6, 3, 1, 9], [1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 0, 0, 2, 1, 2, 1, 0, 0, 1, 1, 0, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 1], [3, 3, 0, 2, 1, 1, 1, 0, 1, 0, 3, 3, 2, 0, 0, 2, 0, 1, 1, 2, 2, 0, 3, 2, 3, 2, 1, 2, 1, 1, 1, 2, 0, 3, 2, 1, 1, 0, 0, 0, 2, 1, 0, 1, 1, 3, 0, 1, 3, 2, 1, 1, 3, 2, 2, 0, 2, 0, 1, 1, 2, 0, 1, 3, 3, 0, 1, 2, 2, 3, 2, 2, 0, 1, 3, 2, 1, 1, 3, 1, 2, 3, 0, 1, 0, 2, 3, 3, 1, 3, 2, 3, 0, 3, 0, 2, 1, 3, 0, 1, 3, 2, 3, 3, 0, 0, 1, 2, 3, 2, 2, 0, 2, 3, 1, 0, 1], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [2, 0, 0, 1, 0, 1, 2, 2, 0, 2, 3, 0, 3, 2, 4, 4, 2, 1, 3, 4, 4, 0, 3, 0, 0, 3, 3], [0, 2, 1, 0, 1, 2, 0, 0, 1, 1, 2, 1, 1, 2, 0], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [5, 0, 1, 1, 5, 4, 1, 2, 4, 0, 0, 0, 1, 0, 4, 3, 5, 0, 5, 3, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0], [2, 0, 1, 3, 4, 4, 0, 1, 2, 1, 0, 0, 0, 2, 4, 1, 4, 0, 0, 1, 4, 3, 2, 4, 0, 4, 3, 4, 2, 1, 3, 2, 4, 2, 0, 2, 1, 4, 0, 2, 4, 2, 4, 0, 0, 1, 0, 4, 0, 0, 4, 0], [1, 3, 3, 2, 0, 3, 2, 2, 0, 3, 0, 1, 1, 2], [3, 4, 2, 0], [1, 1, 1, 1, 0, 2, 2, 2, 0, 0], [3, 1, 0, 2, 3, 0, 1, 1, 0, 0, 2, 1, 0, 3], [13, 18, 4, 10, 21], [18, 25, 6, 7], [4, 0], [17, 16, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 21, 21, 6, 15, 1, 7, 0, 0, 8, 2, 13, 2, 3, 8, 1, 3, 2, 35, 35, 33, 6, 117, 30, 27, 15, 18, 21, 14, 1, 52, 14, 4, 10, 14, 5, 4, 2, 3], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += abs(min(i1, mod(int(1.0),int(8.0))))\\nif True:{:\\nloopBreak% = 0\\nwhile True:{:\\nb0 = in2[:int(6.0)].startswith(\"\".s\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nres0 = b2\\nres0 = i1 == int(0.0)\\n:}\\ns0 = (saveChr(i1) + s1.lstrip(\"\"N4\"\"))\\ni1 *= min(max(( i2 - i2 ), ( i1 + int(1.0) )), int(6.0))\\nloopBreak% = 0\\nwhile \"\"-SzgE\"\"[:( mod(i2,min(mod(max(divInt(int(0.0),( int(0.0) - int(3.0) )), int(9.0)),divInt(i2,abs(divInt(int(2.0),int(1.0))))), i1)) * i1 )].endswith(s1):{:\\nb0 = b0\\ni0 = i0\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nfor in2 in in1:{:\\nres0 = ( ( int(6.0) + i2 ) \\ge int(8.0) or b0 )\\nif not s1 != \"\"K\"\".rstrip(s2.capitalize())[:int(0.0)]:{:\\ni1 = abs(i2)\\ni1 = int(2.0)\\n:}else:{:\\nin1 = s0\\ni0 += min(( int(5.0) - int(8.0) ), abs(mod(( i0 - mod(i1,int(1.0)) ),int(4.0))))\\n:}\\ns0 = \"\"0\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = getCharFromString((s1.strip()[:( i1 * int(1.0) )] + (\"\"h\"\"[len((getCharFromString(s0[min(i0, int(0.0)):], mod(( len(\"\"V\"\"[( divInt(i2,int(4.0)) - abs(( int(8.0) - int(5.0) )) ):]) * saveOrd(in1.lstrip()) ),int(8.0)))[divInt(saveOrd(getCharFromString(saveChr(i1)[int(3.0):i0], divInt(abs(max(int(8.0), len(in0))),mod(saveOrd(in2),i0)))[saveOrd(\"\"-\"\"):i0]),divInt(int(8.0),min(i1, int(1.0)))):] + s0)):len(saveChr(mod(min(min(i0, i1), int(1.0)),divInt(len(in2),mod(mod(i0,( len(in0) + int(6.0) )),i1)))))].capitalize() + s0.capitalize()).capitalize()), int(319.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 2, 0, 2, 0, 0, 2, 2, 1, 0, 1, 2, 0, 2, 1, 0, 0, 0, 2, 2, 1, 0, 0, 2, 1, 1, 2, 2, 2, 0, 1, 1, 2, 1, 2, 2, 2, 0, 2, 2, 2, 0, 0, 1, 1], [2, 0, 0, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 0, 0, 1, 2, 0, 2], [1, 1, 0, 0, 1, 2, 0, 0, 2, 1, 0, 1, 1, 1, 0, 2, 2, 2, 0, 2, 2, 1, 1, 0, 2, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [3, 3, 3, 2, 1, 1, 2, 1, 2, 3, 0, 2, 2, 3], [2, 3, 5, 2, 1, 0, 3], [2, 2, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 1, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 1, 1, 0, 2, 2, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0], [4, 2, 2, 4, 0, 4, 5, 3, 2, 2, 5, 5, 5], [3, 3, 0, 3, 0, 2, 3, 0, 1, 2, 1, 3, 3, 0, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0], [1, 0, 1, 0], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [5, 8, 5, 1, 3, 1, 9, 0, 2, 6, 6, 2, 8, 4, 8, 0, 3, 6, 5, 7, 3, 9, 4, 0, 9, 7, 5, 2, 2, 6, 7, 6, 1, 6, 9, 6, 6, 4, 5, 1, 3, 8, 5, 7, 1, 5, 4, 4, 8, 9, 4, 2, 7, 2, 6, 1, 0, 4, 7, 7, 7, 7, 9, 7, 3, 3, 6, 0, 5, 0, 1, 9, 0, 4, 6, 6, 7, 2, 6, 3, 2, 6, 6, 1, 7, 4, 8, 2, 2, 7, 2, 9, 2, 2, 3, 0, 0, 7, 5, 5, 2, 0, 2, 1, 8, 4, 2, 7, 8, 1, 4, 7, 4, 1, 6, 3, 7, 8, 2, 8, 1, 5, 8, 8, 9, 0, 4, 7, 7, 9, 5, 9, 6], [1, 1, 2, 2, 0, 2, 1, 0, 0, 0, 1, 2, 2, 0, 0, 2, 0, 1, 0, 2, 1, 1, 1, 1, 1, 2, 2, 0, 1, 0, 2, 0, 0, 1, 1, 1, 0, 2, 0, 2, 0, 2, 0, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 2, 0, 2, 0, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 0, 2, 2, 0, 0, 1, 0, 0, 1, 2, 0, 2, 2, 1, 1, 0, 2, 2, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 2, 0, 0, 2, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 1, 2, 1, 1, 1, 1, 0, 2, 0, 2, 1, 1, 2, 1, 0, 0, 0, 1, 2, 2, 1, 0, 2, 0, 0, 2, 0, 0, 1, 2, 0, 2, 1, 1], [0, 1, 1, 1, 1, 0, 1, 1, 0], [3, 1, 2, 0, 2, 3, 1, 3, 2, 0, 0, 0, 3, 3, 3, 2, 0, 1, 3, 2, 3, 1, 0, 3, 1, 2, 0, 0, 0, 2, 3, 2, 3, 1, 0, 1, 1, 2, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 2, 3, 0, 3, 1, 2, 2, 3, 2, 0, 2, 2, 3, 1, 1, 2, 2, 3, 1, 2, 2, 0, 2, 0, 3, 0, 0, 1, 3, 0, 1, 1, 2, 1, 0, 3, 1, 0, 2, 1, 0, 2, 2, 2, 3, 1, 3, 0, 0, 3, 2, 0, 1, 0, 3, 0, 3, 1, 1, 1, 3, 3, 2, 2, 2, 1, 3, 2, 3, 0, 0, 2, 2, 2, 1, 0, 1, 2, 3, 3, 2, 3, 1, 0, 3, 2, 0, 0, 2, 3, 2, 0, 3, 2, 3, 1, 2, 2, 3, 0, 1, 1, 1, 0, 1, 1, 1, 3, 1, 3, 3, 0, 3, 2, 2, 0, 2, 1, 3, 1, 0, 3, 1, 0, 1, 2, 2, 2, 3, 2, 0, 2, 3, 2, 3, 0, 0, 3, 2, 0, 3, 3, 0, 3, 2, 1, 0, 2, 3, 3, 0, 3, 1, 0, 2, 3, 0, 1, 2, 3, 3, 2, 0, 2, 3, 2, 1, 3, 3, 0, 3, 2, 1, 0, 2, 2, 0, 1, 1, 2, 2, 1, 1, 2, 3, 0, 3, 3, 3, 2, 2, 3, 0, 3, 3, 1, 2, 3, 0, 0, 0, 0, 2, 2, 0, 0, 1, 3, 2, 3, 3, 0, 0, 1, 3, 2, 1, 0, 0, 1, 2, 3, 3, 0, 3, 3, 1, 3, 3, 3, 1, 2, 3, 0, 0, 2, 0, 2, 1, 2, 2, 0, 0, 1, 1, 1, 2, 1, 3, 1, 2, 1, 3, 0, 3, 2, 3, 2, 0, 3, 3, 2, 3, 1, 3, 2, 0, 0, 1, 2, 0, 1, 3, 1, 1, 1, 1, 2, 0, 3, 1, 3, 1, 1, 3, 2, 2, 3, 3, 1, 0, 3, 1, 3, 2, 0, 3, 1, 0, 1, 2, 0, 0, 1, 3, 3, 2, 3, 2, 0, 0, 2, 2, 0, 3, 2, 2, 0, 2, 2, 2, 3, 2, 0, 0, 3, 3, 1, 1, 1, 2, 1, 3, 2, 1, 2, 2, 3, 1, 1, 2, 1, 0, 3, 3, 0, 1, 3, 2, 0, 3, 2, 0, 2, 3, 2, 1, 1, 1, 2, 0, 2, 2, 0, 2, 3, 0, 2, 0, 3, 3, 1, 0, 1, 0, 0, 0, 2, 3, 3, 0, 0, 3, 1, 2, 2, 3, 2, 2, 0, 1, 3, 1, 3, 2, 3, 1, 3, 3, 2, 0, 2, 2, 1, 2, 0, 0, 3, 0, 0, 2, 3, 3, 0, 3, 3, 2, 2, 2, 0, 2, 0, 0, 2, 2, 1, 0, 1, 2, 0, 1, 3, 1, 2, 2, 3, 1, 3, 0, 3, 1, 0, 1, 2, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0, 1, 1, 3, 1, 1, 1, 3, 3, 3, 2, 1, 0, 0, 2, 2, 2, 1, 3, 0, 2, 2, 2, 1, 0, 3, 3, 3, 1, 1, 1, 0, 0, 3, 0, 3, 0, 3, 2, 2, 0, 2, 2, 0, 1, 0, 1, 0, 3, 1, 3, 2, 2, 0, 1, 0, 0, 2, 0, 0, 1, 2, 1, 1, 2, 0, 1, 3, 3, 0, 3, 1, 1, 3, 0, 3, 3, 0, 1, 1, 2, 1, 0, 1, 3, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0], [0, 3, 1, 4, 0, 2, 2, 2, 3, 4, 1, 0, 1, 4, 4, 3, 4, 2, 2, 1, 0, 0, 4, 3, 0, 1, 3, 3, 1, 3, 1, 2, 0, 2, 3, 3, 3, 2, 4, 1, 0, 1, 0, 4, 0, 0, 4, 1, 3, 1, 0, 2, 3, 4, 4, 3, 0, 1, 0, 2, 1, 2, 3, 3, 0, 1, 1, 1, 1, 3, 1, 2, 0, 2, 1, 0, 4, 2, 0, 3, 0, 2, 3, 3, 0, 2, 0, 3, 1, 4, 4, 2, 2, 0, 1, 4, 2, 0, 0, 4, 4, 0, 2, 2, 2, 1, 0, 1, 1, 3, 2, 2, 1, 3, 3, 1, 1, 0, 0, 2, 2, 0, 3, 3, 0, 4, 4, 0, 2, 4, 0, 3, 3, 0, 0, 4, 4, 0, 4, 0, 0, 4, 1, 1, 3, 1, 1, 1, 3, 1, 4, 2, 3, 4, 0, 0, 1, 1, 3, 2], [2, 0, 1, 2, 1, 1, 1, 2, 0, 0, 1, 2, 2, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 2, 0, 1, 1, 1, 2, 0, 1, 0, 0, 0, 2, 0, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 2, 2, 0], [1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 3, 5, 5, 5, 2, 1, 5, 1, 2, 1, 0, 5, 0, 5, 4, 1, 3, 4, 2, 1, 1, 2, 3, 0, 1, 1, 3, 1, 3, 2, 2, 4, 3, 0, 1, 3, 3, 1, 4, 4, 4, 5, 2, 2, 2, 4, 3, 5, 4, 1, 1, 4, 1, 3, 5, 4, 4, 0], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0], [0, 1, 3, 2, 0, 0, 1, 1, 1, 1, 4, 2, 4, 1, 2, 3, 3, 0, 4, 1, 2, 4, 4, 4, 0, 2, 0, 0, 0, 1, 0, 2, 0, 1, 2, 2, 4, 0, 1, 2, 2, 1, 2, 1, 4, 0, 4, 1, 0, 0, 2, 2, 4, 1, 0, 0, 0, 2, 2, 2, 2, 0, 4, 0, 4, 4, 1, 1, 1, 4, 0, 1, 4, 1, 4, 0, 4, 0, 4, 4, 0, 0, 1, 1, 1, 1, 2, 4, 2, 4, 1, 0, 1, 4, 1, 1, 1, 3, 2, 2, 0, 1, 1, 1, 2, 1, 0, 4, 2, 2, 4, 1, 0, 2, 2, 2, 4, 1, 4, 2, 4, 0, 4, 0, 2, 2, 1, 1, 0, 0, 0, 0, 0, 4, 0, 2, 2, 4, 2, 2, 1, 1, 2, 4, 0, 0, 4, 1, 1, 1, 3, 4, 4, 0, 2, 1, 1, 1, 0, 0, 4, 2, 4, 4, 1, 1, 4, 4, 1, 1, 2, 2, 2, 0, 4, 2, 4, 4, 2, 3, 3, 2, 0, 4, 1, 2, 4, 4, 4, 0, 1, 1, 4, 0, 0], [2, 3, 2, 1, 0, 1, 3, 3, 1, 2, 2, 3, 1, 2, 3, 3, 1, 1, 2, 0, 0, 0, 3, 3, 3, 1, 0, 3, 1, 2, 0, 1, 3, 3, 3, 0, 0, 2, 2, 0, 0, 2, 1, 1, 0, 2, 2], [0, 5, 4, 1, 0, 2, 3, 0, 5, 5, 0, 1, 2], [0, 0, 0, 2, 2, 1, 1, 2, 0, 0, 1, 1, 0, 2, 0, 0, 1, 0, 2, 0, 2, 2, 0, 1, 1, 1, 0, 0, 2, 2, 0, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 2, 2], [1, 3, 1, 3, 0, 3, 1, 1, 1, 3, 2, 2, 1, 1, 2, 2, 2, 1, 1, 3, 1, 0, 0, 2, 1, 3, 1, 2, 2, 1, 2, 0, 0, 3, 3, 3, 2, 2, 0, 1, 1, 0, 0, 3, 1, 0, 0, 1, 3, 3, 1, 1, 0, 1, 2, 2, 3, 3, 0, 1, 2, 3], [2, 7, 18, 4, 5, 5, 6, 19, 1, 25, 24, 4], [13, 15, 16, 6, 8, 15, 10, 14, 12, 4, 10, 22, 15, 6, 19, 25, 7, 2, 10, 2, 1], [2, 3, 9, 7, 9, 3, 1, 8, 4, 6, 6, 0, 2, 1], [16, 11, 22, 13, 23, 30, 11, 10, 23, 23, 17, 8, 12, 30, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 45, 45, 19, 26, 5, 15, 0, 0, 14, 7, 38, 7, 13, 18, 6, 4, 4, 133, 133, 154, 9, 587, 151, 160, 78, 79, 59, 62, 5, 195, 47, 13, 44, 62, 12, 21, 14, 15], "tree_depth": 84, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = min(int(5.0), mod(i1,mod(len(s1),int(8.0))))\\nloopBreak% = 0\\nwhile \"\"n-\"\".startswith((in0[max(( i2 * i2 ), i0):saveOrd(in2)] + \"\"p\"\")):{:\\ni2 += min(abs(divInt(i1,int(51.0))), abs(( abs(int(3.0)) - i0 )))\\nloopBreak% = 0\\nfor in2 in \"\"(C=q\"\":{:\\nres0 = \"\"g\"\" == \"\"i\"\"\\nres0 = len(\"\"*\"\".lstrip()[int(1.0):( i0 * i0 )].capitalize()) == i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in ((s2 + \"\"2\"\".capitalize()) + saveChr(( saveOrd(getCharFromString(saveChr(( max(int(9.0), i2) - int(0.0) )), int(2.0))) - mod(min(int(6.0), max(saveOrd(s1), saveOrd(in2[len(s1):]))),saveOrd(s2)) ))[abs(int(6.0)):])[abs(( max(i2, min(int(2.0), mod(( min(( i0 - ( divInt(saveOrd(\"\"3\"\"),int(8.0)) * int(4.0) ) ), ( divInt(len(s1),int(8.0)) + divInt(( i0 + divInt(i2,min(i0, i1)) ),int(0.0)) )) - max(i0, int(3.0)) ),int(6.0)))) * ( int(5.0) * i2 ) )):len(s0[:int(7.0)])]:{:\\nloopBreak% = 0\\nwhile ( i1 \\ge divInt(int(3.0),i1) or ( ( divInt(( len(\"\"p\"\") + int(9.0) ),max(i1, i1)) + len(in2.strip(\"\"k\"\")[( i1 - int(4.0) ):][:i2]) ) != max(i2, abs(int(0.0))) and int(9.0) == int(7.0) ) ):{:\\ni0 -= min(abs(( ( divInt(int(5.0),len(\"\"9\"\"[divInt(len(\"\"7\"\"[:i1]),i0):divInt(( divInt(int(2.0),i2) * int(2.0) ),mod(len(s0.rstrip(saveChr(abs(( saveOrd(\"\"9\"\") + int(6.0) ))))),i0))][max(divInt(i0,i1), ( min(( i1 + max(divInt(min(int(7.0), ( mod(saveOrd(in2),i1) + int(6.0) )),int(1.0)), int(6.0)) ), i0) + int(9.0) )):int(6.0)])) + int(6.0) ) + min(int(4.0), min(saveOrd(in1), i2)) )), max(( ( i0 - divInt(int(5.0),len(\"\"o\"\".capitalize()[int(1.0):i2][:max(int(3.0), i0)])) ) * int(8.0) ), ( mod(( min(( i2 + mod(abs(mod(len(s1),i0)),i0) ), saveOrd(in0)) - ( i0 - saveOrd(in1) ) ),len(s2[:i1][min(( int(5.0) + i2 ), ( max(min(i1, abs(int(7.0))), i2) - ( max(i0, int(1.0)) + mod(abs(len(s1.capitalize())),( i0 * divInt(len(saveChr(mod(int(5.0),min(max(i0, max(( int(4.0) - i1 ), divInt(( i0 * int(4.0) ),int(8.0)))), ( divInt(int(9.0),int(4.0)) + divInt(max(i0, max(len(\"\"m\"\"), max(( ( abs(i1) - min(abs(int(2.0)), ( max(i0, i0) - i1 )) ) - i2 ), ( divInt(i0,i2) * int(7.0) )))),min(( saveOrd(\"\">\"\") + abs(i0) ), i1)) )))).rstrip()),int(2.0)) )) ) )):min(( int(6.0) - i2 ), i1)][int(1.0):( len(\"\"e\"\") + min(i2, abs(len(s1.capitalize()))) )][int(0.0):])) + len(\"\"H\"\") )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = \"\"S3k_\"\".lstrip()\\nres0 = b2\\nif ( b1 and not in0.strip() == saveChr(min(abs(int(4.0)), ( min(i1, i2) + divInt(i1,( int(7.0) * mod(( i1 + i2 ),int(7.0)) )) ))) ):{:\\nb1 = s0.startswith(saveChr(int(7.0)))\\nloopBreak% = 0\\nwhile ( int(7.0) \\g divInt(int(9.0),len(s1.capitalize())) or b2 ):{:\\ns1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= int(7.0)\\nb1 = True\\ni1 *= divInt(int(3.0),max(i0, saveOrd(\"\"w\"\")))\\nif \"\"1\"\" in \"\"8\"\":{:\\nloopBreak% = 0\\nwhile not True:{:\\ni2 = ( saveOrd(\"\"p\"\") + ( i2 * abs(abs(mod(min(int(3.0), max(divInt(i0,i0), int(6.0))),divInt(i1,int(0.0))))) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni0 -= saveOrd(getCharFromString(getCharFromString(\"\"4\"\", int(5.0))[int(0.0):], int(1.0))[int(9.0):divInt(i0,abs(int(0.0)))])\\nb2 = s1.startswith(\"\"E\"\")\\nloopBreak% = 0\\nwhile getCharFromString(\"\"F\"\", min(int(4.0), int(6.0))).endswith(\"\"(\"\"):{:\\nin0 = \"\"\"\\\\\">\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = (s2[min(mod(divInt(saveOrd(\"\"6\"\"),saveOrd(\"\"6\"\")),int(6.0)), i1):][min(int(7.0), abs(divInt(i2,abs(int(2.0))))):i0] + \"\"F\"\")\\n:}else:{:\\nif ( ( res0 and int(6.0) \\l divInt(i2,i2) ) or int(3.0) \\ge abs(max(divInt(min(( i1 + i1 ), divInt(( i0 * max(divInt(divInt(i2,( divInt(( max(( i2 - i1 ), len(\"\"g\"\"[abs(int(2.0)):])) * int(6.0) ),int(6.0)) - mod(int(1.0),abs(divInt(int(7.0),mod(( max(int(4.0), int(8.0)) * ( int(2.0) * i0 ) ),len(in1))))) )),len(\"\"t\"\".lstrip()[:i1][int(2.0):max(( i0 - max(( i0 - divInt(min(mod(int(7.0),int(2.0)), int(9.0)),( i1 + ( divInt(i0,( min(i0, ( i1 - abs(abs(int(2.0))) )) - i1 )) + int(2.0) ) )) ), i1) ), i1)].lstrip(in0))), i2) ),divInt(min(len(\"\"G\"\".strip(saveChr(i0))[i0:len(getCharFromString(s0, int(3.0))[( divInt(min(divInt(divInt(i2,int(0.0)),saveOrd(s1.strip(\"\"T\"\"[int(0.0):][saveOrd(\"\">\"\"):]))), mod(min(int(7.0), abs(saveOrd(in0))),divInt(i1,divInt(divInt(int(5.0),divInt(i0,i0)),min(i0, i0))))),mod(len(in0),len(s1))) + i2 ):min(min(mod(( divInt(i2,mod(i2,i2)) - ( divInt(int(5.0),i0) - int(2.0) ) ),divInt(i0,int(0.0))), saveOrd(in1)), int(2.0))])][:mod(( saveOrd(in1) + int(1.0) ),min(i0, saveOrd(saveChr(int(8.0)))))][:i1]), int(4.0)),mod(i2,i1)))),i1), int(2.0))) ):{:\\nloopBreak% = 0\\nwhile not in1 != \"\"z\"\"[i1:i1][:min(i0, i2)].capitalize()[i0:int(7.0)][int(8.0):min(int(1.0), int(4.0))]:{:\\nloopBreak% = 0\\nwhile \"\"B\"\" == getCharFromString(in2, int(7.0))[saveOrd(s2):]:{:\\ns2 = saveChr(max(max(divInt(int(4.0),i2), i1), ( mod(mod(int(1.0),len(\"\"Z\"\")),i1) - ( mod(( int(6.0) + i2 ),max(max(max(int(3.0), int(7.0)), int(8.0)), i1)) - i0 ) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = False\\n:}\\ns2 = \"\"h\"\"\\n:}\\nloopBreak% = 0\\nwhile b2:{:\\nin1 = \"\".%\"\"\\nloopBreak% = 0\\nfor in0 in (in2.rstrip().lstrip() + \"\"c\"\"[len(\"\"k\"\"):i0]):{:\\nloopBreak% = 0\\nfor in1 in \"\"Y\"\":{:\\nif True:{:\\ni0 += max(i1, saveOrd(s1))\\n:}\\nloopBreak% = 0\\nwhile s1 == getCharFromString(getCharFromString(\"\"c\"\", ( ( i2 + mod(divInt(i2,int(2.0)),i1) ) + int(8.0) )), i0)[:abs(int(1.0))].strip():{:\\nloopBreak% = 0\\nfor in1 in \"\"0\"\":{:\\nloopBreak% = 0\\nwhile \"\"2\"\".capitalize().capitalize().endswith(\"\")\"\"):{:\\ni2 = len(s1[:mod(mod(i0,int(5.0)),i0)][i2:( i0 * i0 )][:int(8.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = getCharFromString(getCharFromString(((in0[mod(int(8.0),int(9.0)):] + saveChr(( i1 * int(0.0) ))) + \"\"_\"\")[saveOrd(saveChr(min(i2, min(int(4.0), int(7.0))))[max(i0, max(len(getCharFromString(in2.capitalize(), i2)), int(7.0))):]):].capitalize(), int(9.0))[( int(59.0) + i1 ):int(6.0)], abs(i1)).endswith(\"\"E\"\")\\nin1 = \"\"b1+\"\"\\nres0 = in1.capitalize().endswith(s0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [0, 0, 0, 0, 1], [], [1], [], [], [], [3, 3, 2, 0, 3], [19], [], [8], [22, 23, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 0, 1, 0, 0, 0, 5, 1, 0, 1, 3], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"=>8T,\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 2, 2, 1, 0, 1, 0, 0, 2, 0, 1], [2, 1, 1, 1], [2, 0, 1, 0, 0, 0, 2], [], [0, 0, 0], [], [], [1, 2, 2, 2], [3, 1, 1], [1, 2, 1, 2, 0, 1, 2], [0, 0, 0], [2, 4], [2, 0], [], [], [1, 0, 1], [1, 1, 1, 1, 1, 1], [0, 2, 4, 5, 5, 6], [1, 0, 1, 2, 1, 1, 0, 2, 0, 1, 0, 1, 1], [0, 0], [3, 0, 1, 2, 1, 2, 0, 1, 0, 3, 0, 2, 0, 2, 2, 0, 1, 0, 0, 2, 1, 0, 2, 0, 3, 3, 0, 1, 3], [0, 0, 0, 0, 1, 1, 1], [2, 1, 4, 0, 4], [1, 1, 1, 1], [1, 1, 1], [1, 0, 5, 0, 2, 0, 5], [1, 1, 0, 1], [], [1, 0, 1, 2, 0, 4, 0, 1, 2, 4, 1], [1, 3, 2], [0], [0, 1], [3, 0, 0, 0], [15, 19, 13], [], [], [18]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 2, 5, 0, 3, 0, 0, 3, 3, 6, 3, 2, 1, 0, 0, 1, 6, 6, 12, 1, 29, 7, 5, 4, 3, 4, 4, 0, 8, 1, 0, 1, 4, 3, 0, 0, 1], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"/\"\"\\nloopBreak% = 0\\nwhile abs(i1) \\ge int(0.0):{:\\nif s0 == \"\"P\"\":{:\\nb1 = ( int(2.0) - ( i0 - int(4.0) ) ) \\g i1\\n:}else:{:\\ni2 = max(i1, ( i1 - ( mod(i0,int(5.0)) - i2 ) ))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = in2[i0:mod(int(5.0),i1)].startswith(saveChr(mod(i0,saveOrd(s0))))\\nb2 = not min(i1, int(6.0)) \\g saveOrd(\"\"TN\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1], [2, 1, 2, 1, 1, 1, 1, 0], [0, 2], [0, 2, 2, 0, 2, 2], [0], [0], [], [], [1, 2, 2], [4, 1], [1, 0, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 5, 2, 6, 2, 8, 9, 1, 4, 8, 5, 2, 2, 2, 2, 7, 9, 9, 0, 7, 8, 8, 2, 1, 6, 2, 1, 1, 1, 0, 3, 1, 9], [0, 2, 2, 1, 0, 1, 1, 1, 2, 0, 1, 2, 2, 0, 2, 1, 0, 0, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 0, 1, 2, 2], [], [1, 3, 2, 0, 3, 1, 0, 1, 0, 1, 1, 2, 3, 3, 3, 3, 1, 3, 0, 1, 3, 2, 1, 2, 2, 2, 1, 0, 1, 0, 3, 0, 0, 2, 0, 0, 1, 1, 3, 2, 2, 2, 0, 0, 2, 0, 2, 1, 2, 3, 0, 1, 3, 2, 3, 1, 0, 2, 1, 2, 3, 3, 1, 3, 0, 0, 3, 2, 1, 3, 2, 0, 3, 2, 0, 1, 1, 3, 0, 2, 3, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 0, 3, 2, 1, 3, 1, 2, 0, 1, 2, 2, 3, 2, 1, 2, 3, 3, 1, 3, 2, 1, 2, 0, 3, 3, 0, 3, 3, 0, 0, 2, 1, 1, 3, 3, 0, 3, 3, 0, 1, 0, 3], [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 3, 4, 3, 0, 3, 1, 0, 4, 0, 3, 0, 3, 0, 0, 0, 0, 2, 0, 4, 1, 0, 3, 2, 3, 4, 0, 3, 0, 4, 2, 2, 4, 0, 2, 4, 4, 0, 2, 2, 3, 3], [0, 2, 2, 0, 0, 0, 1, 2, 2, 2, 1, 1, 0, 0, 2, 0, 2, 0, 0, 1, 0, 1, 2], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0], [2, 5, 5, 4, 3, 4, 1, 0, 0, 2, 0, 4, 1, 2, 5, 3, 5, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0], [4, 1, 3, 2, 3, 2, 2, 2, 4, 2, 2, 1, 1, 1, 1, 2, 0, 2, 1, 3, 3, 4, 2, 1, 0, 3, 2, 4, 0, 2, 0, 4, 0, 4, 4, 1, 0, 3, 3, 3, 4, 4, 4, 2, 1, 0, 4, 2, 2, 4, 1, 1, 0, 1, 0, 1, 0, 2, 1, 0, 1, 4, 0, 1, 4, 4, 2, 0, 1, 3, 1, 4, 1], [2, 2, 3, 1, 0, 0, 2, 2, 0, 3, 2, 3, 0, 2, 0, 2], [0, 4, 1], [0, 1, 1, 1, 2, 1, 2, 0, 0, 1, 1, 2, 1, 1, 1, 1], [1, 3, 2, 3, 3, 2, 1, 1, 2, 3, 3, 2, 3, 1, 1, 3, 3, 3, 1, 0, 2, 3], [12], [0, 6, 7, 14, 24, 23], [6, 9, 4, 7, 7], [3, 6, 2, 7, 28, 9, 13, 27, 7, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 2, 6, 1, 1, 0, 0, 3, 2, 3, 2, 0, 1, 0, 0, 0, 33, 33, 32, 0, 142, 35, 43, 23, 12, 18, 22, 1, 73, 16, 3, 16, 22, 1, 6, 5, 10], "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in \"\"a\"\".capitalize():{:\\nb1 = int(1.0) \\le min(divInt(i0,min(int(5.0), i2)), int(2.0))\\nloopBreak% = 0\\nwhile b2:{:\\nin2 = ((\"\"\"\"[:i2][int(6.0):].capitalize()[:int(2.0)][:( len(\"\"6\"\") + saveOrd(\"\"#\"\") )][:len(\"\"\\\\\\t\"\")] + in2[min(int(8.0), len(\"\"9\"\"[i1:int(9.0)])):])[max(divInt(int(1.0),( ( ( int(4.0) * i0 ) * int(8.0) ) + i1 )), min(i1, i1)):( i2 + i0 )] + ((\"\"g\"\"[int(5.0):int(2.0)].lstrip() + in1) + (saveChr(saveOrd(in0))[:( mod(( i1 + i2 ),( i2 - ( int(2.0) * divInt(min(i0, int(2.0)),len(in1[:( min(int(2.0), i2) * ( int(7.0) * ( len(getCharFromString(s1, min(int(9.0), min(i1, i0)))) - min(( int(9.0) - min(( i0 + abs(mod(i2,int(0.0))) ), int(7.0)) ), min(i2, ( saveOrd(getCharFromString(\"\"h\"\".capitalize(), max(i1, int(8.0)))) + i1 ))) ) ) )])) ) )) * min(int(8.0), int(2.0)) )] + s0)))\\ns0 = (((getCharFromString(\"\"4\"\"[len(s2):].rstrip(\"\"$\"\".rstrip()[:i1][:abs(mod(mod(mod(( ( ( len(\"\"]\"\") + saveOrd(s0) ) * min(i2, len(\"\"7\"\")) ) + ( int(1.0) + min(int(6.0), mod(i2,int(2.0))) ) ),( ( saveOrd(in1) - ( int(1.0) + mod(abs(abs(int(1.0))),saveOrd(\"\"&\"\")) ) ) - mod(int(1.0),( i1 * min(abs(i2), saveOrd(s1)) )) )),saveOrd(\"\"o\"\"[:i1])),i0))].capitalize()), divInt(int(0.0),int(3.0))).capitalize() + s2) + \"\"y*\"\") + getCharFromString(in2, min(abs(i1), abs(len(\"\"\\\\\\\\\"\")))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = i2 \\g int(19.0)\\nin0 = getCharFromString(in2[:i2], len(\"\"$\"\")).capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = (\"\"xM\"\" + \"\"7]\"\".capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 2, 1, 2, 0, 2, 0, 1], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1, 1, 0], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1, 0, 1, 1, 0, 0, 0, 1], [0], [2, 0, 1, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 1, 1, 3, 2, 0, 3], [17, 9], [9, 13], [0, 7], [20, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 17, 17, 11, 1, 52, 15, 11, 8, 7, 4, 8, 0, 15, 3, 1, 3, 8, 2, 2, 2, 2], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in0[len(\"\"R\"\"):] not in in2[len(in1):]:{:\\nres0 = ( abs(i2) != min(mod(int(0.0),int(7.0)), ( int(5.0) + len(\"\"0j\"\") )) or ( getCharFromString(\"\"n\"\"[i2:divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len(saveChr(divInt(int(1.0),i2))), divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i1)) )),i2)], ( int(8.0) - max(( min(i0, ( ( ( int(5.0) + int(0.0) ) * mod(int(4.0),i2) ) - int(8.0) )) - int(59.0) ), i0) )).endswith((\"\";7J@\"\" + in1.rstrip())) and True ) )\\n:}else:{:\\ni1 = int(9.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1, 1], [0], [2, 4, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 34, 10, 7, 4, 6, 5, 2, 1, 15, 4, 2, 4, 2, 1, 0, 0, 1], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\".capitalize()[len(in2[len(in1):]):]:{:\\nres0 = saveChr(mod(int(0.0),i0))[mod(int(7.0),int(5.0)):( int(7.0) + abs(i2) )].startswith(in1[i2:divInt(divInt(int(6.0),i0),divInt(min(( i1 + ( len((\"\";\"\" + in0.lstrip()).rstrip()) * divInt(min(i2, ( max(int(1.0), i1) - int(7.0) )),int(7.0)) ) ), i2),i0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 1, 2, 2, 0, 2, 0, 0, 0, 2, 0, 2, 1, 2, 1, 1], [2, 1, 1, 0, 1, 0], [1, 2, 2, 1, 0, 1, 1, 2, 0, 1], [0, 0], [0, 0, 0, 0, 0, 0], [], [], [2, 0, 0], [3, 2, 2], [2, 1, 1, 0, 0, 1, 0], [0, 0, 0], [1], [2, 0, 1], [], [1], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [8, 3, 3, 1, 6, 0, 2, 6, 2, 1, 4, 6, 2, 8, 3, 3, 6, 7, 5, 6, 0, 8, 5, 1, 6, 8, 9, 2, 6, 4, 5, 8, 0, 7, 7, 8, 8, 0, 3, 7, 3, 1, 3, 2, 3, 7, 7, 5, 2, 2, 5, 2, 8, 9, 8, 0, 2, 4, 1, 5, 7, 8, 0, 6, 1, 3, 1], [0, 2, 0, 0, 0, 1, 0, 1, 0, 2, 2, 1, 0, 1, 2, 0, 1, 0, 0, 0, 2, 0, 2, 1, 0, 1, 2, 1, 2, 0, 1, 0, 0, 0, 2, 0, 2, 0, 0, 2, 1, 0, 1, 2, 0, 0, 1, 1, 2, 2, 1, 0, 1, 2], [1, 0, 1, 0, 0], [0, 0, 3, 3, 2, 0, 0, 2, 1, 2, 2, 2, 0, 2, 1, 2, 2, 2, 2, 0, 1, 3, 0, 0, 2, 3, 1, 0, 3, 0, 3, 2, 2, 2, 2, 3, 1, 0, 1, 0, 3, 3, 1, 3, 3, 3, 0, 1, 2, 1, 0, 3, 3, 1, 0, 3, 1, 3, 3, 0, 3, 1, 1, 1, 3, 1, 0, 3, 1, 3, 1, 2, 2, 2, 3, 3, 1, 1, 3, 0, 0, 3, 3, 2, 1, 1, 1, 3, 0, 1, 2, 0, 3, 3, 2, 1, 3, 2, 0, 1, 1, 3, 2, 3, 3, 3, 2, 0, 0, 0, 1, 2, 2, 3, 1, 2, 1, 1, 2, 1, 1, 2, 3, 3, 3, 1, 3, 3, 2, 2, 0, 3, 1, 1, 0, 2, 3, 2, 3, 2, 1, 2, 1, 1, 3, 3, 2, 3, 2, 0, 0, 1, 2, 1, 2, 0, 0, 3, 1, 1, 2, 0, 2, 3, 2, 3, 0, 1, 2, 0, 1, 2, 0, 3, 2, 3, 2, 3, 0, 2, 3, 1, 3, 0, 0, 0, 0, 1, 2, 1, 0, 3, 0, 0, 2, 1, 0, 3, 1, 0, 0, 0, 2, 1, 2, 3, 1, 2, 3, 2, 3, 0, 3, 2, 1, 0, 3], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [1, 3, 3, 3, 3, 2, 4, 0, 1, 1, 0, 1, 2, 2, 2, 0, 1, 2, 4, 3, 4, 0, 2, 3, 3, 0, 4, 4, 1, 4, 2, 3, 0, 2, 3, 1, 2, 2, 0, 3, 2, 0, 0, 4, 2, 1, 4, 2, 1, 3, 1, 1, 2, 0, 1, 2, 2, 4, 1, 2, 3], [1, 0, 1, 2, 2, 1, 2, 0, 2, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 2, 0, 0, 2, 1, 0, 2, 2, 2, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [3, 2, 0, 1, 4, 5, 5, 0, 3, 2, 3, 2, 3, 4, 5, 3, 3, 5, 5, 4, 1, 3, 1, 1, 2, 2], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0], [3, 3, 0, 4, 1, 3, 4, 4, 4, 2, 2, 2, 0, 4, 0, 0, 1, 3, 1, 3, 4, 4, 2, 1, 3, 3, 1, 4, 0, 2, 3, 3, 0, 4, 3, 1, 3, 1, 0, 2, 4, 0, 2, 2, 1, 0, 4, 1, 0, 0, 4, 2, 2, 0, 0, 2, 2, 0, 1, 4, 1, 0, 2, 1, 0, 2, 4, 4, 4, 4, 4, 1, 1, 0, 2, 2, 3, 1, 4, 3, 1, 2, 3, 0, 0, 3, 1, 4, 0, 1, 1, 0], [0, 2, 1, 3, 1, 0, 0, 1, 1, 1, 2, 0, 2, 0, 1, 2, 3, 2, 3, 3], [0, 3, 4, 5], [1, 0, 0, 2, 1, 1, 2, 1, 2, 2, 0, 2, 2, 1, 0, 0, 2], [1, 2, 3, 2, 1, 0, 3, 3, 0, 2, 2, 2, 3, 2, 2, 2, 2, 0, 0, 0, 2, 1, 1, 3, 3, 0, 1, 3, 0, 1, 1, 0, 0, 2, 3], [16, 12, 10, 15, 19, 4, 11, 21, 4], [9, 12, 3, 9, 18, 15, 19], [4, 4, 8, 9, 0, 1, 9, 7, 9, 0, 9], [4, 16, 1, 28, 16, 5, 4, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 16, 16, 6, 10, 2, 6, 0, 0, 3, 3, 7, 3, 1, 3, 0, 1, 3, 67, 67, 54, 5, 217, 55, 61, 30, 27, 26, 35, 2, 92, 20, 4, 17, 35, 9, 7, 11, 8], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\nin0 = ((s2 + getCharFromString(\"\"j4!\"\", i0)) + (saveChr(max(len(s0[( i0 + i0 ):( int(8.0) - ( divInt(divInt(i1,mod(int(3.0),( divInt(( ( i0 * int(3.0) ) * len(saveChr(i1)) ),i0) - ( len(s1) * int(1.0) ) ))),i2) + len(in1) ) )][i2:abs(divInt(( ( divInt(saveOrd(\"\"4\"\"),int(6.0)) * i1 ) + int(0.0) ),i0))][:min(max(int(2.0), max(min(max(i1, int(6.0)), ( int(2.0) + i2 )), abs(abs(int(1.0))))), i0)].lstrip()), abs(int(46.0)))).capitalize() + (\"\"m\"\" + (getCharFromString(getCharFromString(\"\"Q\"\"[min(max(i1, abs(int(2.0))), int(8.0)):], int(3367.0)), saveOrd(((\"\"-\"\" + saveChr(int(5.0))) + in2))) + ((in2 + saveChr(i0)) + (\"\"\\\\\\nM\"\" + (\"\"890\"\" + s0)))[:len(saveChr(int(6.0))[:saveOrd(in0)])]))))\\nloopBreak% = 0\\nwhile \"\"]1\"\"[:int(08516.0)][mod(( ( min(abs(int(8.0)), int(9.0)) + len(s2) ) + i0 ),i0):] not in \"\"979K\"\".capitalize():{:\\nif len(in0) \\ge min(mod(int(26.0),int(45.0)), int(8.0)):{:\\ns2 = in0\\n:}\\nif saveOrd(getCharFromString(in1[i2:][int(0.0):], mod(i0,saveOrd(in2)))) == max(divInt(int(7.0),saveOrd(in0[( i2 - int(7.0) ):][int(8.0):abs(( len(\"\"P\"\") - min(abs(divInt(i1,i0)), i1) ))])), int(8.0)):{:\\ni2 = divInt(divInt(len(\"\"T\"\".capitalize()),int(0.0)),( int(3.0) + int(7.0) ))\\n:}else:{:\\nb2 = not b0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= divInt(int(3.0),int(132.0))\\nloopBreak% = 0\\nfor in0 in in2:{:\\ni2 = ( max(abs(abs(int(3.0))), min(len(\"\"0\"\"[divInt(( i0 + abs(int(7.0)) ),int(7.0)):]), i1)) + mod(min(( min(( int(5.0) * mod(int(2.0),int(2.0)) ), saveOrd(in2)) + abs(( max(divInt(i0,i0), int(5.0)) + ( int(2.0) * ( i0 - i2 ) ) )) ), saveOrd(getCharFromString(saveChr(int(8.0)), int(9.0))[:( i0 + mod(abs(mod(max(i2, int(8.0)),( i0 * int(0.0) ))),mod(i0,len(\"\"d\"\".capitalize().lstrip(\"\"j\"\").capitalize()))) )])),( max(mod(max(i2, mod(abs(int(2.0)),min(i1, i0))),i1), i2) * int(4.0) )) )\\nif ( int(1.0) * i0 ) == max(i0, i1):{:\\nin1 = s1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in0 in (\"\"-\"Es\"\" + (\"\"!LptV\"\" + (s1 + s1)[divInt(int(5.0),i1):]).rstrip((\"\"E\"\" + s2.strip(\"\"9\"\"))))[abs(int(7.0)):i2][i2:i1]:{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = mod(int(806.0),( abs(int(1.0)) + ( saveOrd(\"\".\"\") - mod(max(i1, abs(mod(int(31.0),i2))),len(s2)) ) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 0, 1], [0, 0], [1, 1], [0, 0], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [8, 4, 7, 3, 1, 1, 3, 8, 4, 7, 8, 7, 2, 1], [1, 2, 1, 1, 2, 2, 2, 1, 2, 0, 2, 0], [1, 1], [2, 1, 2, 1, 0, 0, 3, 1, 0, 1, 1, 2, 2, 2, 3, 1, 2, 2, 0, 3, 0, 0, 1, 2, 1, 3, 2, 3, 0, 3, 3, 0, 3, 2, 0, 1, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0], [2, 2, 0, 1, 3, 3, 1, 3], [0, 2, 2, 2, 0, 0, 1], [1, 1, 1, 1, 1], [0, 5, 1, 5, 5, 0], [1], [0, 0], [2, 2, 4, 0, 0, 0, 0, 2, 1], [0, 1], [], [0, 0, 0], [2], [], [], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 12, 2, 37, 10, 8, 7, 5, 6, 1, 2, 9, 1, 0, 3, 1, 0, 0, 1, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, ( int(8.0) + mod(int(4.0),i1) ))[i2:abs(int(7.0))][i1:int(311384.0)]:{:\\nloopBreak% = 0\\nfor s1 in in2:{:\\ni1 *= int(7.0)\\ni2 *= ( ( ( abs(int(8.0)) * mod(mod(i2,min(i2, i1)),int(7.0)) ) + mod(int(2.0),max(mod(len(in2),i2), len(s0))) ) + max(i0, len(\"\"6\"\"[( i2 - int(1.0) ):i0])) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 1], [0, 3], [1], [], [2, 1, 3, 0], [0], [3], [1], [], [], [1], [], [1], [], [], [], [1], [], [8], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( int(0.0) - len(\"\"i\"\") ) \\l i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1, 1], [2, 2, 0, 1, 0, 1], [2, 2], [1, 1, 1, 0], [0], [0, 0, 0], [], [], [0], [], [0, 2], [], [0], [1], [], [1], [1], [0, 1, 1, 1], [6, 7, 8, 3], [1, 0, 2, 0, 2, 1, 0, 1], [1, 1, 0], [2, 3, 0, 0, 0, 1, 2, 2, 0, 3, 1, 3, 3, 0, 1, 2, 0, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0], [2, 4, 3, 2], [1, 2, 0, 2, 2, 2], [0, 0, 0, 0], [4, 3, 0, 4, 0, 5], [0, 0, 0, 0, 0, 0, 1], [0], [0, 1, 0, 4, 0, 0], [2], [], [], [2, 0, 2, 0, 0, 1, 2], [18, 22, 22], [19], [8, 4, 0], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 2, 0, 1, 1, 0, 1, 0, 0, 0, 5, 2, 5, 1, 1, 3, 0, 1, 7, 0, 2, 0, 0, 0, 7, 3, 1, 3, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nwhile in1 in \"\"8S4WWt0\"\":{:\\ni1 -= ( abs(i0) * i2 )\\ni0 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [1], [0, 2], [], [0, 0], [], [], [0, 0], [1], [0, 1], [0], [], [0], [], [], [0], [0, 0, 1, 1], [9, 7, 4, 7], [0, 1, 2], [0], [3, 0, 1, 2, 0, 2, 1, 0], [1, 1], [4], [], [1, 0], [5, 1], [1], [], [0, 2, 1], [], [], [0], [3], [], [], [], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 1, 4, 4, 3, 0, 8, 2, 1, 0, 2, 2, 1, 0, 3, 0, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif b0:{:\\nb0 = saveOrd(in2) \\g i0\\ns1 = \"\"[\"\"[int(974.0):mod(i1,divInt(int(7.0),i2))]\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [0], [], [], [], [], [1, 2], [2, 1, 0, 2], [0, 0], [5], [3, 2], [1], [], [], [0, 1, 1, 1, 1, 1], [2, 9, 8, 4, 9, 2], [0, 0, 1, 2, 1, 1, 2], [1], [2, 1, 1, 2, 3, 2, 1, 3, 3, 2, 2, 2, 3, 1, 0, 0, 3, 0, 1, 2, 0, 0, 0, 3, 1], [0, 1, 1, 0, 0, 0, 1], [3, 1, 2, 0, 3, 2], [1, 2, 0, 2, 2], [0, 1, 0], [3, 4, 4], [0, 0, 0, 1], [0], [4, 0, 1, 4, 0], [0, 0], [], [], [0, 0, 3, 2], [3, 13], [], [5], [1]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 1, 22, 7, 5, 5, 3, 3, 4, 1, 5, 2, 0, 0, 4, 2, 0, 1, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in getCharFromString(in1, ( int(29.0) - int(8.0) )):{:\\ni0 *= divInt(len(\"\"DN\\\\\\n5\"\"),mod(int(4.0),max(abs(( ( ( min(int(9.0), i0) + i1 ) * len(getCharFromString(in1, i2)) ) * int(2.0) )), divInt(i1,i1))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [2, 3, 3, 2], [], [], [], [], [], [], [], [], [1], [3], [0], [0], [1], [], [], [2], [], [3], [0, 1], [], [1], [], [], [], [2, 3], [], [4], [4], [17]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 0, 0, 1, 1], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(3.0)\\nin0 = \"\"4.\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [7, 5], [1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0], [0], [0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 0, 3, 0, 2, 0, 0, 0, 3, 0], [0, 1, 0], [4, 0, 4], [1, 1, 1], [0], [3, 5, 1, 0, 1], [1, 0, 0, 0, 0, 1], [0], [2, 4, 3, 0, 3, 3, 2, 3, 3, 0, 4, 4, 4, 4, 4, 3, 4, 2, 4, 4, 4, 4, 2, 4, 2, 3, 2, 0, 1, 0, 1], [1, 2, 3, 3, 1, 1, 1, 0, 0, 2, 0, 1], [0, 5], [0, 0, 2, 2, 1, 1], [3, 1, 3, 1, 1, 2], [], [4, 12, 9], [4], [31, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 18, 1, 25, 3, 3, 2, 1, 5, 6, 1, 31, 12, 2, 6, 6, 0, 3, 1, 2], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in saveChr(i1)[i0:i0]:{:\\ni1 = ( saveOrd((in2 + ((((s1 + saveChr(i0).strip(saveChr(i1)).lstrip().capitalize()) + (saveChr(i1) + getCharFromString(getCharFromString(getCharFromString(saveChr(i1)[i0:], divInt(i0,i0)).capitalize(), i0), int(7.0))[int(5.0):]))[i1:min(i0, ( i1 - i1 ))] + (s0[:i0] + \"\"`\"\")[:saveOrd(s1)]) + \"\"e#mj4\"\"))) - i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [4, 1, 3, 9, 1, 4, 4, 5, 7, 6, 9], [0, 2, 2, 1, 1, 2, 0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 0, 3, 0, 0, 3, 1, 3, 1, 1, 2, 1, 3, 3, 0, 2, 1, 2, 0, 1, 0, 0, 3, 3, 2, 1, 2, 0, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0], [0, 0, 3, 2, 0, 0, 2, 3, 0, 4], [2, 0, 2], [0, 0, 1, 0], [1, 2, 3, 1], [1], [], [2, 3, 0, 4, 2, 0, 4, 3, 2, 3, 4, 2, 1, 4, 4, 0, 4, 4, 4, 0], [2, 2, 0, 0, 3, 0, 1, 1], [5], [1, 1, 1, 0], [2], [], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 12, 1, 35, 6, 10, 3, 4, 4, 1, 0, 20, 8, 1, 4, 1, 0, 0, 1, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= min(min(( len((s1 + s2[:i2].capitalize())[:abs(i2)]) + i1 ), min(int(4.0), min(int(13.0), int(914.0)))), divInt(int(4.0),abs(len(((getCharFromString(\"\"1\"\"[i1:divInt(int(5.0),mod(i2,int(7.0)))], i0) + getCharFromString(in0.strip(getCharFromString(saveChr(i1), min(saveOrd(saveChr(divInt(int(6.0),( i1 * i2 )))), int(9.0)))), i1))[:i1] + s1).capitalize()))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 1], [0, 2, 2, 1, 2, 2, 0, 1, 1], [2, 1, 0, 0], [1, 0, 0, 1, 2], [0, 0], [0, 0], [], [], [2, 0], [2, 5], [1, 1, 2, 2], [0, 0], [4, 2], [], [], [], [0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [5, 6, 0, 1, 4, 3, 6, 1, 2, 7, 1, 2, 7, 5, 8, 2], [0, 2, 1, 0, 0, 2, 2, 2], [0, 1], [0, 0, 1, 2, 2, 3, 1, 1, 0, 0, 3, 1, 2, 1, 1, 0, 0, 2, 1, 1], [1, 0, 1, 0], [2, 2], [2, 1, 2], [0, 0], [2, 2, 2, 2, 1, 4], [1, 1, 1], [0, 0], [2, 0, 1, 0, 4, 0, 1, 4, 1], [1, 0], [], [0], [0, 3, 3], [13], [], [], [19, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 4, 5, 2, 2, 0, 0, 2, 2, 4, 2, 2, 0, 0, 0, 1, 16, 16, 8, 2, 20, 4, 2, 3, 2, 6, 3, 2, 9, 2, 0, 1, 3, 1, 0, 0, 2], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\nloopBreak% = 0\\nwhile i1 == int(56.0):{:\\nif divInt(( abs(int(01.0)) * int(4.0) ),i0) != i0:{:\\nb2 = s2[abs(int(36.0)):divInt(int(1.0),int(27.0))].startswith(\"\"N\"\")\\nloopBreak% = 0\\nfor s2 in s2:{:\\nloopBreak% = 0\\nfor s2 in saveChr(i2):{:\\nb0 = s1 == \"\":\"\"\\ni2 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin1 = getCharFromString(\"\"-\"\", ( int(1275.0) * int(82.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 1], [0, 2, 1, 2, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [0], [1], [1, 2, 2], [0], [4, 5], [], [], [], [0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [4, 8, 3, 9, 1, 5, 5, 8, 9, 5, 6, 3, 1, 3, 1], [1], [], [2, 2, 1, 1, 0, 3, 1, 1, 3, 1, 3, 3, 3, 1, 1], [0, 0], [2, 0, 1, 3, 3], [1, 0], [], [1, 5, 4, 2, 0, 0, 1, 0, 2, 2], [1, 0, 1], [], [0, 0, 3, 2, 3, 1, 4, 0, 2, 4, 4, 0, 0, 0, 1, 0, 0], [0, 2, 3], [1], [1, 0], [2, 3, 1], [], [5], [3], [17]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 2, 0, 0, 1, 1, 3, 1, 2, 0, 0, 0, 1, 15, 15, 1, 0, 15, 2, 5, 2, 0, 10, 3, 0, 17, 3, 1, 2, 3, 0, 1, 1, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( ( int(4.0) - int(8.0) ) + i1 ) \\g abs(int(3.0))\\nif s1.startswith(in2):{:\\nin1 = ((\"\"3\"\" + getCharFromString(s2, int(915589.0)))[:min(int(5631.0), max(len(s0.rstrip().capitalize()[len(s0):int(3.0)]), int(1.0)))] + s1)\\nloopBreak% = 0\\nwhile \"\".f\"\".endswith(s0):{:\\ns2 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [1], [2], [0], [0], [], [], [], [], [1, 1, 1, 1, 1, 1], [0, 8, 2, 1, 6, 9], [0, 2, 0], [0], [1, 2, 3, 1, 0, 0, 3, 2, 3, 2, 1, 3, 1, 0, 1, 3, 1], [0, 1, 1], [3, 1, 4, 4, 3], [1], [0, 1], [1, 4, 0, 2, 3, 4], [1, 1, 1, 0, 0, 1], [], [0, 2, 1, 3, 4, 2, 3, 1, 4, 4, 2, 0, 2, 0, 0, 1, 0, 2, 0, 1], [2, 3, 3], [4, 5], [0, 1, 0, 0, 0], [2, 3, 1, 1, 2, 0], [21], [23, 6], [4, 4], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 3, 0, 17, 3, 5, 1, 2, 6, 6, 0, 20, 3, 2, 5, 6, 1, 2, 2, 1], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s1 in \"\"4\"\"[int(0.0):( len(((\"\"\"\" + in1[int(8.0):i0].strip(s0[i2:max(divInt(saveOrd(s2),mod(int(2.0),saveOrd(\"\"x\"\"))), int(1.0))]).rstrip(in0))[:i0].capitalize() + in1[int(6.0):len(\"\"g4V\"\")])) - int(9.0) )]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [2], [], [], [2, 5], [1], [], [1], [], [], [], [2], [], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"1\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 2, 0, 1, 2, 2, 1, 0], [1, 2, 2, 2], [1, 2, 1, 0, 1], [], [0, 0, 0], [], [], [3], [5, 3, 0], [2, 1, 0, 2, 1, 0, 1, 2], [0, 0, 0], [4, 3, 3], [2, 3], [1], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 1, 4, 2, 0, 0, 1, 1, 4], [1, 1, 2, 0, 2, 2, 1, 2, 1, 1, 2, 2, 0, 2, 1, 1], [1, 1, 0], [1, 1, 2, 2, 0, 2, 0, 3, 2, 2, 1, 3, 3, 1, 0, 0, 0, 3, 0, 0, 2, 3, 3, 0, 2, 2, 0, 3, 2, 1, 3, 2, 0, 3, 1, 1, 2, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [4, 3, 0, 4, 1, 4, 2, 4, 4], [0, 0, 1, 2, 1, 2], [1, 1, 1, 1, 0, 0, 1], [0, 2, 2, 0, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [], [0, 2, 0, 0, 1, 4, 1, 1, 1, 1, 1, 2, 0, 1, 1, 2, 2, 0], [3], [0], [2, 0, 0, 2], [3, 1, 0, 0, 2, 3, 3, 0, 0, 3], [7, 2, 8, 21], [0], [4], [25, 14, 27, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 4, 5, 0, 3, 0, 0, 1, 3, 8, 3, 3, 2, 1, 0, 1, 9, 9, 16, 3, 42, 11, 9, 6, 7, 6, 10, 0, 18, 1, 1, 4, 10, 4, 1, 1, 4], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(9.0)\\nif s0.startswith(s2[int(1.0):]):{:\\nloopBreak% = 0\\nwhile ( mod(i1,mod(i2,saveOrd(s2))) + ( mod(int(4.0),len(\"\"@\"\")) - min(int(2.0), i0) ) ) != i2:{:\\ns0 = \"\"aH\"\".lstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= i1\\n:}else:{:\\nloopBreak% = 0\\nwhile not \"\"C\"\" != \"\"4\"\":{:\\nloopBreak% = 0\\nwhile saveOrd(\"\"+\"\") \\ge i2:{:\\nres0 = ( i1 \\l mod(max(saveOrd(\"\"\\\\\\\\\"\"), i1),( divInt(i2,abs(divInt(int(0.0),saveOrd(s1[( i2 - saveOrd(\"\"I\"\") ):int(0.0)])))) * int(1.0) )) or \"\"V>\"\" != s1[mod(i0,int(1.0)):][int(4.0):i2] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 = i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 1, 0, 2, 0], [0, 0], [2, 0, 2], [0, 0], [0, 0], [], [], [1], [2], [1], [0], [], [], [], [], [0], [1, 1], [4, 6], [1, 1, 0, 2], [], [0, 0, 0, 3, 1, 1, 0, 0], [1], [2, 0], [], [1], [2, 0, 4, 5], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0], [1, 2, 4, 1, 3, 3, 2, 1, 1, 1], [1], [], [2, 1], [2, 0, 0, 2, 2, 1, 3, 3, 2, 2], [1, 18], [6], [1, 9, 4, 3, 9], [19, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 2, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 6, 0, 1, 0, 0, 4, 10, 2, 10, 1, 0, 2, 10, 2, 1, 5, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in \"\"1BS9\"\":{:\\ns0 = saveChr(i1)[i1:]\\nb1 = i0 == abs(int(4.0))\\nloopBreak% = 0\\nfor in1 in \"\"4\"\":{:\\nin2 = ((\"\"g:\"\"[:int(6.0)] + \"\",\"\") + \"\"39\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 1], [1, 0, 2, 1, 1, 0], [0], [2, 2, 2, 2, 0], [0], [0, 0], [], [], [3], [], [2], [], [2], [], [0], [], [], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 4, 9, 3, 7, 4, 0, 7, 9, 8, 9, 5, 9, 1, 9, 8, 0], [2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 0, 2, 2, 2, 2, 1, 0, 2, 1, 2, 0, 1, 1, 1, 0, 1], [], [1, 0, 3, 2, 2, 0, 2, 0, 0, 3, 1, 2, 0, 0, 1, 2, 3, 0, 3, 3, 1, 2, 1, 2, 3, 3, 3, 2, 2, 0, 3, 2, 2, 2, 0, 2, 2, 1, 0, 3, 0, 2, 2, 3, 3, 0, 3, 2, 3, 0, 1, 3, 0, 3, 3, 3, 0, 1, 3, 1, 3, 3, 2, 0, 1, 3, 0, 3, 0, 2, 1, 2, 0, 2, 0, 3, 3, 1, 0, 2, 0, 1, 3, 1, 0, 1, 3, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0], [0, 2, 0, 3, 2, 2, 1, 1, 3, 2, 4, 1, 3, 3, 1, 2, 0, 2, 1, 2, 0, 2, 1, 3, 1, 2, 2], [1, 0, 2, 0, 0, 2, 0, 1, 2, 2, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0], [3, 4, 1, 1, 1, 5, 5, 1, 3, 1, 2, 3, 2, 5, 4, 1, 5, 1], [0, 0, 1, 1, 0, 0, 1, 1], [0], [4, 4, 3, 2, 4, 0, 0, 0, 2, 3, 4, 1, 1, 3, 4, 3, 4, 0, 0, 2, 3, 1, 4, 4, 0, 0, 3, 1, 0, 2, 0, 2, 2, 2, 4, 0, 4, 2, 0, 2, 4, 4, 4, 4, 0, 0], [0, 1, 2, 3, 2, 3, 2, 2, 1, 1, 2, 2, 2, 2], [1, 5], [1, 1, 1, 1, 2, 0, 2, 2, 0], [3, 3, 3, 3, 0, 1, 1, 1], [2], [6, 13, 9], [], [6, 5, 3, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 1, 5, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 26, 0, 91, 22, 27, 12, 10, 18, 8, 1, 46, 14, 2, 9, 8, 1, 3, 0, 4], "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = getCharFromString(saveChr(int(0.0)), i2)\\nin1 = (s1.capitalize()[:min(mod(( i1 - ( i1 + i1 ) ),abs(int(4.0))), divInt(i2,i2))] + s1)\\nloopBreak% = 0\\nfor s1 in in2:{:\\nin2 = (\"\"#\"\"\".rstrip() + \"\"\"\")[:int(93.0)]\\ns1 = ((in0.strip(s1) + (\"\"Cgn\"\" + s2.capitalize().capitalize())[:divInt(min(i1, len(in0)),abs(int(7.0)))]).capitalize() + (\"\"j\"\" + s2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = in2[:( int(4.0) * mod(abs(max(max(divInt(mod(i1,len(saveChr(divInt(( ( i2 + ( ( int(0.0) + i2 ) * abs(i0) ) ) + divInt(( saveOrd(in1) - max(i2, len(saveChr(( len(s1[i2:]) * int(7.0) )))) ),max(i2, abs(min(abs(i2), int(9.0))))) ),max(int(8.0), abs(min(( i1 * int(9.0) ), abs(i0))))))[max(i2, mod(int(5.0),divInt(i1,( i2 - len(in2.capitalize().capitalize().capitalize().capitalize()[max(int(9.0), i0):( i1 - int(1.0) )]) )))):][abs(int(9.0)):i1][int(8.0):])),abs(i1)), int(0.0)), i0)),i1) )] == s1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [1], [2, 2], [], [], [], [], [], [5], [1], [0], [], [], [], [], [0], [1, 1, 1], [5, 8, 5], [0], [], [0, 1, 1, 0], [1], [], [], [1], [2, 0, 0, 1], [0, 0, 1], [], [0, 3, 0, 1], [], [], [], [3, 2, 2], [], [], [0, 6], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0, 4, 0, 0, 0, 3, 0, 0, 2, 1], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0\\ns0 = (s1 + \"\">06\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1], [5, 3, 2, 3, 0, 8, 9, 9, 2], [2, 2, 1, 2, 2, 2, 1], [0], [2, 0, 2, 3, 3, 3, 3, 1, 3, 3, 2, 3, 0, 2, 1, 3, 3, 3, 0, 0, 3, 1, 3, 1, 3, 1, 2, 3, 1, 1, 2, 3, 3, 0, 0, 1, 3, 3], [0, 1, 0, 0, 0, 0], [0, 0, 1, 3, 3, 1, 3, 1, 3, 1, 0, 1, 2, 3, 3, 2, 4, 4], [1, 0, 1, 0, 0], [0], [3, 5, 5, 5], [1, 0, 0, 1], [], [2, 2, 2, 0, 4, 4, 0, 1, 0, 0, 1], [1, 1], [], [2, 0, 0], [3, 0, 1, 0], [24, 3], [7], [], [18]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 7, 1, 38, 6, 18, 5, 1, 4, 4, 0, 11, 2, 0, 3, 4, 2, 1, 0, 1], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = ( i2 - divInt(min(min(max(len(in0[int(5.0):len(saveChr(max(( len(saveChr(i1)) + ( int(3.0) - max(len(in2), max(i2, i2)) ) ), min(int(2.0), max(int(3.0), abs(int(0.0)))))))][( len(\"\"/\"\") + int(8.0) ):int(9.0)][( len(in2) + abs(i2) ):]), i1), int(92.0)), saveOrd(in2)),saveOrd(\"\"YhD\"\")) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 2, 2, 1, 0, 1, 0, 0, 2, 0, 1], [2, 1, 1, 1], [2, 0, 1, 0, 0, 0, 2], [], [0, 0, 0], [], [], [1, 2, 2, 1], [3, 1, 1], [1, 2, 1, 1, 0, 0, 2], [0, 0, 0], [2, 4], [2, 0], [], [], [1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [0, 4, 4, 5, 5, 6, 4, 0, 2, 7, 5, 2], [1, 0, 1, 2, 1, 1, 0, 2, 0, 1, 0, 1, 1], [0, 0], [0, 0, 1, 2, 1, 2, 0, 1, 0, 3, 3, 2, 0, 2, 2, 0, 1, 0, 3, 0, 2, 3, 3, 1, 0, 1, 1], [1, 0, 0, 0, 1, 0], [0, 2, 4, 0, 4], [1, 1, 1, 1], [1, 1], [1, 0, 3, 0, 2, 0, 5], [1, 1], [], [0, 0, 1, 2, 0, 4, 0, 1, 2, 4, 1], [1, 3, 2], [0], [0, 1], [3, 0], [15], [], [], [18]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 2, 5, 0, 2, 0, 0, 4, 3, 6, 3, 1, 2, 0, 0, 1, 12, 12, 10, 1, 27, 6, 5, 4, 2, 4, 1, 0, 6, 1, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s0\\nloopBreak% = 0\\nwhile i1 \\ge i0:{:\\nif in0 == \"\"/\"\":{:\\nb1 = int(0.0) \\g mod(int(4.0),( i1 - int(4.0) ))\\n:}else:{:\\ni2 = i1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = min(abs(( i1 - ( mod(i0,int(5.0)) - i2 ) )), saveOrd(s0[i0:( min(saveOrd(saveChr(int(56.0))), i1) - int(40275.0) )])) \\g int(2.0)\\nb2 = not b1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 0], [], [0], [], [], [3], [], [2], [], [5], [], [], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [1, 5, 2, 5], [0, 0, 1, 0, 1], [], [3, 4, 3, 0, 0, 0, 4, 3, 1, 1], [0, 1], [], [], [1, 3, 0, 2, 3], [3], [3], [4], [4, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 4, 5, 0, 10, 2, 0, 0, 5, 1, 1, 1, 2], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = (getCharFromString((in2 + s2), int(0.0)) + in2)\\nres0 = saveChr(i2).endswith((\"\"d!D\"\" + \"\"4`\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0, 0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1], [0, 4, 1, 1], [2, 0], [1], [3, 0, 1], [], [3], [0], [], [2, 5], [0, 1], [], [3, 0, 2, 3, 4, 4, 0, 1], [0, 2], [], [2], [1, 2], [], [20], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 1, 3, 0, 1, 1, 0, 2, 2, 0, 8, 2, 0, 1, 2, 0, 1, 1, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += len((s2 + (getCharFromString(in2.capitalize(), i0) + \"\"u5\"\")[int(0411.0):]))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [0], [0], [], [], [], [3], [1], [0], [], [], [], [], [0], [0, 1, 0, 1], [4, 8, 4, 4], [0, 2, 1, 0, 0, 2], [1], [2, 3, 0, 0, 0, 1, 0, 0, 0], [1], [1, 0], [1], [1], [2], [0, 1], [0], [1], [], [], [], [0, 1], [12], [19], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 1, 1, 1, 1, 1, 2, 1, 1, 0, 0, 0, 2, 1, 1, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in \"\"Mt\"\":{:\\ni0 -= mod(max(i2, i1),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 1, 1, 0, 2, 2, 0, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 3, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 0, 2, 1, 2, 0, 0, 1], [1, 1, 1, 1, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 4, 2, 0, 2, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1, 0], [0, 1], [17], [25], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 13, 0, 50, 15, 8, 7, 8, 5, 2, 1, 16, 3, 1, 6, 2, 1, 1, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString(in1[:len(saveChr(i0)[int(0.0):max(mod(i2,int(7.0)), mod(int(5.0),min(i2, ( mod(( int(7.0) + i0 ),mod(len(in1[:( i0 + ( i1 * int(2.0) ) )]),int(1.0))) - i1 ))))][mod(( i2 + i0 ),divInt(int(7.0),i0)):i2])], mod(int(7.0),min(int(9.0), max(i2, divInt(abs(( int(8.0) + int(5.0) )),( int(0.0) * i1 ))))))):]:{:\\nres0 = (\"\"R\"\" + in0.rstrip())[int(4.0):int(8.0)] not in \"\"z\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 2], [], [0], [], [], [3], [], [2], [], [0], [], [], [], [], [0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 1, 2, 7, 6, 5, 7], [2, 0, 2, 2], [1, 1], [3, 1, 2, 1, 1, 3, 2, 1, 0, 0], [0, 0, 1], [1, 3], [0, 0, 1, 2], [0], [3, 2, 5, 3, 0], [0, 1, 1, 1, 1], [], [1, 3, 1, 2, 0, 3, 0, 3, 4, 0, 2, 2, 1, 1, 0], [0], [], [1, 2, 2], [3, 3, 0, 2, 1], [0], [14], [2], [4, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 2, 0, 10, 2, 2, 2, 0, 4, 5, 0, 14, 1, 0, 3, 5, 1, 1, 1, 2], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"!/\"\" in (\"\"A\"\" + in0[:max(int(03.0), ( int(127.0) + int(6.0) ))])\\ns2 = (in2 + (getCharFromString(in0, len(\"\"2\"\"[( int(57.0) + i2 ):][i0:])) + \"\"o\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [], [0, 0], [], [], [3], [], [0, 0, 2], [], [5], [3, 1], [1], [1], [], [0, 1, 1, 0, 1], [9, 1, 7, 8, 9], [1, 1, 2, 0, 1, 0], [0], [0, 3, 0, 1, 1, 3, 2, 0, 1, 0, 0], [1], [1, 0], [], [0], [2, 4], [1, 1], [], [2, 0, 3, 3, 2, 1, 0, 2, 1], [], [], [2, 0, 2], [0, 2], [18], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 3, 0, 1, 2, 1, 1, 0, 5, 5, 6, 1, 11, 1, 2, 0, 1, 2, 2, 0, 9, 0, 0, 3, 2, 1, 0, 1, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\nres0 = ( False or s2[max(i2, int(91.0)):].endswith(((\"\"S\"\"[int(7.0):min(divInt(i0,int(89.0)), i1)] + in1) + \"\"1\"\"[i0:])) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [2], [2], [0], [1], [3, 3, 2, 1, 1], [0, 1], [1, 1], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [2, 2, 6, 4, 6, 0, 8, 0, 5, 4, 1, 1, 5, 9, 6, 1, 8], [0, 0, 2, 1, 2, 2, 2, 0, 0, 2, 0, 1, 1, 2], [], [2, 3, 2, 0, 1, 0, 3, 2, 0, 1, 2, 2, 2, 2, 1, 1, 2, 1, 3, 2, 3, 2, 0, 0, 0, 1, 2, 1, 1, 0, 0, 0, 3, 2, 1, 2, 1, 2, 0, 3, 1, 2, 0, 3, 0, 2, 3, 1, 2, 0, 2, 1, 2, 3, 0, 2, 1, 3], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [3, 2, 2, 0, 2, 1, 2, 2, 3, 4], [0, 0, 1, 1, 2, 1, 2, 2, 2, 0, 2, 0, 0, 2, 0, 2], [1, 1, 0, 0], [3, 3, 4, 3, 1, 0, 2], [0, 0, 0, 1, 1], [], [4, 1, 2, 4, 4, 0, 3, 3, 3, 0, 2, 0, 3, 0, 4, 3, 2, 2, 2, 0, 1, 4, 0, 0], [3, 0, 2, 1, 2], [1], [2, 1, 0, 0, 2], [3, 3, 1, 1, 3], [], [13, 11], [], [19, 1, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 14, 0, 58, 20, 10, 16, 4, 7, 5, 0, 24, 5, 1, 5, 5, 0, 2, 0, 3], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = \"\":\\\\\\nnl\"\".rstrip() not in getCharFromString(in0.capitalize(), ( len((((in0 + in1[:mod(i0,int(22.0))]) + (in0 + saveChr(i0))) + (s1[abs(( i2 + int(6.0) )):][( ( mod(( int(4.0) + int(6.0) ),divInt(int(0.0),abs(( min(( i1 - i2 ), i2) - int(8.0) )))) * ( int(0.0) - int(5.0) ) ) * i2 ):i0][i0:abs(( int(4.0) * ( int(1.0) * ( i2 + max(int(1.0), ( i0 * abs(i1) )) ) ) ))] + \"\"*\"\"))) + ( abs(int(5.0)) + ( i1 * divInt(int(96.0),( len(s0.capitalize()) + i2 )) ) ) ))[( int(18.0) * saveOrd(s2) ):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 0, 0], [], [0, 0, 1, 0], [], [0, 0], [], [], [2, 2, 0, 0], [], [2, 2, 0], [], [4, 0], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [6, 9, 6, 5, 0, 1, 0, 9, 8, 4, 5, 8, 3], [2, 1, 0, 0, 2, 1, 0, 1, 1, 2, 1, 2, 2, 2], [0], [3, 2, 0, 3, 2, 3, 2, 3, 2, 2, 1, 1, 3, 0, 2, 3, 0, 1, 3, 2, 1, 2, 0, 3, 1, 0, 2, 0, 2, 0, 1, 2, 1, 0, 3, 1, 0, 1, 0, 2, 0, 2, 0, 0, 3, 1, 1], [1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 4, 3, 0, 0, 0, 2, 3, 0], [1, 1, 0, 1, 2, 0], [1, 0, 1, 1, 1, 0, 1], [4, 0, 0, 2, 3], [1, 1, 1, 0, 0, 1], [], [0, 3, 4, 0, 3, 2, 2, 2, 2, 0, 4, 4, 1, 0, 1, 4, 1, 4, 1, 2, 0], [3, 2, 1, 3, 0], [4, 1], [1, 1, 1, 2, 0], [3, 1, 1, 0, 0, 1], [16, 16], [19, 22, 8], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 0, 4, 0, 2, 0, 0, 4, 0, 3, 0, 2, 1, 0, 0, 0, 13, 13, 14, 1, 47, 13, 10, 6, 7, 5, 6, 0, 21, 5, 2, 5, 6, 2, 3, 0, 1], "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = in1.startswith((s0.rstrip((s0[min(mod(i2,abs(( saveOrd(saveChr(divInt(len(\"\")\"\"),mod(mod(int(6.0),int(9.0)),min(i1, ( min(i0, int(6.0)) - min(( int(5.0) - ( i0 + abs(int(0.0)) ) ), i2) ))))).capitalize()) - mod(i1,( i0 * int(1.0) )) ))), divInt(int(0.0),i1)):][:len(s2)][:int(98.0)][:i1] + \"\"t\"\")) + \"\"w\"\".rstrip()))\\nb2 = getCharFromString(\"\"QQi\"\", int(45.0)) in in0[i2:( i1 + mod(i2,i2) )]\\ni2 = min(int(8.0), int(3.0))\\nb0 = b0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 2, 2, 1, 2, 2, 1, 2, 0, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 0, 2, 0, 0, 1], [2, 1, 1, 1, 0, 1, 0, 0, 0, 0], [1, 2, 2, 2, 2, 2, 1, 1, 2, 0, 2, 2, 1, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0], [], [], [1, 0, 2], [5, 0, 0, 3, 0], [0, 1, 2, 0, 1, 2, 1, 1, 1], [0, 0, 0, 0, 0], [2, 3], [3, 0], [1], [], [0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1], [2, 0, 9, 6, 4, 2, 8, 5, 5, 4, 8, 3, 9, 6, 5, 3, 2, 8, 0, 9, 7, 5, 0, 8, 8, 1, 1, 5, 0, 4, 7, 5, 3, 6, 2, 3, 2, 4, 3, 4, 2, 6, 1, 4, 3, 2, 6, 9, 7, 8, 7, 7, 3, 6, 4, 5, 3, 2, 4, 6, 7, 9], [1, 2, 2, 1, 2, 2, 1, 1, 0, 2, 2, 2, 0, 2, 1, 1, 0, 2, 2, 0, 1, 1, 1, 0, 1, 2, 2, 0, 2, 2, 0, 2, 2, 2, 0, 1, 2, 2, 1, 0, 1, 1, 0, 1, 0, 1, 2, 2, 1, 1, 2, 2, 2, 2, 0, 1, 1], [1, 1, 0, 0, 0], [1, 0, 1, 1, 3, 0, 3, 0, 3, 1, 0, 1, 3, 2, 3, 2, 0, 3, 1, 2, 2, 1, 2, 0, 1, 3, 3, 0, 1, 0, 1, 1, 1, 0, 3, 2, 1, 3, 3, 1, 3, 0, 1, 2, 3, 1, 1, 1, 0, 1, 0, 1, 2, 0, 2, 1, 2, 1, 2, 0, 0, 2, 3, 1, 3, 0, 0, 0, 3, 2, 0, 1, 1, 2, 1, 2, 0, 2, 2, 3, 1, 3, 3, 3, 0, 0, 1, 3, 2, 3, 1, 3, 3, 0, 3, 3, 2, 1, 2, 2, 1, 0, 0, 2, 1, 2, 3, 2, 2, 2, 1, 3, 3, 3, 3, 1, 0, 3, 2, 3, 0, 0, 0, 0, 2, 2, 3, 1, 1, 3, 3, 0, 1, 3, 1, 0, 0, 1, 3, 0, 3, 1, 2, 0, 3, 2, 3, 0, 2, 0, 3, 1, 1, 2, 2, 1, 1, 3, 1, 0, 0, 0, 1, 2, 0, 1, 3, 0, 3, 1, 2, 2, 3, 1, 0, 0, 3, 3, 3, 3, 1, 2, 2, 2, 0, 2, 0, 0, 3, 0, 1, 3, 1, 1, 2, 0, 2, 2, 1, 2, 0, 0, 3, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0], [1, 3, 2, 0, 4, 3, 4, 0, 4, 1, 3, 2, 2, 3, 0, 4, 3, 0, 0, 3, 2, 1, 1, 4, 2, 3, 2, 3, 1, 1, 1, 1, 4, 1, 4, 1, 4, 0, 1, 0, 3, 0, 0, 0, 2, 1, 0, 0, 3, 1, 2, 0, 0], [2, 1, 0, 0, 0, 0, 1, 2, 0, 1, 2, 1, 0, 1, 2, 1, 1, 0, 1, 2, 0], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 2, 2, 4, 2, 0, 2, 0, 5, 4, 3, 4, 4, 4, 1, 4, 1, 2, 2, 1, 3, 5, 4, 5, 3, 1, 4, 5, 2, 4, 0, 4, 2, 3, 3, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0], [1, 2, 1, 3, 0, 3, 4, 0, 3, 3, 3, 0, 0, 3, 3, 1, 4, 2, 2, 4, 1, 4, 1, 1, 4, 2, 0, 2, 1, 4, 4, 4, 4, 0, 4, 2, 0, 3, 4, 4, 3, 0, 0, 2, 0, 3, 2, 0, 4, 1, 3, 2, 4, 1, 3, 1, 4, 2, 4, 1, 4, 2, 1, 0, 2, 1, 1, 1, 2, 0, 0, 1, 0, 2, 1, 4, 2, 0, 1, 0, 2, 2, 0, 4, 2, 4, 0, 2, 4, 1, 2, 0, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 2, 0, 2, 0, 0], [0, 2, 0, 3, 3, 0, 3, 3, 1, 2, 0, 0, 3, 1, 3, 2, 3, 3, 3, 0, 3], [5, 1, 0, 3, 0, 3, 3, 4, 4, 2], [0, 1, 1, 2, 2, 0, 2, 1, 0, 0, 1, 1, 2, 1, 1, 1, 0, 2, 2, 0, 2, 0, 1], [1, 2, 1, 2, 0, 0, 1, 0, 0, 0, 1, 2, 3, 2, 1, 3, 2, 0, 1, 1, 2, 3, 1, 2, 0, 2, 2, 3, 1, 3], [13, 15, 14, 15, 6, 10, 23], [22, 13, 6, 16, 7, 1, 6, 8, 17], [3, 7, 0, 2, 4, 2, 5, 0, 8], [5, 13, 4, 25, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 25, 25, 10, 15, 5, 4, 0, 0, 3, 5, 9, 5, 2, 2, 1, 0, 4, 62, 62, 57, 5, 205, 45, 53, 21, 26, 39, 30, 5, 107, 21, 10, 23, 30, 7, 9, 9, 5], "tree_depth": 76, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(2.0)\\ns0 = \"\"w\"\"\\nloopBreak% = 0\\nwhile ( i2 != int(0.0) or \"\"3n\"\"[int(9.0):max(i2, len((in2 + (getCharFromString(s2, i1) + (((in1 + s2) + ((\"\"7\"\" + getCharFromString(\"\"N\"\", abs(int(6.0)))[:i2][:int(4.0)].capitalize()) + \"\"P\"\".strip(\"\"g\"\"))) + s2[min(( saveOrd(\"\"O\"\"[( i2 - len(getCharFromString(saveChr(int(2.0)).lstrip(in1).lstrip(), ( mod(int(8.0),mod(i1,int(5.0))) + saveOrd(s2[min(i1, int(5.0)):i0].capitalize()) ))) ):]) + int(4.0) ), int(8.0)):].rstrip())))))] == (getCharFromString(getCharFromString((s0 + s2), int(3.0)), i2) + s0[saveOrd((in2[:divInt(int(96.0),max(len(\"\"P\"\".lstrip()), int(5.0)))] + (saveChr(abs(i2))[int(3.0):mod(abs(int(2.0)),int(8.0))] + \"\"G\"\"))):]) ):{:\\nif b1:{:\\nin1 = (\"\"q\"\" + \"\"0\"\".capitalize()[int(0.0):i2].lstrip(\"\"\"\"\"[:int(9.0)].lstrip(in0)))\\n:}\\nif i0 \\l int(7.0):{:\\nif \"\"2h\"\"[:divInt(i2,( int(5.0) + mod(int(0.0),mod(i1,i1)) ))] != \"\"*4\"\":{:\\nin1 = \"\"K\"\"\\n:}else:{:\\nloopBreak% = 0\\nfor in1 in in1[( len(s1) + int(8.0) ):]:{:\\nin1 = \"\"b\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nif min(i0, i2) \\l i2:{:\\ns1 = s2\\n:}else:{:\\nloopBreak% = 0\\nfor s2 in \"\"g\"\"[:saveOrd(s1[:mod(i0,int(8.0))].rstrip(\"\"2\"\"))]:{:\\ni1 -= int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in0 in in2:{:\\ni1 = ( int(1.0) * divInt(i1,divInt(mod(len(in1[int(5.0):min(min(len(getCharFromString(in2, i0)[i1:].rstrip(\"\"!\"\".strip()[int(0.0):])), abs(divInt(max(int(4.0), max(saveOrd(in0[i2:abs(len(\"\"i\"\"[divInt(int(7.0),mod(mod(int(5.0),i2),i0)):]))]), mod(int(3.0),mod(abs(mod(( ( int(6.0) + len(\"\"5\"\") ) - max(max(max(int(2.0), i2), max(mod(saveOrd(s1),i2), i0)), i2) ),i2)),( divInt(max(int(3.0), int(2.0)),saveOrd(in1)) * max(i2, int(4.0)) ))))),saveOrd(\"\"X\"\")))), int(3.0))][:i0]),i1),int(4.0))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = \"\"0\"\"\\nb0 = min(i2, max(int(2.0), ( i2 - min(( len(\"\"8\"\") + i1 ), ( i0 - min(int(6.0), int(1.0)) )) ))) \\ge divInt(divInt(int(4.0),int(3.0)),min(int(2.0), i1))\\n:}\\nloopBreak% = 0\\nfor s2 in \"\"@r]\"\":{:\\nin1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = s2[i1:i0]\\nloopBreak% = 0\\nfor in0 in in0[:int(697.0)]:{:\\ni1 = ( i0 * int(8.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = min(i1, abs(int(7.0))) \\l divInt(( max(int(7.0), i2) - i2 ),min(min(len(s0), max(int(3.0), ( divInt(( i1 - ( i1 + i2 ) ),abs(i2)) - int(6.0) ))), min(int(453.0), int(2.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = mod(i2,divInt(( int(4.0) * ( i0 + i1 ) ),min(i1, int(679.0))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 2, 2, 0, 0, 1, 0, 2, 2, 1, 1, 2, 0, 0], [1, 2, 2, 2, 1], [1, 1, 2, 2, 1, 1, 0, 0, 2, 2], [], [0, 0, 0, 0, 0, 0, 0], [], [], [2, 2, 2], [4, 2], [0, 0, 2, 1, 2, 1, 2], [0, 0], [3, 4, 0], [0, 1], [], [0], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 7, 3, 6, 8, 6, 6, 6, 9, 2, 6, 2, 3, 8, 1, 3, 1, 0, 9, 1, 9, 2, 0, 6, 7, 8, 4, 7, 1, 8, 0, 9, 2, 2, 1, 4, 0, 8, 7, 7, 5, 6, 3, 7, 8, 9], [2, 1, 2, 2, 2, 1, 0, 2, 0, 2, 0, 2, 1, 1, 1, 1, 0, 2, 2, 0, 2, 0, 1, 1, 1, 1, 0, 1, 2, 1, 1, 0, 1, 1, 2, 1, 2, 2, 1], [1, 1, 0, 1], [0, 2, 2, 3, 1, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 0, 1, 2, 1, 1, 0, 2, 0, 2, 3, 3, 0, 0, 2, 3, 3, 1, 0, 0, 0, 3, 2, 0, 1, 1, 0, 0, 0, 1, 2, 3, 1, 1, 2, 0, 0, 2, 0, 1, 2, 2, 1, 0, 0, 0, 2, 2, 3, 2, 2, 3, 3, 2, 3, 3, 1, 0, 1, 3, 3, 3, 0, 1, 1, 3, 3, 1, 1, 1, 0, 2, 0, 1, 2, 3, 1, 2, 1, 3, 2, 0, 2, 3, 3, 2, 2, 0, 1, 3, 0, 2, 2, 1, 0, 0, 0, 1, 2, 1, 1, 0, 2, 3, 0, 1, 3, 1, 1, 2, 0, 2, 1, 2, 1, 3, 3, 3, 0, 3, 3, 2, 0, 1, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [4, 4, 0, 1, 4, 4, 4, 0, 0, 2, 2, 4, 1, 1, 1, 4, 1, 1, 3, 0, 0, 2, 2, 4, 3, 1, 4, 0, 1, 4, 0], [1, 0, 2, 0, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1, 2, 0, 2, 1], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [5, 0, 1, 4, 3, 0, 2, 5, 4, 1, 3, 3, 3, 4, 1, 5, 4], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0], [2, 4, 3, 4, 4, 0, 0, 4, 1, 1, 4, 2, 4, 4, 2, 2, 2, 4, 2, 1, 1, 2, 3, 0, 0, 4, 1, 4, 0, 4, 1, 1, 4, 4, 0, 4, 3, 4, 3, 0, 2, 4, 2, 1, 0, 0, 3, 4, 4, 3, 3, 3, 1, 0, 2, 1, 1, 3, 0, 1, 1, 0, 0], [0, 3, 3, 0, 1, 1, 2, 1, 3, 2, 1, 1, 0, 3, 1, 0, 1, 0], [4, 0, 1, 3], [1, 2, 1, 2, 2, 1, 1, 2, 2, 2], [1, 2, 2, 1, 2, 1, 1, 2, 0, 2, 0, 1, 3, 3, 1, 1, 3, 0, 1], [15, 22, 11], [21, 11, 19, 9, 19, 3, 18, 1], [2, 2, 7, 4, 8], [18, 10, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 15, 15, 5, 10, 0, 7, 0, 0, 3, 2, 7, 2, 3, 2, 0, 1, 2, 47, 47, 39, 4, 140, 38, 31, 20, 21, 17, 19, 0, 63, 18, 4, 10, 19, 3, 8, 5, 3], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\ni2 += ( ( saveOrd(getCharFromString((in2.lstrip().rstrip(s0) + getCharFromString(\"\"v\"\", int(1.0))), mod(( divInt(( divInt(divInt(int(4.0),saveOrd(\"\"2\"\")),int(7.0)) * min(int(3.0), i2) ),int(6.0)) + divInt(int(8.0),int(6.0)) ),i2))[:( i1 * divInt(max(saveOrd(saveChr(i0)), i2),( saveOrd(saveChr(saveOrd(saveChr(int(6.0))[i0:][i2:][:i0].capitalize()))[min(mod(i2,int(6.0)), int(9.0)):]) * i1 )) )]) + i1 ) + i1 )\\nif b2:{:\\nloopBreak% = 0\\nwhile True:{:\\ns1 = \"\"2l7t\"\"[:int(2.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = \"\"j\"\"\\ni1 = mod(min(int(62.0), int(3813.0)),divInt(i0,i2))\\ni2 -= mod(i0,int(1.0))\\n:}else:{:\\nloopBreak% = 0\\nwhile (in0 + s0)[:( ( int(09.0) - i2 ) - i0 )] != \"\"4P8\"\".rstrip():{:\\nloopBreak% = 0\\nwhile i1 \\le ( ( abs(divInt(( abs(saveOrd(s2.capitalize())) - mod(max(max(int(1.0), i1), int(9.0)),max(saveOrd(saveChr(max(i1, int(2.0)))), int(0.0))) ),max(len(\"\"W\"\"), int(6.0)))) - int(78.0) ) - int(471.0) ):{:\\nb2 = \"\"t/\"\".startswith(saveChr(i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = mod(i0,int(809.0)) == mod(min(int(22.0), ( int(1.0) * min(( i1 - ( abs(abs(mod(( i2 * int(4.0) ),saveOrd(getCharFromString(in2, i1))))) + ( mod(int(0.0),i1) * i0 ) ) ), i1) )),int(8.0))\\nif (saveChr(( int(7.0) - int(7.0) )) + (in1 + getCharFromString(\"\"\"\\\\\"\"\"[i1:], divInt(len(s1),i2))[int(5.0):])).lstrip(in0) in (saveChr(max(int(6.0), int(3.0))) + getCharFromString((((\"\"d\"\" + in0) + \"\"s\"\"[divInt(i1,mod(int(7.0),mod(int(8.0),saveOrd(\"\"*\"\")))):]) + (in0 + \"\"L\"\")), min(max(i2, saveOrd(\"\"b\"\")), min(mod(i2,int(9.0)), i1)))):{:\\nin1 = s1\\n:}else:{:\\nin2 = in1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1], [2, 2, 1, 2, 2, 1, 2, 1, 2, 0, 1, 2, 1, 0, 1], [1, 1, 1, 2, 1, 2, 1], [2, 1, 1, 0, 1, 2, 1, 0], [], [0, 0], [], [], [0, 2], [0, 5, 5], [1, 2, 0, 2, 0, 2, 1, 1, 2, 2], [0, 0, 0], [0, 5, 2, 3, 5], [2, 1], [], [0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 1, 5, 8, 2, 9, 7, 5, 5, 2, 5, 1, 3, 9, 0, 8, 9, 4, 7, 6, 2, 0, 5, 4, 1, 8], [1, 2, 2, 1, 0, 2, 0, 1, 2, 2, 1, 0, 1, 1, 2, 1, 0, 1, 0, 2, 1, 1, 0, 1, 2], [0, 1, 0, 0], [2, 0, 0, 0, 1, 0, 1, 2, 1, 0, 1, 3, 2, 1, 2, 2, 0, 2, 2, 3, 1, 0, 0, 0, 1, 3, 0, 3, 1, 2, 1, 3, 3, 2, 1, 2, 0, 1, 3, 0, 0, 2, 0, 1, 0, 2, 1, 0, 3, 2, 2, 0, 2, 1, 3, 1, 0, 3, 2, 3, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [4, 1, 3, 2, 0, 1, 0, 2, 0, 1, 4], [2, 1, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 4, 5, 3, 1, 4, 5, 5, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [], [4, 1, 1, 4, 2, 1, 2, 1, 1, 0, 3, 0, 0, 0, 1, 0, 3, 4, 0, 2, 1, 1, 0, 3, 1, 1, 2, 0], [2, 2, 3], [0], [0, 0, 0, 1], [3, 0, 1, 3, 3, 1, 3, 3, 3, 1, 0, 1, 1, 1, 3, 0, 3, 1, 1], [14, 23, 14], [4, 0, 8, 21, 25, 12, 2, 17], [], [11, 7, 14, 24, 28, 4, 23, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 15, 15, 7, 8, 0, 2, 0, 0, 2, 3, 10, 3, 5, 2, 0, 1, 5, 27, 27, 25, 4, 63, 16, 11, 8, 9, 10, 19, 0, 28, 3, 1, 4, 19, 3, 8, 0, 8], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif mod(i1,i2) \\l i2:{:\\nif \"\"(Oe$\"\".capitalize() in \"\"+a?\"\":{:\\ns0 = \"\"]!iX\"\"[int(881582.0):i1].capitalize()\\n:}\\nif not \"\"vz\"\"[int(9755251.0):( int(39.0) * i0 )].endswith(\"\"m\"\"):{:\\nloopBreak% = 0\\nwhile True:{:\\ni2 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif s1 == (in1 + in2):{:\\ni0 -= saveOrd(in0)\\nloopBreak% = 0\\nwhile divInt(int(8.0),mod(divInt(i1,divInt(( max(int(9.0), i2) - i2 ),i1)),int(4.0))) != len(\"\">\"\"):{:\\nb0 = i0 != abs(int(7.0))\\ni1 = ( int(6.0) - min(max(divInt(int(2.0),mod(i1,int(0.0))), min(i2, i1)), ( i0 + int(5.0) )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif s1 != (in1.lstrip() + \"\"O\"\"[i1:mod(int(4.0),i0)]):{:\\nin2 = \"\">\"\"\\ni2 = abs(( ( i1 + divInt(int(1.0),min(int(8.0), i1)) ) + max(( saveOrd(in2) + i0 ), i1) ))\\n:}\\n:}\\nb2 = (\"\"c\"\" + \"\"r\"\").endswith(s1[:i2])\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [1], [0, 0], [], [0], [], [], [2, 2], [2, 1], [1, 2, 2], [0, 0], [0, 1], [2], [], [], [1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [5, 8, 7, 3, 5, 1, 3, 7, 0, 0, 7, 4, 5, 5, 1, 4, 2, 5], [1, 2, 0, 1, 1, 2, 1, 1, 0, 0, 2, 1, 2, 1, 0, 1, 2], [], [2, 0, 3, 0, 1, 2, 1, 2, 1, 3, 3, 1, 0, 3, 2, 2, 3, 0, 3, 2, 0, 1, 0, 2, 3, 1, 0, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 3, 0, 0, 3, 3, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 2, 2, 2, 1, 1, 0, 0, 0, 2, 0], [0, 0, 2, 2, 2], [0, 1, 0, 0, 0], [1, 1, 5, 5, 3, 2], [1], [], [2, 2, 4, 0, 2, 0, 0, 4, 4, 4, 2, 4, 1], [3, 2, 0, 0, 0], [1], [1, 1, 2, 2], [3], [], [], [], [19]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 1, 3, 1, 2, 0, 0, 0, 1, 18, 18, 17, 0, 46, 10, 10, 5, 5, 3, 1, 0, 13, 5, 1, 4, 1, 0, 0, 0, 1], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( i1 + min(i2, int(5.0)) ) == divInt(int(87.0),( int(35.0) + max(min(int(1.0), i0), max(( ( abs(i1) * abs(mod(i1,int(3.0))) ) * i2 ), divInt(abs(int(7.0)),i1))) )):{:\\nb2 = s1.rstrip()[:i1][:i0] in s1[divInt(i0,int(0.0)):]\\n:}else:{:\\nb2 = in2 not in getCharFromString(getCharFromString(getCharFromString(\"\":\"\", i2)[divInt(i1,i2):], ( max(i1, i0) * max(min(int(074551.0), i1), int(425.0)) )), i2).capitalize()\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 6, 3, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0, 0, 0, 1, 2, 2, 0, 2, 2, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 3, 2, 2, 0, 2, 3, 3, 0, 3, 0, 3, 2, 0, 2, 1, 3, 0, 2, 2, 2, 2, 1, 0, 2, 0, 2, 1, 2, 0, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2, 0, 2, 4, 2, 0, 0, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 5, 4, 4, 2, 0, 4], [1, 1], [0], [2, 0, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1[len(in1):] not in getCharFromString(s2[i1:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(len(saveChr(divInt(divInt(( int(5.0) + i0 ),( min(( i1 * max(abs(( int(6.0) - i2 )), divInt(max(int(3.0), i1),int(1.0))) ), int(7.0)) + i2 )),i0))), ( i0 * abs(divInt(min(i1, divInt(( ( int(7.0) - int(9.0) ) - ( int(8.0) * i0 ) ),int(5.0))),i0)) )) ):abs(mod(divInt(i0,( saveOrd((\"\";\"\" + s0.rstrip())) + abs(i1) )),min(i2, min(divInt(i2,mod(int(0.0),abs(i0))), ( ( divInt(( int(4.0) + i2 ),divInt(i2,divInt(int(8.0),( i0 - i1 )))) + int(59.0) ) + i1 )))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 23, 0, 82, 27, 17, 14, 13, 6, 2, 1, 15, 3, 1, 4, 2, 1, 0, 0, 1]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 0, 6, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 3, 3], [1, 0], [2, 1, 0, 2, 1], [0, 0], [17, 2], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 11, 0, 45, 16, 6, 8, 8, 6, 2, 1, 16, 3, 2, 5, 2, 2, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:len(getCharFromString(in0[i0:].rstrip()[int(0.0):int(3.0)], divInt(int(5.0),int(7.0))))] not in (\"\"R\"\" + s0.lstrip())[:mod(int(0.0),( i2 + mod(( divInt(int(6.0),i2) + ( max(( i0 * divInt(i0,( int(7.0) - i1 )) ), divInt(min(i1, i2),mod(( i0 + i0 ),( int(4.0) * len(\"\"C\"\") )))) - int(9.0) ) ),min(i2, ( divInt(int(8.0),int(5.0)) - int(0.0) ))) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 1], [2, 1, 0, 2, 0], [2, 2], [1, 2, 0], [], [0, 0], [], [], [1], [1, 2], [0, 1, 1, 2], [0, 0], [3], [2], [1], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [4, 9, 8, 4, 9, 2, 1, 4, 8, 6, 6], [0, 0, 1, 0, 1, 0, 2], [0], [1, 2, 1, 2, 3, 1, 1, 3, 3, 2, 2, 2, 2, 1, 0, 0, 3, 0, 1, 1, 3, 0, 0, 3, 1], [0, 0, 1, 0, 0, 0, 1], [0, 1, 3, 1, 3, 2], [1, 2, 0, 2, 1], [1, 1, 0], [3, 1, 0, 4], [0, 0, 0, 0, 1, 1], [], [0, 0, 1, 2, 1, 0], [], [], [2], [3, 1, 2, 0, 0, 1], [8, 13], [21, 21], [0], [16]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 2, 0, 0, 1, 2, 4, 2, 1, 1, 0, 0, 0, 11, 11, 6, 1, 25, 6, 6, 5, 1, 4, 6, 0, 6, 0, 0, 1, 6, 2, 2, 1, 1], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not int(49.0) \\g ( int(8.0) - ( min(int(4.0), int(9.0)) * max(len(in0), mod(( ( ( int(2.0) + i0 ) * i0 ) - max(i1, int(1.0)) ),int(486.0))) ) ):{:\\ni0 = len(s1)\\ns0 = \"\"-v0IN\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i1 == i0:{:\\nb1 = \"\"v\"\"[abs(int(6.0)):] != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 3, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 6, 7, 4, 9, 1, 5, 9, 6], [0, 2, 2, 0, 1, 2, 1, 2, 2, 0, 2, 2, 1, 0, 1, 1, 1, 1, 2, 0], [0, 1, 1], [3, 3, 2, 0, 3, 0, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 3, 1, 3, 1, 2, 2, 3, 2, 2, 3, 1, 3, 1, 2, 3, 3, 1, 0, 0, 1, 1, 0, 3, 2, 2, 0, 3, 1, 2, 2, 1, 3, 0, 3, 2, 2, 3, 3, 2, 3, 1, 1, 2, 1, 3, 0, 1, 0, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 2, 0, 0, 0, 1, 2, 1, 0, 0, 1, 2, 0, 3, 0, 1, 1, 4, 0, 3, 1, 3, 0, 0, 3, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 2, 1, 2, 2, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4, 1], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 1], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 2], [17], [], [1, 5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 27, 27, 20, 0, 101, 28, 27, 19, 9, 8, 3, 1, 18, 3, 1, 4, 3, 1, 0, 2, 0], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[mod(i0,abs(i2)):i2], int(0.0))[( int(3.0) + min(min(( divInt(( int(5.0) + i0 ),divInt(min(( i1 * max(abs(( int(7.0) - i2 )), divInt(max(int(7.0), i1),int(1.0))) ), int(7.0)),i2)) + i2 ), ( int(7.0) * min(divInt(min(i0, divInt(( ( int(9.0) - int(8.0) ) - ( int(5.0) * i2 ) ),int(0.0))),int(4.0)), max(abs(int(8.0)), min(int(59.0), mod(divInt(len(saveChr(( ( min(int(9.0), max(int(2.0), mod(max(saveOrd((\"\"R\"\" + in1.rstrip())), int(2.0)),i2))) + i1 ) + int(6.0) ))),int(7.0)),i0)))) )), min(( ( i1 - len(\"\"1\"\") ) * int(4.0) ), ( ( int(9.0) - max(i1, len(s1)) ) * ( ( min(min(( len(\"\"5\"\") * int(1.0) ), int(5.0)), ( int(9.0) + max(i1, int(6.0)) )) - i1 ) - i2 ) ))) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1, 1], [2, 0, 2, 0, 0, 0], [0, 1], [1, 1, 1, 1], [0], [0, 0, 0, 0], [], [], [1], [], [0], [], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 7, 6, 0, 6, 5, 9, 0, 9, 3], [1, 1, 1, 1, 2, 0, 1, 0, 2, 2, 2, 0, 1], [1, 1, 1, 1], [0, 0, 3, 3, 0, 3, 0, 3, 1, 1, 3, 3, 3, 1, 0, 1, 2, 3, 2, 2, 0, 2, 0, 1, 3, 1, 2, 0, 3, 1, 1, 0, 3, 1], [1, 0, 1, 1, 0], [3, 1, 0, 1, 1, 1, 2, 2, 3, 3, 2], [0, 0, 0, 1, 0, 2], [1, 0, 0], [5, 1, 5], [0, 0, 0, 1, 0, 1, 1], [0], [1, 2, 1, 2, 3, 0, 0, 3, 2, 4, 4, 2, 1], [2, 1], [], [0, 1, 1, 0], [1, 2, 1, 1, 1, 1, 1], [], [15, 22, 23, 22, 1, 21], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 1, 4, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 10, 10, 13, 4, 34, 5, 11, 6, 3, 3, 7, 1, 13, 2, 0, 4, 7, 0, 6, 1, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"p8wx\"\":{:\\ni1 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b1:{:\\ni1 += i1\\ni2 += len(\"\"wb\"\"[max(i0, min(i1, max(int(3.0), int(7.0)))):max(max(abs(int(6.0)), i0), int(0.0))])\\n:}else:{:\\ni2 -= mod(abs(( divInt(i2,divInt(i2,int(6.0))) + len((s1 + in2)[:int(5.0)]) )),( i0 * len((saveChr(int(9.0)).capitalize()[:int(09.0)] + \"\"v\"\"[i1:abs(int(3.0))])) ))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1, 0, 1], [0], [2, 3, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 1, 3, 3], [7], [12], [], [20, 23, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 6, 0, 33, 9, 9, 3, 6, 5, 5, 1, 16, 3, 1, 3, 5, 1, 1, 0, 3], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1[len(in1):])[len(\"\"H\"\"):]:{:\\nres0 = getCharFromString(\"\";\"\"[abs(i0):min(mod(int(0.0),int(7.0)), ( int(5.0) + len(saveChr(i1)) ))], divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len((\"\"m\"\" + in0.rstrip())), divInt(int(1.0),i1)) )),divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2))) not in \"\">`\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [], [], [], [], [0, 3], [5, 1], [2, 1], [0, 0], [5], [], [], [], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 4, 2, 0, 0, 4, 3, 0, 8, 4, 4, 5], [0, 0, 0, 0, 0, 0, 1, 2, 2], [1], [0, 2, 2, 2, 1, 3, 2, 1, 1, 1, 0, 0, 2, 0, 2, 0, 3, 2, 2, 0, 1, 0, 3, 1, 0, 1, 0, 3], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 1, 3, 3], [2, 1, 2, 1, 2, 0], [1, 0, 1, 1], [4, 0, 0, 3], [1], [], [0, 4, 3, 2, 0, 2, 2, 2, 0, 0, 1], [0], [], [1, 0, 0, 2], [1], [], [8], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 9, 0, 28, 8, 4, 5, 3, 4, 1, 0, 11, 1, 0, 4, 1, 0, 1, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = in1.endswith(getCharFromString((s0[:i0] + s0[( ( mod(int(0.0),abs(( int(42.0) * int(00.0) ))) - int(430.0) ) * i0 ):][i0:( i0 - ( i0 * max(divInt(mod(i0,int(8.0)),i1), len(in0)) ) )][int(44.0):i2]), int(5.0)))\\nres0 = i2 != len(\"\"i\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 0, 1], [0, 0], [2, 1], [0, 0], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 0, 1, 1], [3, 1, 7, 4, 3, 4, 0, 5, 6], [2, 0, 0, 0, 1, 0, 2, 0], [1], [2, 3, 1, 0, 3, 2, 3, 2, 3, 0, 0, 2, 2, 1, 0, 1, 1, 1, 3, 0, 0, 0, 2, 1, 1], [0, 1, 1, 0, 1, 1], [3, 3, 2, 2, 3], [1, 1, 0], [1, 0, 1, 0], [0, 4, 0, 3, 1, 0], [1, 1, 1, 1], [0, 0], [2, 4, 2, 1, 4, 1, 4, 0, 1, 2, 3, 4, 0, 2, 2, 1, 4, 2, 0], [1, 3, 2, 2, 0], [3], [1, 2, 2, 2, 0, 0], [2, 1, 2, 2], [], [10], [9, 4, 1], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 8, 1, 25, 6, 5, 3, 4, 6, 4, 2, 19, 5, 1, 6, 4, 0, 1, 3, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in saveChr(( len(\"\"9\"\"[int(31.0):]) - i2 ))[:len(\"\"k\"\".lstrip(in1.capitalize()))]:{:\\nloopBreak% = 0\\nfor s0 in \"\"4\"\":{:\\nin0 = (s1.capitalize() + \"\"1\"\"[mod(abs(divInt(abs(i0),i0)),( mod(int(7.0),i0) - int(4.0) )):int(3.0)][int(4.0):])[len(getCharFromString(s0[i1:i0], i2)):]\\ni0 += divInt(int(05.0),int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 1], [1, 7, 7, 2], [2, 0, 0, 2], [0], [2, 2, 2, 1, 0, 0, 2, 3, 3, 2, 0, 1], [0, 0, 0, 0, 1], [3, 3], [2, 0, 2, 0], [0], [2, 3, 4, 3], [1], [], [3, 0, 4, 0, 1], [1], [], [], [1], [], [12], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 1, 12, 5, 2, 4, 1, 3, 1, 0, 5, 1, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = ( ( ( int(1.0) * i0 ) + i0 ) * ( len((s2 + saveChr(len(in0)))) + divInt(i2,int(772.0)) ) )\\nin1 = \"\"m\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [0, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [3], [1], [], [1], [], [1, 1, 1], [4, 5, 4], [1, 2, 0], [1], [1, 1, 0, 2, 3, 1, 1, 0], [0, 1], [1], [2, 0], [], [5, 2], [1, 1], [], [1, 0, 4], [1], [], [], [3, 1], [], [15], [], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\"@\"\" != in2\\ni1 *= int(4.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 2, 0, 0, 1], [0], [0, 0, 1, 2, 0], [0], [0, 0, 0], [], [], [0, 2, 3, 3], [4], [1, 0, 0], [0], [], [0, 0], [], [1], [], [1, 0, 1, 1], [5, 8, 9, 0], [0, 0, 2, 1], [1], [2, 1, 2, 0, 1, 3, 2, 3, 3, 0, 0], [0, 0, 1], [0, 4, 2], [0, 2], [0, 0], [2, 2, 3, 0], [0, 1], [0], [1, 2, 0], [], [], [0], [1, 3], [], [10], [], [21]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 3, 0, 11, 3, 3, 2, 1, 0, 2, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( int(5.0) + ( i0 * int(89.0) ) ) \\le min(divInt(saveOrd(\"\"k<\"\"),abs(i0)), i2)\\nb2 = res0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 2, 1, 2, 1, 0], [1, 0], [0, 1, 0, 2], [0], [0, 0], [], [], [3, 2], [2, 5], [2, 1, 0, 0, 0, 1, 2], [0, 0], [2, 1], [3, 2, 2], [1], [], [0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [4, 5, 5, 1, 7, 3, 1, 9, 3, 1, 0, 8, 9, 7, 7, 0, 0, 8, 1, 2, 7, 8], [0, 1, 0, 2, 1, 0, 0, 1, 2, 1], [1], [0, 1, 2, 3, 2, 3, 2, 2, 0, 3, 1, 1, 0, 3, 1, 3, 1, 2, 3, 2, 1, 2, 2, 3, 1, 3, 3, 0, 3, 3, 0, 1, 3, 1, 1, 2, 1, 0, 1, 1, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1, 1, 0, 0], [4, 1, 0, 3, 1, 1, 1, 0, 0, 3, 4, 2], [2, 0, 0, 1, 1], [1, 0, 1, 1, 0], [1, 4, 4, 2, 4, 3], [0, 0, 0, 1, 1, 1, 1, 1, 1], [0], [0, 4, 0, 4, 1, 3, 3, 1, 4, 0, 2, 1, 0, 4, 4, 1, 2, 1, 4, 1], [0, 0, 1, 0, 2, 1], [], [1, 2], [2, 1, 2, 2, 1, 2, 1, 3, 2], [], [25, 20, 9], [7, 2, 3, 0, 7], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 1, 2, 0, 0, 2, 2, 7, 2, 2, 3, 1, 0, 1, 22, 22, 10, 1, 45, 9, 12, 5, 5, 6, 9, 1, 20, 6, 0, 2, 9, 0, 3, 5, 1], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1 == getCharFromString(in1, i0)\\nif int(4.0) == mod(saveOrd(getCharFromString(\"\"7z23\"\", divInt(max(mod(( i1 * min(int(5.0), int(5.0)) ),i0), len(((\"\"u\"\" + saveChr(int(1.0))) + in1))),max(int(73.0), ( max(mod(int(1.0),divInt(( max(int(9.0), min(min(i2, len(\"\"0\"\"[:saveOrd(s2)])), i1)) + int(3.0) ),abs(int(1.0)))), int(0.0)) + ( int(8.0) - i0 ) ))))),int(9770081.0)):{:\\ni0 -= int(2.0)\\nloopBreak% = 0\\nfor in1 in getCharFromString(\"\"j\"\".capitalize(), i1):{:\\nb2 = ( not not i2 != int(7.0) or \"\"#\"\"[i1:] not in saveChr(int(8.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = \"\"7\"\"\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [1, 2, 2, 0, 2, 0, 1, 2, 0, 2, 1, 2, 2, 0, 2, 1], [0, 2, 1, 0, 1, 1, 2, 2], [0, 2, 0, 1, 0, 0, 1, 1], [0, 0], [0, 0, 0, 0], [], [], [1, 3, 1, 0, 1, 1, 3], [1, 4, 3, 3], [0, 1, 0, 1, 1, 2, 2, 2, 1, 0], [0, 0, 0, 0], [2, 0, 5], [0, 0, 0], [], [], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 3, 5, 8, 6, 9, 0, 8, 5, 1, 4, 5, 1, 2, 7, 3, 9, 2, 4, 8, 4, 6], [1, 2, 0, 1, 0, 2, 1, 2, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0], [3, 3, 1, 3, 0, 3, 3, 2, 3, 1, 3, 0, 0, 1, 3, 1, 1, 2, 0, 2, 3, 1, 1, 2, 0, 3, 3, 0, 3, 2, 0, 2, 3, 1, 3, 3, 0, 1, 2, 3, 3, 0, 2, 0, 3, 1, 2, 2, 1, 3, 3, 2, 3, 0, 3, 2, 0, 3, 1, 0, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 1, 3, 3, 1, 3, 1, 0, 1, 0, 0, 3, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0], [4, 4, 4, 0, 1, 2, 2, 2, 3, 3, 1, 0, 4, 0, 4, 2, 3, 2, 0, 3, 0, 3, 2, 4, 0, 2, 1], [1, 1, 1, 0, 0, 0, 2, 1, 2], [0, 0, 0, 0, 1, 0], [1, 4, 4, 3, 3, 3, 4, 0, 2, 4, 1, 4, 3, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [0, 4, 0, 4, 0, 4, 3, 0, 0, 1, 0, 2, 0, 4, 4, 2, 2, 4, 2, 1, 2, 1, 1, 1, 2, 1, 1, 0, 0, 2, 4, 1, 2, 4, 0, 1, 2, 0, 0], [0, 1, 1, 0, 3, 2, 0, 3], [5, 3], [0, 1, 1, 2, 0, 1, 2, 0, 2], [2, 0, 2, 0, 3, 1, 2, 1, 1], [25, 13], [6, 10, 19], [3, 2, 0], [0]], "fitness": 9223372036854775807, "mapping_values": [1, 16, 16, 8, 8, 2, 4, 0, 0, 7, 4, 10, 4, 3, 3, 0, 0, 3, 23, 23, 21, 3, 83, 15, 27, 9, 6, 15, 9, 2, 39, 8, 2, 9, 9, 2, 3, 3, 1], "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = res0\\nloopBreak% = 0\\nfor s1 in in1:{:\\nloopBreak% = 0\\nwhile saveOrd(getCharFromString(in1, saveOrd(saveChr(int(1.0))))) \\g saveOrd(in0):{:\\nin0 = saveChr(i1)\\nif b1:{:\\nb0 = min(max(( abs(int(1.0)) - abs(i2) ), i0), int(3.0)) \\le abs(int(5.0))\\ni1 = int(8.0)\\nloopBreak% = 0\\nfor in0 in (in1 + s0):{:\\nb1 = ( i0 - ( len(\"\"3\"\") - int(6.0) ) ) \\ge int(9.0)\\nif s2 == in1[divInt(i2,len(getCharFromString(\"\"Z\"\"[max(i1, min(( i2 + divInt(saveOrd(\"\"2\"\"[int(0.0):min(saveOrd(\"\"N\"\"), i1)]),int(8.0)) ), ( abs(len(\"\"\"\")) + i0 ))):].capitalize()[:( i0 + abs(int(5.0)) )][:( divInt(int(1.0),min(len(\"\"g\"\"[:( min(i1, len(\"\"0\"\")) * divInt(i0,abs(int(4.0))) )]), i0)) - mod(divInt(int(5.0),i1),( int(1.0) * int(2.0) )) )].strip(s1), int(7.0)))):int(3.0)]:{:\\nb1 = in1 in getCharFromString(\"\"k\"\", int(9.0))[int(2.0):]\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif in0.lstrip(\"\"t\"\")[saveOrd(s2[min(int(4.0), abs(int(8.0))):]):i1].endswith(in0):{:\\nloopBreak% = 0\\nwhile int(4.0) \\ge i0:{:\\ni1 = i1\\nloopBreak% = 0\\nwhile res0:{:\\ni0 = max(i0, int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [0], [0, 2], [0], [0], [], [], [0], [], [2], [], [0], [1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 2, 4, 4, 6, 8, 9, 4, 0, 7, 1, 1, 6, 8, 1, 5, 6, 8, 5, 1, 0, 2, 4, 6], [0, 1, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0, 2, 2, 1, 2, 0, 0, 2, 0, 1, 1, 2], [], [3, 2, 1, 2, 3, 0, 2, 2, 3, 2, 2, 1, 2, 3, 1, 1, 1, 1, 2, 3, 2, 0, 1, 1, 2, 3, 0, 0, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 1, 2, 1, 3, 1, 0, 3, 3, 0, 2, 3, 2, 1, 0, 0, 1, 0, 2, 2, 0, 0, 0, 2, 1, 0, 2, 2, 1, 2, 3, 0, 0, 1, 0, 3, 1, 0, 3, 2, 1, 0, 0, 2, 0, 1, 0, 3, 0, 2, 0, 3, 3, 0, 3, 1, 3, 3, 0, 2, 3, 3, 3, 1, 3, 1, 3, 3, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 0, 4, 0, 1, 2, 1, 1, 4, 3, 3, 0, 2, 4, 1, 1, 0, 3, 0, 3, 0, 0, 4, 2], [2, 0, 1, 1, 0, 2, 1, 2, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 5, 1, 1, 0, 3, 0, 3, 3, 3], [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [0], [2, 2, 2, 4, 2, 4, 1, 0, 2, 0, 3, 1, 0, 2, 2, 3, 0, 2, 0, 4, 4, 4, 4, 2, 2, 4, 0, 1, 3, 3, 3, 3, 1, 4, 3, 0, 2, 3, 3, 1, 4, 3, 1, 1, 1, 0, 2, 4, 1, 2, 1, 1, 3, 1, 1], [1, 3, 2, 0, 2, 0, 2, 1, 1, 3], [5, 0], [1, 0, 2, 2, 0, 2, 0, 2, 2, 1, 0, 1, 0], [1, 1, 3, 2, 3, 1, 2, 0, 2, 2, 0, 1, 0, 3, 1, 1, 0, 1, 1, 2, 0, 2], [5, 0, 7, 6, 22], [11, 1, 22, 9, 17, 2, 0, 20], [4, 6, 7, 4, 6, 0], [8, 0, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 25, 25, 32, 0, 108, 27, 25, 10, 17, 10, 22, 1, 55, 10, 2, 13, 22, 5, 8, 6, 3], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in saveChr(max(( int(1.0) * ( max(i0, divInt(( min(divInt(mod(int(0.0),divInt(saveOrd(\"\"l\"\".strip(in2)[int(2.0):]),int(4.0))),int(4.0)), int(6.0)) + ( min(( i1 - int(8.0) ), int(9.0)) - mod(max(i0, i1),i1) ) ),divInt(i1,divInt(i0,divInt(divInt(int(4.0),int(0.0)),i2))))) + int(7.0) ) ), ( int(11.0) * abs(int(6.0)) )))[i2:][max(max(i0, divInt(saveOrd(s1[mod(int(8.0),i1):i0]),int(1.0))), i2):divInt(divInt(i0,i0),i0)][:( int(5.0) - i1 )]:{:\\nb0 = (\"\"b%4\"\" + s1) in (s0 + in0[( mod(int(6.0),( len(getCharFromString(getCharFromString(s0.capitalize()[:i0][i1:], int(8.0)).capitalize(), i0).capitalize()) * len(\"\"w\"\") )) - int(5.0) ):])[i0:min(( int(1.0) - i2 ), i2)][mod(i1,int(0.0)):]\\nin0 = ((((\"\"6\"\" + saveChr(i2)) + (in0 + ((\"\"F74A\"\" + saveChr(abs(i0))) + (\"\"j\"\" + \"\"H#r\"\"))[divInt(i0,saveOrd(\"\"cG\"\")):max(i2, max(int(2.0), min(len(in0), i0)))])) + \"\"a\"\".lstrip()[:mod(min(len(\"\"u\"\"[min(int(4.0), min(int(6.0), saveOrd(\"\"6\"\"))):abs(i1)]), i1),i2)]) + (\"\"W\"\" + \"\"0\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 0, 0], [], [0, 0, 0], [], [0, 0], [], [], [3, 2, 1], [5], [0, 2], [0], [4], [0], [], [], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 0, 1, 1, 0], [0], [1, 0, 3, 2, 2, 2, 2, 2, 1, 0, 0, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1], [2, 0], [0, 0], [1, 0, 0], [4], [1], [], [0, 1], [0, 1], [], [], [2], [], [], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 3, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\nb1 = in1.startswith(\"\"4\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [4, 1, 5, 9, 3, 3, 1, 1, 5, 5, 7], [2, 1, 0, 1, 1, 1], [1], [3, 2, 1, 1, 1, 3, 3, 2, 3, 2, 1, 1, 2, 2, 0, 0, 2, 3, 0, 2, 2, 3, 1, 2, 1, 0, 2, 3, 1, 3, 2, 0, 3, 1, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0], [3, 4, 2, 1, 4, 2, 4, 4, 1], [2, 1, 2, 2, 2], [1, 1, 0, 1, 1, 0, 0], [2, 3, 0, 1, 4], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [], [2, 0, 4, 4, 3, 3, 2, 0, 3, 1, 1, 0, 2, 3, 1, 3, 3, 1, 1, 2, 1, 2, 4, 1, 0, 1], [2, 2, 3], [1], [0, 1, 2, 2, 2], [2, 2, 3, 1, 1, 2, 0, 3, 2, 0, 1, 0, 3, 3], [8, 24, 7], [21, 22, 20], [5, 2, 8, 9], [8, 28, 6, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 6, 1, 35, 11, 9, 5, 7, 5, 14, 0, 26, 3, 1, 5, 14, 3, 3, 4, 4], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= len(s2[mod(int(4.0),int(1.0)):int(5.0)])\\nin0 = ((s0[:saveOrd((\"\"52\"\" + \"\"%vw\"\"))] + s1) + (\"\"8I]9\"\" + ((\"\"Y\"\" + \"\"u\"\") + \"\"H\"\"[abs(( max(mod(int(9.0),int(3.0)), ( ( i1 - i0 ) * divInt(saveOrd(\"\"#\"\".rstrip()[i1:]),mod(mod(abs(int(3.0)),divInt(int(1.0),i1)),divInt(saveOrd(in1),int(1.0)))) )) * saveOrd(\"\"\"\") )):]))[( i1 * max(int(55.0), int(7.0)) ):]).capitalize().capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 0, 0], [], [2, 1, 2], [], [0, 0, 0], [], [], [1], [1], [1], [0], [], [], [], [], [0], [1, 1, 1, 1], [1], [1], [0], [3, 3, 1, 0], [], [4, 4], [], [0], [1, 4, 2], [0, 0, 0, 1, 1, 1], [], [0, 4, 4, 1, 3, 1, 1], [0, 1], [], [], [1, 2, 0, 0, 3, 2], [21, 3], [1], [6, 1], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 0, 2, 0, 0, 3, 6, 0, 7, 2, 0, 0, 6, 2, 1, 2, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1\\ni1 = saveOrd(getCharFromString(saveChr(saveOrd(\"\"b6VD\"\")), int(1.0)))\\ns2 = (\"\"@\"\" + \"\"1\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1], [0, 8, 7, 6, 0, 1, 5, 7, 1, 6, 7, 7, 7, 1, 4, 0, 4, 8, 9, 4, 6, 7], [0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1], [], [2, 2, 3, 1, 2, 2, 0, 1, 2, 0, 3, 2, 2, 1, 3, 3, 1, 3, 3, 2, 2, 3, 0, 2, 1, 2, 0, 0, 3, 0, 3, 2, 0, 3, 2, 0, 0, 3, 3, 1, 2, 2, 3, 2, 0, 0, 1, 3, 2, 0, 3, 0, 3, 3, 1, 1, 0, 2, 2, 0, 1, 1, 2, 3, 0, 0, 1, 2, 1, 3, 1, 3, 2, 1, 0, 2, 3, 2, 3, 2, 0, 3, 3, 0, 2, 3, 2, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [3, 1, 2, 0, 3, 1, 4, 2, 0, 2, 3, 1, 0, 2, 2, 1, 1, 3, 1, 3, 0, 3, 2, 2, 4], [1, 2, 1, 1, 1, 2, 2, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0], [1, 3, 1, 0, 1, 4, 3, 0, 0], [1], [], [0, 0, 2, 2, 4, 4, 4, 0, 4, 0, 0, 4, 1, 2, 2, 2, 4, 0, 0, 0, 0], [3, 0, 3, 3, 1, 3], [4, 5, 1, 5], [0, 0, 2, 1, 0], [2], [], [], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 22, 22, 24, 0, 93, 27, 25, 17, 10, 9, 1, 0, 21, 6, 4, 5, 1, 0, 0, 1, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( ( len(s1) - int(0.0) ) * ( ( i0 - int(8.0) ) - mod(i1,max(( mod(int(76.0),abs(min(int(0.0), len(in0)))) - max(divInt(mod(saveOrd(getCharFromString(s1.strip(s0.rstrip()), i0).rstrip(s1)[( int(1.0) * ( i0 * i0 ) ):abs(i0)][min(divInt(i1,abs(mod(i1,i2))), len(saveChr(max(int(5.0), ( mod(min(( i1 - i2 ), int(7.0)),abs(( i0 + abs(i2) ))) - max(max(int(1.0), int(6.0)), i0) ))))):( ( i2 - int(7.0) ) + int(7.0) )]),( len(\"\"0\"\") - i2 )),i1), int(71.0)) ), divInt(int(4.0),max(int(04.0), len(in1.strip(in0)[( int(8.0) - i2 ):divInt(min(( len(s0) - ( i1 + abs(abs(i1)) ) ), ( saveOrd(s0) + divInt(i2,i1) )),i2)][:i1][int(9.0):]))))) ) ) \\g int(467.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 1, 2, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 2, 0, 1], [0, 0, 0], [17, 6, 11], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 38, 11, 8, 4, 7, 4, 3, 1, 15, 3, 1, 5, 3, 3, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(\"\"G\"\"[len(in2):][mod(int(0.0),i0):mod(int(7.0),int(5.0))]):]:{:\\nres0 = in1[:( int(7.0) - abs(i2) )].capitalize()[i2:divInt(divInt(int(6.0),i0),divInt(min(( i1 + ( len(saveChr(divInt(min(i2, ( max(int(1.0), i1) * int(7.0) )),int(7.0)))) - i2 ) ), i0),mod(int(9.0),abs(int(8.0)))))].startswith((\"\"L\"\" + in1.rstrip()))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [1, 1, 0], [], [2, 1, 0], [], [0], [], [], [0, 2, 1], [5], [0, 2], [0], [], [0], [], [], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 2, 1, 1, 0], [0, 1], [0, 0, 3, 2, 2, 2, 2, 2, 1, 0, 0, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1], [2, 0], [0, 0], [1, 0, 0], [1, 2], [1, 0, 0, 0, 0, 1, 1], [], [3, 3, 2, 1, 3, 0, 1, 1], [], [], [1], [3, 3, 3, 3, 3, 2, 0], [14], [], [6], [8, 9, 28, 3, 2]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 2, 0, 0, 0, 0, 2, 7, 0, 8, 0, 0, 1, 7, 1, 0, 1, 5], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = ((\"\"%\"\"[:i2] + (s2 + \"\"&]\\\\\\t6\"\")) + \"\"O\"\")\\ni0 = i2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0, 1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [1, 4, 6, 1, 2, 7, 7, 5, 1, 2, 9, 1, 5], [0, 1, 2, 0, 1, 0], [], [3, 3, 1, 3, 2, 3, 3, 1, 0, 2, 3, 3, 1, 0, 0, 3, 2, 2, 0, 2, 3, 1, 1, 3, 3, 1, 3, 3, 0, 1, 3, 0, 1], [1, 0, 0, 1, 0], [2, 2, 2, 3, 1, 1, 2, 2, 3, 2, 0, 0, 4, 0], [2, 1, 0], [0, 1], [3, 3], [1, 1, 1, 1], [], [2, 3, 1, 2, 2, 4, 1, 0, 3, 1, 4, 1], [0, 1], [], [0, 2, 0], [3, 3, 3, 1], [], [14], [], [20, 2, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 6, 0, 33, 5, 14, 3, 2, 2, 4, 0, 12, 2, 0, 3, 4, 0, 1, 0, 3], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (\"\";\"\" + getCharFromString(\"\"\\\\\\t\"\", abs(abs(int(1.0))))[abs(divInt(len(in0),max(int(46.0), i0))):( max(abs(int(127.0)), i1) * i2 )][abs(( mod(i0,( len((\"\"(\"\" + saveChr(int(7.0)))) - int(5.0) )) + abs(min(int(129.0), min(saveOrd(\"\"o\"\"), i1))) )):])[int(1.0):min(i0, int(5.0))]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [], [], [], [], [3, 2], [], [2, 2], [], [4, 5], [], [], [], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 1, 8, 7, 0, 0, 1, 1, 3, 2, 8, 4, 6, 2], [0, 2, 2, 0, 1, 2, 1, 0], [1], [2, 0, 0, 1, 3, 0, 2, 2, 1, 3, 3, 2, 3, 0, 0, 2, 1, 2, 2, 1, 2, 2, 0, 3, 1, 0, 0, 1, 1], [0, 1, 0, 1, 1, 1, 0, 1, 0], [3, 3, 4, 0, 0], [0, 0, 0, 2], [0, 0, 1, 0, 1], [4, 4, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1], [], [3, 1, 1, 0, 3, 3, 1, 2, 2, 2, 3, 1, 4, 4, 1, 1, 4, 1, 0, 0], [0, 0, 1], [], [0, 2, 2], [2, 2, 2, 2, 0, 2, 0, 3, 3], [0, 23], [], [8, 3, 0, 5, 0], [29, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 14, 14, 8, 0, 29, 9, 5, 4, 5, 3, 9, 0, 20, 3, 0, 3, 9, 2, 0, 5, 2], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (\"\"8\"\" + \"\"3\"\").startswith(in1)\\nb2 = ((\"\"0\"\" + (\"\"5A\"\" + getCharFromString(getCharFromString(\"\"0\"\", ( i0 + i2 )), int(3187.0)))[len(\"\"X^\"\"):][i2:][divInt(( int(0.0) + len(saveChr(saveOrd(\"\"\"\"))) ),divInt(min(i0, i1),mod(int(011.0),divInt(( int(3.0) + mod(( i2 * min(int(2.0), i1) ),i0) ),int(846.0))))):int(2.0)]) + in1).endswith(s0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 0, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 1, 1, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 5, 4, 3, 0, 4], [1, 0, 0, 0, 1], [0], [1, 1, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0, 3, 1, 2], [17, 4], [23], [8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 5, 2, 1, 1, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"R\"\" not in \"\"E;x8\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0, 3], [0], [], [3, 2, 1, 1, 0], [1], [0], [], [1], [3, 3], [0, 0, 1], [], [2, 1], [], [], [1], [0, 1, 0], [4, 10], [16], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 1, 0, 1, 1, 3, 0, 2, 0, 0, 1, 3, 2, 1, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"EqK\"\"[:min(mod(int(0.0),int(3.0)), i0)]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 0, 0], [], [0, 2, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [3], [1], [], [1], [], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [1, 5, 4, 7, 1, 1, 6, 9, 8, 7, 2, 6, 0, 2, 0, 0, 2, 7, 8, 3], [0, 0, 0, 1, 1, 0], [1], [1, 1, 0, 2, 3, 1, 1, 0, 2, 2, 2, 1, 1, 2, 2, 3, 2, 1, 2, 2, 0, 1, 1, 0, 1, 1, 3, 1, 1, 0, 0, 2, 2, 1, 1, 2, 1, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 1, 2], [2, 0, 0], [1, 1, 1, 0, 1, 0, 0, 1, 1], [5, 2, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [], [1, 2, 4, 3, 4, 2, 3, 4, 1, 1, 2, 2, 1, 4, 3, 1, 0, 4, 4, 3, 0, 4], [1, 3, 3, 2, 0, 0, 1], [4, 4], [0, 2, 2, 2], [3, 0, 2, 1, 1, 2, 2, 0, 0, 3, 1, 1, 1, 0, 2, 1, 2], [11, 4, 25, 9], [0, 4, 2, 9, 17, 20], [1, 9, 7, 9, 7], [6, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 20, 20, 6, 0, 38, 12, 3, 3, 9, 3, 17, 0, 22, 7, 2, 4, 17, 4, 6, 5, 2], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\"#\"\" != saveChr(int(1.0))[int(5.0):i0]\\nin2 = ((\"\"L1\"\".rstrip(\"\"ae97EZ\"\") + \"\"`c\"\"[( max(int(4.0), int(7.0)) * i0 ):][mod(( mod(int(11.0),int(6.0)) + mod(divInt(max(mod(int(9.0),divInt(divInt(i0,int(8.0)),int(7.0))), i1),int(2.0)),int(6.0)) ),abs(int(02.0))):])[int(0.0):].rstrip((\"\"jrJ9u7\"\" + s2).capitalize()) + getCharFromString(getCharFromString((s1 + saveChr(i1)), i0), mod(( int(0.0) + int(27.0) ),mod(int(8.0),int(3.0)))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 1], [1], [1, 1], [], [0], [], [], [], [3], [1], [0], [], [], [], [], [1], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [7, 9, 6, 4, 2, 7, 7, 9, 2, 8, 6, 6, 0, 6, 5, 7], [0, 1, 1, 2, 2, 0, 2, 0, 1, 1, 0, 1, 2, 0, 0, 2, 1, 2], [1, 0], [3, 1, 0, 2, 3, 0, 2, 2, 2, 2, 0, 2, 1, 0, 0, 0, 2, 3, 1, 2, 3, 3, 0, 0, 0, 2, 0, 1, 2, 2, 1, 3, 1, 1, 0, 3, 2, 3, 2, 1, 2, 0, 2, 1, 2, 3, 0, 2, 2, 3, 0, 3, 0, 0, 2, 1, 1, 1, 1, 3], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], [3, 3, 3, 0, 1, 1, 4, 3, 1, 2, 4, 4], [1, 2, 0, 2, 1, 2, 2, 2, 0, 2, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1], [5, 4, 2, 4, 1], [1, 1, 0, 0, 1], [], [0, 2, 4, 2, 0, 2, 3, 4, 0, 2, 2, 0, 4, 4, 0, 1, 2, 4, 1, 1], [3, 2, 0, 2, 0], [2], [2, 2, 1, 1, 0, 1], [1, 0, 3, 1, 0], [25, 24], [12, 2], [], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 16, 16, 18, 2, 60, 19, 12, 11, 9, 5, 5, 0, 20, 5, 1, 6, 5, 2, 2, 0, 1], "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(in2) \\ge int(79.0):{:\\ni0 -= i1\\n:}else:{:\\ni1 = ( len(in1[i2:].strip()[divInt(( ( mod(i2,( int(6.0) * i0 )) + i2 ) * i0 ),divInt(len((s2.capitalize() + in1[int(42.0):( min(max(i1, i1), i0) - divInt(i1,int(7.0)) )][:divInt(mod(int(7.0),max(int(9.0), int(2.0))),i2)])[:saveOrd(getCharFromString(s1.capitalize(), ( len(\"\"m\"\") * ( int(8.0) * ( i0 * ( int(6.0) + divInt(max(i0, divInt(( abs(i2) * saveOrd(getCharFromString(\"\"Z\"\", i1)[:i2]) ),mod(int(6.0),int(0.0)))),int(6.0)) ) ) ) )))]),int(57.0))):]) - saveOrd(\"\"cY\"\") )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [2, 1, 0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0, 1, 0, 0, 2, 0, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 2, 0, 2, 1, 2, 1, 1], [1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 0, 2], [1, 0, 2, 1, 2, 0, 0, 2, 2, 0, 2, 1, 0, 1, 2, 1, 0, 0, 0, 2, 1, 0, 0, 1, 2], [0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [2, 2, 2, 2, 3, 2, 0, 0, 2, 1, 1], [0, 1, 2, 2, 3, 1, 3, 4, 3, 1, 5, 5, 1], [0, 1, 0, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 0, 0, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 2, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 1, 5, 0, 2, 5, 2, 4], [3, 0, 1, 2, 3, 3, 1], [0, 0, 1], [1, 0], [1, 1, 0, 1, 0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 6, 6, 9, 4, 5, 1, 4, 5, 9, 3, 1, 7, 2, 3, 1, 2, 5, 1, 5, 2, 4, 0, 1, 1, 5, 3, 9, 7, 7, 0, 5, 6, 8, 9, 2, 8, 3, 9, 9, 3, 5, 5, 1, 1, 9, 6, 3, 6, 7, 4, 1, 8, 7, 6, 4, 0, 9, 2, 4, 5, 9, 6, 1, 4, 5, 1, 6, 5, 5, 3, 1, 3, 9, 3], [1, 0, 1, 1, 0, 0, 1, 0, 1, 2, 1, 1, 2, 1, 0, 1, 1, 0, 1, 2, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 2, 1, 1, 1, 0, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 1, 1, 0, 0, 2, 0, 1, 1, 1, 1, 1, 2, 2, 0, 0, 0, 1, 1], [1, 1, 1, 0, 0, 1, 0], [1, 0, 1, 2, 2, 3, 2, 3, 0, 3, 2, 3, 1, 0, 3, 0, 2, 2, 1, 2, 0, 1, 2, 1, 0, 0, 1, 2, 1, 2, 3, 1, 0, 2, 2, 2, 1, 3, 0, 2, 2, 0, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0, 3, 3, 1, 1, 0, 0, 3, 2, 1, 3, 1, 0, 0, 1, 2, 1, 0, 1, 2, 0, 1, 1, 2, 3, 3, 0, 1, 3, 1, 1, 2, 0, 3, 3, 3, 2, 2, 3, 0, 1, 0, 1, 0, 2, 1, 1, 3, 3, 3, 1, 0, 3, 3, 1, 3, 1, 0, 3, 3, 2, 3, 0, 0, 0, 0, 1, 0, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0, 2, 3, 0, 1, 1, 0, 2, 1, 0, 2, 0, 0, 0, 0, 0, 3, 2, 3, 3, 3, 0, 3, 1, 1, 0, 3, 0, 2, 1, 3, 2, 0, 3, 3, 1, 2, 1, 1, 1, 2, 2, 3, 2, 2, 3, 1, 0, 0, 3, 0, 2, 1, 0, 2, 2, 1, 1, 1, 2, 3, 1, 3, 0, 0, 0, 0, 2, 3, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [1, 1, 0, 0, 0, 3, 4, 0, 1, 3, 2, 3, 0, 3, 1, 4, 1, 1, 1, 2, 0, 1, 4, 2, 2, 1, 2, 2, 0, 3, 0, 3, 2, 4, 0, 4, 4, 4, 4, 1, 1, 2, 4, 4, 1, 3, 1, 2, 0, 4, 2, 4], [1, 0, 2, 2, 1, 1, 1, 2, 0, 2, 0, 1, 2, 1, 0, 0, 2, 0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0], [5, 3, 3, 2, 5, 2, 0, 1, 5, 2, 2, 0, 4, 5, 3, 2, 1, 2, 0, 1, 1, 5, 2, 3, 4, 0, 1, 4, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [0, 0, 2, 1, 0, 0, 0, 2, 2, 4, 4, 0, 0, 0, 1, 0, 3, 1, 4, 0, 4, 0, 2, 0, 0, 2, 2, 1, 4, 0, 2, 4, 1, 2, 2, 1, 4, 2, 4, 2, 2, 1, 1, 2, 4, 2, 0, 2, 4, 1, 4, 2, 0, 4, 4, 1, 2, 0, 2, 0, 1, 0, 2, 1, 0, 1, 2, 1, 2, 2, 4, 2, 1, 0, 4, 1, 2, 4, 3, 0, 4, 1, 1], [1, 3, 1, 0, 3, 1, 2, 0, 1, 1, 1, 2, 1, 1, 2, 0], [5, 2], [0, 0, 2, 0, 1, 1, 0, 1, 2, 0, 1, 0, 2, 0, 0, 0, 1, 2, 1, 1, 2, 0, 0], [3, 2, 2, 2, 0, 0, 3, 2, 0, 0, 2, 1, 2, 3, 2, 3, 0, 2, 0, 0, 0, 2], [10, 0, 19, 10, 7, 18, 3], [17, 9], [9, 3, 8, 6, 9, 5, 7, 8], [17, 12, 23, 9, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 29, 29, 8, 21, 0, 16, 0, 0, 9, 10, 21, 10, 6, 5, 2, 1, 4, 66, 66, 58, 6, 184, 37, 43, 18, 23, 25, 11, 0, 61, 13, 2, 18, 11, 4, 0, 5, 2], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( int(56.0) \\l i1 and b2 ):{:\\ni0 -= int(6.0)\\nb2 = in2.startswith(in0)\\nin0 = \"\".\"\"[( ( max(divInt(max(i1, min(divInt(min(int(9.0), i1),min(i0, ( mod(int(4.0),mod(i0,int(5.0))) + ( int(1.0) * i1 ) ))), i0)),int(459.0)), mod(int(3.0),mod(len(s2),int(172.0)))) * i1 ) - mod(divInt(divInt(int(3.0),saveOrd(in2)),i2),divInt(mod(i1,int(1.0)),int(2.0))) ):int(5.0)]\\ni1 -= int(1.0)\\nloopBreak% = 0\\nwhile s2 not in saveChr(int(5.0))[int(2.0):][min(i2, i1):i0]:{:\\ns0 = s1.strip(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif i1 \\g i1:{:\\nloopBreak% = 0\\nwhile s2.endswith(\"\"9\"\"):{:\\nloopBreak% = 0\\nwhile s2 in (\"\"3\"\" + saveChr(max(len(s0), int(4.0)))):{:\\nb2 = int(0.0) == i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = i1 == abs(divInt(int(1.0),len(getCharFromString(in1, int(15.0)))))\\nin2 = in0[i2:i0]\\n:}else:{:\\ns2 = s1\\nres0 = \"\"8\"\"[:int(3.0)][:mod(int(9.0),i0)] == s2.strip()\\ns0 = saveChr(int(77.0))[divInt(i0,int(0.0)):int(5.0)]\\n:}\\nloopBreak% = 0\\nwhile divInt(min(len(\"\"K\"\"), i0),int(6.0)) \\ge max(int(8.0), int(9.0)):{:\\ni0 -= ( i1 * saveOrd(\"\"A\"\"[max(max(( mod(max(i1, int(2.0)),i2) + int(8.0) ), i0), ( int(3.0) * int(9.0) )):][:abs(min(max(int(9.0), i2), saveOrd(getCharFromString(\"\")\"\"[abs(int(35.0)):abs(int(5.0))][:i2], max(abs(( abs(i1) + i1 )), i1))[i0:int(119.0)].capitalize())))]) )\\nb2 = i0 \\g i2\\nif False:{:\\ni0 = min(len(\"\"6\"\"), int(636.0))\\n:}\\nif not ( ( int(74.0) - int(1.0) ) \\ge i2 and int(8.0) \\le i2 ):{:\\ns1 = saveChr(( min(i2, int(7.0)) * int(6.0) ))[i2:]\\ni2 = divInt(int(4.0),i0)\\n:}else:{:\\nb0 = divInt(i2,i0) \\ge i2\\nb0 = s1[i1:i1].endswith(saveChr(len(\"\"T\"\"))[mod(abs(saveOrd(saveChr(min(i0, saveOrd(in2[int(0.0):int(9.0)]))))),i0):saveOrd(saveChr(i2).capitalize())])\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = mod(int(2.0),saveOrd(\"\"K\"\")) \\g ( i0 - saveOrd(s2[:max(int(4.0), mod(int(5.0),int(96.0)))]) )\\n:}else:{:\\nin0 = in1[int(1.0):]\\ni1 += divInt(( max(mod(( abs(int(4.0)) + i1 ),i1), saveOrd(\"\"9\"\")) * i1 ),( int(5.0) + i1 ))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0, 1], [], [0], [], [], [1], [1], [0, 0, 0, 1, 2, 2, 2], [0], [5, 1], [3, 3, 2, 2], [0, 1], [], [], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [1, 2, 8, 4, 8, 8, 7, 3, 8, 1, 1], [1, 0, 0, 2, 1], [0], [3, 0, 2, 1, 2, 1, 3, 3, 0, 0, 3, 0, 1, 3, 1, 0, 0, 1], [1, 1], [4, 3, 3, 1, 1, 0], [], [1, 1], [2, 0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1], [], [4, 0, 1, 3, 0, 1, 1, 4, 1, 2, 1, 1, 1, 2, 4, 0, 2, 1], [3, 2], [2], [0, 0, 1, 1, 2, 2], [0, 1, 3, 2, 3, 0, 0, 0, 0, 1, 3, 3, 1], [1, 8, 5, 22, 19, 0], [4, 2, 23], [9], [8, 14, 8]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 2, 8, 0, 9, 2, 1, 0, 8, 4, 1, 1, 2], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( ( not saveOrd(s2.strip()) \\g i1 and \"\"Be%\"\".endswith((s0 + \"\"9\"\")) ) or \"\"+\"\" not in \"\"IFW\"\".capitalize() )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [1, 2, 2, 1, 0, 0, 1, 1, 1, 0, 1], [1, 1], [2, 1, 2, 0, 0, 2, 0, 0, 1], [], [0, 0, 0], [], [], [3, 0, 1, 0, 1], [5, 0], [1, 0, 2, 1, 2, 2], [0, 0], [2, 3, 4], [0], [], [], [0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [5, 5, 9, 7, 8, 1, 1, 3, 4, 8, 7, 0, 4, 9, 5, 6, 1, 7, 4, 7, 4, 8, 3, 1, 1, 6, 3, 4, 4, 6, 0, 2, 6, 6, 4, 7, 6, 1, 7, 6, 6, 0], [0, 1, 2, 1, 1, 1, 1, 0, 1, 2, 0, 2, 2, 1, 0, 1, 0, 1, 1, 1, 0, 2, 0, 2], [1, 1], [0, 0, 2, 3, 2, 0, 2, 1, 1, 1, 3, 3, 1, 0, 1, 3, 3, 3, 3, 1, 2, 2, 3, 3, 0, 2, 2, 2, 0, 0, 2, 2, 3, 3, 3, 0, 3, 1, 3, 3, 1, 2, 3, 3, 3, 3, 2, 2, 3, 0, 0, 3, 0, 1, 2, 0, 2, 3, 2, 3, 3, 3, 2, 3, 1, 2, 3, 0, 0, 3, 0, 0, 1, 2, 0, 3, 2, 0, 3, 3, 2, 1, 1, 1, 3, 0, 1, 1, 2, 1, 3, 1, 1, 1, 2, 2, 3, 3, 2, 1, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 2, 2, 4, 0, 2, 4, 3, 2, 4, 2, 1, 1, 4, 0, 4, 3, 2, 1, 4, 4, 4, 3, 3, 3, 4, 0, 3, 3, 3, 0, 2, 3, 4], [0, 1, 2, 0, 1, 1, 2, 1, 0, 1, 2, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1], [4, 0, 2, 2, 1, 4, 1, 3, 4, 5, 3, 3, 2, 0, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [], [2, 0, 2, 0, 1, 2, 1, 0, 2, 2, 2, 4, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 2, 4, 1, 4, 1, 1, 0, 4, 2, 4, 1, 2, 0, 0, 1, 1, 1, 1, 1, 3, 2, 1, 1, 0, 0, 3, 2, 4, 1, 0, 0, 2, 1, 1, 2, 3, 2, 1, 0], [0, 3, 2, 3, 2, 0, 2, 2, 2, 3, 0, 1], [4, 5, 1], [0, 0, 1, 0, 0, 2, 0, 2, 2, 1, 2, 2, 0, 1], [1, 3, 3, 3, 0, 0, 3, 3, 3, 2, 3, 1, 1, 1, 3, 0, 0, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 0, 1, 1, 3, 3], [20, 10, 9, 22, 22], [24, 4, 17, 12, 6, 18, 15, 1, 3, 22, 14, 19], [9, 2, 2, 3, 0], [3, 6, 21, 4, 9, 4, 2, 12, 0, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 2, 9, 0, 3, 0, 0, 5, 2, 6, 2, 3, 1, 0, 0, 2, 42, 42, 24, 2, 105, 25, 35, 14, 13, 15, 32, 0, 61, 12, 3, 14, 32, 5, 12, 5, 10], "tree_depth": 78, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0[i0:i1]\\nif ( min(mod(i2,( int(559.0) + int(781.0) )), int(13.0)) - min(abs(int(4870.0)), i1) ) != int(4.0):{:\\nif res0:{:\\ni1 *= abs(saveOrd(s2[min(abs(int(9.0)), divInt(divInt(saveOrd(\"\"y\"\"),len(\"\"\"\"[:i1])),( divInt(( i1 + i0 ),( ( abs(saveOrd(s2)) - abs(i1) ) - max(int(5.0), max(saveOrd(getCharFromString(s1, int(6.0))[mod(min(saveOrd(\"\"#\"\".capitalize().rstrip(\"\"<\"\")), len(\"\"U\"\")),abs(mod(( max(i2, i0) * saveOrd(getCharFromString(\"\"K\"\".capitalize()[i2:int(1.0)].capitalize(), ( i2 - divInt(saveOrd(\"\"!\"\".capitalize()),mod(saveOrd(\"\"&\"\"),len(in1))) )).capitalize().strip(getCharFromString(\"\"!\"\", len(s1[mod(len(in0),int(7.0)):]))[divInt(saveOrd(\"\"9\"\"),i1):].rstrip())) ),i0))):][min(i1, i0):int(4.0)][( i1 + len(\"\"\\\\\\t\"\") ):divInt(i1,len(\"\"e\"\"))]), len(\"\"r\"\"))) )) - ( int(7.0) * int(4.0) ) ))):int(8.0)]))\\n:}\\nin1 = \"\"m)\"\"\\nb0 = (\"\"JW\"\"[:min(i1, int(3.0))] + \"\"g\"\") == in2\\nb1 = int(11.0) \\l divInt(int(63.0),abs(int(446.0)))\\nin0 = in0\\nb0 = (saveChr(int(02.0))[int(6.0):] + \"\"2sp\"\") != s2\\n:}\\nb1 = s0.startswith(\"\"2bd3w0Wo\"\"[mod(( len(\"\"t\"\") + saveOrd((\"\"\"\"[:( int(6.0) + int(4.0) )] + s2)[i0:i2]) ),i0):])\\ni2 += int(7617660.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [2], [0], [2], [0], [4], [], [], [], [], [0, 1, 0, 1], [8, 5, 5, 7], [1, 1], [], [3, 1, 2, 0, 2, 2, 3, 0, 3], [0, 1], [3, 4, 4], [0], [0], [4, 2], [0, 1], [], [4, 1, 0, 0], [1, 3], [3], [], [0, 1], [10], [11], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(len(\"\"Kl\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [4, 1, 0, 4, 1, 3, 3, 2, 3, 9, 6, 1, 2, 4, 2, 2, 7, 7, 4], [2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 2, 1, 0, 1, 2, 0], [], [3, 2, 3, 2, 3, 3, 0, 3, 0, 0, 2, 1, 2, 2, 0, 2, 3, 2, 0, 2, 0, 1, 1, 2, 0, 2, 3, 2, 0, 0, 1, 3, 3, 3, 1, 1, 1, 0, 0, 3, 3, 3, 1, 1, 2, 1, 0, 3, 1, 0, 3, 3, 0, 0, 3, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 2, 4, 0, 4, 2, 1, 2, 3, 4, 0, 1, 1, 3, 3, 2, 0], [2, 1, 0, 2, 2, 1], [1, 1, 0, 1, 0, 1], [2, 3, 5, 2, 5, 0, 1, 0, 3], [1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [], [3, 2, 3, 3, 3, 2, 0, 4, 3, 2, 1, 4, 1, 4, 1, 2, 2, 0, 2, 1, 0, 3, 1, 3, 1, 1, 2, 2, 0, 4, 3, 3, 3, 2, 0, 2, 0, 1, 0, 0, 1, 3, 2, 1, 2, 1], [0, 2, 2, 0], [], [0, 1, 0, 2, 0, 1, 0, 2, 0, 0, 2, 1], [2, 3, 2, 3, 0, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 3, 1], [3, 18, 11, 10], [3], [3, 3, 3, 0, 0, 2, 6], [26, 28, 10, 12, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 19, 17, 0, 60, 12, 17, 6, 6, 9, 17, 0, 46, 4, 0, 12, 17, 4, 1, 7, 5], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = ((((in0[:len(getCharFromString((\"\"3\"\"[mod(abs(( saveOrd(\"\"[\"\".capitalize()) * min(i2, saveOrd(\"\"3\"\".capitalize())) )),i2):i0] + in2[( int(4.0) - mod(( i0 + ( abs(divInt(i2,mod(i2,int(1.0)))) * int(0.0) ) ),( i0 * divInt(max(mod(i0,i2), int(4.0)),abs(len(\"\"]\"\"[:saveOrd(s2)]))) )) ):int(1.0)][int(3.0):]), int(3.0)))] + (\"\"D3\"\" + (\"\"\"\\\\\"\"\" + \"\")0S\"\"))) + in2[i2:][i0:min(max(max(int(2.0), int(396.0)), ( int(124.0) - i2 )), len(getCharFromString((((s0[int(2.0):i1] + s1[len(\"\"L\"\"):abs(i0)]) + s0) + in0), i1)))]) + \"\"02\"\")[min(int(2.0), i2):int(77.0)] + (\"\"6K\"\"[int(4.0):] + \"\"`d\"\"[:i0]))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 1], [6, 1], [], [], [1, 3], [], [4], [], [], [], [1], [], [1], [], [], [], [1], [], [8], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(6.0) \\l saveOrd(\"\"i\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 2, 1], [1], [1, 0], [], [0], [], [], [1], [], [2, 2], [], [2, 3], [], [], [], [0], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1], [9, 0, 2, 3, 9, 1, 4, 8, 5, 5, 8, 9, 0, 4], [2, 2, 2, 2, 2, 2, 2, 1, 0, 1, 1, 1, 0], [1], [1, 3, 0, 0, 0, 2, 2, 3, 3, 2, 1, 0, 3, 0, 0, 2, 1, 1, 3, 2, 0, 0, 1, 1, 3, 3, 0, 3, 0, 3, 0, 1, 3, 3, 0, 1], [1, 1, 0, 0, 1], [2, 2, 2, 0, 2, 0, 3, 1, 4, 3, 0], [0, 2, 0], [0, 1, 0], [5, 2, 0, 3, 2], [1, 1, 1, 1, 1, 1], [], [2, 2, 0, 3, 4, 0, 1, 2, 4, 1, 2, 2, 3, 4, 2, 0, 1, 4, 4, 2, 1, 0, 0, 3, 1, 1], [2, 0, 0, 3, 0], [4], [0, 1, 2, 0, 2, 0, 1], [1, 1, 3, 0, 0, 3], [0, 24], [7, 12], [], [30, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 1, 14, 14, 13, 1, 36, 5, 11, 3, 3, 5, 6, 0, 26, 5, 1, 7, 6, 2, 2, 0, 2], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(9.0)\\nif in2[:abs(i2)][i2:i2] == (s2.capitalize() + \"\"h\"\"):{:\\nb1 = getCharFromString(\"\"m\"\", divInt(mod(abs(abs(( int(0.0) * i2 ))),min(i2, i2)),( int(23.0) + int(91.0) )))[abs(divInt(i1,i0)):] != (getCharFromString(s0[int(4.0):int(85.0)], min(len(\"\"_\"\"), i1)) + getCharFromString(\"\"A\"\"[:max(i1, saveOrd(in0))], i1).rstrip(s2))[int(58.0):][len((\"\"Y\"\" + \"\">\"\")):min(i0, int(904.0))]\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1, 1], [1, 9, 9, 4], [2, 2, 2, 1], [], [0, 3, 0, 3, 3, 3, 1, 2, 0, 2, 1, 0], [1, 1], [3, 0, 4, 3], [], [0, 1], [4, 1, 5, 2], [1, 1, 1, 1], [], [3, 3, 4, 1, 2, 4, 2, 1, 0, 4, 1, 3, 1, 3, 2, 0, 0], [0, 1, 0], [], [2, 1, 1], [0, 0, 1, 2], [5, 16], [11], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 12, 2, 4, 0, 2, 4, 4, 0, 17, 3, 0, 3, 4, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = ((getCharFromString(\"\"F\"\", i2) + saveChr(len(\"\"Q\"\"[:i2]))[min(saveOrd(s1), len(getCharFromString(\"\"l\"\", int(199.0)))):]) + (\"\"1\"\" + (in2[:divInt(i2,mod(int(4.0),i1))] + s2)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 2, 0], [2, 1], [1, 1], [], [0, 0], [], [], [3, 1], [], [0, 0, 2, 0], [], [1], [3, 0, 0], [0], [], [0], [1, 1, 1], [3, 0, 2], [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1], [0, 2, 3, 0, 0, 0, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 0, 0], [1, 0, 1, 1, 0], [4], [0, 0, 1, 1], [1, 0, 0], [], [0, 1, 0, 0, 1, 0, 1, 1, 1], [], [4, 3, 3, 1, 1, 1, 2, 3, 2, 1, 2, 4, 1], [1, 3], [1], [0, 2, 0], [2, 2, 0, 2, 0, 1, 3, 0, 1], [7, 13, 12], [7, 18], [4, 2, 7], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 0, 0, 2, 0, 4, 0, 1, 3, 1, 0, 1, 3, 3, 11, 2, 18, 5, 1, 4, 3, 0, 9, 0, 13, 2, 1, 3, 9, 3, 2, 3, 1], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( res0 and saveChr(i1) not in ((\"\"42\"\" + \"\"H7N\"\") + \"\"h]\"\") ):{:\\ni1 += mod(saveOrd((\"\"M\"\"[i1:] + \"\"s\"\".rstrip()[i0:i1])[( int(3.0) + int(0.0) ):i0]),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b1:{:\\ni0 -= divInt(divInt(int(2.0),i0),( i0 - i0 ))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1, 4, 3], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1, 1, 0, 0, 0, 1, 1], [0], [2, 0, 2, 2, 3, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0, 2, 1, 1], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 3, 3, 2, 3, 0, 3, 2], [17, 10], [], [3, 0, 9], [20, 7, 14, 8]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 8, 0, 40, 11, 11, 4, 7, 5, 9, 1, 20, 3, 1, 5, 9, 2, 0, 3, 4], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len((in1 + \"\"R\"\")[len(getCharFromString(\"\"3\"\"[abs(i0):min(mod(int(0.0),int(7.0)), ( int(5.0) + len(saveChr(i1)) ))], divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len((\"\";\"\" + in1.rstrip())), divInt(int(1.0),i1)) )),divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2)))):i1][( int(8.0) - saveOrd(\"\"$\"\") ):]):]:{:\\nres0 = in0 not in \"\"0+K%\"\"[:mod(len(\"\"9\"\"),i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [1, 2], [2], [], [], [], [], [3], [], [2, 0], [], [5], [0, 1], [], [1], [0], [0, 1], [3, 9], [0], [0], [1, 0], [], [], [], [], [5, 0, 3], [1], [], [0, 4, 3, 0, 1], [1], [], [1], [0], [3], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 1, 2, 2, 0, 0, 1, 0, 0, 0, 0, 3, 1, 0, 5, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in2.endswith(saveChr(int(39.0))):{:\\nloopBreak% = 0\\nwhile res0:{:\\ns0 = (in0 + \"\"D\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 2, 0], [1, 1], [0, 0], [], [0], [], [], [0, 1], [5, 5, 1, 3], [1, 2, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0], [4], [3, 2, 3, 1], [1, 0], [1], [1, 0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 6, 2, 0, 0, 4, 3, 0, 7, 4, 4, 2, 3, 3, 8, 3, 4, 6, 4, 6, 4, 8, 4, 6], [2, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 1, 1, 0, 1, 2, 1, 2, 0, 0], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 3, 2, 2, 3, 1, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 1, 0, 2, 2, 3, 1, 0, 2, 2, 1, 2, 0, 1, 1, 0, 0, 3, 0, 1, 1, 3, 2, 1, 3, 3, 2, 0, 0, 0, 3, 1, 2, 0, 0, 0, 0, 3, 0, 1, 3, 3, 2, 0, 3, 3, 3, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 1, 3, 1, 1, 1, 1, 2, 1, 1, 3, 3, 0, 3], [2, 1, 2, 1, 2, 0, 0, 1, 0, 1, 1, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1], [3], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [], [4, 3, 3, 1, 3, 0, 4, 2, 4, 1, 1, 4, 1, 2, 2, 1, 4, 4, 1, 1, 1], [3, 2, 3, 1, 3, 1], [5, 3, 1], [1, 2, 0], [1, 0, 0, 0, 3, 1, 0, 0, 0, 1], [18, 8, 24, 6, 23, 25], [11, 20, 11], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 2, 4, 9, 4, 1, 4, 2, 1, 2, 24, 24, 22, 0, 78, 23, 14, 14, 9, 1, 10, 0, 21, 6, 3, 3, 10, 6, 3, 0, 1], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i2 != ( ( mod(int(0.0),( ( int(62.0) * int(0.0) ) - int(0.0) )) * i0 ) - i0 ):{:\\nb0 = ((\"\"l\"\" + (in0 + \"\"S\"\".lstrip(\"\"I\"\")[:( i1 * int(43.0) )].capitalize())) + saveChr(i0)).strip(\"\"Y\"\").startswith(\"\";uG\"\"[abs(divInt(mod(max(int(0.0), i0),i0),int(7.0))):int(44.0)][( ( ( mod(( ( int(2.0) + i2 ) + divInt(( len(saveChr(int(3.0)).rstrip()) - i0 ),mod(( int(3.0) + ( i2 - int(8.0) ) ),int(3.0))) ),i0) - i0 ) - max(i0, int(4.0)) ) + int(646.0) ):])\\n:}else:{:\\nif max(divInt(int(4.0),max(max(divInt(i1,i1), i0), abs(int(8.0)))), ( i1 + i2 )) != i1:{:\\nb1 = ( i2 \\g max(i0, int(4.0)) or not ( max(len(\"\"X\"\"), mod(i0,len(\"\"Z\"\"))) \\ge min(len(\"\"l\"\"), int(6.0)) and False ) )\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1], [1, 2, 0, 1, 0, 0, 0], [2], [2, 0, 2, 2, 2, 2], [], [0, 0, 0, 0], [], [], [0], [2], [0, 0], [0], [], [1, 1], [], [1, 0], [], [1, 1, 1, 1], [6, 2, 6, 8], [0, 0, 1, 2, 0, 1, 1, 1], [0, 1, 0], [1, 2, 0, 0, 1, 1, 2, 0, 1, 0, 0], [0, 0], [4], [2, 1, 1], [], [0, 0, 1, 0, 3, 1, 2, 4, 3, 4], [0, 1], [], [4, 0, 0, 0, 3, 1, 2, 2, 2, 2, 4, 3, 0, 0], [1, 0], [], [1, 1, 1, 0], [0, 2], [17], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 1, 6, 0, 4, 0, 0, 1, 0, 2, 0, 0, 2, 0, 2, 0, 4, 4, 5, 0, 11, 2, 0, 2, 0, 10, 2, 0, 14, 2, 0, 4, 2, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = saveChr(int(6.0))\\nloopBreak% = 0\\nwhile False:{:\\nb0 = True\\ns0 = s1\\ns0 = in0\\ns1 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = (\"\"R1\"\" + getCharFromString((in0 + in1), ( i0 * i0 ))[int(2.0):int(6.0)][:( i1 - int(8.0) )][:i2][:i0])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1, 3], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1, 3, 0, 3, 3], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 5, 4, 4, 1, 0, 4], [1, 1, 1, 1], [0], [2, 0, 2, 0, 2, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 3, 0], [17, 9], [], [], [20, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 16, 16, 10, 1, 52, 15, 13, 4, 11, 5, 4, 1, 16, 3, 1, 4, 4, 2, 0, 0, 2], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(in1[abs(i0):min(mod(int(0.0),int(7.0)), ( int(5.0) + len(\"\"R\"\") ))]):]):]:{:\\nres0 = i1 != divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len(getCharFromString(\"\";\"\"[divInt(int(1.0),i1):divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2)], i1)), ( int(8.0) - len(saveChr(mod(min(i2, divInt(mod(divInt(int(5.0),int(0.0)),mod(int(4.0),i0)),int(8.0))),len((\"\"\\\\\\\\\"\" + s1.rstrip()))))) )) )),int(59.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(\"\"J\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 7, 5, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 8, 8, 9, 2, 4], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0], [0, 1, 1], [3, 3, 0, 1, 2, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 2, 0, 0, 2, 1, 3, 1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 0, 1, 1, 3, 0, 0, 0, 1, 2, 0, 2, 2, 2, 3, 3, 1, 3, 2, 3, 1, 1, 2, 3, 1, 1, 0, 0, 2, 2, 2, 0, 3, 3, 2, 2, 0, 2, 0, 2, 3, 1, 2, 1, 1, 0, 1, 2, 0, 1], [1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [3, 3, 0, 0, 2, 0, 1, 2, 1, 2, 3, 1, 3, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 0, 1, 1, 2, 2], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 1, 0, 0, 2], [0, 2], [17], [], [9], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 24, 24, 23, 0, 96, 35, 15, 17, 18, 7, 2, 1, 17, 3, 1, 5, 2, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:len(getCharFromString(in0[i0:int(9.0)].capitalize()[mod(mod(int(7.0),int(5.0)),mod(int(7.0),min(i2, mod(( ( int(2.0) + i2 ) + ( min(( i0 * divInt(i0,( int(1.0) - i1 )) ), divInt(abs(i1),i2)) + mod(( i0 * i0 ),( int(7.0) - min(int(4.0), ( i2 - divInt(mod(mod(int(9.0),mod(( int(8.0) * i2 ),int(5.0))),int(0.0)),max(i1, i1)) )) )) ) ),i1)))):int(4.0)], ( i1 + mod(( ( abs(max(int(8.0), abs(( len((\"\"R\"\" + s0.rstrip())[int(59.0):]) + int(9.0) )))) - ( max(int(2.0), int(2.0)) + i1 ) ) - i1 ),divInt(( ( i1 - len(\"\"9\"\") ) * abs(divInt(divInt(i1,divInt(i0,( min(int(8.0), divInt(int(8.0),int(9.0))) * i2 ))),int(2.0))) ),divInt(i0,int(4.0)))) )))] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [4, 5], [1], [], [3, 0, 1], [], [], [], [3], [], [], [], [11]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (in2 + \"\"(\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0, 3], [5], [0, 2, 1], [0, 0], [2], [3], [0], [], [], [0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 7, 3, 1, 4, 5, 3, 0, 2], [0, 2, 1, 0, 2, 1, 2, 0, 1, 2], [], [1, 3, 0, 1, 0, 1, 0, 2, 3, 2, 3, 3, 0, 0, 3, 1, 1, 0, 0, 2, 1, 2, 0, 2, 0, 0], [1, 1, 1, 1, 1], [3, 3, 4, 4, 2], [], [1, 1, 1, 0, 1], [3, 4, 0, 3], [1, 0, 0, 1, 1, 0, 0, 1, 1], [], [0, 1, 2, 2, 4, 1, 2, 3, 3, 0, 2, 4, 4, 1, 4, 2, 4, 4, 0, 1, 4, 1, 2, 2, 2, 0], [3, 2, 3, 3, 1, 2, 0], [4, 1, 4], [0, 1, 1, 2, 0, 2, 0, 1], [2, 3, 2, 0, 0, 2, 2, 3, 3], [12, 1], [], [8, 9, 8, 0], [18, 21, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 9, 9, 10, 0, 26, 5, 5, 0, 5, 4, 9, 0, 26, 7, 3, 8, 9, 2, 0, 4, 3], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( in0 == \"\"8\"\" and int(0731.0) != len(\"\"/9M\"\".rstrip(((in1 + \"\"B\"\".rstrip().capitalize()[i0:]) + saveChr(int(4.0))[i2:int(5.0)].rstrip(s0.capitalize()))[:i1])[:mod(len(\"\"80<\"\"),mod(saveOrd(getCharFromString(\"\";\"\", saveOrd(in0[:i0][i2:abs(int(3.0))][int(0.0):]))),i1))][i2:mod(int(2.0),divInt(i0,mod(i1,i2)))]) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [1], [0, 2], [], [0], [], [], [2], [1], [0, 2, 1], [0], [0], [2], [], [], [0], [1], [7], [1, 2, 2], [], [3, 0, 3, 0, 3, 1, 0], [], [3, 4, 4], [], [], [1, 1, 4, 5, 3, 2], [1, 0, 1, 1], [], [2, 2, 0, 0, 3, 0, 1, 1, 2, 4, 4, 4, 4, 1, 0, 0], [2, 3, 0, 2], [5], [2, 0, 1], [0, 1, 3, 1], [20], [12, 17], [], [17]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 1, 1, 1, 3, 0, 7, 0, 3, 0, 0, 6, 4, 0, 16, 4, 1, 3, 4, 1, 2, 0, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not s1[len(s1):i1][saveOrd((in1 + \"\"U\"\")):] in \"\"m.\"\":{:\\nb2 = i2 \\g saveOrd(getCharFromString(\"\"r\"\".capitalize(), int(7.0)).strip(in2).capitalize()[:i2])\\n:}\\nin0 = s2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1, 1, 1], [0], [2, 0, 3, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 0, 1, 0], [17, 6, 5], [10], [8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 6, 0, 33, 9, 9, 3, 6, 5, 5, 1, 16, 3, 1, 3, 5, 3, 1, 1, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len((in1[len(in1):] + \"\"R\"\")):]:{:\\nres0 = getCharFromString(\"\"8G\"\"[abs(i0):min(mod(int(0.0),int(7.0)), ( int(5.0) + len(saveChr(i1)) ))], divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len((\"\"k\"\" + in0.rstrip())), divInt(int(1.0),i1)) )),divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2))) not in \"\"F\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 2, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 4, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2, 3], [1, 0], [1, 2, 0, 0, 1], [0, 1], [17], [22], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 8, 0, 33, 11, 7, 6, 5, 6, 2, 1, 16, 5, 2, 3, 2, 1, 1, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nb0 = getCharFromString(in1, len(saveChr(i0)))[int(0.0):] not in in0[abs(mod(i1,mod(( int(7.0) + saveOrd((\"\"R\"\" + s0.lstrip()).capitalize()) ),i2))):divInt(( divInt(int(5.0),i2) + ( len(\"\"w\"\") * ( i1 - ( min(( int(7.0) + i2 ), divInt(max(int(2.0), i1),int(1.0))) * int(7.0) ) ) ) ),i0)].rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [], [2], [], [0], [0], [], [], [], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [5, 8, 7, 6, 5, 9, 1, 0, 3, 7, 1, 9, 6], [0, 0, 1], [], [0, 1, 3, 2, 1, 1, 1, 1, 1, 2, 0, 2, 1, 1, 1, 0], [1, 0, 0], [1], [2, 2], [0], [1, 1, 3], [1, 0, 0, 1, 0, 0, 0, 1, 1], [0], [3, 2, 0, 0, 2, 3, 3, 4, 2, 3, 1, 2, 1, 1, 3, 2, 2, 1, 0], [2], [], [0, 1, 2, 1, 1, 0], [0, 1, 0, 0, 0, 0, 2, 0, 2], [9, 19, 18, 9, 22, 21], [24], [0, 5], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 3, 0, 16, 3, 1, 2, 1, 3, 9, 0, 19, 1, 0, 6, 9, 6, 1, 2, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = (s1[i0:int(5.0)] + s1) in (((\"\"J\"\" + \"\"yTS\"\"[:max(divInt(int(8.0),int(7.0)), int(6.0))])[int(591.0):].capitalize() + \"\"JW0V\"\") + (\"\"5\"\"[int(03.0):( i0 * ( int(7.0) * int(19.0) ) )][:int(6.0)] + in0))[:i1]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 0, 1], [2, 0, 0, 0, 0, 0], [0], [2, 2, 2, 0, 2], [0], [0, 0, 0, 0, 0], [], [], [1], [], [2], [], [0], [], [], [], [], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 7, 1, 6, 3, 2, 1, 6, 6, 5, 7, 4], [2, 0, 0, 1, 0, 2, 0, 1, 0, 0, 2, 0], [], [1, 1, 0, 0, 0, 2, 0, 0, 3, 3, 2, 3, 3, 0, 1, 1, 2, 2, 0, 0, 3, 0, 2, 1, 2, 2, 2, 2, 1, 3, 0, 1, 3, 1, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 0], [0, 1, 4, 2, 1, 0, 3], [0, 0, 1, 0, 2], [1, 0, 0, 0], [0, 1, 5, 3, 0, 4, 3, 0, 1, 1, 1], [1, 0, 0, 0, 1], [0], [0, 4, 4, 1, 2, 0, 4, 2, 3, 2, 0, 2, 4, 4, 0, 4, 0, 0, 1], [2, 2, 1, 1, 2, 2], [], [0, 2, 0, 0], [0, 1, 2, 1, 0], [24, 21], [2, 13], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 1, 5, 1, 5, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 12, 0, 36, 9, 7, 5, 4, 11, 5, 1, 19, 6, 0, 4, 5, 2, 2, 1, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1:{:\\nin2 = \"\"Y\"\".capitalize().capitalize()\\nin0 = s0[int(07.0):int(1632.0)]\\nin1 = saveChr(i2)\\nb1 = (in0[i0:i0] + saveChr(mod(i1,i0))[min(max(divInt(saveOrd(s0.capitalize()),abs(i2)), int(1.0)), int(6.0)):( divInt(i0,i1) + max(i0, divInt(int(6.0),( ( ( ( int(5.0) + min(i0, int(7.0)) ) - len(s1.capitalize()) ) + int(4.0) ) * i2 ))) )])[i0:] in s1\\ns1 = \"\"c0nV\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [0, 2, 2, 1], [2, 2], [1, 2], [], [0], [], [], [1], [], [0, 0, 2], [], [1], [2, 0], [], [], [], [], [], [1, 2, 1], [1], [3, 0, 0], [], [1], [1], [], [5, 2, 4], [1, 0, 1], [], [0, 3, 1, 1, 0], [], [], [], [3, 1, 1], [], [3, 1], [], [22]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 0, 3, 0, 1, 2, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 1, 0, 3, 3, 0, 5, 0, 0, 0, 3, 0, 2, 0, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= max(i2, i1)\\nloopBreak% = 0\\nwhile not b1:{:\\nloopBreak% = 0\\nwhile in2 not in (\"\"=\"\" + \"\"db\"\"):{:\\ns2 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [2, 2, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [8], [], [], [1], [], [], [], [], [3, 3, 4, 5, 0, 2, 2, 1], [1], [], [0, 3, 0, 4, 1, 3, 0, 4, 0, 2, 0], [2, 3], [5], [1], [0], [15], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 8, 1, 0, 11, 2, 1, 1, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\nin1 = (in2 + \"\"P\"\".capitalize())\\ns0 = (s2 + s2.strip(s1[:int(8.0)]))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [2], [1], [0, 1, 2], [0], [4], [3], [1], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 5, 3, 2, 3, 3, 4, 2, 3, 4, 9, 0, 7, 2, 2, 3, 5, 2, 9, 6, 1, 5, 5, 4, 5, 7, 0, 6, 9, 9, 1, 4, 9, 5, 5, 3, 6], [0, 2, 2, 1, 2, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 0, 2, 0, 1, 0, 0, 2, 2, 1, 2, 1], [1, 1], [3, 2, 0, 2, 3, 0, 3, 2, 1, 0, 0, 0, 2, 2, 3, 2, 2, 3, 2, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 2, 1, 2, 1, 0, 2, 0, 3, 2, 1, 3, 0, 2, 1, 1, 2, 1, 3, 3, 3, 0, 3, 3, 3, 1, 0, 0, 0, 2, 2, 0, 0, 2, 3, 3, 2, 2, 1, 1, 1, 2, 3, 2, 3, 0, 0, 2, 2, 3, 0, 2, 0, 3, 0, 1, 2, 1, 2, 1, 0, 3, 2, 0, 3, 3, 2, 3, 1, 1, 2, 1, 0, 3, 2, 3, 1, 0, 1, 2, 3, 1, 2, 0, 1, 1, 0, 3, 1, 2, 2, 1, 0, 1, 0, 0, 2, 2, 3, 1, 1, 2, 2, 2, 3, 1, 1, 3, 3, 1, 0, 2, 3, 3, 1, 3, 0], [1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0], [4, 1, 4, 3, 1, 4, 0, 0, 0, 1, 1, 2, 4, 0, 4, 0, 1, 3, 1, 3, 2, 0, 0, 1, 0, 4, 3, 2, 3, 3, 1, 4, 4, 3], [1, 0, 0, 0, 2, 2, 1, 1, 1, 0, 1, 1, 1, 1, 2, 2, 2, 2, 1, 0, 0], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1], [], [3, 0, 3, 3, 1, 1, 3, 3, 2, 0, 4, 1, 3, 0, 0, 2, 4, 0, 4, 4, 2, 4, 1, 2, 2, 4, 2, 1, 2, 1, 0, 2, 1, 4, 1, 3, 2, 1, 4, 1, 1, 1, 4, 3, 4, 4, 1, 1, 1], [2, 0, 1, 1, 1, 0, 2, 0, 1, 1, 3], [4], [2, 2, 1, 1, 2, 1, 1, 2, 2], [1, 2, 0, 0, 3, 0, 2, 1, 0, 3, 3, 3, 3, 0, 0, 0, 1, 0, 2, 0, 2, 0], [7, 9, 19, 22, 15, 1, 21, 16, 4, 1], [10, 24, 12], [2, 4, 2, 6], [19, 18, 29, 7, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 37, 37, 34, 1, 145, 45, 34, 21, 25, 6, 22, 0, 49, 11, 1, 9, 22, 10, 3, 4, 5], "tree_depth": 67, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( saveOrd((s0 + ((\"\"k2HJ\"\" + \"\":T\"\") + ((in2[divInt(i0,mod(max(i2, saveOrd(\"\"4\"\".capitalize())),( int(0.0) - i2 ))):] + (in1 + in1)) + getCharFromString(in0, i1)[i2:])))) \\g mod(divInt(len(saveChr(divInt(mod(max(( ( int(5.0) + i0 ) + i0 ), mod(divInt(( int(3.0) + i1 ),( mod(int(2.0),( int(3.0) * i1 )) * ( i1 - saveOrd(saveChr(mod(int(3.0),min(i1, divInt(int(4.0),int(2.0)))))) ) )),divInt(int(3.0),min(min(max(i1, max(abs(saveOrd(saveChr(int(4.0))[:i1])), i2)), i2), divInt(( i2 - i1 ),divInt(min(saveOrd(\"\"y\"\"), divInt(divInt(int(9.0),int(0.0)),int(7.0))),divInt(min(( max(i2, i1) - divInt(( len(getCharFromString(\"\"W\"\"[:i1], ( i1 + max(i1, int(2.0)) ))[( int(2.0) - ( int(3.0) - i2 ) ):][:len(\"\"/\"\"[:( i0 - abs(min(mod(min(int(5.0), int(2.0)),( int(9.0) - i2 )), max(mod(min(int(6.0), i0),int(1.0)), ( saveOrd(s0) * int(5.0) )))) )])]) * ( i1 * int(5.0) ) ),int(4.0)) ), i0),len(\"\"^\"\"[int(5.0):])))))))),divInt(divInt(int(7.0),i0),int(0.0))),i2))),i2),divInt(divInt(abs(int(6.0)),int(99.0)),( mod(( len(\"\"$\"\".capitalize()) * int(1.0) ),int(495.0)) - len((\"\"<\"\"[max(int(5.0), i1):] + getCharFromString(\"\"P\"\", ( saveOrd(\"\"B\"\") + saveOrd(\"\"V\"\") )))) ))) or saveChr(int(36.0)).startswith((saveChr(len(\"\"mQ2\"\".rstrip(\"\"E6\"\"))) + \"\"B\"\")) )\\ni2 += i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [1, 0, 2, 1], [1], [1, 0, 2], [], [0], [], [], [2, 3], [], [0, 2], [], [1], [0], [], [], [0], [1, 1, 0, 1, 1, 1, 0, 0, 1], [4, 1, 7, 2, 5, 2, 0, 5, 4], [1, 2, 1, 2], [0], [3, 2, 0, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 2, 0, 0, 3, 1], [1, 1, 0, 1, 1], [4, 1, 4, 4], [2], [0, 1, 1, 0], [5, 3, 4], [1, 1, 0, 1], [], [2, 2, 4, 1, 0, 2, 1, 4, 4, 1, 0], [1, 2, 2], [], [2, 1, 0], [0, 1, 0, 0], [23, 14, 25], [14], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 1, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 1, 9, 9, 4, 1, 18, 5, 4, 1, 4, 3, 4, 0, 11, 3, 0, 3, 4, 3, 1, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(saveChr(divInt(i2,int(4.0)))[:mod(int(1.0),( int(72.0) * mod(int(5.0),max(int(2.0), saveOrd(\"\"X\"\"))) ))][divInt(i1,i2):])\\nb2 = res0\\nif in2 not in \"\"o\"\"[saveOrd(\"\"OZ\"\".capitalize().capitalize()):int(054.0)]:{:\\nin0 = in1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [2, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 1, 0, 1, 1, 0, 2, 0, 0, 2, 1, 2, 1, 2, 2, 2, 0, 0, 1, 2, 1, 2, 0, 2, 1, 2, 2, 1, 1, 1, 1, 0], [1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 2, 0, 1, 1, 1, 0, 1], [0, 1, 1, 0, 1, 2, 2, 2, 0, 1, 1, 0, 2, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 1], [0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [1, 3, 1, 0, 1, 1, 0, 1, 3, 0, 2, 3, 3], [4, 1, 0, 0, 5, 1, 5, 3, 0], [0, 2, 0, 1, 2, 1, 0, 1, 2, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 3, 0, 3, 5, 0, 0, 4, 5], [1, 0, 1, 0, 0, 0, 1, 1, 2, 3, 3, 1, 3, 3, 3, 1], [1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [1, 8, 8, 2, 2, 6, 9, 4, 2, 2, 1, 9, 3, 0, 7, 0, 8, 8, 4, 1, 9, 2, 4, 3, 5, 0, 4, 4, 9, 8, 8, 1, 7, 7, 4, 6, 9, 8, 7, 3, 7, 3, 8, 5, 0, 8, 6, 6, 0, 9, 0, 7, 6, 2, 3, 8, 6, 1, 7, 7, 7, 1, 0], [0, 2, 2, 2, 1, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 2, 2, 1, 1, 1, 0, 1, 1, 1, 2, 0, 2, 1, 1, 0, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 0, 0, 2, 1, 0, 2, 1, 2, 1, 1, 1, 0, 2, 0, 2, 2, 0, 2, 2, 1, 1], [1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 2, 1, 2, 0, 3, 0, 2, 1, 3, 1, 2, 0, 1, 2, 1, 2, 2, 0, 1, 3, 3, 1, 0, 1, 2, 1, 0, 2, 2, 3, 2, 3, 0, 3, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 2, 0, 3, 3, 0, 2, 2, 0, 2, 1, 3, 3, 1, 2, 2, 2, 0, 2, 0, 2, 3, 3, 1, 0, 0, 2, 3, 1, 3, 3, 1, 0, 2, 2, 2, 1, 3, 3, 2, 1, 0, 0, 1, 0, 2, 0, 0, 2, 3, 1, 0, 1, 0, 3, 2, 3, 3, 2, 3, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 2, 0, 0, 1, 2, 3, 0, 2, 1, 0, 0, 3, 0, 1, 1, 0, 3, 3, 0, 0, 3, 3, 1, 0, 1, 1, 2, 1, 3, 1, 2, 0, 3, 3, 3, 3, 1, 0, 1, 3, 1, 0, 1, 2, 2, 1, 2, 3, 0, 2, 2, 2, 0, 2, 0, 0, 3, 1, 0, 0, 3, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 0, 3, 2, 1, 2, 1, 2, 2, 0, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 2, 1, 1, 1, 1, 2, 0, 1], [1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 4, 1, 3, 2, 3, 0, 4, 4, 2, 1, 1, 3, 0, 1, 0, 4, 1, 1, 4, 1, 0, 2, 3, 0, 0, 4, 3, 2, 4, 4, 2, 4, 4, 3, 4, 2, 1, 2, 3, 2, 2, 1, 3], [2, 2, 0, 0, 2, 2, 1, 0, 1, 1, 2, 0, 1, 0, 1, 2, 0, 0, 1, 2, 0, 2, 0, 0, 1, 1, 1, 0, 2, 1, 1, 2, 2], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [5, 3, 0, 3, 2, 3, 3, 5, 2, 0, 2, 3, 4, 5, 1, 1, 3, 1, 2, 1, 1, 5, 0, 3, 5, 1, 0, 1, 1, 3, 3, 3, 1, 1, 3, 1, 1, 3, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0], [0, 3, 2, 2, 0, 3, 3, 3, 0, 4, 1, 2, 2, 2, 4, 0, 4, 4, 0, 0, 4, 2, 4, 0, 2, 4, 4, 4, 1, 0, 2, 1, 0, 0, 3, 0, 3, 0, 4, 0, 0, 2, 4, 2, 4, 1, 1, 2, 0, 4, 4, 1, 1, 1, 1, 2, 4, 4, 4, 4, 0, 1, 1, 0, 1, 3, 1, 4, 4, 0, 1, 2, 4, 4, 1, 4, 0, 1, 1, 2, 0, 1, 0, 4, 0, 1, 3, 1, 2, 0, 4, 4, 0, 4, 3, 4, 0, 4, 2, 4, 1, 3, 0, 0, 1, 2, 0, 1, 0, 0, 0], [2, 2, 0, 0, 1, 0, 0, 0, 2, 0, 1, 1, 0, 3, 1, 3, 1, 3, 3, 0, 3, 1, 2, 1, 0, 3, 3, 2, 0, 1], [3, 3, 1, 2, 5, 2, 5], [0, 0, 2, 1, 1, 0, 2, 2, 2, 1, 0, 1, 2, 2, 0, 1, 2], [1, 2, 3, 0, 1, 0, 3, 0, 0, 1, 0, 3, 2, 3, 3, 1, 1, 1, 3, 3, 0, 2, 0, 0], [24, 0, 8, 6, 19, 0, 21, 9], [25, 4, 23, 11, 21, 19], [7, 3, 7], [20, 8, 2, 11, 31, 11, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 42, 42, 18, 24, 3, 11, 0, 0, 13, 9, 35, 9, 10, 16, 5, 6, 12, 63, 63, 67, 9, 214, 52, 45, 33, 25, 40, 24, 3, 111, 30, 7, 17, 24, 8, 6, 3, 7], "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif False:{:\\nb1 = in2 not in (in0[i0:int(1.0)][i2:mod(int(8.0),mod(i2,min(i2, divInt(int(8.0),min(int(2.0), ( i1 * int(2.0) ))))))] + (((s0 + \"\"z\"\".capitalize()) + in0.capitalize()[:divInt(int(6.0),mod(( i1 * int(9.0) ),saveOrd(getCharFromString(getCharFromString(s2, max(int(4.0), i2)), int(2.0)))))][:divInt(int(2.0),i2)][mod(divInt(len(in0),( abs(i1) + len(saveChr(int(1.0))) )),i1):]) + getCharFromString(in0, i0)[int(9.0):int(3.0)]))\\ni1 += int(07.0)\\ni1 *= int(0.0)\\nres0 = b1\\nif i0 \\le int(8.0):{:\\nloopBreak% = 0\\nwhile getCharFromString(getCharFromString(\"\"7\"\".capitalize(), int(8.0)), ( i1 * min(saveOrd(in2), i0) ))[divInt(divInt(i1,mod(int(4.0),saveOrd(\"\";\"\"[abs(int(1.0)):]))),( divInt(( i1 - ( i0 + mod(max(max(int(9.0), i1), i2),( len(s2) - int(2.0) )) ) ),min(max(int(4.0), i2), mod(divInt(( int(3.0) - min(saveOrd(s0), ( int(5.0) * i1 )) ),i1),int(0.0)))) + i1 )):] == (s2 + (in0 + getCharFromString(in1, ( i0 - i1 )))):{:\\nloopBreak% = 0\\nwhile ( max(int(4.0), i1) + int(4.0) ) \\g i1:{:\\nif True:{:\\nif max(( saveOrd(in2) - max(( min(abs(i2), ( len(saveChr(min(i0, i2))[int(9.0):]) * min(saveOrd(saveChr(( i1 + i1 ))[:int(8.0)]), divInt(len(\"\"Y\"\"),i0)) )) + ( int(8.0) - i1 ) ), i2) ), abs(i2)) \\l int(1.0):{:\\nif \"\"e\"\" != s1[int(7.0):i1]:{:\\ni1 = saveOrd(getCharFromString(\"\"A\"\".lstrip(\"\"%\"\"), saveOrd(\"\"I\"\")))\\n:}\\n:}else:{:\\ns1 = \"\"G\"\"\\n:}\\n:}else:{:\\nin0 = saveChr(i1)[:i2]\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = saveChr(abs(saveOrd(s2.rstrip()))).lstrip(\"\"x\"\")\\nb0 = \"\"T\"\" in s1\\nif b1:{:\\ni1 = int(7.0)\\n:}else:{:\\ni1 *= i1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif b1:{:\\nb0 = \"\"\\\\\\t\"\" != (\"\"3(\"\" + getCharFromString(s1, int(4.0)).strip())\\nloopBreak% = 0\\nfor in2 in \"\"`\"\":{:\\ns0 = saveChr(int(6.0)).strip(\"\"l\"\")[divInt(int(9.0),saveOrd(in0.capitalize())):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif int(8.0) \\l mod(i1,len(\"\"v\"\")):{:\\nloopBreak% = 0\\nwhile b1:{:\\nloopBreak% = 0\\nfor in2 in \"\"t\"\":{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += saveOrd(s1[abs(max(int(7.0), i0)):])\\n:}else:{:\\nif not ( ( False or ( int(3.0) != abs(int(7.0)) or \"\"(\"\".endswith(s0) ) ) and i2 \\g int(3.0) ):{:\\ni1 = ( divInt(int(8.0),divInt(len(saveChr(i0)),mod(divInt(( i2 * ( i1 + i2 ) ),abs(int(5.0))),i1))) + i1 )\\n:}\\n:}\\nif ( s1 in \"\"=\"\" and abs(i1) != int(0.0) ):{:\\ns1 = (\"\"A\"\" + in0[int(8.0):i0])\\n:}\\n:}\\nif int(6.0) \\ge i2:{:\\nin0 = getCharFromString(in0.strip(), i0)\\nloopBreak% = 0\\nfor s1 in (s1.capitalize() + getCharFromString(saveChr(( i2 - i2 ))[:i0], max(( int(6.0) - ( int(0.0) - ( divInt(i2,int(9.0)) + int(0.0) ) ) ), ( int(7.0) * divInt(int(6.0),len(\"\"7\"\")) )))).strip((in0 + s1)):{:\\nif ( \"\"V\"\" in s1[divInt(int(2.0),int(3.0)):] and \"\"J\"\".startswith(in0) ):{:\\nb2 = ( int(8.0) - int(6.0) ) \\l int(1.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = False\\nres0 = s2.endswith(in2)\\n:}else:{:\\ni2 -= int(777.0)\\n:}\\n:}\\ni1 *= ( i1 * int(10.0) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [1, 0], [3], [2, 0], [0], [5], [0], [], [], [], [0, 1], [0, 6], [2], [], [3, 1, 3, 0], [], [2, 2], [], [], [4, 0], [0, 0, 1], [], [3, 0, 1, 2, 0], [], [], [1], [1, 0, 3], [6], [25], [], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 2, 3, 0, 5, 0, 0, 1, 3, 1, 1, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile (in1 + \"\"zG&\"\").endswith(s0[:abs(int(06.0))]):{:\\nb1 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [], [0], [], [], [0, 2, 0], [], [0, 2], [], [0], [0], [], [], [], [], [], [], [], [], [], [2], [], [], [4], [0, 0, 1], [], [1, 0], [], [], [], [2, 1, 1], [], [25, 18], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 3, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 2, 0, 0, 0, 3, 0, 2, 1, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\nb0 = \"\"6zs\"\" in in1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1], [1, 2, 2, 1, 0, 2, 0, 0], [2, 1, 0], [1, 2, 0, 2, 1], [0], [0, 0, 0], [], [], [1], [1, 4], [1, 0, 2, 1], [0, 0], [3], [2], [], [], [0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [1, 8, 6, 1, 6, 1, 2, 8, 7, 7, 9, 9, 2, 4, 1, 6, 8, 5, 4, 1, 3, 2, 7, 4, 3, 5], [1, 1, 1, 0, 2, 2, 2, 1, 2, 0, 0, 2, 2, 2, 0, 0, 2], [1, 0], [3, 1, 0, 3, 1, 1, 1, 0, 2, 3, 1, 0, 0, 2, 2, 0, 0, 3, 1, 2, 0, 3, 2, 1, 1, 2, 1, 2, 3, 3, 1, 1, 2, 0, 2, 3, 1, 1, 1, 0, 1, 3, 0, 0, 3, 3, 3, 3, 3, 2, 2, 3, 1, 0, 0, 2, 1, 2, 3, 3, 0, 1, 0, 3, 1], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1], [2, 0, 0, 4, 0, 4, 1, 3, 1, 0, 1, 2, 4, 0, 2, 1, 3, 3], [0, 0, 2, 2, 1, 2, 2], [0, 1, 1, 1, 0, 1, 1], [3, 2, 5, 5, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0], [0, 3, 2, 2, 2, 0, 4, 1, 1, 4, 1, 2, 2, 1, 4, 4, 1, 4, 2, 0, 0, 1], [2, 2, 0, 1, 1], [], [2, 0, 2, 0, 0, 2], [2, 3, 1, 0, 3, 2, 3, 0, 0, 3], [14, 9, 7], [21], [6, 6], [27, 6, 26, 8]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 1, 3, 0, 0, 1, 2, 4, 2, 1, 1, 0, 0, 1, 26, 26, 17, 2, 65, 13, 18, 7, 7, 7, 10, 1, 22, 5, 0, 6, 10, 3, 1, 2, 4], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += abs(int(1.0))\\nloopBreak% = 0\\nwhile i1 \\g min(int(8.0), int(6.0)):{:\\nif not in0 != (s2[int(1.0):][i1:divInt(min(int(6.0), i0),i2)][( ( i2 + i2 ) * saveOrd(\"\"6\"\".capitalize()) ):] + \"\"\\\\\\\\vO#6\"\"):{:\\nin2 = \"\"[\"\".capitalize()\\nb1 = int(12877.0) \\le ( i1 * min(mod(int(9.0),int(9.0)), mod(int(2.0),mod(saveOrd(\"\"J\"\"[max(int(4.0), int(1.0)):( i2 - divInt(len(getCharFromString(saveChr(int(6.0)), int(8.0))),int(5.0)) )][i0:int(4.0)]),max(i0, i2)))) )\\nloopBreak% = 0\\nfor in2 in \"\"H\"\":{:\\ns0 = saveChr(min(max(abs(saveOrd(s0[min(mod(( abs(int(1.0)) * i2 ),i2), ( int(3.0) * mod(max(len(s1), i0),int(2.0)) )):])), i0), len(\"\"%\"\")))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni2 = int(7435.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [1, 1, 1, 0, 1, 1, 1], [3, 7, 7, 5, 5, 3, 2], [2, 2, 1, 0], [1], [3, 3, 0, 3, 2, 3, 3, 2, 2, 2, 1, 1, 2, 1, 3, 1, 1, 0, 0], [0, 0, 1, 0, 1], [0, 3, 2, 3, 4, 2], [0, 0, 2, 0], [1, 0], [5, 3], [1, 1], [], [3, 2, 4, 4, 2, 0, 1, 1, 0], [2, 0], [], [0, 2], [2, 3], [], [], [5], [7]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 4, 1, 19, 5, 6, 4, 2, 2, 2, 0, 9, 2, 0, 2, 2, 0, 0, 1, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += min(len((getCharFromString(in2[i2:], abs(( len(\"\"5\"\") + saveOrd(\"\"$\"\") ))).capitalize()[( mod(( int(3.0) * int(7.0) ),divInt(int(7.0),abs(int(55.0)))) + int(3.0) ):i1] + in0)), i0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1], [2, 0, 2, 2, 1, 1, 1, 1, 1, 2, 0, 2, 1, 1, 0, 1, 2, 2, 0, 2, 2, 0, 0, 1, 1, 1, 2, 1, 2, 1, 2, 1, 0], [1, 0, 2, 2, 1, 2, 0, 2, 1, 0, 0, 1], [0, 1, 2, 1, 1, 0, 2, 1, 0, 2, 1, 1, 2, 1, 1, 0, 1, 2, 1, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [1, 2, 2, 0, 1, 3, 0], [0, 3, 3, 2, 0], [1, 0, 2, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 2], [0, 0, 0, 0, 0], [3, 3], [1, 0, 2, 1, 1, 0, 1], [], [1, 0, 1, 1], [1, 0, 0, 0], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [7, 7, 7, 8, 7, 4, 8, 4, 9, 2, 0, 6, 1, 0, 4, 4, 8, 0, 0, 1, 4, 1, 7, 4, 5, 2, 8, 5, 1, 7, 5, 8, 1, 5, 9, 0, 6], [1, 2, 2, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 2, 0, 1, 2, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 2, 2, 0, 0, 0, 1, 2, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 2, 1, 0, 2, 1, 0, 0, 2, 0, 1, 2, 2, 1], [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 1, 3, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 2, 0, 3, 3, 2, 3, 3, 0, 0, 2, 0, 2, 0, 2, 0, 0, 1, 1, 3, 2, 3, 1, 1, 0, 2, 2, 1, 3, 2, 3, 0, 0, 3, 2, 3, 3, 0, 0, 2, 2, 3, 0, 1, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 2, 2, 3, 2, 2, 2, 1, 0, 1, 0, 2, 3, 1, 1, 1, 1, 1, 0, 0, 2, 3, 1, 0, 3, 2, 2, 3, 3, 1, 3, 2, 1, 1, 0, 1, 3, 1, 2, 3, 3, 0, 3, 1, 2, 0, 0, 1, 3, 2, 0, 1, 0, 1, 2, 0, 1, 3, 0, 3, 0, 2, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0], [1, 0, 1, 3, 1, 1, 1, 4, 2, 4, 2, 1, 0, 4, 3, 2, 2, 0, 3, 1, 3, 4, 4, 4, 2, 0, 0], [1, 0, 0, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 0, 2, 2, 2, 1], [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 1, 1, 0, 1, 5, 1, 3, 0, 5, 4, 1, 1, 2, 2, 1, 0, 0, 1, 3, 3, 5, 3, 1, 4, 2, 4, 2, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0], [0, 4, 2, 4, 4, 1, 0, 0, 4, 1, 0, 2, 1, 1, 0, 1, 4, 1, 3, 3, 2, 0, 2, 1, 4, 3, 3, 4, 4, 2, 4, 0, 0, 4, 0, 2, 0, 4, 0, 3, 0, 4, 1, 4, 4, 4, 0, 1, 2, 3, 2, 2, 0, 0, 0, 2, 4, 3, 0, 1, 3, 3, 0, 0, 2, 2, 2, 4, 0], [1, 0, 1, 2, 2, 2, 1, 0, 0, 3, 1, 2, 2, 2, 3, 2, 2], [4, 4], [2, 0, 2, 1, 0, 2, 2, 1, 1, 0, 0, 2, 2], [0, 2, 0, 2, 3, 1, 3, 3, 3, 2, 1, 0], [8, 18, 14], [14, 15], [0, 9, 8], [6, 13, 24, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 33, 33, 12, 21, 4, 7, 0, 0, 7, 5, 14, 5, 2, 7, 0, 4, 4, 37, 37, 60, 11, 136, 31, 27, 18, 20, 29, 12, 4, 69, 17, 2, 13, 12, 3, 2, 3, 4], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) \\l i1:{:\\nb1 = False\\nloopBreak% = 0\\nfor in1 in s1:{:\\nloopBreak% = 0\\nwhile saveChr(i2) != getCharFromString(saveChr(int(77.0)), max(i2, i0))[int(87.0):]:{:\\ni1 -= i1\\ns1 = \"\"I0\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += i1\\n:}else:{:\\ni1 += ( i0 * i0 )\\nb2 = i1 \\ge i1\\nloopBreak% = 0\\nwhile b2:{:\\ns0 = s1\\nif not ( i1 - min(max(mod(len(in2),max(i2, i0)), divInt(i1,mod(i2,mod(i0,i1)))), int(4.0)) ) \\ge int(8.0):{:\\ni1 = max(( max(int(4.0), int(9.0)) - i0 ), ( divInt(int(2.0),saveOrd(\"\"S\"\".capitalize())) * mod(abs(i0),i0) ))\\nb0 = True\\ns1 = in0\\ni0 = saveOrd(\"\"9\"\"[divInt(abs(max(i1, i0)),mod(( min(i0, int(0.0)) - divInt(i1,i2) ),divInt(i2,i0))):mod(i0,i0)])\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nfor s0 in \"\"#\"\":{:\\ni1 *= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(6.0) == mod(divInt(saveOrd(in2),divInt(mod(( int(1.0) - i0 ),int(0.0)),i1)),divInt(len(\"\"o\"\"),int(4.0))):{:\\nif b1:{:\\nin1 = \"\"*\"\".capitalize()\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 *= int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(80.0)\\nres0 = int(0.0) \\l int(1.0)\\ni1 = i1\\n:}\\nloopBreak% = 0\\nfor s1 in ((s1[i0:] + \"\"?\"\"[:( abs(int(41.0)) * i0 )]) + ((saveChr(abs(mod(mod(min(len(getCharFromString(getCharFromString(s2, int(7.0))[max(mod(int(4.0),int(5.0)), i0):int(2.0)], len(s2))), int(8.0)),( saveOrd(s1.rstrip(s0[saveOrd(saveChr(i1)):])) - saveOrd(s0) )),int(51.0)))) + (s1 + \"\"@\"\".capitalize())) + in0.rstrip(\"\"8p\"\").capitalize().capitalize()).capitalize()):{:\\nin0 = (in2[:( i0 + i2 )][:int(7.0)] + in0)[abs(( i1 * int(58.0) )):]\\nloopBreak% = 0\\nfor s1 in in1:{:\\ni0 *= i2\\nif False:{:\\ni1 *= int(1.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = (s2 + \"\"O\"\").capitalize()[mod(i0,int(59.0)):min(i0, min(i2, ( i0 - i1 )))] != ((in1 + s2) + s0.capitalize()[int(06.0):][i2:][i2:i1])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [4, 6, 7, 4, 2, 6, 5, 0, 9, 8], [2, 2, 2], [1], [1, 0, 1, 2, 1, 3, 1, 2], [1], [2], [1], [0], [1, 4, 2], [1], [], [3, 2, 4, 0, 1, 0], [0], [], [0, 2], [1], [], [18], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 1, 7, 1, 1, 1, 1, 2, 1, 0, 5, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(4.0)\\ns1 = (getCharFromString(in1, i2)[int(6.0):divInt(int(7.0),abs(int(4.0)))] + \"\"s\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0, 0, 0], [1, 0], [0, 1], [], [], [0], [], [2], [0, 1, 0, 0, 1, 0, 1], [], [4, 4, 2, 1, 4, 3, 1, 1], [3, 2, 2], [5], [1], [0, 0, 3, 1, 3, 2, 1], [17, 7], [6, 14], [9], [29, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 1, 0, 1, 7, 0, 8, 3, 1, 1, 7, 2, 2, 1, 2], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i0\\ns2 = \"\"RH\"\"[:int(4.0)].capitalize().strip((\"\"^g/\"\" + \"\"9o\"\").capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 1], [6, 6, 7, 2, 0], [0, 0, 1, 1, 2], [1], [2, 0, 2, 2, 2, 0, 3, 1, 2, 3, 2, 1, 0, 3, 0, 3, 0], [0, 0, 1, 0, 0, 1], [4, 3, 1, 3], [2, 0, 1, 2], [1, 0], [5], [1, 1, 1], [], [3, 2, 1, 1, 0, 1], [], [], [2], [0, 0, 2], [16, 11], [], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 5, 0, 17, 6, 4, 4, 2, 1, 3, 0, 6, 0, 0, 1, 3, 2, 0, 1, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( i0 * ( mod(( i0 + saveOrd((\"\"Q\"\"[int(6.0):] + \"\"L\"\")) ),( len(in2) - divInt(int(6720.0),i1) )) * max(i1, len(\"\"6\"\")) ) ) \\ge i2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 2, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 3, 2, 3, 1, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 0, 2, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 2, 3, 0, 1, 2, 1, 3, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [12], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 13, 13, 13, 0, 55, 17, 12, 9, 8, 7, 2, 1, 16, 3, 1, 4, 2, 1, 1, 0, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( mod(i0,i2) != saveOrd(in1[( i2 + int(0.0) ):]) or True ) and s2 not in getCharFromString(s0[( int(7.0) + abs(abs(divInt(( divInt(int(1.0),i0) * ( len(saveChr(min(( max(int(7.0), divInt(int(7.0),i1)) - ( abs(int(1.0)) + i2 ) ), int(7.0)))) * int(7.0) ) ),i1))) ):i2], divInt(int(9.0),max(divInt(len((\"\"R\"\" + in1.rstrip())),i0), ( ( ( int(8.0) - int(5.0) ) - mod(int(0.0),i0) ) * int(4.0) ))))[max(i2, i2):divInt(saveOrd(\"\"m\"\"),i1)] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 3, 1, 6, 3, 1, 1, 1, 7, 8, 1, 2, 5, 9, 6, 7, 8, 2, 0, 0], [0, 2, 2, 2, 0, 1, 1, 2, 0, 0, 2, 2, 0, 1, 1, 2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 2, 2, 3, 0, 2, 2, 0, 2, 1, 2, 1, 3, 0, 0, 2, 1, 0, 3, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 1, 3, 2, 3, 0, 3, 2, 0, 1, 1, 2, 0, 1, 1, 3, 0, 3, 1, 3, 3, 1, 2, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 4, 0, 1, 2, 1, 1, 1, 0, 4, 1, 0, 4, 2, 4], [0, 0, 1, 1, 1, 2, 1, 2, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 4, 4, 4, 2, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 2, 0, 0], [0, 1, 0], [17, 1], [25], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 20, 20, 16, 0, 74, 21, 18, 11, 10, 7, 3, 1, 19, 3, 1, 6, 3, 2, 1, 0, 0], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nres0 = in1[:len(saveChr(i0)[max(min(mod(i2,int(2.0)), mod(int(3.0),saveOrd(s2[i2:]))), ( mod(( int(1.0) + divInt(( min(i2, ( mod(i0,( int(6.0) + ( int(3.0) - max(i1, i1) ) )) - divInt(int(1.0),i2) )) - abs(( int(1.0) * max(int(1.0), max(i0, ( ( divInt(int(7.0),int(8.0)) - divInt(int(1.0),i0) ) * i2 ))) )) ),int(2.0)) ),int(5.0)) * max(( min(i2, saveOrd((\"\"R\"\" + \"\"z\"\"[( i0 + int(9.0) ):int(67.0)].rstrip())[mod(i1,int(8.0)):int(2.0)])) + max(i1, min(int(0.0), saveOrd(s0))) ), abs(int(0.0))) )):divInt(saveOrd(\"\"B\"\"),i2)].capitalize())] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [4, 4, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [4], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:saveOrd(s2)]:{:\\nres0 = \"\"E\"\"[i0:] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [1], [], [0], [], [], [], [1], [0, 1], [0], [], [2], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 3, 2, 7, 4, 8, 2, 4, 4], [2, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0], [1], [3, 0, 2, 2, 1, 0, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 0, 0, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 3, 2, 3, 0, 1, 3, 1, 3, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 3, 1, 1, 2, 1, 0, 2, 0, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [4, 1, 1, 1, 4, 2, 4, 4, 3, 4, 4, 0, 1, 4], [2, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [3, 1, 3, 4], [1], [], [1, 2, 4, 2, 4, 4, 0, 4, 1, 1, 0, 4, 4, 0, 2, 0], [3, 2, 2, 3, 0, 0, 2, 1], [0, 2], [1, 1, 1], [1], [], [24], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 4, 1, 7, 2, 1, 2, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not saveOrd(\"\"y\"\") \\g i2:{:\\ni1 *= divInt(( int(74.0) + i1 ),i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [0], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [4, 4], [2, 2, 0], [1, 0], [0, 1], [], [], [0], [], [4, 0], [1], [0], [3, 0, 1], [], [], [], [0], [16], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 1, 0, 2, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in (s0 + \"\"Q\"\"):{:\\ni2 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(44.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [0], [0, 1], [0], [0], [], [], [2], [4], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [9, 1, 2, 4, 8, 0], [1, 0, 1, 0, 1, 0, 1], [0], [0, 3, 1, 3, 0, 0, 1, 3, 3, 2, 0, 1, 0, 1, 2, 3, 3, 2, 3, 0, 1, 2, 0, 1, 3, 1], [1, 1, 0, 0], [2, 4, 1, 0, 3, 3, 0, 4, 4, 2], [0, 2], [1, 1], [1, 2, 3, 0], [0, 1], [0], [2, 1, 4, 2, 4, 1, 4, 0], [2, 1], [], [1, 1], [3, 0], [15], [], [], [19]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 1, 7, 0, 2, 0, 0, 1, 2, 1, 5, 2, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 \\le abs(int(9.0))\\nloopBreak% = 0\\nfor s1 in \"\":P\"\"[:saveOrd(saveChr(i0)[:i1].capitalize())]:{:\\ni0 = int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1], [1, 2, 1, 2, 2, 1, 1], [2, 0, 1], [1, 1, 2, 2], [0], [], [], [], [2], [4, 4], [1, 0], [0, 0], [], [1], [], [0], [0], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 8, 9, 3, 6, 8, 9, 7, 3, 0, 0, 8, 4, 0, 5], [1, 0, 2, 1, 0, 2, 1, 2, 2, 1, 2, 1, 1, 0, 1, 0], [1, 1], [3, 2, 0, 1, 3, 1, 3, 1, 3, 1, 0, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0, 2, 2, 1, 3, 0, 3, 2, 1, 3, 1, 3, 3, 3, 0, 3, 3, 2, 2, 3, 2, 0, 2, 1, 3, 1, 0, 0, 0, 2, 3, 0, 1, 0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [4, 1, 2, 3, 1, 1, 4, 0, 1, 2, 2, 3, 0, 3, 0, 1, 4], [2, 1, 2, 2, 0, 1], [0, 1, 1, 1, 0, 1], [1, 2, 4, 2, 1, 1, 4, 4, 4, 5], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], [0], [0, 4, 3, 4, 4, 3, 4, 1, 3, 0, 4, 4, 1, 1, 2, 3, 0, 3, 4, 4, 1, 2, 2, 1, 0, 4, 1, 0, 2, 0, 1, 4, 0, 1], [1, 3, 3, 0, 3, 3, 2, 3, 1, 0], [5, 0, 2, 3, 3], [0, 0, 0, 2], [1, 0, 2, 3, 0, 1, 2, 0, 3, 0, 1, 3], [7, 15, 10, 22], [11, 16, 3], [4, 7], [23, 9, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 1, 0, 0, 0, 0, 1, 2, 1, 0, 1, 0, 1, 1, 15, 15, 16, 2, 54, 10, 17, 6, 6, 10, 12, 1, 34, 10, 5, 4, 12, 4, 3, 2, 3], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= saveOrd(s1)\\nloopBreak% = 0\\nwhile divInt(i0,int(0.0)) \\le max(int(8.0), abs(int(9.0))):{:\\ni2 -= len(saveChr(int(36.0)))\\nloopBreak% = 0\\nfor s2 in ((getCharFromString(\"\"l\"\", i1) + (in1 + \"\"H\"\".lstrip(\"\"4\"\").strip())).lstrip().strip((s2 + (\"\">\"\".lstrip(\"\"P\"\"[i0:max(max(int(8.0), ( i2 * int(9.0) )), i1)][int(7.0):i2]).capitalize() + s1))[mod(mod(int(30.0),saveOrd(saveChr(i2))),min(( int(0.0) * max(int(8.0), abs(abs(len(\"\"q\"\")))) ), i1)):min(len(s1), ( mod(min(divInt(i2,mod(int(4.0),max(int(0.0), i1))), i1),i0) + ( saveOrd(in1[i1:]) - int(5.0) ) ))]) + \"\"7\"\"):{:\\nif True:{:\\nin1 = getCharFromString(in1, i0)\\n:}\\nin2 = \"\"K&Wd_\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1], [2, 1, 2, 2, 1, 0, 1], [1, 0, 1], [2, 0, 1, 0], [0], [0], [], [], [1, 3], [2, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [], [1, 0], [], [], [1, 0], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1], [3, 3, 8, 3, 9, 6, 1, 2, 9, 8, 2, 3, 5], [2, 0, 0, 0, 0, 0, 2, 1, 1, 0, 2], [0], [0, 3, 3, 3, 2, 3, 2, 0, 2, 3, 2, 1, 0, 1, 1, 2, 3, 0, 0, 1, 0, 3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1], [1, 1, 4, 4, 4, 0, 0, 4, 0], [0], [1, 1, 0, 1], [3, 1, 0, 4, 5, 1, 3, 3], [1, 0, 0, 1, 0, 1], [0], [0, 3, 2, 0, 0, 1, 1, 3, 3, 0, 2, 0, 1, 0], [], [], [0, 0], [0, 0, 1, 0, 0, 2], [5, 8, 22, 18], [20], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 1, 1, 0, 0, 2, 4, 4, 4, 0, 0, 0, 0, 2, 13, 13, 11, 1, 33, 5, 9, 1, 4, 8, 6, 1, 14, 0, 0, 2, 6, 4, 1, 1, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i2 == max(max(saveOrd(in0), mod(saveOrd((s1[( i0 + mod(saveOrd(s0),divInt(int(3.0),i0)) ):int(3.0)] + \"\"F\"\")),int(8.0))), mod(min(i0, i0),int(3.0))):{:\\nin1 = \"\"IuW\"\"\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in ((s1 + in0[i0:min(saveOrd(\"\"S3\"\"), i2)]) + in0):{:\\nif int(9.0) \\l min(int(61.0), i1):{:\\nb1 = int(2.0) \\l i1\\ni0 = int(9.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = int(8235.0) \\l i2\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 2], [0], [0, 0, 2], [0], [5], [3, 0], [0], [], [], [1, 1, 1], [9, 5, 7], [1, 0], [], [2, 1, 2, 1, 1, 2, 3, 0, 3], [1, 1], [1, 1, 4], [0], [0, 1], [0, 1], [0, 0, 1], [], [1, 4, 0, 0], [1, 3], [3], [], [1, 0, 1], [9], [19, 7], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 3, 0, 1, 2, 1, 0, 0, 3, 3, 0, 0, 5, 2, 0, 0, 2, 0, 3, 0, 2, 1, 0, 0, 3, 1, 2, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( b2 and \"\"tJh\"\".endswith(saveChr(divInt(int(9.0),mod(int(5.0),int(7.0))))) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 1, 2, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 3], [1, 0, 4], [2, 2, 0, 1, 1], [0, 0], [17, 21], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 9, 0, 38, 12, 8, 4, 8, 6, 2, 1, 16, 4, 3, 4, 2, 2, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):].startswith(saveChr(mod(int(0.0),i0))[:mod(int(7.0),int(5.0))].rstrip()[( divInt(abs(i2),i2) + divInt(divInt(int(7.0),i0),( min(( i1 + divInt(len((\"\"R\"\" + s0.rstrip(\"\"V\"\")).lstrip()),( min(i2, mod(max(int(6.0), i1),int(1.0))) * int(7.0) )) ), i2) - i0 )) ):divInt(int(7.0),abs(int(9.0)))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [2], [2, 1], [], [], [], [], [], [], [2], [], [0], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [8, 2, 2, 9, 7, 0, 7, 3, 3, 5, 0, 2, 6, 0], [0, 2, 0, 1, 1, 2, 1], [0], [2, 2, 2, 2, 1, 1, 1, 3, 3, 0, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 2, 3, 1, 1, 3, 1, 0, 2, 3, 2, 1, 0, 3, 1, 1, 3, 2, 1, 1, 0, 1, 3, 0, 0], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [4, 2, 0, 3, 3, 0, 4, 4, 3, 2, 4, 4, 0, 4, 0, 2, 2], [1, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0], [1, 0, 3, 0, 1, 1, 4, 3], [0, 1, 1, 1, 1], [], [2, 0, 4, 2, 3, 1, 2, 4, 4, 1, 0, 0, 4, 2, 1, 1, 4, 4, 0, 0, 0, 4, 2, 0], [2, 1, 3, 0, 1, 3, 0], [2, 2], [2, 0, 1, 1, 0], [0, 0, 0, 1, 2], [9, 22, 11], [6], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 7, 1, 46, 11, 17, 4, 7, 8, 5, 0, 24, 7, 2, 5, 5, 3, 1, 1, 0], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s0[mod(( divInt(( int(8.0) - int(22.0) ),int(9.0)) - saveOrd((\"\"JW\"\" + saveChr(abs(i0))[:min(mod(len(\"\"L\"\".strip()),len(in0)), min(divInt(saveOrd(s0),saveOrd(getCharFromString(\"\"g\"\"[:mod(len(\"\"1\"\"),abs(saveOrd(saveChr(mod(saveOrd(s1.strip()),int(7.0))))))], int(0.0)))), min(int(7.0), i2)))])[( saveOrd(s1) + divInt(int(3.0),i0) ):min(int(3.0), int(5.0))].capitalize()) ),abs(( int(02.0) - int(6.0) ))):]\\nloopBreak% = 0\\nwhile in1 in getCharFromString(in0[i1:int(0.0)], abs(i1)):{:\\ni2 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 1, 1], [2, 0, 0, 0, 2, 1], [1, 1], [1, 0, 1, 2], [], [0, 0, 0], [], [], [2], [1, 0, 2], [1, 1, 1], [0, 0, 0], [], [], [], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 4, 1, 7, 1, 7, 7, 2, 8, 0, 2], [0, 1, 0, 2, 1, 0, 2, 2, 2, 1, 1, 1, 0, 0, 2, 0, 2, 1, 0, 1], [1, 1], [3, 0, 2, 2, 3, 1, 1, 0, 0, 0, 3, 3, 1, 0, 2, 3, 3, 1, 3, 0, 1, 0, 3, 3, 0, 1, 1, 3, 3, 0, 3, 0, 3, 0, 3, 3, 3, 2, 3, 0, 0, 3, 3, 2, 1, 1, 3, 1, 2, 0, 0, 0, 2, 1, 0, 1, 3, 0], [1, 1, 1, 1, 1, 0, 0], [4, 0, 3, 4, 3, 2, 0, 4, 1, 2, 4, 0, 3, 0, 1, 2, 3, 2, 1, 4, 4], [1, 1, 0, 2], [1, 0, 1, 0, 1], [4, 2, 1, 4, 1, 1, 2], [0, 0, 1, 1, 1, 1], [], [4, 4, 0, 2, 3, 2, 0, 2, 0, 2, 2, 0, 2, 0, 4, 1, 4, 2, 4, 3, 0, 4, 4, 1, 2, 2, 4, 4, 1, 2, 4, 4, 1], [2, 1, 3, 1, 2, 3, 0, 1, 3, 1, 2], [2, 1, 4], [1, 2, 0, 1, 1, 0, 1, 0, 1, 2], [3, 0, 0, 3, 1, 2], [9, 1], [4], [5], [12, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 0, 3, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 2, 12, 12, 20, 2, 58, 7, 21, 4, 5, 7, 6, 0, 33, 11, 3, 10, 6, 2, 1, 1, 2], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(saveChr(i0).capitalize()) \\g mod(divInt(min(int(7.0), int(1.0)),i1),i0):{:\\ni2 -= i1\\n:}else:{:\\nb2 = len(in1) \\l saveOrd((s2[int(4.0):] + s1[i0:mod(len(in1[:abs(int(1.0))][:min(i2, int(7.0))]),i2)])[:saveOrd(s1[max(i2, int(1.0)):int(7.0)])])\\ni1 -= abs(saveOrd(\"\")JB\"\".strip()))\\nif i1 == min(i1, len(saveChr(i0))):{:\\ns1 = (s2 + getCharFromString(\"\"<\"\", min(max(abs(divInt(len(saveChr(i0)[:i2][abs(max(mod(int(7.0),int(2.0)), saveOrd(\"\"e\"\".rstrip(saveChr(int(8.0))[( i0 + i2 ):])))):i1]),( int(0.0) * i0 ))), int(2.0)), saveOrd(\"\"5\"\".capitalize()))).rstrip()).capitalize()[:i1]\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 2, 2, 2, 2, 1, 1, 1, 0, 1], [0, 2, 1, 0], [1, 0, 2, 0, 1, 1, 0], [0, 0], [0, 0, 0], [], [], [3, 2, 1], [0, 0], [1, 0, 1, 2, 2], [0, 0], [2, 5], [1], [], [0], [1], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 2, 0, 4, 7, 2, 7, 7, 9, 6, 5, 8, 0, 7, 0, 3, 0, 1, 3, 6], [2, 0, 2, 1, 0, 0, 0, 2, 1, 2, 1, 2, 0, 0, 2, 1], [0, 0, 0], [2, 1, 1, 0, 2, 0, 1, 0, 2, 3, 0, 0, 2, 1, 3, 2, 2, 3, 1, 0, 2, 2, 1, 1, 2, 1, 0, 0, 2, 2, 0, 3, 1, 3, 0, 2, 1, 0, 2, 0, 3, 1, 2, 2, 1, 2, 0, 1, 2, 3, 1, 3, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [3, 3, 4, 0, 0, 4, 4, 4], [2, 2, 0, 2, 1, 1, 0, 1, 1, 1, 0, 2], [1, 0, 0, 1, 0], [1, 0, 0, 2, 2, 5, 5, 1, 4, 1, 5], [1, 1, 1, 1, 1], [0, 0], [4, 0, 0, 4, 0, 4, 0, 0, 0, 1, 2, 1, 2, 1, 2, 3, 1, 2, 0, 4, 4, 1, 2, 0], [3, 3, 1, 1, 0], [1, 5], [2, 2, 1, 1, 1], [3, 1, 2, 3, 0], [9], [2], [1], [9, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 4, 7, 2, 3, 0, 0, 3, 2, 5, 2, 2, 1, 0, 1, 1, 20, 20, 16, 3, 53, 17, 8, 12, 5, 11, 5, 2, 24, 5, 2, 5, 5, 1, 1, 1, 2], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(int(4.0),int(204.0))\\nres0 = i0 \\l ( i2 * int(727.0) )\\nloopBreak% = 0\\nfor s1 in s0.rstrip():{:\\nloopBreak% = 0\\nwhile True:{:\\nif i1 \\l divInt(len(s0),i0):{:\\nloopBreak% = 0\\nfor s2 in s2.strip(saveChr(i0)):{:\\nin2 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = s1 == in1\\n:}else:{:\\ni0 = ( int(7.0) * len(\"\"&\"\") )\\n:}\\ni2 = ( ( saveOrd(\"\"c\"\"[int(9.0):]) + i1 ) * ( divInt(int(6.0),int(5.0)) - ( int(8.0) - i2 ) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = \"\"1\"\"[i1:].endswith((\"\"<\"\" + s1[:( ( i2 + min(int(0.0), min(i0, ( int(7.0) - i0 ))) ) - ( i2 - saveOrd(saveChr(int(0.0))) ) )])[:( mod(int(30.0),( i1 + int(1.0) )) * divInt(saveOrd(getCharFromString(\"\"J\"\", int(3.0))),saveOrd(in2[:int(6.0)])) )])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}]