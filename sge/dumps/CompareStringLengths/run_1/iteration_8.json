[{"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i2,int(7.0))))[mod(int(5.0),min(i2, ( divInt(( int(7.0) + i0 ),divInt(len(saveChr(( i1 + ( min(divInt(int(2.0),i2), ( max(int(1.0), i1) * int(7.0) )) - int(7.0) ) ))),i2)) + i0 ))):divInt(int(9.0),abs(int(8.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 38, 11, 8, 5, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(i0, ( divInt(( int(5.0) + i1 ),divInt(len(saveChr(( i2 * min(max(( int(7.0) - i1 ), divInt(abs(int(7.0)),i2)), int(1.0)) ))),int(7.0))) + i0 )) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 9, 8, 5, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i1:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 3, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 1, 1, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 8, 0, 27, 7, 6, 3, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i1:i2], abs(mod(i2,int(0.0))))[divInt(( min(i0, int(7.0)) + divInt(( int(5.0) - i1 ),int(7.0)) ),len(saveChr(( i2 * divInt(min(int(7.0), int(3.0)),i1) )))):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 0, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 1, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 4, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 33, 9, 8, 6, 3, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(i0, ( ( ( int(0.0) + i1 ) * divInt(saveOrd((\"\"R\"\" + in1.rstrip()).capitalize()),( i2 - min(max(( int(7.0) + i1 ), divInt(abs(int(2.0)),i2)), int(1.0)) )) ) * int(7.0) )) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 2, 2, 0, 3, 0, 1, 3, 1, 3, 1, 0, 2, 2, 2, 0, 2, 1, 2, 3, 2, 0, 2, 0, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1, 3], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 12, 2, 5, 0, 2, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(mod(mod(i0,abs(i2)),int(0.0)))[saveOrd(s0[int(7.0):]):len(saveChr(int(5.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 6, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 0, 34, 9, 8, 5, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(in1[i0:i2], abs(int(0.0)))[mod(int(7.0),( int(5.0) + min(i2, ( divInt(( int(7.0) - i0 ),divInt(len(saveChr(( int(7.0) * min(max(( int(6.0) - i1 ), divInt(abs(int(7.0)),i2)), int(4.0)) ))),int(9.0))) + i0 )) )):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 6, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 0, 3, 0, 0, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(in1[i0:i2], abs(int(0.0)))[i1:int(9.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 6, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 1, 2, 0, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 0, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[i0:int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 3, 0, 0, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 0, 3, 2, 0, 2, 3, 2, 3, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 0, 1, 2, 1], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 4, 0, 12, 2, 5, 0, 2, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(mod(abs(i0),i0))[i2:len(s0[:mod(int(0.0),len(saveChr(i2)))])]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 1, 2, 2, 5, 9, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2, 1, 0, 2], [0, 1, 1], [3, 3, 1, 3, 0, 2, 3, 1, 3, 2, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 2, 2, 0, 0, 2, 2, 3, 0, 3, 2, 1, 3, 0, 2, 1, 0, 1, 3, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1], [3, 3, 1, 0, 3, 2, 1, 0, 1, 1, 4, 2, 2], [0, 0, 1, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 0, 0, 0], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 19, 16, 0, 70, 23, 13, 9, 14, 8, 1, 1, 17, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[int(7.0):max(i0, mod(min(int(7.0), len((getCharFromString(in1.rstrip(), divInt(( i2 + divInt(( ( int(1.0) + i2 ) - ( abs(( i0 + divInt(i1,( int(2.0) + int(2.0) )) )) * divInt(max(int(5.0), i2),int(9.0)) ) ),int(7.0)) ),i1)) + \"\"R\"\").capitalize())),i2))][divInt(int(9.0),min(int(8.0), max(i0, mod(( ( int(5.0) - int(0.0) ) - divInt(int(4.0),i0) ),int(8.0))))):divInt(divInt(mod(i0,i1),mod(( max(i2, saveOrd(in0)) * divInt(int(59.0),abs(i1)) ),divInt(int(9.0),i0))),int(2.0))][abs(int(2.0)):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 4, 1, 4, 0, 1, 0], [0, 0, 3], [1, 0], [2, 2, 0, 2, 1], [0, 3], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 10, 0, 5, 0, 0, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[abs(int(7.0)):], i0)[min(i2, int(7.0)):abs(int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 5, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 3, 1, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 2, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 33, 12, 5, 6, 6, 6, 1, 1, 11, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[abs(mod(i0,divInt(i2,int(7.0)))):], min(int(7.0), ( i0 + divInt(( ( int(5.0) + i0 ) - ( ( divInt(i1,( i2 - divInt(int(5.0),i1) )) * divInt(len(\"\"R\"\"),int(2.0)) ) * i2 ) ),int(5.0)) )))[int(7.0):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 9, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 1, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(saveChr(i0), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 2, 1, 2, 7, 8, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 0, 2, 1, 2, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 2, 1, 2, 1, 0, 1, 1, 1, 3], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 13, 0, 52, 17, 10, 9, 8, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(9.0))))[( int(7.0) + min(i0, ( i1 + divInt(int(5.0),( mod(( ( i2 * len(saveChr(divInt(int(7.0),int(2.0)))) ) - i1 ),( min(int(1.0), i2) + max(i0, i0) )) * i1 )) )) ):divInt(int(2.0),abs(divInt(max(i2, ( ( ( mod(int(7.0),divInt(int(8.0),i2)) - int(8.0) ) - int(5.0) ) * int(0.0) )),saveOrd((\"\"R\"\" + in1.rstrip())))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 8, 2, 2, 0, 2, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),int(4.0)):mod(i0,int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 2, 2, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[divInt(divInt(divInt(int(5.0),i0),divInt(( int(7.0) + i0 ),( abs(mod(i1,( min(divInt(len(saveChr(i2)),mod(min(int(6.0), i1),int(1.0))), int(7.0)) + i2 ))) * i0 ))),( int(7.0) - max(int(9.0), abs(i0)) )):( ( mod(int(8.0),int(5.0)) + divInt(int(0.0),i2) ) * int(4.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 11, 0, 49, 17, 8, 6, 11, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 3, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 1, 1, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(saveChr(i1), i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 6, 1, 7, 2, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 1, 1, 3, 1, 3, 0, 0, 2, 1, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 0, 16, 3, 5, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(max(mod(i0,mod(int(3.0),int(7.0))), min(int(5.0), len(s0[i2:]))))[i2:( int(7.0) + int(6.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 3, 2, 3, 1, 0, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 2, 1, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 2, 2, 0, 2, 3, 3, 2, 0, 3, 0, 0, 2, 2, 1, 0, 0, 3, 2, 0, 2, 3, 2, 3, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 0, 1, 2, 1], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 11, 0, 33, 9, 9, 3, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(mod(mod(i0,( abs(len(s0[:divInt(i2,len(saveChr(i2)))])) + i2 )),divInt(divInt(int(0.0),i1),i2)))[min(( i1 - ( max(divInt(abs(i2),i0), max(int(7.0), i0)) - int(5.0) ) ), int(7.0)):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 0, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 8, 5, 5, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 2, 0, 2, 0, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 0, 2, 2, 0, 2, 0, 2, 1, 2, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [2, 0, 1, 1, 2, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 10, 2, 2, 0, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[int(7.0):], divInt(i0,divInt(i2,int(8.0))))[i0:int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 2, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 33, 9, 8, 4, 5, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i2,int(7.0))))[mod(int(5.0),min(i2, ( divInt(( int(7.0) + i0 ),divInt(len(saveChr(min(i1, ( abs(( int(2.0) - i2 )) * divInt(abs(int(1.0)),i1) )))),int(7.0))) - int(7.0) ))):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 34, 10, 6, 6, 4, 6, 1, 1, 14, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[:int(97.0)][int(5.0):i0][mod(divInt(int(2.0),abs(int(2.0))),min(i2, ( divInt(( int(5.0) + i2 ),( len(getCharFromString((\"\"R\"\" + saveChr(( i0 + ( i1 - divInt(int(7.0),i2) ) ))), ( min(int(5.0), i1) - int(9.0) ))) + int(8.0) )) * i2 ))):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 9, 7, 1, 1, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 2], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [2, 0, 2, 0, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 2, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):( i2 * min(( int(7.0) + int(1.0) ), i2) )].capitalize()[:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0], [0, 1, 1], [3, 3, 2, 2, 0, 2, 0, 1, 2, 2, 0, 0, 0, 2, 2, 0, 0, 2, 3, 3, 0, 2, 3, 2, 3, 1, 2, 3, 1, 0, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 2, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [3, 3, 2, 0, 3, 4, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 11, 0, 34, 11, 7, 1, 10, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(mod(i0,divInt(i2,int(0.0))),( divInt(i2,i0) + i1 )):divInt(divInt(i2,i1),mod(abs(min(i2, divInt(len(saveChr(divInt(saveOrd((\"\"R\"\" + in1.rstrip())),int(7.0)))),mod(max(int(5.0), i0),int(7.0))))),int(8.0)))].capitalize()[i0:i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(( int(7.0) + int(5.0) ),int(7.0))].capitalize()[abs(i2):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 4, 1, 0, 6, 1, 1, 10, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[i0:abs(saveOrd(in2[( i1 + int(07.0) ):]))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 2, 3, 1, 1, 2, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 0, 32, 8, 7, 5, 3, 6, 1, 1, 14, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s2[i0:i2], int(0.0))[mod(abs(int(9.0)),int(5.0)):( min(i2, ( divInt(( int(7.0) + i0 ),divInt(i1,( i2 + len((\"\"R\"\" + saveChr(min(int(7.0), int(1.0))))[:i2]) ))) * ( max(int(0.0), i2) - int(7.0) ) )) + int(9.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 0, 0, 2, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 3, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 12, 0, 50, 17, 9, 10, 7, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], divInt(( i2 + int(0.0) ),( int(7.0) + abs(i0) )))[divInt(( divInt(int(5.0),i1) * ( min(( i2 - len(saveChr(len((\"\"R\"\" + in1.rstrip())))) ), ( int(7.0) + i1 )) * ( max(int(7.0), divInt(int(1.0),int(7.0))) - i2 ) ) ),i0):divInt(int(7.0),abs(( max(i0, ( ( divInt(int(9.0),int(8.0)) - mod(int(5.0),i2) ) * int(0.0) )) + i2 )))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 3, 2, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in0[mod(int(0.0),i0):( i2 + int(7.0) )].capitalize()[( int(5.0) + abs(i2) ):int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i1:int(07.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 1, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 7, 0, 32, 8, 8, 5, 3, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + max(i0, int(5.0)) ):( mod(int(7.0),i1) + ( len(saveChr(mod(int(7.0),min(max(( int(9.0) * i2 ), ( abs(int(7.0)) - i1 )), int(7.0))))) + int(9.0) ) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 2, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 1, 2, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 2, 1, 2], [0, 0, 2, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(i0)[i2:abs(mod(int(0.0),( ( int(7.0) + min(i2, divInt(( divInt(int(5.0),i0) + ( len(s0[( i1 * abs(max(divInt(int(7.0),i2), ( abs(divInt(i1,int(7.0))) * int(2.0) ))) ):i2]) - i0 ) ),divInt(int(7.0),max(( abs(i0) * ( ( mod(int(7.0),int(9.0)) - divInt(int(8.0),i1) ) - int(5.0) ) ), int(0.0))))) ) * i0 )))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 12, 0, 51, 17, 10, 9, 8, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 0, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 31, 9, 6, 5, 4, 7, 1, 1, 15, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[:int(5.0)][i0:i1][mod(i2,int(7.0)):len(getCharFromString((\"\"R\"\" + saveChr(int(5.0))), min(i0, divInt(( divInt(int(2.0),i1) + ( len(in1) + ( i2 - ( i1 - ( int(2.0) + i2 ) ) ) ) ),divInt(min(int(5.0), i0),int(7.0))))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 3, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(mod(int(0.0),i0)).capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 9, 8, 4, 5, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[divInt(int(7.0),min(i0, ( divInt(( int(5.0) + i1 ),divInt(len(saveChr(( i2 + min(max(( int(7.0) * i1 ), divInt(abs(int(7.0)),i0)), int(1.0)) ))),int(7.0))) - i0 ))):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 2, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1, 3, 2], [0, 0, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 12, 0, 52, 18, 8, 7, 11, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[mod(int(0.0),i0):divInt(i2,( divInt(int(7.0),( i2 + i0 )) + divInt(( int(5.0) * i1 ),divInt(abs(divInt(i2,( min(mod(len(saveChr(int(7.0))),divInt(min(int(7.0), i1),int(1.0))), int(7.0)) - i2 ))),i0)) ))], ( int(7.0) * max(int(9.0), min(i0, ( ( divInt(int(8.0),int(5.0)) * mod(int(0.0),i2) ) - int(4.0) ))) ))[mod(int(8.0),i2):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 0, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 1, 3, 1, 4, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 6, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 0, 3, 0, 0, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(int(0.0)))[i2:int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 1, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 3, 0, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 0, 1, 2, 1], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 11, 0, 34, 9, 9, 3, 6, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(mod(abs(i0),mod(i2,len(saveChr(( int(0.0) + len((\"\"R\"\" + s0.rstrip())) ))[:i2][:i2]))))[divInt(mod(int(7.0),i1),divInt(min(( i1 - ( max(divInt(abs(i1),i2), max(int(5.0), i0)) - int(7.0) ) ), int(6.0)),i0)):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 0, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2, 2, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4, 3, 5], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 11, 1, 49, 15, 10, 9, 6, 9, 1, 1, 15, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in2[i0:int(07.0)]\\ni1 = abs(mod(i1,int(5.0)))\\nin1 = in0[mod(int(7.0),min(i1, ( divInt(( int(2.0) + i0 ),( len(getCharFromString((\"\"R\"\" + saveChr(min(i2, ( max(( int(1.0) + i1 ), divInt(abs(int(7.0)),i1)) * int(7.0) )))), int(9.0))) - i2 )) + ( divInt(int(8.0),max(int(5.0), len(in2))) * i2 ) ))):divInt(( ( int(0.0) - int(4.0) ) - ( int(8.0) * i0 ) ),int(59.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 1}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 3, 0, 0, 0, 0, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 3, 0, 0, 6, 0, 1, 11, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in0[saveOrd(saveChr(i0)):i2].rstrip()[:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 1, 2, 2, 5, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 3, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 0, 1], [0, 0, 1, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 7, 0, 32, 9, 7, 6, 3, 7, 0, 1, 15, 3, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[int(7.0):][abs(i0):mod(i2,int(7.0))][min(int(1.0), len((saveChr(i2) + in1.rstrip()).capitalize())):( ( divInt(int(2.0),i0) + ( abs(( i1 + ( i2 - ( int(2.0) + int(5.0) ) ) )) + divInt(max(int(7.0), i1),int(4.0)) ) ) * int(9.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 2, 1, 2, 2, 3, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 0, 3, 1, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 31, 8, 7, 4, 4, 6, 1, 1, 14, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[:i1][i2:abs(mod(divInt(int(0.0),( divInt(min(i2, int(7.0)),( divInt(int(5.0),i0) + int(7.0) )) - len(getCharFromString((\"\"R\"\" + saveChr(( i1 * ( i2 - abs(int(7.0)) ) ))), i1)) )),i2))][max(int(3.0), i0):int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 3, 2, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s1[mod(int(0.0),i0):( i2 + int(1.0) )].capitalize()[( int(5.0) + abs(i2) ):int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 12, 3, 4, 2, 1, 7, 0, 1, 10, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[( i0 + abs(mod(i1,int(0.0))) ):( int(7.0) + saveOrd(in1[i1:]) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 8, 2, 2, 0, 2, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[mod(int(0.0),i1):mod(int(7.0),int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 6, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 0, 3, 0, 0, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(in1[i0:i2], abs(int(0.0)))[i2:int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 11, 1, 49, 15, 10, 9, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i1:], int(0.0))[abs(mod(i1,int(7.0))):mod(int(5.0),min(i1, ( divInt(( int(7.0) + i1 ),( len(saveChr(min(i0, ( max(( int(2.0) + i2 ), divInt(abs(int(1.0)),i1)) * int(7.0) )))) - int(7.0) )) + i1 )))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = ( divInt(int(9.0),max(int(8.0), abs(i1))) * divInt(( ( int(5.0) - int(0.0) ) - ( int(4.0) * i2 ) ),int(8.0)) )\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 8, 2, 2, 5, 7, 5, 5, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 2, 0, 1, 0, 1, 3, 2, 3, 0, 2, 1, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 2, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 11, 0, 49, 15, 8, 8, 7, 7, 0, 1, 15, 2, 0, 6, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in2[int(7.0):][mod(i0,int(7.0)):i2][int(8.0):max(divInt(min(i2, ( int(2.0) + divInt(int(2.0),i0) )),( len((saveChr(( i1 + ( i2 - ( int(5.0) - i1 ) ) ))[:divInt(min(int(7.0), ( int(5.0) + int(5.0) )),i2)] + in1).capitalize()) * i0 )), divInt(int(8.0),max(int(5.0), min(i0, divInt(mod(( int(0.0) - int(4.0) ),( int(8.0) - i0 )),int(59.0))))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 3, 0, 1, 2, 2, 1, 0, 1, 3, 1, 0, 0, 3, 1, 1, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 1, 3, 0, 1, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0, i1)[i2:abs(mod(i2,int(0.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 4}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 4}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 9, 1, 2, 0, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], int(0.0))[mod(i2,int(9.0)):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 0, 33, 9, 7, 5, 4, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(saveChr(abs(int(1.0)))[:i0][mod(i1,int(7.0)):], min(int(5.0), len((\"\"R\"\" + s0.rstrip()))))[int(2.0):divInt(( divInt(int(2.0),i2) + ( min(( i0 + ( i1 - ( int(5.0) - i2 ) ) ), divInt(max(int(7.0), i1),int(5.0))) + int(9.0) ) ),i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 7, 6, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 0, 34, 8, 9, 5, 3, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s1[abs(i0):min(int(2.0), i2)], int(7.0))[mod(int(5.0),len(saveChr(i2))):( ( divInt(int(7.0),i0) + ( min(divInt(int(7.0),max(abs(( int(6.0) - i1 )), ( max(int(7.0), i2) * int(4.0) ))), int(9.0)) - i0 ) ) + i2 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 2, 2, 0, 1, 2, 2, 1, 0, 1, 1, 2, 2, 0, 1, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 2, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 2, 1, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 31, 10, 5, 5, 5, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i1:i2], mod(( i2 + int(0.0) ),divInt(divInt(int(7.0),i0),int(5.0))))[int(7.0):( divInt(i1,int(0.0)) + abs(( i2 * ( min(divInt(int(3.0),i1), ( len(saveChr(int(7.0))) - i2 )) + int(7.0) ) )) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 4, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 1, 2, 1, 3, 2, 0, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 3, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 3, 3, 1, 2, 6, 0, 1, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:int(8.0)][mod(int(7.0),len(in0[mod(i1,i1):])):] not in s0[:( int(4.0) + abs(i1) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 154}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 1, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 3, 0, 2, 3, 2, 3, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 0, 1, 2, 0, 1, 2, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 2, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 2], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[int(7.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 167}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 0, 0, 2, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 4, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 5, 0, 10, 0, 3, 0, 0, 4, 1, 1, 10, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(len(in1), i0):]:{:\\nres0 = in1[int(07.0):] not in getCharFromString(saveChr(saveOrd(\"\"R\"\"[i2:i2]))[int(5.0):i2], i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 166}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 3, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [4, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 7, 0, 4, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1[max(int(07.0), abs(min(i0, int(5.0)))):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 166}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 3, 1, 1, 2, 0, 3, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 1, 2, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 33, 10, 7, 7, 3, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[( max(int(7.0), int(7.0)) + mod(i0,abs(min(int(5.0), max(i2, ( divInt(( int(2.0) + i2 ),( min(( i0 - ( i1 - divInt(int(2.0),i2) ) ), ( max(int(5.0), i1) + int(7.0) )) * int(5.0) )) - i2 ))))) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 167}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 3, 1, 0, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 5, 0, 15, 2, 4, 0, 2, 4, 0, 1, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(len(in1), i1):]:{:\\nres0 = in1[int(07.0):] not in getCharFromString(saveChr(int(5.0))[mod(abs(int(7.0)),i2):i2], min(i2, divInt(i2,int(2.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 166}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 9, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1[mod(int(7.0),i0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 166}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 1, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = int(0.0) != len(in1[int(7.0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 166}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 3, 1, 0, 2, 0, 3, 3, 1, 3, 0, 2, 0, 2, 1, 3, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 1, 2, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 33, 9, 8, 6, 3, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[( max(int(7.0), i0) + mod(i2,abs(min(int(7.0), max(i2, ( i0 + divInt(int(5.0),min(( max(( i2 - ( i2 - ( int(2.0) + i1 ) ) ), divInt(min(int(2.0), i2),int(5.0))) * int(7.0) ), i0)) ))))) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 167}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 2, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[int(6.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 168}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 2, 0, 1, 6, 0, 1, 9, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in1[len(getCharFromString(s0, mod(int(84.0),i0))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 202}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 2], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 2, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 8, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 1, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[max(i0, int(0.0)):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 2, 2, 0, 1, 3, 2, 1, 0, 1, 2, 2, 2, 0, 1, 3, 2, 0, 2, 3, 2, 1, 0, 2, 0, 3, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i1):]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 2, 3, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 10, 1, 3, 0, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s2[i0:i2], int(0.0))[mod(abs(int(9.0)),int(5.0)):int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 2, 2, 0, 1, 2, 2, 1, 2, 1, 2, 2, 2, 0, 1, 3, 2, 0, 2, 3, 1, 1, 0, 0, 1, 3, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [0, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 8, 0, 30, 10, 5, 5, 5, 7, 1, 1, 16, 4, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s0):] not in getCharFromString(s0[i1:i2], mod(divInt(i2,int(0.0)),( divInt(int(7.0),( int(5.0) + divInt(( ( i0 + int(7.0) ) * saveOrd(saveChr(divInt(i1,( min(int(0.0), int(3.0)) - i2 )))) ),i1) )) + int(7.0) )))[len((in1.lstrip().rstrip() + \"\"R\"\")):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 0, 0, 5, 1, 2, 0, 1, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in0[len(saveChr(mod(int(84.0),int(5.0)))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 234}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 1, 2, 2, 5, 3, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 1, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 3, 0, 2, 0, 1, 3, 1, 3, 0, 3, 2, 2, 1, 1, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 2, 0, 3, 2, 1, 0, 1], [0, 0, 0, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 0, 3, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[min(int(7.0), abs(i0)):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(len(in1)):]:{:\\nres0 = in1[abs(i0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 9, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1], [1], [3, 3, 2, 1, 0, 2, 0, 0, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 0, 3, 2, 3, 0, 3, 3, 1, 0, 1, 3, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 6, 6, 12, 0, 34, 8, 8, 4, 4, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[abs(mod(int(0.0),i0)):] not in in0:{:\\nres0 = ( divInt(i2,i2) != ( int(7.0) + int(5.0) ) or ( getCharFromString(s0[i0:i1], ( divInt(int(7.0),i2) + divInt(abs(( i1 * i2 )),min(( len(saveChr(i0)) - abs(max(int(2.0), i0)) ), int(1.0))) ))[abs(i2):i1].endswith((\"\"R\"\" + in1.rstrip())) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[abs(mod(int(1.0),i2)):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 234}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 2, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 9, 0, 38, 12, 8, 5, 7, 6, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(len(in1), mod(int(0.0),i0)):]:{:\\nres0 = in1[:( ( int(7.0) + mod(int(1.0),abs(i0)) ) + i2 )][divInt(divInt(int(7.0),i0),( min(( i1 * divInt(len(getCharFromString(in0, ( min(i2, divInt(max(int(6.0), i1),int(1.0))) - int(7.0) ))),i2) ), i0) + mod(int(7.0),abs(int(9.0))) )):].capitalize() not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 3, 1, 3, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[( ( int(0.0) + i0 ) - ( i2 * i1 ) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 5, 9, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 0, 0, 0, 3, 1, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 3, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 3, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 6, 2, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 3, 3, 0, 1, 4, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 4, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 11, 3, 4, 2, 1, 6, 0, 1, 10, 3, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.capitalize()[len(saveChr(mod(int(0.0),max(( i2 + int(1.0) ), ( int(5.0) + len(in1.rstrip()) ))))):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 6, 2, 1, 2, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[( ( int(0.0) + i0 ) - int(7.0) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 8, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 0, 2, 1, 3, 0, 2, 3, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 3, 0, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1, 3, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [5, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 2, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s0):] != s0[mod(int(0.0),i0):( i2 + int(7.0) )].capitalize()[( int(5.0) * abs(i1) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 0, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 9, 1, 4, 0, 1, 5, 0, 1, 7, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(len(in1), i0):]:{:\\nres0 = in1.rstrip() not in in0[abs(min(mod(i0,int(0.0)), i1)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 232}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 1, 12, 3, 3, 1, 2, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[mod(i0,int(07.0)):] not in in0\\ni2 = len(in2[mod(i1,int(5.0)):( int(7.0) + abs(i1) )])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [2, 3, 3, 1, 0, 0, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 3, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 2, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 6, 1, 2, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),min(int(7.0), i0)):]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [20], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 0, 0, 4, 0, 3, 0, 0, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( saveOrd(\"\"U\"\") \\l abs(int(0.0)) or True ) and in1 not in in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 0, 1, 2, 3, 2, 0, 2, 3, 3, 2, 0, 2, 2, 1, 2, 1, 1, 0, 0, 2, 1, 1, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 0, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 5, 4, 4, 0, 0, 5], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 8, 2, 2, 0, 2, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s0):] not in s0.capitalize()[divInt(int(0.0),int(1.0)):divInt(i2,int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [20], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 2, 1, 5, 0, 3, 0, 0, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( saveOrd(\"\"U\"\") \\l abs(int(0.0)) or True ) and in1 not in in0 )\\ni0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 2, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 7, 1, 3, 0, 1, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s0):] not in \"\"R\"\"[int(0.0):divInt(abs(i1),i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 1, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 1, 3, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 1, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 2, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 2], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 3, 1, 3, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[( ( int(0.0) + i0 ) - ( i2 * i1 ) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(len(in1)):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i2\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 2, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 9, 0, 40, 12, 10, 4, 8, 6, 0, 1, 9, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(len(in1), mod(int(1.0),int(7.0))):]:{:\\nres0 = in1.capitalize() not in in0[mod(( abs(divInt(int(1.0),min(i0, i2))) + divInt(divInt(int(7.0),i2),( len(getCharFromString(s0, ( i0 + divInt(min(( max(i1, mod(abs(int(6.0)),i2)) * int(1.0) ), int(7.0)),i1) ))) - i2 )) ),divInt(int(7.0),max(int(9.0), abs(i0)))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 235}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 8, 8, 9, 0, 33, 10, 6, 4, 6, 7, 1, 1, 15, 4, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1 not in in0.capitalize():{:\\nres0 = ( abs(mod(int(0.0),i0)) != divInt(i2,int(7.0)) or ( saveChr(( int(5.0) + int(7.0) ))[i2:].endswith(s0[i0:divInt(divInt(int(2.0),i1),divInt(abs(( i2 + ( min(divInt(len((\"\"R\"\" + in1.lstrip()).rstrip()),i1), ( min(int(1.0), i2) * int(7.0) )) - int(7.0) ) )),i0))]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 236}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 3, 1, 1, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[mod(mod(int(0.0),i0),( i2 + int(7.0) )):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 0, 0, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 3, 5, 7, 7, 9, 8, 7, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 0, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 2, 0, 3, 0, 0, 1, 2, 2, 3, 2, 0, 2, 2, 1, 0, 1, 3, 2, 1, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 3, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 3, 1, 2, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 1, 3, 0, 3, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 7, 1, 3, 0, 1, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, min(mod(i1,abs(i2)), i1)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 212}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 0, 0, 0], [0], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 3, 3, 2, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s0):] not in s0[mod(int(0.0),i0):].capitalize()[( i2 + int(0.0) ):( int(5.0) + abs(i0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 1, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [15], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 6, 2, 1, 2, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[( ( int(0.0) + i0 ) - int(7.0) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 7, 4, 7, 0, 1, 7, 7, 9, 6, 5, 0, 2, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 2, 0, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 0, 2, 3, 1, 0, 1, 3, 1, 3, 0, 3, 2, 2, 3, 0, 2, 3, 2, 2, 2, 2, 2, 1, 0, 2, 3, 3, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 3, 3, 2, 1, 0, 1, 2, 1, 1, 1, 2, 0, 1], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [3, 1, 3, 0, 3, 0, 4, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 6, 1, 1, 10, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = (\"\"R\"\" + in1) not in in0[max(i0, mod(len(s0[int(9.0):i0]),int(7.0))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 9, 7, 2, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 2, 3, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 0, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 8, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in0[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 234}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 1, 0, 0, 1, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 6, 2, 1, 1, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[mod(( int(0.0) + i2 ),int(7.0)):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 1, 2, 0, 2, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 1, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [13], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 3, 1, 2, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[( int(0.0) + mod(i0,( i1 - i1 )) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [20], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(\"\"U\"\") \\l mod(int(0.0),i0) or True ) and in1 not in in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [4, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[min(int(0.0), i0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 1, 2, 2, 1, 1, 0, 2, 1, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 0, 1, 0, 2, 1, 1, 2, 0, 2, 0, 0, 0, 0], [0, 1, 1], [3, 2, 3, 3, 3, 2, 0, 1, 2, 2, 3, 0, 2, 2, 2, 1, 0, 2, 2, 3, 0, 2, 3, 2, 1, 0, 2, 1, 1, 0, 0, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1, 3, 0, 0, 0, 3, 0, 2, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1, 2, 3, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [3, 5, 4, 4, 3, 0, 4, 0], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 14, 14, 15, 0, 60, 19, 12, 10, 9, 8, 1, 1, 15, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[mod(abs(abs(min(mod(i1,int(0.0)), ( divInt(len(in0),i1) + ( ( ( int(7.0) + i0 ) * ( divInt(min(i1, ( max(divInt(int(5.0),i0), divInt(int(7.0),int(2.0))) - i2 )),i1) + int(1.0) ) ) * i1 ) )))),( ( int(7.0) - abs(int(7.0)) ) - max(i2, ( mod(divInt(int(9.0),int(8.0)),( int(5.0) * i0 )) + int(0.0) )) )):] not in s0[abs(int(4.0)):len(in1[i2:])]:{:\\nres0 = ( i0 != i0 or ( getCharFromString((\"\"R\"\" + saveChr(abs(i0))), mod(i0,int(8.0))).endswith(s0) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 0, 2, 2, 0, 2, 0, 0, 3, 3, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 2, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[i1:] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 3, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 2, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 3, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 4, 0, 3, 4, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 0, 1, 4, 1, 1, 0], [3, 0, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 11, 3, 3, 1, 2, 7, 0, 1, 12, 3, 2, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s1):] not in getCharFromString(s0[i0:i2], mod(mod(i0,int(1.0)),( int(7.0) + len(in1.lstrip()) ))).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 0, 4, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 1, 1, 3, 0, 2, 2, 3, 1, 0, 2, 3, 3, 0, 2, 0, 2, 1, 0, 2, 3, 3, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [1, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 0, 3], [1, 0], [2, 1, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 9, 2, 3, 0, 2, 5, 0, 1, 7, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(len(in1), i0):]:{:\\nres0 = in1.rstrip() not in in0[:mod(abs(mod(i0,int(07.0))),int(0.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 6, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 1, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 2, 4, 2, 2, 1, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 2, 0, 8, 1, 2, 0, 1, 4, 0, 1, 6, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), int(0.0)):]:{:\\nres0 = ( ( int(7.0) != i0 or True ) and in1 not in saveChr(mod(i2,int(5.0))).rstrip() )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 9, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 2, 0, 2, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1[i0:] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 2, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 10, 0, 38, 11, 8, 4, 7, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0[:mod(int(0.0),i0)][mod(i2,int(7.0)):( int(5.0) + abs(i2) )][i0:divInt(divInt(int(7.0),i1),divInt(min(( i2 + ( len(saveChr(divInt(min(i1, ( max(int(6.0), i2) * int(1.0) )),int(7.0)))) - i0 ) ), i0),mod(int(7.0),abs(int(9.0)))))]):].capitalize() not in (\"\"R\"\" + s0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 2, 0, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 2, 0, 1, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1.capitalize() != in0[:len(s0)][mod(int(84.0),i0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 1, 1, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 5, 0, 18, 4, 4, 1, 3, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s1):] not in getCharFromString(s0[i1:i2], abs(mod(i2,int(0.0))))[divInt(int(7.0),min(i0, int(5.0))):( divInt(int(7.0),i0) + int(7.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 0, 2, 1, 1, 2], [1, 1, 1], [3, 3, 0, 1, 1, 0, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4, 4, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 9, 1, 1, 10, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s2):] not in s0[i1:int(07.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = \"\"R\"\"\\nin1 = in2\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 8, 5, 2, 7, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2, 0], [0, 1, 1], [3, 3, 1, 1, 0, 2, 2, 0, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 3, 2, 1, 1, 0], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 14, 0, 56, 17, 10, 7, 10, 5, 0, 1, 10, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.rstrip()[len(saveChr(int(7.0))[int(8.0):i2]):] not in in0[mod(divInt(i2,abs(min(min(i2, ( divInt(( int(5.0) + i0 ),( min(( i1 + divInt(i2,divInt(int(2.0),i1)) ), ( max(int(7.0), i2) - int(5.0) )) - int(7.0) )) + i0 )), i0))),divInt(int(5.0),min(int(9.0), max(i0, mod(divInt(( int(8.0) * int(5.0) ),( int(0.0) - i1 )),int(4.0)))))):divInt(i2,max(divInt(int(8.0),int(59.0)), i0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 5, 9, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 3, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 3, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 3, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 1, 8, 0, 3, 0, 0, 5, 1, 1, 11, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len((\"\"R\"\" + getCharFromString(in0[i0:i2], abs(int(9.0))))):] not in saveChr(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(7.0)\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 0, 3, 0, 0, 2, 3, 2, 3, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 3, 3, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 1], [5, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 5, 0, 18, 7, 2, 1, 6, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in s0[mod(mod(int(0.0),i0),( divInt(int(7.0),mod(int(1.0),max(i0, i1))) + divInt(divInt(int(7.0),i0),i1) )):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 5, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 4, 4, 1, 1, 4, 0, 2, 0, 0, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(\"\"R\"\") != int(07.0) or True ) and in1 not in s1 )\\ni1 = int(27.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 4, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 1, 0, 0, 4, 0, 1, 7, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in saveChr(int(84.0))[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 1, 1, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s1):] not in getCharFromString(saveChr(mod(int(0.0),i0)), ( i2 + int(7.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 2, 1, 2, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 3, 3, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 1, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 6, 0, 33, 13, 5, 5, 8, 5, 1, 1, 9, 2, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.capitalize() != \"\"R\"\"[mod(divInt(int(0.0),i0),( mod(int(7.0),divInt(int(1.0),max(i0, i2))) + divInt(( int(7.0) + i0 ),( len(saveChr(mod(i1,( len(in2) * mod(divInt(int(8.0),( max(int(1.0), int(7.0)) - int(7.0) )),int(9.0)) )))) + i2 )) )):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1[i1:]) != int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 6, 7, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 0, 0, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), i0):]:{:\\nres0 = \"\"R\"\" != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 1, 0, 0, 2, 3, 2, 0, 2, 3, 2, 2, 0, 2, 3, 1, 2, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 3, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 4, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 5, 4, 4, 1, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 13, 3, 4, 1, 2, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s1):] not in s0.capitalize()[:mod(int(0.0),max(divInt(i2,int(1.0)), ( int(5.0) + min(i2, i2) )))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 8, 0, 39, 12, 10, 4, 8, 6, 0, 1, 9, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in0[max(mod(int(64.0),abs(mod(( int(5.0) + divInt(int(7.0),min(i0, i0)) ),divInt(divInt(int(2.0),i2),( len(saveChr(( i0 + divInt(min(( max(i1, mod(abs(int(1.0)),i2)) * int(7.0) ), int(7.0)),i1) ))) - i2 ))))), divInt(int(1.0),max(int(8.0), len(s0)))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 0], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 10, 0, 50, 15, 11, 9, 6, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[min(abs(int(0.0)), min(mod(i1,int(7.0)), mod(int(5.0),len(in0)))):] not in \"\"R\"\"[i1:( divInt(( int(7.0) + i1 ),( min(max(i1, ( abs(( int(2.0) + i0 )) * divInt(max(int(1.0), i2),int(7.0)) )), int(7.0)) - i1 )) + ( divInt(int(9.0),min(int(8.0), max(i1, divInt(( ( int(5.0) * int(0.0) ) - ( int(4.0) - i2 ) ),int(8.0))))) * i0 ) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 3, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 3, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 4, 0, 3, 4, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 4, 4, 2, 0, 4, 0, 1, 4, 1, 1, 0], [3, 0, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[mod(i0,int(1.0)):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 6, 1, 7, 2, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 2, 0, 2, 0, 1, 0, 1, 3, 0, 0, 2, 1, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 10, 3, 2, 1, 2, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(\"\"R\"\"):] not in in0[mod(mod(i0,( i2 + int(6.0) )),i2):int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 237}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = len(in1[i0:]) != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 2, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 0, 2, 0, 2, 3, 2, 3, 1, 1, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 3, 3, 3, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 6, 0, 27, 11, 5, 3, 8, 6, 1, 1, 10, 2, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in2[mod(mod(int(0.0),i0),divInt(divInt(max(divInt(int(7.0),len(saveChr(i2))), i2),divInt(( int(1.0) + i0 ),( i1 + mod(i2,( len(s0) * divInt(len(\"\"R\"\"),int(7.0)) )) ))),int(6.0))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 2, 1, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[divInt(int(0.0),int(7.0)):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0], [5, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 2, 1, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 0, 2, 0, 0, 5, 0, 1, 8, 1, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.rstrip()[abs(i0):] not in s1[int(7.0):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 1, 0, 2, 1, 1, 2, 2, 2, 1], [1, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4, 4, 5, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 5, 5, 1, 4, 1, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 12, 1, 50, 14, 11, 9, 6, 9, 1, 1, 15, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0[i1:][int(07.0):abs(i2)]):] not in in1[:i1]\\ni1 += int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = saveChr(divInt(min(abs(i0), mod(( divInt(int(7.0),i2) + ( min(max(i1, ( abs(( int(2.0) + i1 )) - ( max(int(1.0), i2) + int(7.0) ) )), int(7.0)) * i2 ) ),divInt(( int(9.0) - len((\"\"R\"\" + saveChr(int(8.0)))) ),min(i2, divInt(divInt(( int(5.0) - int(0.0) ),( int(4.0) * i1 )),int(8.0)))))),int(59.0)))\\nin1 = in2\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 5, 1, 13, 2, 4, 1, 1, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), ( int(0.0) + i1 )):]:{:\\nres0 = in1[min(i2, int(7.0)):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = mod(int(5.0),min(i0, i1))\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 1, 0, 3, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = len(in1[i0:]) != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 11, 0, 40, 12, 8, 6, 6, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0[:mod(int(0.0),i0)].capitalize()[( i2 + int(5.0) ):( int(5.0) + ( i2 * i0 ) )]):mod(( int(7.0) - i1 ),( abs(divInt(i2,divInt(min(( len(saveChr(i1)) + divInt(min(int(6.0), i2),int(1.0)) ), int(7.0)),i0))) * i0 ))][divInt(int(7.0),max(int(9.0), abs(i1))):] != (\"\"R\"\" + s0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 6, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 1, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1[i0:]) != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 2, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 4, 2, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1.capitalize() not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 1, 1, 8, 2, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(\"\"R\"\"))[i0:] not in saveChr(int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 50, 17, 8, 7, 10, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[mod(mod(int(0.0),i1),( i2 + divInt(divInt(int(7.0),min(i2, i0)),divInt(( int(5.0) + i1 ),( len(in0) * divInt(i2,( min(mod(len(s0[i1:divInt(min(int(7.0), i2),int(6.0))].capitalize()[int(1.0):i0]),i0), ( int(7.0) - max(int(7.0), abs(i2)) )) + ( ( mod(int(9.0),int(8.0)) * mod(int(5.0),i1) ) - int(0.0) ) )) ))) )):] not in saveChr(int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 3, 1, 4, 0, 1, 0], [3, 2, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 7, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1 not in in0.capitalize().rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 3, 1, 1, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[mod(divInt(int(0.0),i0),( i2 + int(7.0) )):] not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 5, 7, 6, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 0, 2, 1, 3, 0, 0, 2, 2, 0, 0, 0, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 3, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 1, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 13, 3, 4, 1, 2, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:len(s0)] not in s0.capitalize()[:mod(int(6.0),max(divInt(i0,i2), ( int(1.0) + max(i2, i0) )))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 5, 9, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 3, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 3, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s2):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 0, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 6, 0, 1, 7, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(in0)) not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i2\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 2, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 3, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 2], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 3, 1, 1, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 1, 3, 0, 1, 2, 1], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1[i0:]) != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 2, 0, 1, 2, 1, 2, 2, 0], [0, 1, 1], [3, 1, 0, 0, 3, 2, 2, 1, 2, 2, 3, 3, 0, 2, 2, 1, 0, 1, 2, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 0, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 0, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, int(8.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 218}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2], [], [1, 5], [3, 3, 1], [], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [3, 5, 4, 4, 2, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 1, 12, 2, 5, 0, 2, 6, 1, 1, 10, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[len(s2):] not in getCharFromString(\"\"R\"\", abs(int(0.0)))[:min(mod(i1,int(7.0)), mod(int(5.0),len(s0)))]\\ni1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2], [], [1, 5], [3, 3, 1], [], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 2, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 1, 12, 2, 5, 0, 2, 6, 1, 1, 10, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s2):] not in getCharFromString(\"\"R\"\", abs(int(0.0)))[:min(mod(i1,int(7.0)), mod(int(5.0),len(s0)))]\\ni1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 9, 0, 34, 11, 8, 4, 7, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[min(mod(int(4.0),abs(mod(i0,( divInt(int(7.0),min(i2, i2)) * divInt(divInt(int(5.0),i0),( len(s0) + ( i1 * divInt(min(( max(i2, mod(abs(int(7.0)),i1)) - int(6.0) ), int(1.0)),i2) ) )) )))), i0):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 3, 2, 1, 3, 0, 2, 2, 2, 1, 2, 2, 3, 2, 0, 1, 3, 3, 1, 1, 1, 3, 0, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 1, 1, 0, 1, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 0, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 7, 0, 32, 9, 9, 6, 3, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1[( i0 * abs(( i2 + min(( int(1.0) - len(in0) ), i1) )) ):]) != divInt(( divInt(int(7.0),( ( min(mod(i2,int(5.0)), max(abs(int(7.0)), int(7.0))) - int(5.0) ) + max(i1, i2) )) - int(7.0) ),i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 3, 1, 1, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),mod(int(0.0),i0)):]:{:\\nres0 = in1[( i2 * int(7.0) ):] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 2], [0, 1, 1], [3, 2, 2, 1, 3, 2, 0, 1, 2, 1, 3, 2, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 2, 3, 1, 0, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [3, 3, 2, 0, 1, 0, 4, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 12, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 13, 0, 56, 20, 9, 10, 10, 7, 0, 1, 10, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[mod(divInt(int(6.0),len(in0)),( i0 + int(7.0) )):] not in s0[divInt(int(9.0),abs(( i2 + divInt(( int(7.0) * i2 ),( min(mod(i0,( max(divInt(min(i1, mod(saveOrd(in1[int(6.0):i2]),int(1.0))),int(7.0)), i1) - i2 )), ( int(7.0) + ( int(9.0) * abs(i0) ) )) - ( divInt(divInt(int(8.0),int(5.0)),mod(int(0.0),i0)) - int(4.0) ) )) ))):( ( max(int(8.0), i2) * i2 ) + i2 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 251}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 1, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 12, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 8, 1, 2, 1, 0, 5, 0, 1, 11, 2, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in2[len(in0):] not in saveChr(( int(0.0) + i2 ))[:int(7.0)][:i2].capitalize()[int(5.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 136}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 3, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 3, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 3, 0, 4, 0, 3, 4, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 2], [1], [0], [2, 0, 0, 4, 0, 0, 4, 4, 2, 1, 4, 0, 1, 4, 1, 1, 0], [3, 1, 3, 0], [1, 5], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 15, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 1, 1, 0, 1, 5, 0, 1, 6, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(saveOrd(s1),i0):]:{:\\nres0 = in1.rstrip() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 249}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 0, 5, 7, 5, 2, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [2, 3, 1, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 2, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 15, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 1, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[( len(in1) + int(7.0) ):]:{:\\nres0 = in1[:int(7.0)] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 303}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 5, 9, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 3, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 3, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 15, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):len(in1[i0:])]:{:\\nres0 = in0 not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 127}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 3, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 3, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 3, 0, 4, 0, 3, 4, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 2], [1], [0], [2, 0, 0, 4, 0, 0, 4, 4, 2, 1, 4, 0, 1, 4, 1, 1, 0], [3, 1, 3, 0], [1, 5], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 15, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 5, 0, 1, 7, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(s1):]:{:\\nres0 = in1.rstrip() not in in0\\ni0 = len(saveChr(i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 249}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 0, 0, 2, 0], [0, 0], [1, 5], [3, 1, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 0, 7, 2, 9, 7, 7, 9, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 0, 1, 0, 2, 0], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 1, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 3, 1, 1, 0, 3, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4, 0], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 1, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 16, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 1, 1, 0, 1, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i1):]:{:\\nres0 = s0 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 226}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [1], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 3, 3, 2, 2, 0, 1, 0, 0, 3, 3, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 2, 0, 0, 1, 1, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 3], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 16, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 1, 12, 2, 4, 1, 1, 4, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(getCharFromString(in1[len(in1):], i1)):]:{:\\nres0 = int(07.0) != abs(( i1 + int(5.0) ))\\ni1 = mod(int(7.0),abs(i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 293}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 2, 1], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [1, 5, 4, 1, 3, 0, 4, 5, 2], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 16, "mapping_values": [1, 5, 5, 1, 4, 1, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 1, 49, 16, 9, 7, 9, 9, 1, 1, 15, 4, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = s1.capitalize() not in in0\\ni0 = len(saveChr(mod(int(0.0),mod(( i2 + int(7.0) ),divInt(int(5.0),abs(i2)))))[i2:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = in1[divInt(divInt(int(7.0),i1),( min(( i2 + divInt(len((\"\"R\"\" + saveChr(( min(i1, mod(max(int(6.0), i2),int(1.0))) * int(7.0) ))).rstrip()),i0) ), i0) - divInt(int(7.0),abs(int(9.0))) )):max(i2, ( ( ( int(8.0) + int(5.0) ) * divInt(int(0.0),i1) ) - int(4.0) ))]\\nin2 = s2\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 16, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 6, 2, 1, 2, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s0[( ( int(0.0) + i0 ) - int(7.0) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 226}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 6, 2, 1, 2, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1[( ( int(0.0) + i2 ) - int(7.0) ):] != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 32, 10, 6, 4, 6, 6, 0, 1, 11, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):mod(int(7.0),i0)] not in s0[( i2 * int(7.0) ):( int(5.0) + mod(i2,i0) )].rstrip()[divInt(divInt(int(7.0),i1),int(6.0)):abs(( i2 * divInt(min(divInt(len(saveChr(i1)),( abs(int(1.0)) - i2 )), int(7.0)),int(7.0)) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 190}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 0, 0, 4], [1], [0], [2, 0, 0, 0, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in2 not in s0[i0:]\\ni2 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 2, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 2, 2, 2, 0, 1, 3, 1, 3, 0, 0, 2, 1, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 0, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 51, 16, 10, 7, 9, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):mod(mod(( divInt(i0,int(0.0)) + max(int(7.0), min(i2, i2)) ),divInt(int(5.0),int(7.0))),i0)] not in saveChr(divInt(len(s0[( i1 + ( min(mod(max(i2, ( abs(int(6.0)) * i1 )),int(1.0)), int(7.0)) - i2 ) ):]),i0))[mod(int(2.0),max(divInt(saveOrd(saveChr(i0)),( ( ( int(9.0) + int(8.0) ) * divInt(int(5.0),i0) ) - int(0.0) )), i1)):int(4.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 190}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 6, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 2, 2, 0, 1, 3, 1, 3, 0, 2, 2, 3, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 3, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 3, 2, 1, 0, 1, 1, 3, 0, 3, 1, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1, 1, 2, 2, 4, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 18, 18, 10, 0, 56, 15, 14, 8, 7, 7, 1, 1, 14, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1[abs(int(7.0)):]) != mod(divInt(i0,int(7.0)),min(int(5.0), len(in0))) or True ) and getCharFromString(s0[i2:], ( divInt(min(int(2.0), i2),( max(( i0 + ( i1 + ( int(2.0) - i2 ) ) ), divInt(min(int(5.0), ( int(7.0) - int(5.0) )),i1)) + max(divInt(int(9.0),max(int(8.0), abs(i2))), divInt(mod(( int(5.0) * abs(( int(0.0) - i0 )) ),int(4.0)),int(8.0))) )) - saveOrd(in1) ))[i0:max(int(69.0), int(9.0))] not in (\"\"R\"\" + saveChr(int(2.0))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 1, 0, 3, 4], [1], [0], [2, 0, 0, 3, 4, 0, 0, 4, 1, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 0, 0, 11, 2, 5, 0, 2, 5, 1, 1, 9, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = (getCharFromString(s1, abs(abs(int(0.0)))) + s0) not in saveChr(min(mod(int(8.0),int(5.0)), mod(int(7.0),len(\"\"R\"\"))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2.capitalize() not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 1, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [3, 2, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 7, 2, 1, 1, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2 not in \"\"R\"\".capitalize().rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 7, 0, 32, 10, 8, 6, 4, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = saveOrd(in1[i1:]) != mod(abs(mod(i1,int(0.0))),( int(7.0) + min(i1, divInt(( ( int(5.0) + i1 ) * ( len(in0) - min(i0, ( max(divInt(int(7.0),i2), ( abs(int(2.0)) + i1 )) * int(1.0) )) ) ),int(7.0))) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [0, 0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 8, 1, 3, 0, 1, 8, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1[i1:]) != int(0757.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = s0\\nin1 = in2[abs(mod(i1,int(2.0))):]\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 0, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 1, 4, 2, 4, 2, 2, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.startswith(\"\"R\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 2, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 1, 1, 7, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = (in1 + s0) not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 1, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 2, 0, 1, 3, 1, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = int(0.0) != mod(int(7.0),len(\"\"R\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 3, 3, 2, 0, 1, 2, 0, 3, 1, 2, 2, 3, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 3, 2, 0, 1, 3, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 4, 3, 0, 1, 0, 1, 1, 1, 4, 2, 3], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 5, 3, 0, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 2, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 12, 0, 56, 16, 14, 9, 7, 8, 1, 1, 17, 4, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in2[( len(in0) * saveOrd(saveChr(mod(i0,int(0.0))).rstrip()) ):])]:{:\\nres0 = ( i2 + len(s0[int(7.0):mod(( min(int(5.0), i0) * divInt(max(( i0 - min(max(( int(7.0) + int(7.0) ), divInt(max(int(1.0), i1),int(7.0))), i2) ), i1),i1) ),( int(7.0) * max(divInt(saveOrd((getCharFromString(in1, i0)[mod(( ( int(9.0) - int(8.0) ) - ( int(5.0) * i0 ) ),int(0.0)):i0] + \"\"R\"\").lstrip()),abs(mod(i1,int(4.0)))), len(in1)) ))]) ) != int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 8, 0, 33, 10, 8, 8, 2, 5, 0, 1, 9, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2[abs(( int(0.0) + i1 )):] not in saveChr(abs(( int(7.0) + ( int(5.0) * min(i2, i2) ) )))[( divInt(int(7.0),i0) - ( len(s1) + ( i1 * ( min(( max(i2, divInt(abs(int(6.0)),i1)) - int(1.0) ), int(7.0)) - i2 ) ) ) ):].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 2, 0, 3], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 1, 2, 1], [3], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 4, 0, 3, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = saveChr(len(in1)) not in s2\\ni1 = abs(int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 3, 1, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 6, 0, 1, 7, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in0.capitalize() not in s1\\ni0 = len(s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 4, 0, 9, 2, 2, 2, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[( min(i2, i0) + len(in1) ):]:{:\\nres0 = ( ( ( i0 + int(0.0) ) != i0 or True ) and in0.startswith(in0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 1, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 1, 3, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 1, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 2, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 2], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = i0 != int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 1, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 2, 1, 2, 1, 1, 0, 0, 1, 0, 0, 1, 2, 1], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 2, 2, 0, 2, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1, 3, 3, 1, 2, 1, 3, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 2, 0, 4, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 2, 5, 2, 1, 2, 2, 0, 0, 14, 14, 16, 0, 58, 18, 10, 11, 7, 5, 1, 1, 11, 2, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[( len(in1[i1:]) + i2 ):]:{:\\nres0 = ( ( len(in2.rstrip()) != ( i0 + int(0.0) ) or i2 \\l int(7.0) ) or \"\"R\"\"[abs(int(5.0)):( mod(( int(7.0) + i1 ),divInt(min(( i2 - len(in0[( divInt(i1,( divInt(i1,int(7.0)) + i0 )) * int(1.0) ):i0]) ), i1),i0)) - divInt(int(7.0),min(( max(i0, ( ( divInt(int(7.0),int(9.0)) - mod(int(8.0),i1) ) * int(5.0) )) + i2 ), int(0.0))) )].startswith(saveChr(abs(max(int(4.0), ( int(8.0) + abs(i1) ))))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 0, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 0, 2, 2, 0, 1, 3, 2, 1, 0, 1, 2, 2, 2, 0, 1, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 3, 0, 1, 1, 0, 2, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [2, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( int(0.0) != i1 or True ) and in1[i2:] != s0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = saveOrd(in1[i0:]) != int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in2.capitalize() not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 0, 3, 3], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 0, 2, 1, 0, 2, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 2, 4], [1, 1], [0], [2, 0, 0, 4, 3, 3, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 0], [17, 20], [], [], [20]], "fitness": 19, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 17, 17, 11, 1, 54, 16, 13, 10, 6, 7, 2, 1, 17, 3, 1, 3, 2, 2, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(getCharFromString(((in1[i1:] + in0[int(07.0):abs(mod(i1,int(5.0)))]) + saveChr(mod(int(7.0),min(i1, ( ( ( int(2.0) + i1 ) + ( len((\"\"R\"\" + s2.rstrip())) * min(i0, ( min(( int(1.0) - i2 ), ( abs(int(7.0)) + i1 )) * int(7.0) )) ) ) - int(9.0) ))))), ( divInt(divInt(int(8.0),max(int(5.0), min(i1, divInt(( ( int(0.0) - int(4.0) ) * divInt(int(8.0),i2) ),int(59.0))))),int(9.0)) + abs(i1) ))) != saveOrd(\"\"U\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = saveOrd(in1)\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 7, 7, 10, 0, 32, 9, 6, 4, 5, 6, 0, 1, 11, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[mod(len(in1),i0):][int(0.0):]:{:\\nres0 = ( ( len(in1) != ( i2 + int(7.0) ) or True ) and in0.startswith(s0[i0:int(5.0)].rstrip()[abs(int(7.0)):( divInt(divInt(int(7.0),i1),divInt(min(( i1 + len(saveChr(min(( i2 * i1 ), divInt(i0,int(1.0))))) ), i0),int(7.0))) - i0 )]) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 2, 4, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 9, 1, 2, 0, 1, 4, 1, 1, 11, 3, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = saveChr(len(\"\"R\"\"[i0:int(0.0)].lstrip()[i2:mod(i2,int(7.0))]))[:int(5.0)].rstrip() not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [1, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 2, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 2, 0, 0], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(\"\"R\"\"):mod(int(0.0),i0)][mod(i2,int(7.0)):].startswith(in0[( int(2.0) + abs(i2) ):i0].capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [0, 7, 5, 9, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [3, 1, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 15, 15, 5, 0, 32, 10, 8, 4, 6, 5, 1, 1, 7, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[mod(len(in1),max(i0, abs(( int(0.0) + int(75971.0) )))):]:{:\\nres0 = divInt(int(7.0),min(i1, divInt(( ( int(7.0) + i2 ) - divInt(len((in1 + in0)),int(9.0)) ),i0))) != max(max(divInt(int(850.0),i1), divInt(len(\"\"R\"\"),int(4.0))), ( int(8.0) - int(5.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 7, 2, 1, 2, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( int(0.0) + i0 ) - int(7.0) ) != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):].startswith(s0[abs(int(1.0)):].capitalize()[i0:mod(i1,int(0.0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 1, 0, 0, 3, 1, 0, 1, 2, 1, 1, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 0, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 4, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = saveChr(int(0.0))[i0:] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 5, 1, 2, 0, 1, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = saveChr(len(in1)) not in in0\\ni0 = mod(int(84.0),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 267}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 4, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 4, 3, 2, 2, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1[mod(int(0.0),i0):]) != ( abs(int(7.0)) * ( int(4.0) + mod(i2,i2) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 259}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 0, 3, 1, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 2, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 19, 19, 13, 0, 56, 16, 10, 8, 8, 6, 1, 1, 14, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1[int(7.0):int(75.0)][i0:mod(divInt(int(2.0),abs(int(2.0))),min(i2, ( divInt(( int(5.0) + i2 ),( len(in0[:( i0 + ( i1 - divInt(int(7.0),i2) ) )][( min(int(5.0), i1) - int(9.0) ):]) + int(8.0) )) * i2 )))]) != i0 or True ) and s0 not in getCharFromString((\"\"R\"\" + saveChr(divInt(int(5.0),max(int(0.0), min(i0, divInt(mod(( int(4.0) - int(8.0) ),( int(59.0) - i0 )),int(9.0))))))), divInt(max(i1, min(int(2.0), int(2.0))),i1)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [3, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1[:i1]) \\ge int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 2, 5, 7, 7, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 3, 2, 1, 3, 0, 2, 2, 2, 1, 2, 2, 3, 2, 0, 3, 3, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 0, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 6, 0, 32, 10, 8, 8, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1[divInt(i0,abs(( i2 * min(( int(1.0) + len(in0) ), i0) ))):]) != divInt(( ( int(2.0) - ( ( min(( i2 - max(abs(( int(5.0) + int(7.0) )), int(7.0)) ), i1) * int(5.0) ) - int(7.0) ) ) - int(7.0) ),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2, 2, 1], [0, 1, 1], [3, 3, 0, 0, 2, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 20, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 14, 14, 12, 1, 51, 16, 10, 9, 7, 7, 0, 1, 11, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1) != i1 or True ) and in0 not in getCharFromString(in2[i1:], mod(mod(i1,int(0.0)),( int(7.0) + abs(i1) ))) )\\ni0 = divInt(( ( int(5.0) + i2 ) * ( min(len(in1[i1:( min(divInt(int(7.0),i1), ( max(int(2.0), i2) - int(1.0) )) + int(7.0) )]), i2) * divInt(divInt(int(7.0),abs(int(9.0))),max(i2, ( ( ( int(8.0) - int(5.0) ) - mod(int(0.0),i1) ) * int(4.0) ))) ) ),len(saveChr(int(8.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 2, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 3, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 20, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 6, 0, 2, 0, 0, 6, 1, 1, 15, 4, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, int(1.0))[i0:] not in (saveChr(int(75.0)) + in1[len((\"\"R\"\" + s0.lstrip()).rstrip()):i2])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 256}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 1, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 20, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 2, 5, 2, 1, 2, 2, 0, 0, 3, 3, 3, 0, 12, 3, 3, 1, 2, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1) != mod(int(0.0),i2) or mod(i2,int(7.0)) \\l ( int(5.0) + abs(i2) ) ) and in0 not in s0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 281}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 1, 7, 6, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 0, 2, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 2, 2, 0, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 0, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 12, 12, 13, 0, 49, 15, 9, 6, 9, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1[abs(int(5.0)):]) != i0 or True ) and in0 not in s0[mod(i1,int(7.0)):mod(( i2 + min(i0, ( divInt(int(1.0),i0) + divInt(len(saveChr(( i2 - divInt(min(divInt(i1,i2), mod(max(int(7.0), i0),int(6.0))),int(1.0)) ))),i0) )) ),i2)].capitalize()[( int(0.0) - abs(int(7.0)) ):max(i2, ( divInt(mod(int(9.0),int(8.0)),( int(5.0) + i1 )) * int(0.0) ))] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 3, 0, 6, 0, 2, 0, 0, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = ( ( len(in2[i2:int(0.0)]) != i2 or True ) and in0 not in saveChr(i2).capitalize() )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in2[abs(i0):])]:{:\\nres0 = in0 not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 1, 0, 5, 1, 2, 1, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = ( ( len(in2) != ( int(0.0) + i2 ) or True ) and in0 not in s0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 1, 1, 1], [0], [17], [], [], [20]], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 3, 0, 6, 0, 2, 0, 0, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = ( ( len(in2[i2:int(0.0)]) != i2 or True ) and in0 not in \"\"R\"\"[:i2] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 3, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 22, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(len(in0)):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 230}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 22, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in0):]:{:\\nres0 = in1.capitalize() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 230}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 22, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 230}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 22, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 0, 0, 6, 0, 1, 8, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(in0)) not in in2[i0:]\\ni1 = int(07.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 276}, {"genotype": [[0], [1, 0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 0, 0, 2, 2, 1, 1, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 2, 2, 0, 1, 1, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 2, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 5, 3, 4, 3, 0, 4, 5], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [25], [], [], [20]], "fitness": 23, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 13, 13, 16, 1, 52, 17, 7, 8, 9, 5, 0, 1, 10, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.rstrip()[len(in0[abs(i0):]):]:{:\\nres0 = ( ( i2 != abs(divInt(( ( i0 + int(0.0) ) + int(7.0) ),int(5.0))) or True ) and in1 not in saveChr(divInt(divInt(divInt(int(7.0),i0),( min(( i1 * len(in0[divInt(( i2 * i0 ),divInt(i0,int(4.0))):i0]) ), int(1.0)) + i0 )),i2))[i2:mod(int(7.0),min(( max(i1, ( ( divInt(int(7.0),int(9.0)) * divInt(int(8.0),i1) ) - int(5.0) )) - int(0.0) ), int(4.0)))] )\\ni1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 2, 2, 5, 9, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2, 2], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 3, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 1, 3, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 23, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 14, 0, 51, 16, 8, 8, 8, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nres0 = getCharFromString(in1, ( mod(int(2.0),i0) + ( i2 + max(len(saveChr(int(7.0))[min(i2, divInt(divInt(( int(5.0) - i0 ),( max(( i1 - divInt(i2,( int(2.0) + i1 )) ), divInt(min(int(2.0), i2),int(5.0))) * int(9.0) )),i0)):i0]), divInt(int(5.0),max(int(9.0), min(i0, mod(( ( int(8.0) - int(5.0) ) - divInt(int(0.0),i1) ),int(4.0)))))) ) ))[i2:] not in in0[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 0, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 0, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 25, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 33, 9, 7, 5, 4, 6, 1, 1, 15, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.capitalize()[len(saveChr(int(7.0))[int(7.0):i2]):].endswith(in0[mod(i2,i2):abs(min(len((\"\"R\"\" + getCharFromString(s0, i0)).rstrip()), divInt(( divInt(int(5.0),i1) + ( min(( i2 + ( i1 - ( int(2.0) - i2 ) ) ), divInt(max(int(0.0), i0),int(5.0))) + int(7.0) ) ),i0)))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 287}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 5, 4], [1], [0], [2, 0, 0, 2, 0, 3, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 26, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 2, 4, 1, 1, 7, 1, 1, 15, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len((s0[i0:int(0.0)] + in2[abs(( i1 + int(7.0) )):])):] not in getCharFromString((\"\"R\"\" + saveChr(mod(int(5.0),saveOrd(in1)))), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 249}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 1, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 26, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 33, 9, 8, 3, 6, 7, 0, 1, 11, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2[saveOrd(in0):] != getCharFromString(in0[mod(int(0.0),i0):abs(i0)], int(7.0))[mod(int(5.0),min(i2, i0)):( divInt(int(7.0),i1) + divInt(len(in1),divInt(i2,( max(( max(i1, divInt(abs(int(6.0)),i2)) - int(1.0) ), int(7.0)) * i0 ))) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 296}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 1, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 0, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 11, 2, 2, 0, 2, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(in0):]:{:\\nres0 = getCharFromString(in1, int(8.0))[i2:] not in in0[int(7.0):max(mod(i2,int(1.0)), mod(int(7.0),i2))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 307}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 2, 1, 2, 0, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 1, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 3, 3, 2, 1, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [2, 2, 1, 1, 1, 0, 0, 2, 0], [0, 1, 0, 0, 0, 0, 1, 0], [2, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 10, 0, 40, 12, 8, 6, 6, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[saveOrd(in0):]:{:\\nres0 = getCharFromString(in1, int(0.0))[i1:] not in in0[int(7.0):max(( divInt(int(1.0),( i2 * abs(i2) )) * mod(( divInt(min(i0, ( len(s0[( i1 - divInt(( divInt(int(7.0),i2) - int(4.0) ),min(int(1.0), i1)) ):]) - int(7.0) )),int(7.0)) + i2 ),i0) ), divInt(int(9.0),max(int(8.0), abs(i0))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 307}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 6, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 2, 2, 0, 0, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 0, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [4, 3, 1, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 0, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 10, 3, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, saveOrd(s0)):{:\\nres0 = in1[len(in0):] not in s0.rstrip().capitalize()[i0:int(07.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 2, 1, 9, 4, 1, 3, 7, 5, 8, 5, 0, 4, 7, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 0, 0, 0, 0, 2, 0, 2, 1, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 0, 1, 0, 2, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 3, 1, 0, 2, 0, 1, 2, 3, 0, 3, 3, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [4, 1, 2, 4, 1, 0, 1, 2, 1], [0, 1, 2, 0, 2, 1, 2, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0], [2, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 11, 2, 2, 1, 1, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[saveOrd(in0):]:{:\\nres0 = getCharFromString(in1, ( i1 + int(3.0) ))[max(divInt(i2,int(2.0)), i2):] != in0[int(1.0):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 307}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 3, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 8, 2, 2, 1, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in0[max(( int(07.0) + i2 ), mod(i2,int(5.0))):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 388}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[i0:int(9.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nres0 = in2[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 13, 4, 3, 2, 2, 5, 1, 1, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = in2[len(in0):] not in \"\"R\"\".capitalize()[divInt(i0,i2):( ( int(0.0) + mod(int(7.0),abs(i2)) ) + i0 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 9, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 5, 0, 3, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in0)):]:{:\\nres0 = abs(int(6.0)) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:len(in1)]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 5, 2, 5, 8, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 0, 2, 0, 1, 3, 1, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2, 0, 2, 2, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [2, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [1, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 12, 0, 49, 17, 8, 10, 7, 6, 1, 1, 11, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in0):]:{:\\nres0 = in1[len(in0):].endswith(getCharFromString(s0[abs(min(i0, divInt(i2,int(1.0)))):], len(\"\"R\"\"))[int(7.0):divInt(i0,( ( ( int(5.0) * i0 ) + ( ( ( i1 - divInt(i2,( divInt(i1,( min(int(5.0), i2) - int(2.0) )) + int(5.0) )) ) * i1 ) - i0 ) ) - divInt(int(8.0),max(int(5.0), min(i0, ( ( divInt(int(9.0),int(8.0)) * mod(int(5.0),i1) ) + int(0.0) )))) ))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 3, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 4, 1, 7, 0, 4, 0, 0, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[:abs(i0)]\\ni2 = min(i0, i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 0, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = in1[len(in0):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 291}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 3, 1, 2, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = in1[mod(( int(0.0) + i0 ),( i2 - i1 )):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 305}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 0, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 0, 0], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 10, 1, 3, 0, 1, 6, 0, 1, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[int(5.0):i0][i1:mod(i0,int(7.0))][:abs(int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 292}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 0, 3, 1, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 3, 4, 3, 3, 4], [1], [0], [4, 0, 2, 2, 0, 0, 2, 2, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 1], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 11, 0, 49, 15, 10, 7, 8, 4, 0, 0, 11, 3, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2.capitalize() != in2[len(in0):][saveOrd(getCharFromString(in1, mod(int(8.0),i0))[divInt(i2,abs(( i0 + min(int(3.0), int(5.0)) ))):divInt(divInt(int(7.0),i0),divInt(len(saveChr(( i1 + ( min(divInt(max(i2, ( abs(int(6.0)) * i1 )),int(1.0)), int(7.0)) - i2 ) ))),i0))][:mod(int(7.0),max(int(9.0), min(i0, divInt(( ( int(8.0) + int(5.0) ) * ( int(0.0) - i2 ) ),int(4.0)))))]):]\\n", "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(len(in1)):]:{:\\nres0 = in1[i0:].endswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 291}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 0, 5, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[saveOrd(in1):]:{:\\nres0 = in1[int(0.0):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2], [1, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 0, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 12, 3, 3, 2, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = s0[( int(0.0) - int(6.0) ):max(mod(i0,int(5.0)), ( int(7.0) + abs(i2) ))].endswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 292}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 1, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 0, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 12, 2, 3, 1, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + int(5.0) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 292}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2, 0, 0, 2], [1, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 1, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 13, 1, 50, 15, 10, 10, 6, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = len(in1[i1:]) != i1\\ni1 += max(mod(i1,int(0.0)), mod(int(7.0),min(i0, ( divInt(( int(5.0) + i2 ),( len(getCharFromString(in0[min(i1, ( max(( int(7.0) * i1 ), divInt(abs(int(2.0)),i2)) - int(1.0) )):int(7.0)], i2)) + ( divInt(int(7.0),max(int(9.0), abs(i0))) * divInt(( ( int(8.0) - int(5.0) ) - ( int(0.0) * i0 ) ),int(4.0)) ) )) + i2 ))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 0, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = in1[min(mod(int(0.0),i0), mod(i2,int(7.0))):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 4, 2, 0, 1, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [3, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 11, 0, 49, 16, 10, 7, 9, 7, 1, 1, 15, 3, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(in1):]:{:\\nres0 = in1[len(s0):] not in s0[mod(int(0.0),i2):( int(7.0) - int(5.0) )].rstrip()[( int(7.0) + abs(i2) ):min(divInt(divInt(int(6.0),i2),divInt(len(saveChr(( i2 * divInt(saveOrd((\"\"R\"\" + in1.lstrip())),divInt(abs(i1),( min(mod(i2,int(1.0)), int(7.0)) - i1 ))) ))),i2)), divInt(int(7.0),max(i0, max(i0, ( ( ( int(9.0) + int(8.0) ) * divInt(int(5.0),i0) ) - int(0.0) )))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 0, 5, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[saveOrd(in1):]:{:\\nres0 = in1[int(0.0):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2], [0, 1, 2, 0, 2, 2, 0, 2, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 3, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 3, 2, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 3, 0, 2, 3, 2, 2, 0, 0, 2, 2, 1, 0, 0, 1, 0, 3, 3, 0, 2, 0, 2, 1, 0, 0, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [1, 4, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 3, 0, 4, 4], [2, 0, 1, 0, 2, 2, 0, 2, 0, 2, 2], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [1], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[max(saveOrd(in1), i0):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 305}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 2, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 1, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 0, 2, 1], [0], [20], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 6, 1, 1, 11, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s1[len(\"\"U\"\"):], int(7.0))[i0:mod(i2,int(7.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 292}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 3, 3, 0, 3], [1], [0], [2, 0, 0, 4, 0, 0, 4, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 3, 0, 12, 3, 3, 1, 2, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = ( ( mod(int(0.0),i1) != mod(i1,int(7.0)) or True ) and getCharFromString(in0, ( int(5.0) + abs(i1) )) == in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 268}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 0, 0, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 4, 1, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 11, 3, 2, 0, 3, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[saveOrd(in2):] != \"\"R\"\".capitalize()[mod(int(7.0),i0):divInt(i2,int(3.0))][:divInt(i2,i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 308}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 2, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 5, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 11, 3, 4, 2, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(in1):]:{:\\nres0 = ( len(in1[int(0.0):]) + abs(mod(i0,int(7.0))) ) != ( int(5.0) + saveOrd(in2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 315}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [1, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [4, 4, 2, 0, 2, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 2, 5, 1, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[saveOrd(in1):]:{:\\nres0 = saveOrd(in1[abs(i0):]) \\g min(mod(int(4.0),int(7.0)), ( int(5.0) + abs(i1) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2], [], [4, 5], [3, 3, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [2, 5, 4, 4, 4, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 1, 1, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[saveOrd(in1):]:{:\\nres0 = in1[len(in1):].startswith(getCharFromString(\"\"R\"\", i1)[:int(0.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 0, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 1, 4, 2, 4, 2, 2, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = in1.startswith(\"\"R\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 3, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 1, 0, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[( saveOrd(in0) + int(0.0) ):] not in s0[i0:int(7.0)].capitalize()[i2:i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 1, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [15], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[saveOrd(in1):]:{:\\nres0 = len(in1[i0:]) != int(27.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 319}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 2, 1, 1, 1, 3, 0, 0, 2, 2, 1, 3, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 3, 3, 1, 4, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 2, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 7, 0, 33, 11, 7, 4, 7, 6, 1, 1, 14, 4, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(getCharFromString(in1, mod(mod(int(0.0),i0),( divInt(int(7.0),int(1.0)) + int(7.0) )))[max(i0, i0):]):]:{:\\nres0 = in1[:divInt(divInt(int(6.0),len(saveChr(( len(in2) + ( i0 * divInt(max(( saveOrd(s0) - i1 ), mod(abs(int(1.0)),i2)),int(7.0)) ) )))),int(7.0))] not in (\"\"R\"\" + saveChr(i1)).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 1, 1, 2, 0, 0], [0, 1, 1], [1, 0, 3, 3, 3, 2, 0, 0, 2, 1, 0, 0, 2, 0, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 0, 1, 3, 1, 0, 3, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [1, 4, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 3, 1, 1, 3, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nin2 = getCharFromString(in1, int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [4, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 0, 6, 1, 7, 7, 9, 6, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 2, 0, 0, 1, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 1, 2, 3, 3, 1, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 3, 0, 0, 2, 1, 3, 1, 3, 3, 2, 2, 2, 1, 0, 2, 1, 0, 1, 0, 3, 1, 1, 3, 1, 2, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 1, 0, 3, 0, 3, 2, 1, 2, 0, 2, 0], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 0, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [17], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 11, 0, 50, 14, 12, 6, 8, 7, 2, 1, 15, 3, 1, 3, 2, 1, 1, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), mod(int(0.0),i2)):]:{:\\nloopBreak% = 0\\nwhile in1[divInt(i2,int(8.0)):] not in s0:{:\\nres0 = ( ( int(5.0) + max(i2, i1) ) \\le divInt(divInt(int(0.0),int(6.0)),divInt(min(len(s0.capitalize()[int(1.0):( min(( len(\"\"R\"\") + i1 ), divInt(abs(int(7.0)),i2)) * int(7.0) )]), max(i1, i2)),( int(9.0) * abs(int(6.0)) ))) or ( saveChr(min(abs(mod(divInt(( int(5.0) + i0 ),( int(0.0) * i0 )),int(4.0))), i1)).endswith((\"\"r\"\" + in1.rstrip())) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 1, 2, 3, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 9, 0, 39, 11, 10, 4, 7, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = in1[len(in0):] not in in2[mod(int(0.0),i0):mod(int(2.0),int(5.0))].capitalize()[( abs(min(i2, i2)) + divInt(divInt(int(7.0),i0),divInt(len(saveChr(( i1 + ( min(divInt(max(i2, ( abs(int(6.0)) * i1 )),int(1.0)), int(7.0)) - i2 ) ))),i0)) ):mod(int(7.0),max(int(9.0), saveOrd((\"\"R\"\" + in1.rstrip()))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 1, 5, 7, 6, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 2, 0, 0, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 0, 1, 2, 0, 1, 2, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 7, 7, 11, 0, 34, 10, 6, 3, 7, 6, 1, 0, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[len(in1):]:{:\\nb0 = ( abs(int(5.0)) != i0 or ( in0[mod(i2,int(1.0)):mod(i2,i1)].capitalize()[min(i1, ( ( int(5.0) + i2 ) + mod(len(saveChr(divInt(i1,( min(divInt(i2,int(7.0)), divInt(i0,int(6.0))) * mod(int(1.0),int(0.0)) )))),i0) )):i2].endswith((\"\"R\"\" + s0.rstrip())) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 5, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 2, 2, 1, 1, 5, 1, 1, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in2):]:{:\\nres0 = in2[len(in0):] not in \"\"R\"\".capitalize()[mod(i0,i2):( i2 * int(0.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 1, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 1, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 3, 3, 1, 2, 3, 1, 1, 5, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[max(int(0.0), mod(int(7.0),len(getCharFromString(\"\"R\"\", mod(i1,int(5.0)))))):]:{:\\nin1 = saveChr(( int(7.0) + abs(i1) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 0, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\ni0 = len(in1.capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 0, 4, 4, 4, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [3, 1, 3, 2], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 0, 2, 0, 0, 5, 0, 1, 11, 4, 2, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[:len(saveChr(i0).rstrip())]):]:{:\\nres0 = in1[int(0.0):i2].capitalize().lstrip() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 1, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ns0 = s0[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(07.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 0, 2, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = in1[len(s0):] not in s2[i1:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [0, 1, 0, 0], [], [2, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [1, 5], [1], [], [1], [], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [4, 4, 4, 0, 9, 0, 9, 2, 2, 6, 1, 6, 7, 8, 5, 7, 7, 1, 2], [1, 2, 0, 2, 2, 1, 2, 0, 0, 1, 0, 2, 2, 2], [1], [1, 1, 0, 2, 3, 1, 1, 0, 2, 1, 0, 2, 2, 0, 0, 0, 1, 2, 2, 2, 3, 3, 1, 0, 2, 3, 0, 1, 2, 1, 2, 1, 3, 0, 3, 2, 1, 2, 3, 1, 2, 1, 1, 3, 3, 3, 2, 0, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0], [1, 0, 1, 2, 2, 2, 2, 4], [2, 0, 1, 0, 1, 2, 0], [1, 1, 0, 0, 1, 0, 1, 1], [3, 4, 1], [1, 1], [], [2, 4, 2, 4, 3, 2, 0, 4, 4, 2, 0], [1, 3, 1], [0], [1, 0, 2, 0, 0], [3, 1], [], [15], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 3, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = saveChr(int(4.0))[:int(4.0)]\\ni1 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 2, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 4, 4, 0, 3, 0, 0, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 3, 0], [1, 0], [2, 1, 0, 0, 1], [0], [18], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(saveOrd(in1), mod(int(0.0),i0)):]:{:\\nb0 = in1[:mod(i2,int(7.0))] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 2, 3, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 2, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 0, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 1, 8, 1, 3, 0, 1, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0[len(in1):]:{:\\nres0 = in1[len(in0):] not in in2[i0:int(07.0)]\\ni1 = abs(mod(i1,int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 3, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 5, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\ni1 = len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 0, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 33, 8, 8, 5, 3, 5, 0, 1, 11, 2, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(len(in1)):]:{:\\nres0 = s0[i0:] not in in0[:i2].rstrip()[abs(int(0.0)):i2][int(7.0):mod(int(1.0),min(i0, ( ( divInt(int(7.0),i1) + ( len(saveChr(divInt(i2,max(max(( int(2.0) + i1 ), ( abs(int(1.0)) * i2 )), int(7.0))))) - int(7.0) ) ) + i0 )))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 3, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nin1 = in0[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 3, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 3, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 3, 0, 4, 0, 3, 4, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 2], [1], [0], [2, 1, 0, 4, 0, 0, 4, 4, 2, 1, 4, 0, 1, 4, 1, 1, 0], [0, 1, 3, 0], [1, 5], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 4, 1, 1, 7, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[saveOrd(in2):]:{:\\nb0 = getCharFromString(s1, len(in1)) not in saveChr(i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1, 0], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 1, 4, 2, 2, 0, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 1, 6, 1, 1, 4, 2, 1, 1, 1, 1, 3, 1, 5, 0, 2, 0, 0, 3, 0, 0, 6, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( ( len(s0[len(s1):]) != i0 or True ) and in1 not in saveChr(int(0.0)).rstrip() ):{:\\nres0 = b2\\n:}else:{:\\ni0 = i2\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [2, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [1], [17], [20], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 6, 0, 17, 4, 3, 2, 2, 4, 1, 1, 10, 2, 0, 4, 1, 0, 1, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = s0[i0:] not in getCharFromString(saveChr(( int(0.0) * len(\"\"u\"\"[mod(i2,int(7.0)):( int(5.0) + abs(i2) )]) ))[divInt(i0,i2):int(7.0)], i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [1, 0, 1], [3, 3, 3, 2, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 4, 3, 0, 1, 2, 1], [2, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [], [1, 0], [1, 2, 0, 2, 1], [0], [20], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 3, 1, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in0)]:{:\\ni0 *= len(\"\"U\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = len(in1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [0, 3, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 3, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nb1 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [7], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 11, 2, 5, 2, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 = len(in1[abs(i1):])\\ni2 += min(mod(int(0.0),int(7.0)), ( int(5.0) + len(in0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [1, 3, 3, 0, 0, 0, 0, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [8], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(4.0):]:{:\\nb0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 2, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 1, 3, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 1, 0, 10, 0, 5, 0, 0, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in2):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[abs(int(1.0)):], int(2.0))[min(i0, int(5.0)):len(saveChr(int(2.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 2, 1, 0, 0, 1, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 3, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 1, 0, 3, 0, 1, 2, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 3, 3, 1, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), mod(int(0.0),max(divInt(i0,int(7.0)), ( int(5.0) + i2 )))):]:{:\\nres0 = in1[:i2] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = \"\"R\"\".capitalize() not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 9, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 9, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 0, 1, 0, 2, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 3, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(i0):]:{:\\nres0 = in1 not in in1[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1):]:{:\\nres0 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 2, 3, 0, 2, 0, 3, 0, 1, 3, 0, 0, 2, 2, 1, 0, 0, 3, 2, 0, 2, 3, 2, 3, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 0, 1, 2, 1], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 5, 5, 12, 1, 32, 7, 9, 2, 5, 6, 1, 0, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(s0):] not in in1[len(in1):]:{:\\nres0 = ( mod(abs(i0),mod(i2,len(saveChr(i2)[int(0.0):len(s0[:i2])]))) != i1 or ( saveChr(( divInt(int(7.0),i2) + i1 )).endswith((\"\"R\"\" + s0.rstrip())) and True ) )\\n:}else:{:\\ni2 = min(divInt(i0,divInt(max(( abs(i0) - i1 ), max(int(5.0), i2)),int(7.0))), int(6.0))\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [3, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 4, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2.rstrip():{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 6, 3, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 0, 3, 0, 1, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in2[max(len(in2), i0):] not in in1[int(07.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [0], [], [], [1], [3], [1], [0], [2], [], [], [0], [], [1, 1], [2, 8], [2, 0, 1, 2], [0], [2, 2, 0, 1, 0, 0, 1], [0, 1], [4], [1, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [2, 2], [0], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 1, 7, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( divInt(i2,int(2.0)) - i0 ) \\ge i1\\ni2 = int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 2, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\".endswith(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 7, 1, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 6, 4, 1, 1, 1, 6], [2, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 2, 0, 1, 0, 2, 2, 1], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 2, 1, 1, 2, 2, 3, 2, 2, 1, 0, 2, 0, 2, 0, 1, 2, 0, 3, 0, 2, 2, 0, 1, 0, 3, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 1, 2, 0, 3, 0, 1, 2, 1, 0, 0, 3], [0, 0, 1, 1, 0, 0, 0, 1, 0, 2, 1, 2, 1, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [3, 0, 3, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 4, 2, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 25, 25, 19, 0, 78, 26, 12, 15, 11, 4, 1, 0, 15, 3, 1, 6, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = in0[saveOrd(s0):] not in getCharFromString(in0[int(07.0):][:i2][int(1.0):max(( i1 + int(7.0) ), mod(int(4.0),abs(i2)))][( mod(( min(i0, divInt(len(saveChr(( i1 + ( divInt(( int(1.0) - i2 ),divInt(min(int(7.0), i1),int(7.0))) - int(9.0) ) ))),i2)) + i0 ),divInt(int(8.0),max(int(5.0), abs(i0)))) + ( ( ( int(0.0) + int(4.0) ) - mod(int(8.0),i0) ) + int(59.0) ) ):int(9.0)], max(divInt(int(2.0),int(2.0)), ( mod(min(mod(( int(6.0) * i0 ),( i2 - mod(i0,int(4.0)) )), ( i1 * min(i0, ( ( i2 - int(1.0) ) + i2 )) )),len((\"\"R\"\" + in1.rstrip()))) - i1 )))[int(116.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 2, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 3, 0, 1, 3, 1, 3, 0, 2, 2, 2, 2, 0, 1, 3, 2, 0, 2, 0, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 1, 0, 1, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [0, 0], [2, 1, 0, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 0, 2, 2, 2, 0, 7, 0, 3, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(s0[len(in2):]) != int(7.0):{:\\nres0 = ( int(7.0) \\l i0 or ( in1[:abs(i2)] not in in1 and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1):]:{:\\nres0 = in1[len(in0):] not in in2[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1], [1, 2, 1], [0, 1], [1, 1, 2], [0], [0], [], [], [0], [3], [1, 2], [0], [], [1], [1, 0], [0], [0], [1, 1], [7, 2], [1, 0], [1], [0, 0, 2], [], [], [1], [], [0, 3, 0, 4], [], [], [3, 3, 3, 4, 4, 0, 0], [1], [], [2, 2, 0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 1, 1, 4, 0, 5, 4], [1], [0], [2, 0, 0, 2, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 7, 0, 2, 0, 0, 6, 1, 1, 15, 3, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s1[saveOrd(s1):]:{:\\nres0 = in1[int(07.0):] not in (s0[i0:i2].rstrip()[len(saveChr(int(1.0))):i2] + (\"\"R\"\" + in2.lstrip()))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 3, 1, 4, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1, 1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [17], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 10, 0, 49, 15, 11, 8, 7, 7, 2, 1, 17, 4, 1, 4, 2, 1, 1, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize()[len(in1[len(in1):]):]:{:\\nres0 = saveChr(mod(int(0.0),abs(( i2 - int(7.0) ))))[( int(5.0) + min(i2, len(s0[mod(divInt(int(7.0),i2),divInt(min(( i2 * ( max(divInt(len((\"\"R\"\" + getCharFromString(s0, i1)).rstrip()),( max(int(6.0), i2) - int(1.0) )), int(7.0)) + i1 ) ), i2),divInt(int(7.0),saveOrd(\"\"r\"\")))):int(9.0)])) ):max(i0, mod(( ( int(8.0) * int(5.0) ) - ( int(0.0) - i0 ) ),int(4.0)))] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1):]:{:\\nres0 = ( ( len(in1[mod(int(9.0),i1):]) != mod(i2,int(7.0)) or True ) and in0 not in \"\"R\"\"[( int(5.0) + abs(i0) ):i0] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 2, 1, 2, 7, 8, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 0, 2, 0, 2, 1, 2, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 2, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 11, 0, 33, 9, 7, 5, 4, 6, 1, 1, 15, 3, 2, 5, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0[:i0].rstrip()[i2:abs(mod(i2,int(9.0)))]):i0][int(7.0):] not in saveChr(min(i1, ( i2 + ( int(5.0) + divInt(( mod(( i1 * len((\"\"R\"\" + s0.lstrip())) ),( int(7.0) - int(2.0) )) + i2 ),divInt(min(int(1.0), i0),max(i0, i1))) ) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 9, 3, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 0, 1, 2, 3, 2, 0, 2, 3, 2, 2, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 3], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 3, 1, 0, 2, 0, 1, 2, 1, 2], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 1, 1, 0, 1, 0], [0, 0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0, 2], [0, 1, 1], [2, 0, 2, 2, 3, 2, 0, 0, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 3, 6, 3, 0, 3, 2, 1, 0, 5, 5, 11, 0, 32, 11, 5, 6, 5, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[mod(i0,( ( len(in1) + divInt(i2,i0) ) + i0 )):]:{:\\nloopBreak% = 0\\nwhile ( int(0.0) != len(in1) or int(1.0) \\l ( divInt(( int(5.0) * i1 ),( abs(divInt(i2,min(len(in0), ( i1 - i0 )))) + divInt(i0,int(7.0)) )) * i0 ) ):{:\\nres0 = ( int(7.0) \\l i2 and True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2], [], [4, 5], [3, 3, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [2, 5, 4, 4, 4, 0, 3], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 5, 0, 2, 0, 0, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(in1)).startswith(saveChr(i1)[int(0.0):])\\ni1 = int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [2, 3, 3, 1, 0, 0, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 3, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 0, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 2, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 6, 1, 2, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(s0),min(int(7.0), i0)):]:{:\\nb0 = s0[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [0, 2], [1], [], [0], [], [], [0], [1], [], [0], [1, 5], [3, 3, 1], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [4, 6, 3, 0, 1, 7, 8, 3], [2, 0, 2, 1, 2, 2], [1], [3, 0, 1, 3, 0, 3, 3, 2, 1, 2, 3, 1, 2, 0, 3, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 0, 2, 0, 0, 1, 0, 1], [2, 2, 0], [0, 1, 0], [4, 5, 5], [], [], [3, 0, 2, 0], [0], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 2, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= saveOrd((in1 + in2[:i0]))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 1, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 4, 4, 4, 3, 0, 4], [1], [0], [3, 0, 4, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 12, 2, 5, 1, 1, 3, 1, 0, 8, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = (s2 + getCharFromString(in1[len(in1):], max(abs(i0), min(mod(int(0.0),int(7.0)), ( int(5.0) + len(\"\"R\"\") ))))) not in saveChr(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 0, 3, 3, 0, 0, 6, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s0[min(len(in2[mod(int(0.0),i2):mod(i1,int(1.0))][divInt(int(5.0),abs(i2)):]), i2):] not in in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 2, 0, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 2, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 5, 1, 1, 0, 1, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nres0 = in1[i0:][len(in1):mod(i2,i2)] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 4, 0, 0, 2, 2, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 10, 1, 3, 0, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString(in1, len(in1))[int(7.0):]):]:{:\\nres0 = in0[int(7.0):i0][mod(i2,int(5.0)):abs(int(2.0))] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 1, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 3, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 1, 3, 1, 3, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 2, 3, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 4, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(s2[len(s1):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [2, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 3, 0, 3, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[( ( ( int(0.0) + i0 ) - int(8.0) ) * i2 ):]:{:\\nres0 = in1 not in in1[i1:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 2, 1, 0], [0, 0], [1, 5], [0, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 0, 2, 0, 1, 2, 0, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 2], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 0, 3, 0, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 3, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 0, 3, 0, 0, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):len(in1.capitalize())]:{:\\nres0 = in0.endswith(saveChr(abs(int(0.0)))[i2:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 4, 0, 9, 2, 2, 2, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[( max(i0, i2) + len(in1) ):]:{:\\nb0 = ( ( ( i0 + int(0.0) ) != i0 or True ) or in1.startswith(in0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 2, 4, 5, 3, 0, 4], [0], [0], [2, 0, 0, 4, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 5, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(s2):] not in saveChr(int(0.0)).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 4, 2, 2, 5, 5, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 3, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 5, 3, 1, 4], [1], [0], [2, 0, 2, 2, 0, 1, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 3, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 49, 17, 7, 10, 7, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1[max(abs(( i0 + ( i2 + int(7.0) ) )), min(int(7.0), ( i2 * divInt(( ( int(4.0) - i0 ) + ( len(\"\"R\"\") * ( i1 - divInt(i2,( int(2.0) - i1 )) ) ) ),divInt(divInt(int(2.0),i2),int(5.0))) ))):int(5.0)][i0:]):]:{:\\nres0 = getCharFromString(in2, i0)[divInt(int(5.0),min(int(9.0), max(i0, ( ( divInt(int(8.0),int(5.0)) * mod(int(0.0),i1) ) + int(4.0) )))):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 0, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 34, 11, 7, 4, 7, 6, 0, 1, 8, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in0[max(len(in1), mod(int(84.0),i0)):]:{:\\nres0 = in1.capitalize() not in in0[mod(( int(5.0) + divInt(int(7.0),abs(i0)) ),i2):divInt(divInt(int(2.0),i0),( min(( i1 + divInt(len(s0),( min(i2, mod(max(int(1.0), i1),int(7.0))) * int(7.0) )) ), i2) - i0 ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 3, 1, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 6, 0, 1, 7, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = ( ( len(in0.capitalize()) != mod(int(0.0),i0) or True ) and s1 not in s0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 0, 3, 0, 0, 4, 0, 1, 8, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2.rstrip()[abs(len(in1[i0:])):i2]:{:\\nres0 = in1 not in saveChr(abs(int(0.0)))[i2:int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 3, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 4, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(i1):]:{:\\nres0 = getCharFromString(s2[i1:], int(0.0)) not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 6, 7, 7, 4, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 0, 0, 0, 1, 2], [0, 1, 1], [3, 3, 2, 0, 3, 0, 0, 1, 2, 2, 3, 2, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 0, 0, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 0, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 2, 1, 4, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[saveOrd(in2):] not in \"\"R\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 8, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 1, 0, 0, 0, 1, 0, 0], [0, 1, 1], [3, 3, 1, 2, 0, 1, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 3, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 0, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 2, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 16, 16, 14, 1, 52, 13, 11, 7, 6, 7, 1, 0, 16, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):len(in1[int(7.0):])] not in in2:{:\\nres0 = ( mod(i0,int(7.0)) != i2 or ( in0[int(8.0):max(min(len(in2[:i2]), divInt(( divInt(int(2.0),i0) + min(max(( i1 + ( i2 - ( int(2.0) - i1 ) ) ), ( min(int(5.0), i1) + int(7.0) )), int(5.0)) ),i0)), i0)].endswith(getCharFromString((saveChr(( int(9.0) * max(int(8.0), len(in1)) ))[i0:] + \"\"R\"\"), ( divInt(divInt(int(5.0),int(0.0)),divInt(int(4.0),i1)) - int(8.0) ))) and True ) )\\n:}else:{:\\ni0 = max(i0, int(59.0))\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 1, 8, 1, 3, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[max(i1, int(975.0)):] == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = abs(mod(i1,int(7.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 0, 0, 3, 0, 1, 2, 1, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 1, 4, 3, 0, 4, 2], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 12, 0, 50, 14, 11, 8, 6, 8, 1, 1, 15, 3, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(s1):abs(i0)]:{:\\nloopBreak% = 0\\nwhile in1 not in in0:{:\\nres0 = ( i2 != min(int(0.0), i2) or ( s0.endswith(in1[int(7.0):mod(int(1.0),min(i0, ( ( divInt(int(7.0),i1) + ( len(saveChr(divInt(i2,min(max(( int(2.0) + i1 ), ( abs(int(1.0)) * i2 )), int(7.0))))) - int(7.0) ) ) + i0 )))].rstrip()[i0:divInt(int(9.0),max(( abs(i1) * divInt(divInt(( int(8.0) - int(5.0) ),( int(0.0) - i2 )),int(4.0)) ), len((\"\"R\"\" + s2.lstrip()))))]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 0, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 5, 1, 2, 1, 0, 4, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2[:saveOrd(in2)]\\ni1 = saveOrd(in1[( int(07.0) + int(5.0) ):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 3, 1, 1, 2, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[mod(mod(int(0.0),i0),( i2 + int(7.0) )):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 0, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3], [1, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 5, 1, 2, 1, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in2):]:{:\\ni0 -= len(in1[mod(int(0.0),i2):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 3, 7, 7, 8, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 3, 0, 1, 2, 2, 3, 0, 1, 3, 2, 0, 2, 3, 1, 1, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 0, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1))[len(in1):]:{:\\nb2 = in0 not in saveChr(i1)[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [1, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 0, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [3, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 0, 4, 0, 0, 3, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in (in2 + in1):{:\\nb1 = abs(min(abs(i0), min(int(0.0), i2))) \\g int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 3, 2, 1, 0, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 1, 2, 3, 0, 0, 1, 1, 0, 0, 1, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 2, 2, 0, 1, 0, 1, 2, 1, 4], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 10, 1, 35, 10, 8, 6, 4, 2, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[max(abs(i0), abs(min(mod(i2,max(mod(int(0.0),i2), int(2.0))), ( divInt(( int(7.0) + i0 ),divInt(min(( i1 + ( max(( int(7.0) + int(2.0) ), ( abs(i2) - i0 )) + int(1.0) ) ), int(7.0)),i2)) * i0 )))):]:{:\\ni0 = int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 3, 1, 0, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 0, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = in1[min(i0, i2):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0, 2], [], [], [], [], [], [], [0], [], [1], [2], [1], [0], [1], [], [], [], [], [1, 5, 4, 4, 3, 0, 4], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 1, 0, 0, 3, 0, 0, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0[saveOrd(in2):] not in getCharFromString(in0, int(07.0))[i2:]\\n", "other_info": {}, "test_fitness": 351}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 2], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 1, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 1, 2, 3, 2, 0, 2, 3, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 3, 3, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 1, 13, 5, 2, 1, 4, 5, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nin1 = in0.capitalize()\\ni0 = abs(mod(int(0.0),mod(( i2 + int(7.0) ),divInt(int(5.0),divInt(i2,i2)))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 0, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 6, 1, 1, 10, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[len(s0[i1:i2]):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 0, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 11, 1, 5, 0, 1, 7, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in1):abs(int(7.0))] not in getCharFromString(s0, i0)[mod(i2,int(7.0)):min(int(5.0), len(in1))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = getCharFromString(in0, int(0.0))[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [1, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [1], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 1, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 1, 3, 0, 0, 2, 4, 0, 0, 4, 0, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 3, 3, 2, 0, 11, 1, 5, 0, 1, 6, 1, 0, 12, 2, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[abs(len(\"\"R\"\")):] not in (in2 + in1):{:\\nres0 = ( i0 \\g int(0.0) or ( getCharFromString(in1, len(in0))[min(i2, int(7.0)):].endswith(saveChr(mod(int(5.0),len(s2)))) and False ) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 2, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [4, 2, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 4, 1, 0, 3, 1, 1, 0, 1, 1, 3, 0, 7, 1, 2, 1, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in s2[len(in1):]:{:\\nres0 = ( not len(in2[( int(0.0) + i2 ):i2]) != i2 or True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in0[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i1:i2], int(0.0))[mod(i2,int(9.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 6, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 1, 2, 2, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 3, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2:{:\\ni0 = len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 3, 0, 1, 2, 2, 1, 3, 1, 3, 2, 0, 2, 3, 1, 1, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 2, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 0, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 8, 0, 30, 7, 8, 2, 5, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s2[len(in2):] not in getCharFromString(s0[i1:i1], abs(mod(i2,int(0.0))))[divInt(( min(i0, int(7.0)) + divInt(( int(5.0) - len(getCharFromString((\"\"R\"\" + in1.rstrip()), int(7.0))) ),min(divInt(i1,mod(max(int(7.0), int(3.0)),i2)), i1)) ),abs(int(7.0))):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 0, 7, 7, 6, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 0, 4, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 34, 9, 8, 4, 5, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):i0] not in getCharFromString(s0[i2:abs(mod(i2,int(0.0)))], divInt(int(7.0),min(i0, ( divInt(( int(0.0) + i2 ),divInt(max(( int(7.0) + min(saveOrd((\"\"R\"\" + in1.rstrip()).capitalize()), ( int(7.0) * i2 )) ), divInt(abs(int(6.0)),i1)),int(7.0))) - int(7.0) ))))[i2:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 2, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 0, 0, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(s1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1], [0, 1, 1], [3, 3, 2, 0, 1, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 5, 5, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 5, 1, 2, 0, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in2):]:{:\\ni0 = len(in2[:mod(i2,int(7.0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0, 1, 2], [0], [0], [], [], [1], [4], [1], [0, 0], [3], [], [], [], [], [1], [5], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [1, 0], [], [], [0], [], [1], [1], [], [1, 2, 0], [0], [], [], [3], [], [], [], [6]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(5.0) \\le i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 1, 7, 4, 8, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 1, 2, 0, 2, 2, 2, 1, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 2, 0, 3, 0, 1, 2, 1], [0, 2, 0, 1, 0, 2, 0, 2, 1], [0, 0, 0, 1, 0, 1, 1], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 1, 1, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [21], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = min(int(0.0), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1 not in in0.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 2, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0, 1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 6, 4, 6], [1, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 0, 2, 0, 0, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 1, 1, 0, 1, 3, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3, 1], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 0, 0, 1, 2, 7, 2, 2, 3, 2, 1, 0, 22, 22, 16, 1, 58, 16, 10, 9, 7, 4, 1, 0, 14, 5, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile getCharFromString(s0, len(in2)) not in in1[mod(i1,int(075.0)):]:{:\\nloopBreak% = 0\\nwhile ( min(mod(i1,int(7.0)), ( int(2.0) + abs(i1) )) != divInt(( ( int(1.0) + i1 ) * ( min(len(saveChr(i0)), ( min(divInt(int(7.0),i2), ( max(int(7.0), i1) - int(9.0) )) + int(8.0) )) * i1 ) ),divInt(divInt(int(5.0),abs(int(0.0))),max(i2, ( ( ( int(4.0) - int(8.0) ) - mod(int(59.0),i0) ) * int(9.0) )))) or ( in1[i0:i0].rstrip()[int(2.0):].endswith((\"\"R\"\" + saveChr(int(2.0))).lstrip()) and True ) ):{:\\nres0 = i2 \\l int(646.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = min(i0, i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 2], [0, 1, 1], [0, 3, 3, 1, 0, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 0, 3, 0, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 3, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 5, 0, 13, 2, 4, 0, 2, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i2:]:{:\\nres0 = ( ( len(in1) != len(getCharFromString(in1, int(0.0))) or True ) and in0.endswith(saveChr(i0)[mod(i1,abs(mod(int(7.0),min(i1, i1)))):]) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nb1 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 2, 1, 2, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(( ( int(0.0) + i0 ) - int(7.0) ), i2):]:{:\\nres0 = in1 not in in1[i1:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0], [0, 1], [], [0, 2], [], [0, 0], [], [], [0], [], [0], [], [], [1], [], [1], [], [1, 1], [4, 1], [0, 1], [0], [3, 0, 1, 1], [], [2], [2], [], [0, 0, 4, 4, 3, 0, 4], [1], [0], [1, 0], [], [], [1], [1], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 6, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 2, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 3, 2, 0, 2, 0, 2, 0, 3, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 9, 1, 3, 0, 1, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1[len(in1):] not in in0[abs(int(5.0)):i0].capitalize()[mod(i2,int(7.0)):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [1, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 1, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 12, 2, 5, 0, 2, 6, 1, 1, 10, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(\"\"R\"\"):i1][abs(min(mod(i1,int(0.0)), mod(int(7.0),len(s0)))):] not in s0[i1:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 5, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in \"\"R\"\":{:\\nres0 = abs(len(in2)) != int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 1, 1, 2, 0, 0], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[mod(len(in1),i0):]:{:\\nres0 = in1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 0, 1, 0, 2, 1, 1, 2, 1], [0, 0, 1], [3, 2, 0, 3, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 10, 2, 33, 11, 7, 6, 5, 1, 1, 0, 3, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(\"\"R\"\"[:mod(i1,abs(abs(mod(i0,int(0.0)))))])\\ni1 = ( int(7.0) + divInt(i0,( ( ( int(5.0) + i2 ) * ( min(len(s0), i1) - divInt(min(( int(7.0) + i1 ), divInt(max(int(2.0), i2),int(1.0))),int(7.0)) ) ) * i1 )) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 0, 13, 3, 2, 1, 2, 4, 1, 1, 10, 1, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in0[abs(mod(int(0.0),i0)):].startswith(in1[:mod(i2,int(7.0))].capitalize()[( int(5.0) + int(7.0) ):][i2:i0])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in0[abs(int(0.0)):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 2], [0, 1, 1], [0, 3, 2, 2, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 1, 3, 1, 2, 2, 1, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 3, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 2], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 19, 19, 13, 0, 59, 20, 8, 9, 11, 6, 1, 0, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[i0:min(mod(divInt(i2,( i2 - int(0.0) )),divInt(int(7.0),divInt(i0,i1))), divInt(( int(5.0) + i2 ),( len(in2) * divInt(i1,( abs(mod(min(i2, divInt(len(in1[int(7.0):]),i0)),int(6.0))) - int(1.0) )) )))] not in in1:{:\\nb2 = ( i0 != i1 or ( in0[( int(7.0) + min(int(7.0), max(i2, ( ( mod(int(9.0),int(8.0)) * divInt(int(5.0),i2) ) - int(0.0) ))) ):( int(4.0) - int(8.0) )].capitalize()[abs(int(59.0)):divInt(( int(9.0) * int(2.0) ),int(2.0))].endswith((\"\"R\"\" + s0.capitalize()).rstrip()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 1, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 3, 3, 1, 2, 4, 1, 1, 9, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[saveOrd(\"\"R\"\"):mod(int(0.0),i1)][mod(i0,int(4.0)):].startswith(saveChr(( int(5.0) + abs(i2) )).capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 4, 0, 2, 4, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 1, 5, 1, 1, 0, 1, 2, 0, 1, 4, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2.capitalize()[len(saveChr(int(84.0))):]:{:\\ni0 = mod(int(5.0),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0.capitalize() not in in2:{:\\nres0 = ( max(len(saveChr(mod(int(0.0),i0))[mod(i0,int(7.0)):]), ( int(5.0) + abs(i2) )) != i0 or ( in1.endswith(in1[divInt(divInt(int(7.0),i1),divInt(min(( i2 + ( len(saveChr(divInt(min(i1, ( max(int(6.0), i2) * int(1.0) )),int(7.0)))) - i0 ) ), i0),mod(int(7.0),abs(int(9.0))))):max(i0, divInt(( ( int(8.0) + int(5.0) ) * ( int(0.0) - i0 ) ),int(4.0)))].rstrip()[int(8.0):]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 14, 14, 12, 0, 50, 15, 9, 7, 8, 4, 0, 0, 11, 4, 1, 3, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 0, 1], [2, 2, 0, 1, 3, 2, 0, 2, 2, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 3, 0, 2, 2, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 7, 2, 15, 6, 2, 1, 5, 3, 1, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[( divInt(i0,int(0.0)) + saveOrd(s2) ):]:{:\\ni1 = divInt(i2,divInt(divInt(i2,len(\"\"R\"\")),i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = divInt(i2,int(7.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [1, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 4, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [22], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 4, 0, 1, 7, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[i0:] == getCharFromString(saveChr(i2), int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 0, 6, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 0, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 1, 0, 1, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 1, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [2, 0, 0, 1, 2, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 1, 5], [1], [0], [2, 0, 0, 1, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 2, 1, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in \"\"R\"\"\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 4, 2, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 2, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 3, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 11, 0, 50, 15, 10, 7, 8, 6, 1, 1, 14, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[len(s0):] not in s0[:mod(int(6.0),i0)][mod(i2,int(7.0)):( int(5.0) - max(i2, i0) )][:divInt(divInt(int(7.0),i1),divInt(min(( len((\"\"R\"\" + saveChr(( min(divInt(max(i2, ( abs(int(4.0)) + i1 )),int(2.0)), int(7.0)) * i2 ))).capitalize()) - i0 ), mod(int(7.0),max(int(9.0), max(i2, divInt(( ( int(8.0) + int(5.0) ) * ( int(0.0) - i0 ) ),int(4.0)))))),int(8.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1, 1], [0], [2, 1, 0, 4, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 2, 1, 6, 1, 0, 1, 2, 1, 0, 0, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nb2 = s0.capitalize() not in \"\";\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 5, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 6, 1, 2, 1, 0, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in2[len(in2):] not in s0[:( int(0.0) + i2 )].capitalize()[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 13, 13, 11, 0, 49, 16, 9, 7, 9, 6, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s1[len(in1):]:{:\\nres0 = ( ( len(in1.capitalize()) != mod(int(0.0),mod(( i0 + int(7.0) ),divInt(int(5.0),abs(i2)))) or True ) and in0 not in saveChr(i2)[divInt(divInt(int(7.0),i2),( min(( i1 + divInt(len(s0[( min(i2, mod(max(int(6.0), i1),int(1.0))) * int(7.0) ):i2]),i0) ), divInt(int(7.0),abs(int(9.0)))) - max(i0, ( ( ( int(8.0) + int(5.0) ) * mod(int(0.0),i0) ) - int(4.0) )) )):] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 3, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1):]:{:\\ni0 = len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 1, 2, 1, 1], [0, 1, 1], [3, 3, 2, 2, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 2, 0, 2, 3, 2, 0, 2, 0, 2, 3, 0, 3, 3, 1, 0, 3, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 0, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 0, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 12, 0, 49, 16, 10, 7, 9, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in1[saveOrd(in0):] not in saveChr(mod(mod(i0,( i2 + int(0.0) )),divInt(int(7.0),abs(i2))))[i2:divInt(divInt(( i1 + ( min(divInt(i2,( i1 + divInt(len(s0[i2:]),min(max(int(5.0), i0), abs(int(7.0)))) )), int(6.0)) + i0 ) ),divInt(int(1.0),max(int(7.0), len(getCharFromString((\"\"R\"\" + in1.rstrip()), i1))))),( ( ( int(7.0) + int(9.0) ) * divInt(int(8.0),i2) ) - int(5.0) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 0, 1, 0, 3, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 3, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in2[len(in2):] not in in1[i0:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2], [2, 1, 2, 0, 2, 2, 0, 2, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 1], [0, 3, 0, 3, 3, 2, 0, 3, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 3, 2, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 3, 0, 2, 3, 2, 2, 0, 0, 2, 2, 1, 0, 0, 1, 0, 3, 3, 0, 2, 0, 2, 1, 0, 0, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [1, 4, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 3, 0, 4, 4], [2, 0, 1, 0, 2, 2, 0, 2, 0, 2, 2], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [1], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[i2:]:{:\\nb0 = getCharFromString(in1, max(i1, saveOrd(in1))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 7, 0, 3, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 2, 0, 3, 0, 0, 1, 2, 2, 3, 2, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 3, 1, 0, 0, 3, 3, 1, 3], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 3, 2, 1, 3, 0, 2, 1, 1, 2, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 12, 0, 55, 16, 13, 7, 9, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):len(in1[mod(i1,abs(i2)):])]:{:\\nres0 = in0 not in getCharFromString(s0[i2:int(0.0)], ( ( max(divInt(int(7.0),( divInt(int(5.0),i0) + int(7.0) )), len(saveChr(( i1 + ( min(divInt(int(7.0),i2), ( abs(int(3.0)) * i1 )) - int(7.0) ) )))) + int(7.0) ) * i2 ))[i0:divInt(int(9.0),max(divInt(max(i0, mod(divInt(( int(8.0) - int(7.0) ),divInt(int(0.0),abs(int(3.0)))),i2)),i2), abs(max(int(8.0), len((\"\"R\"\" + in1.rstrip()))))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 3, 0, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 0, 3, 2, 0, 2, 3, 2, 3, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 0, 1, 2, 1], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 8, 2, 4, 0, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 = len(in1[mod(abs(i2),mod(i2,len(in0))):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0], [5, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 2, 1, 2], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[:len(in1)]:{:\\ni0 = abs(i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 3, 0, 0, 0, 0, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 2, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 0, 0, 5, 1, 1, 9, 1, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\".rstrip()[:abs(i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 4, 2, 0, 1, 0, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 11, 2, 5, 0, 2, 5, 1, 1, 7, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[min(abs(int(9.0)), min(mod(i0,int(7.0)), mod(int(5.0),len(\"\"R\"\")))):].capitalize()):]:{:\\nin1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 4, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 3, 0, 0, 6, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1[len(in2):] not in saveChr(len(in1)).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 0, 1, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(in0[i2:])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 0, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = in1[len(in2):] not in s0[int(5.0):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 322}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 1, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 3, 3, 2, 1, 4, 1, 1, 8, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[len(in1):] in saveChr(mod(int(0.0),i0))[( i2 + int(7.0) ):( int(5.0) + abs(i2) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 3, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 3, 1, 3, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 3, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 0, 0, 0, 2, 1, 2, 4, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 0, 2, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 14, 0, 52, 14, 12, 7, 7, 5, 0, 1, 9, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(in1):mod(int(0.0),max(( i0 + int(1.0) ), min(int(5.0), min(i1, i1))))][:( divInt(i0,i1) + divInt(min(divInt(i2,( min(( abs(i1) * divInt(max(abs(i2), int(7.0)),int(3.0)) ), i0) - i0 )), ( int(1.0) + saveOrd(in0.capitalize()[int(5.0):min(i0, divInt(mod(( int(7.0) * int(9.0) ),( int(8.0) - i1 )),int(5.0)))]) )),int(0.0)) )]):]:{:\\nres0 = i2 != i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 6, 2, 1, 2, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 = ( ( int(0.0) + i2 ) - int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 2, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 7, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 3, 2, 2], [2, 2, 2, 1, 2, 2, 1, 2, 2, 0, 1, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 1, 1, 3, 1, 0, 2, 0, 2, 3, 0, 2, 3, 1, 0, 1, 3, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 1, 1, 0, 3, 1, 0, 3, 1, 2, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 1, 0, 3, 0, 1, 2, 1, 2, 0, 0, 0], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 2, 4, 4, 0, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 0, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 5, 1, 2, 2, 1, 0, 0, 8, 8, 5, 0, 21, 5, 3, 1, 4, 5, 1, 1, 10, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[max(len(in1[mod(int(0.0),i2):].capitalize()), divInt(i2,int(8.0))):]:{:\\nloopBreak% = 0\\nwhile in1.startswith(saveChr(( int(7.0) + int(7.0) ))[i2:i1]):{:\\nres0 = ( divInt(divInt(int(6.0),int(1.0)),int(7.0)) != max(int(7.0), i2) or not s0.endswith(\"\"R\"\") )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 1, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [0, 3, 1, 1, 0, 2, 0, 1, 3, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [0, 0, 0, 2, 1, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0 not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 2, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 2, 4, 4, 3, 0, 3], [1], [0], [2, 0, 0, 1, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 2, 2, 1, 0, 8, 2, 3, 0, 2, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nres0 = ( \"\"R\"\".startswith(in1) or saveOrd(in0) != mod(int(0.0),abs(mod(i1,int(7.0)))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 2], [0, 0], [1, 3, 2], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 1, 5, 4, 0, 0, 4, 4, 0, 0, 2], [1], [0], [2, 0, 0, 2, 0, 0, 4, 0, 2, 0, 4, 3, 4, 4, 0, 1, 0, 4, 2, 4, 2, 0, 0], [2, 3, 0, 2, 1, 2], [5, 0], [2, 1, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 3, 2, 2, 0, 0, 9, 9, 9, 0, 33, 9, 6, 4, 5, 11, 1, 1, 23, 6, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in2):]:{:\\nloopBreak% = 0\\nwhile in1[:len(s0)] not in s0.capitalize():{:\\nres0 = ( int(0.0) != int(4.0) or ( in1[i0:divInt(i0,int(5.0))] != (getCharFromString(in1.capitalize(), ( int(7.0) - int(6.0) )) + \"\"R\"\").strip(s0) and saveChr(i2) == s0[:i0].capitalize()[:( divInt(int(1.0),i1) + divInt(abs(divInt(i2,( min(( len(s2) * i1 ), divInt(min(int(7.0), i2),int(7.0))) - int(9.0) ))),i0) )] ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [2, 2, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 0, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 3, 0, 2, 2, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 5, 2, 11, 4, 2, 4, 1, 3, 1, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0[( divInt(i1,int(0.0)) + saveOrd(s2) ):]:{:\\ni2 = ( i2 + int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= ( i2 - len(\"\"R\"\") )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 2, 1, 2, 7, 8, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 1, 1, 0, 1, 3, 0, 2, 0, 2, 1, 2, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 2, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [0, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 1, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 1, 3, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 1, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 2, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in0[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 0, 4, 3, 0, 4], [1], [0], [2, 2, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 5, 1, 2, 0, 1, 2, 0, 0, 5, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(in2[len(in2.capitalize()):][:mod(int(84.0),i2)])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 0, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 2, 1, 2], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 3, 0, 0, 6, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):abs(int(7.0))] not in in1.capitalize().rstrip()\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 0, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 4, 0, 0, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 0, 1, 5, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0.capitalize():{:\\nres0 = in1 != saveChr(len(in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 3, 1, 2, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in1[:( ( int(0.0) + i0 ) - mod(i2,i1) )] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 2, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 4, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nin1 = in0.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [0, 0, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 2, 0, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[i0:]:{:\\nres0 = s0 == in2[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 6, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in1):] not in getCharFromString(saveChr(i0), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [0], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [1, 2], [0], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [2, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [20], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( saveOrd(\"\"U\"\") == i0 or False ) and in1 == in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(s0[int(0.0):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1, 2, 2, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 2, 2, 0, 4, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 15, 1, 55, 17, 10, 9, 8, 6, 0, 1, 11, 2, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(getCharFromString(in1[i1:], i1)):abs(mod(i1,int(0.0)))][mod(int(7.0),min(i1, ( divInt(( int(5.0) + i0 ),( len(in0[:min(i2, ( max(( int(7.0) + i1 ), divInt(abs(int(2.0)),i1)) * int(1.0) ))]) - int(7.0) )) + i2 ))):]):]:{:\\nin2 = saveChr(( divInt(int(7.0),max(int(9.0), max(i0, divInt(( ( int(8.0) * int(5.0) ) - ( int(0.0) - i0 ) ),int(4.0))))) * mod(i1,divInt(i2,i2)) ))\\ni1 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [4, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [1, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 5, 4], [1], [0], [2, 1, 0, 0, 0, 4, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 1, 4, 0, 2, 1, 0, 3, 1, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = len(in2) \\le i1\\ni1 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 1, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 1, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 4, 4, 2, 0, 8, 0, 4, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(max(i0, int(0.0))):]:{:\\nb1 = ( ( len(\"\"R\"\") != min(i2, int(757.0)) or True ) and in1 not in in1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 2, 0, 3, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 3, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 3, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 0, 1, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = len(in2) != mod(i1,len(s1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\ni1 = len(in1[int(0.0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [0, 2, 2, 2, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nres0 = in1 not in in1[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 3, 3, 2, 0, 0, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 4, 2, 0, 1, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 2, 3], [1, 0], [2, 1, 0, 0, 1], [], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [1, 2, 0, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 1, 0, 0, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[int(3.0):]:{:\\nres0 = in1 not in in1[mod(i0,int(7.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 0, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 4, 5, 3, 0, 4], [1], [0], [0, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 5, 1, 2, 1, 0, 3, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0:{:\\ni1 = min(len(in1), ( int(0.0) - i2 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 3, 1, 0, 4], [1], [0], [2, 0, 4, 4, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 4, 0, 1, 5, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[min(len(saveChr(mod(int(0.0),i0)).capitalize()), mod(i2,int(7.0))):]:{:\\nin1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 11, 3, 3, 1, 2, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = abs(mod(int(0.0),i0)) != divInt(i2,abs(( int(7.0) + int(5.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0], [0, 1, 1], [3, 3, 0, 3, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 3, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 13, 0, 50, 14, 10, 7, 7, 3, 1, 0, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len((\"\"R\"\"[abs(i2):] + in2)):abs(i2)] not in saveChr(mod(i2,int(7.0)))[min(len(in1[min(i0, divInt(( divInt(int(7.0),i1) + ( max(( i2 + ( i1 - ( int(5.0) - i2 ) ) ), divInt(min(int(2.0), i0),int(2.0))) + int(5.0) ) ),i0)):i0]), ( int(7.0) * max(int(5.0), max(i1, divInt(divInt(mod(int(9.0),int(8.0)),( int(5.0) - i0 )),int(0.0)))) )):int(4.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 17, 17, 11, 1, 49, 15, 10, 9, 6, 7, 1, 0, 15, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in s2[len(in1):]:{:\\nres0 = ( i1 != int(875.0) or ( in0[abs(mod(i1,int(7.0))):].endswith(s0[mod(int(2.0),min(i1, ( divInt(( int(1.0) + i1 ),( len(getCharFromString((\"\"R\"\" + saveChr(min(i0, ( max(( int(7.0) + i2 ), divInt(abs(int(7.0)),i1)) * int(9.0) )))), int(8.0))) - i1 )) + ( divInt(int(5.0),max(int(0.0), len(in1))) * i2 ) ))):]) and True ) )\\n:}\\ni1 = divInt(( ( int(4.0) - int(8.0) ) - ( int(59.0) * i2 ) ),int(9.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [0, 2], [0, 0], [], [0, 0], [], [], [1, 1, 1], [2, 3], [1, 0, 1, 1], [0, 0], [], [0, 3], [1], [0], [], [0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 6, 4, 4, 5, 0, 2, 0, 9], [2, 1], [], [2, 1, 2, 0, 1, 3, 2, 1, 0, 1], [1, 1], [3, 0], [], [1, 0], [0], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 6, 6, 1, 0, 6, 2, 1, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = mod(int(064.0),divInt(i2,int(450.0))) == len(s0)\\nb1 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 2, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 2, 0, 2, 0, 1, 3, 1, 3, 0, 0, 2, 1, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 9, 8, 3, 6, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):len(in1[mod(mod(i0,( i2 + int(0.0) )),max(int(7.0), min(i2, i0))):])]:{:\\nres0 = in0 not in saveChr(divInt(int(5.0),int(7.0)))[i1:divInt(len(s0[divInt(i2,( min(( max(i1, mod(abs(int(6.0)),i2)) + int(1.0) ), int(7.0)) * i0 )):]),i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 34, 11, 6, 4, 7, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in1[saveOrd(in0):] not in s0[mod(int(0.0),i0):divInt(int(4.0),int(5.0))].capitalize()[( int(7.0) + divInt(i0,i2) ):divInt(divInt(int(6.0),i0),( abs(( i1 + divInt(min(( len(saveChr(i2)) * mod(min(int(1.0), i1),int(7.0)) ), int(7.0)),i2) )) - i0 ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 0, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 10, 1, 3, 0, 1, 5, 1, 1, 10, 0, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[:len(in2)]:{:\\nres0 = s1[len(in1):] not in in0[:int(5.0)][i0:i1][mod(i2,int(7.0)):abs(int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 1, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 1, 3, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 1, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 2, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 3, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 6, 1, 1, 14, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in (in2 + in1[len(in1):])[i0:]:{:\\nin0 = s0[int(7.0):][:len((\"\"R\"\" + saveChr(i2)).capitalize())][mod(i2,int(7.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 0, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[abs(min(i0, int(0.0))):]:{:\\nb1 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 3, 4, 1, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1[len(in2):] not in getCharFromString(in0, len(in1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 33, 10, 6, 5, 5, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0[:( int(0.0) + i0 )].capitalize()[mod(i2,int(7.0)):( int(5.0) + int(7.0) )]):i2][i0:] not in saveChr(mod(divInt(int(6.0),i1),divInt(abs(( i2 * ( min(divInt(len((\"\"R\"\" + s0.rstrip())),i1), ( min(int(1.0), i2) - int(7.0) )) + int(7.0) ) )),i0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 2, 2, 5, 0, 13, 3, 3, 2, 1, 5, 1, 0, 10, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[saveOrd(in1):]:{:\\nb2 = ( mod(i0,i2) != ( i2 + int(0.0) ) or ( \"\"R\"\".capitalize()[( int(7.0) + abs(i0) ):i1].endswith(in0) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 3, 0, 1, 2, 2, 3, 0, 1, 2, 2, 1, 0, 1, 3, 2, 2, 2, 3, 1, 1, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):i0] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 3, 0, 0, 0, 0, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 2, 0, 4, 0, 2, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 3, 0, 0, 4, 1, 1, 10, 2, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1.rstrip()):][len(saveChr(abs(i0))[i2:i0][:i0]):]:{:\\nres0 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 9, 9, 10, 0, 40, 11, 10, 3, 8, 6, 0, 0, 11, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( mod(int(8.0),i0) != mod(abs(int(7.0)),divInt(int(5.0),min(i2, i2))) or ( in0.capitalize()[divInt(divInt(int(7.0),i0),divInt(len(s0),( i1 + ( min(mod(max(i2, ( abs(int(6.0)) + i1 )),int(1.0)), int(7.0)) * i2 ) ))):i0].endswith(saveChr(divInt(int(7.0),max(int(9.0), abs(i0))))) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 8, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 2, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 3, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [1, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 1, 4, 0, 0, 4], [1], [0], [2, 0, 0, 4, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s1):]:{:\\nres0 = \"\"R\"\".capitalize() not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 4], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 4, 4, 3, 0, 13, 3, 3, 1, 2, 7, 1, 0, 15, 2, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in (in1 + in1):{:\\nres0 = ( len(s0[mod(int(8.0),int(4.0)):]) != mod(i0,int(5.0)) or ( s0[( int(7.0) + abs(i2) ):i2].startswith((\"\"R\"\" + in1.rstrip()).capitalize()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 5, 1, 2, 0, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 = len(in1[:mod(int(0.0),int(7.0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 1, 8, 1, 3, 0, 1, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[max(len(in2), i1):] not in in1[int(77.0):]\\ni1 = abs(mod(i1,int(5.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [2, 2, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 4, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [20], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 3, 1, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\ni0 = saveOrd(\"\"U\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 5, 9, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 3, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 3, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[saveOrd(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [1, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 1, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1)):{:\\nres0 = s1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 1], [1, 1, 1], [1, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 2, 0, 4], [1], [0], [2, 2, 4, 2, 1, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 12, 2, 3, 0, 2, 1, 1, 0, 6, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(8.0) != len(getCharFromString(\"\"R\"\"[i0:int(4.0)], saveOrd(s1))[mod(i0,int(5.0)):][mod(int(7.0),abs(i2)):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [1, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 1, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 0, 3, 0, 2, 0, 3, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(len(in1), i0):]:{:\\nin1 = in0[int(07.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [0, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 4, 0, 4], [1], [0], [0, 0, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2:{:\\nb2 = in1 not in in1[len(in1):].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 1, 2, 1, 0, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in2[len(in0):( int(0.0) + i2 )] not in s0[:i2].capitalize()[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 0, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nres0 = in1[len(in1):] not in s0[int(5.0):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 2, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 6, 0, 13, 2, 2, 2, 0, 4, 1, 1, 14, 4, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1.capitalize()[( ( int(0.0) + i0 ) - int(7.0) ):i2]):][i1:]:{:\\nres0 = saveChr(saveOrd(in1[:int(5.0)]))[i0:i1] not in (\"\"R\"\" + saveChr(i2)).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 2, 3, 2, 1, 1, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 1, 2, 3, 0, 0, 1, 1, 0, 0, 1, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 2, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 8, 1, 35, 11, 8, 6, 5, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[max(abs(i0), abs(min(mod(mod(len(in1),( int(0.0) + int(2.0) )),int(7.0)), divInt(( divInt(int(7.0),i1) + ( min(( i0 + ( max(( int(2.0) - int(1.0) ), divInt(abs(i0),i1)) + int(7.0) ) ), int(7.0)) * i2 ) ),i1)))):]:{:\\ni2 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 0, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 0, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 3, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 1, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 8, 9, 5, 3, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[len(in1):] not in getCharFromString(in0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + max(i0, len(saveChr(( mod(int(5.0),i1) + ( i0 * divInt(int(7.0),min(max(( int(7.0) - i2 ), ( abs(int(9.0)) + i2 )), int(7.0))) ) )))) ):max(i0, i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 1, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 1, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 4, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 5, 2, 0, 0, 2, 4, 0, 1, 5, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[mod(int(84.0),mod(int(5.0),i0)):]:{:\\nb2 = s1 not in in1.rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 2, 0, 1, 5, 1, 1, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1[len(in1[:mod(int(84.0),i0)]):] not in in0.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in2[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 2, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(abs(int(0.0))):]:{:\\nres0 = in1 not in in1[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 0, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 8, 0, 32, 10, 8, 3, 7, 7, 0, 1, 10, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(len(in1), i0):]:{:\\nb2 = in1.rstrip() not in in0[mod(len(getCharFromString(s0, mod(i0,int(07.0)))),( int(1.0) + min(i2, divInt(divInt(divInt(int(7.0),i0),( len(in1) + min(i1, divInt(max(mod(int(6.0),i2), ( abs(int(1.0)) * i1 )),int(7.0))) )),i2)) )):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 3, 1, 3, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in1[( ( int(0.0) + i1 ) - ( i2 * i1 ) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 8, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 1, 2, 2, 0, 0, 1, 2, 1, 1], [0, 1, 1], [3, 3, 2, 2, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 2, 0, 2, 3, 2, 0, 2, 0, 2, 3, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 0, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 4, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 12, 4, 3, 1, 3, 4, 1, 1, 7, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\"[len(in1):] not in saveChr(mod(mod(i0,( i2 + int(0.0) )),divInt(int(7.0),abs(i2))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 1, 1, 2, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 3, 4, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 0, 2, 0, 0, 5, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[:abs(len(in1))]:{:\\nin1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [4, 0], [2, 2, 0, 2, 1], [0], [21], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 7, 0, 4, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2[len(in2):] not in in1[max(abs(i0), min(i2, int(07.0))):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 1], [1, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 2, 1, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 7, 7, 11, 0, 34, 9, 7, 5, 4, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in2):]:{:\\nres0 = ( ( abs(i0) != int(7.0) or True ) and in1.rstrip()[i1:] not in in0[divInt(i2,int(7.0)):abs(min(len(s0[i0:divInt(( divInt(int(5.0),i1) + ( min(( i2 + ( i1 - ( int(2.0) - i2 ) ) ), mod(max(int(2.0), i0),int(5.0))) + int(7.0) ) ),i0)]), i0))] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 0, 0, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 0, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(s1, min(len(in1), i0))[int(0.0):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 0, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 3, 0, 2, 0, 2, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 11, 0, 34, 9, 7, 5, 4, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString((in2 + in1[len(\"\"R\"\"[len(in1[i1:i2]):abs(mod(i2,int(0.0)))][( ( i0 + i1 ) + int(7.0) ):]):]), divInt(( int(5.0) + i2 ),int(7.0))):{:\\nin0 = saveChr(min(divInt(i1,( abs(( min(i2, divInt(max(int(7.0), i0),int(3.0))) - int(7.0) )) + i0 )), i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2], [], [1, 5], [3, 3, 1], [], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 2, 4, 3, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 1, 0, 0, 2, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(int(0.0), i1):]:{:\\ni1 = int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1[i1:int(0.0)] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 6, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 5, 1, 2, 0, 1, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ns0 = in0[:saveOrd(s0)]\\ni0 = mod(int(9.0),int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 0, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2, 1], [0, 1, 1], [2, 2, 0, 1, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1, 0, 0, 1, 3, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 2, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 19, 14, 1, 57, 18, 9, 8, 10, 6, 1, 1, 14, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(mod(i0,int(1.0)),len((in1 + s0))):][( int(75.0) + int(7.0) ):]:{:\\nb1 = in0[divInt(int(4.0),max(i2, ( divInt(( abs(i2) + ( min(divInt(i0,( divInt(mod(int(1.0),i1),( len(s0[int(7.0):i2]) * int(7.0) )) - int(9.0) )), i1) + i2 ) ),( int(8.0) * min(int(5.0), max(i0, ( divInt(mod(int(0.0),int(4.0)),divInt(int(8.0),i0)) - int(59.0) ))) )) - abs(int(9.0)) ))):i0].startswith(getCharFromString((\"\"R\"\" + saveChr(i1)), int(2.0)))\\ni2 = max(i1, int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 2, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 6, 1, 3, 1, 0, 6, 1, 1, 10, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = s2[len(\"\"R\"\"):] not in in0.capitalize()[( int(0.0) + i0 ):len(s0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 4, 4, 0, 2, 0, 0, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 2, 0, 1, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(saveChr(len(in1)).capitalize()):]:{:\\nres0 = in1[mod(int(84.0),i0):] not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 6, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 3, 3, 3, 2, 1, 0, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 4, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 1, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 2, 0, 1, 3, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 1, 3, 3, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 4, 2], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 1, 1, 1, 0, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 0, 8, 5, 9, 9, 2, 2, 6], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 3, 3, 2, 1, 0, 2, 2, 3, 0, 2, 2, 2, 2, 0, 1, 2, 0, 0, 2, 3, 2, 0, 0, 3, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 3, 3, 2, 3, 1, 3, 0, 2, 3, 3, 2, 0, 0, 0, 2, 1, 0, 2], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0], [3, 3, 2, 4, 2, 0, 1, 2, 1, 2, 1, 3, 0, 3, 1, 1], [0, 0, 2, 1, 2, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 4, 1, 4, 0, 1, 0], [1, 1, 2], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 10, 0, 38, 10, 10, 5, 5, 3, 0, 0, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in saveChr(len(in1))[:int(0.0)]:{:\\nres0 = abs(saveOrd(saveChr(mod(int(0.0),i0))[mod(( abs(i2) + divInt(( ( ( i2 + int(7.0) ) * ( i0 - i1 ) ) * divInt(min(divInt(i2,i1), max(abs(i2), max(i0, int(7.0)))),int(2.0)) ),i0) ),int(1.0)):int(7.0)])) != abs(int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 3, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 2, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 3, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 3, 0, 4, 0, 3, 4, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1], [4, 5, 5, 4, 3, 0, 2], [1], [0], [2, 0, 0, 4, 4, 0, 4, 4, 2, 1, 4, 0, 1, 4, 1, 1, 0], [3, 1, 3, 0], [1, 5], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 4, 1, 1, 0, 1, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[saveOrd(in2):]:{:\\ni0 = mod(i2,i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 0, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 11, 0, 34, 9, 7, 5, 4, 4, 0, 0, 10, 1, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = in2[len(in2):] not in getCharFromString(in1, len(in1[:i1][i2:abs(mod(i2,int(0.0)))][( ( i0 + i1 ) + int(7.0) ):divInt(( int(5.0) + i2 ),int(7.0))]))[min(divInt(i1,( abs(( min(i2, divInt(max(int(7.0), i0),int(3.0))) - int(7.0) )) + i0 )), i2):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 0, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 0, 1, 3, 1, 3, 0, 0, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 13, 0, 49, 14, 10, 6, 8, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s0[:divInt(int(7.0),i0)].capitalize()[i2:i2][int(7.0):abs(int(0.0))]):min(i0, i1)] not in saveChr(mod(( divInt(i2,divInt(len((\"\"R\"\" + s0.rstrip())),divInt(i1,( min(( max(i2, divInt(abs(int(2.0)),i0)) - int(2.0) ), int(5.0)) + i0 )))) * i2 ),( int(7.0) - max(int(5.0), max(i2, mod(divInt(( int(9.0) + int(8.0) ),( int(5.0) * i0 )),int(0.0)))) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[abs(int(0.0)):] not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1], [1, 0, 0, 1, 0], [0, 2], [2, 1, 2], [0], [0, 0, 0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 0, 0, 1], [0, 7, 5, 5, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 4, 0, 1, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 5, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2[len(in1):len(in1.rstrip())]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(int(0.0),int(5.0))].rstrip()[( int(7.0) + abs(i2) ):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1, 1, 0, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 2, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 12, 1, 51, 16, 10, 9, 7, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), i2):]:{:\\nres0 = \"\"R\"\"[int(07.0):] not in in1\\ni1 = abs(mod(i1,mod(( int(5.0) + min(i1, divInt(( ( int(7.0) + i0 ) * ( len(in0[min(i2, ( max(divInt(int(2.0),i1), ( abs(int(1.0)) - i1 )) + int(7.0) )):int(7.0)]) * i2 ) ),divInt(divInt(int(9.0),max(int(8.0), min(i1, ( ( ( int(5.0) - int(0.0) ) - mod(int(4.0),i0) ) * int(8.0) )))),i1))) ),int(59.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 2, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[max(len(in2), int(7.0)):]:{:\\nres0 = in1[int(7.0):] == in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 0, 3, 0, 0, 5, 1, 1, 10, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(\"\"R\"\"))[i0:int(0.0)] not in saveChr(len(in0[i2:i2]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [2, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 6, 0, 15, 3, 3, 1, 2, 4, 1, 1, 10, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s1[len(in1):]:{:\\nres0 = in1[i0:] not in getCharFromString(saveChr(i2)[int(0.0):len(\"\"R\"\"[( i2 * int(7.0) ):mod(int(5.0),abs(i0))])], divInt(i2,i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 4, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 3, 1, 1, 5, 1, 1, 1, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\ni0 = len(in1.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 10, 10, 9, 0, 40, 11, 10, 6, 5, 7, 1, 0, 15, 3, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[:len(in2)] not in in1:{:\\nres0 = ( len(in1) != i1 or ( s2.endswith(getCharFromString(s0[int(0.0):abs(mod(i1,int(7.0)))], mod(int(5.0),min(i1, ( divInt(( int(7.0) + i1 ),( len(saveChr(min(i0, ( max(( int(2.0) + i2 ), divInt(abs(int(1.0)),i1)) * int(7.0) )))) - int(7.0) )) + i1 ))))[( divInt(int(9.0),max(int(8.0), len((\"\"R\"\" + in1.rstrip())))) * i2 ):]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 0, 2, 3, 1, 1, 2, 0, 1, 0, 1, 3, 2, 3, 2, 3, 1, 1, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 1, 1, 3, 0, 8, 1, 3, 0, 1, 5, 1, 0, 9, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( i1 != i2 or ( \"\"R\"\".endswith(getCharFromString(in0, abs(mod(i2,int(0.0))))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 0, 1, 2, 0, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 2, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 3, 1, 3, 3, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 4, 0, 1, 0, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nin2 = in0[:len(s0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1, 1], [1, 0], [0, 0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 2, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2, 1], [0, 1, 1], [3, 3, 2, 2, 0, 2, 0, 3, 3, 1, 3, 0, 0, 2, 1, 1, 3, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1, 2, 0, 1, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 1, 0, 3, 0, 1, 2, 1, 4, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 1, 4, 2, 2, 0, 13, 13, 14, 0, 56, 16, 13, 7, 9, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile ( ( abs(mod(mod(i0,( i2 + max(min(int(0.0), len(in1[i2:])), i0) )),divInt(int(7.0),int(5.0)))) != min(divInt(max(divInt(i1,( abs(( max(i2, mod(saveOrd(in0),int(7.0))) + i1 )) * int(6.0) )), int(1.0)),i2), i0) or True ) and saveChr(( int(7.0) - abs(mod(max(i0, divInt(( ( int(2.0) + int(9.0) ) * ( int(8.0) - i0 ) ),int(5.0))),saveOrd(s0[int(0.0):]))) ))[mod(i1,int(4.0)):i2] not in saveChr(i1) ):{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s2[:min(mod(int(0.0),i0), mod(i2,int(7.0)))] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 3, 1, 2, 1, 0, 2, 3, 2, 2, 0, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 4, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 2, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 4, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 4, 0, 17, 4, 3, 2, 2, 4, 1, 1, 11, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = \"\"R\"\"[len(in1):mod(int(7.0),i0)][( i2 + int(5.0) ):] not in in1[:( int(7.0) + len(saveChr(i2)) )].capitalize()[abs(int(6.0)):mod(int(1.0),i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 1, 5, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 4, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nres0 = s1 not in in2[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 1, 8, 1, 3, 0, 1, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in1[len(in0):] not in in2[i0:int(07.0)]\\ni2 = abs(mod(i1,int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 2, 1, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 3, 3, 0, 5], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 1, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 8, 2, 2, 0, 2, 5, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[max(len(in2), mod(int(0.0),int(7.0))):] not in in1[mod(i0,int(5.0)):]:{:\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 1, 4, 4, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[:abs(len(s1))]:{:\\nres0 = in1[i0:] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 9, 0, 39, 11, 10, 5, 6, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nres0 = in1[len(in0):] == s1[mod(int(0.0),i0):( i2 + abs(( int(1.0) + min(i2, int(5.0)) )) )].capitalize()[mod(divInt(int(7.0),i0),divInt(len(saveChr(( i1 * ( min(divInt(max(i2, ( abs(int(6.0)) - i1 )),int(1.0)), int(7.0)) + i2 ) ))),i0)):divInt(int(7.0),max(int(9.0), len((\"\"R\"\" + in1.rstrip()))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s1 not in in0.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 2, 4, 5, 3, 0, 4], [1], [0], [2, 3, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 5, 1, 1, 11, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (s2 + in1[len(in2):])[mod(i0,int(0.0)):]:{:\\nres0 = \"\"R\"\" not in getCharFromString(in0[len(saveChr(i2)):i2], int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 2, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 3, 1, 3, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in1[( ( ( i0 + int(0.0) ) * i2 ) * i1 ):] != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 14, 1, 49, 14, 9, 8, 6, 6, 0, 0, 11, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[max(len(in2), i0):] not in in1:{:\\nres0 = ( int(3.0) != len(in1) or ( in0.endswith(getCharFromString(s0[min(i2, int(7.0)):mod(int(5.0),len(saveChr(i2)))], divInt(( divInt(min(i1, ( int(7.0) + ( i1 + ( i2 * divInt(int(2.0),i1) ) ) )),( max(int(5.0), i2) - int(7.0) )) + i0 ),i0))[i0:]) and True ) )\\ni1 = ( int(5.0) * min(int(9.0), max(i0, divInt(divInt(( int(8.0) - int(5.0) ),( int(0.0) - i1 )),int(4.0)))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 1, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 0, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 1, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 1, 3, 3, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 2, 3, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 8, 0, 29, 8, 6, 5, 3, 6, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len((in1 + in1)[i0:])):]:{:\\nres0 = int(0.0) != len(getCharFromString(in2[max(i2, int(7.0)):( int(5.0) + i2 )], i1)[mod(( divInt(len(saveChr(i1)),( int(7.0) + ( i1 * int(2.0) ) )) - i1 ),( int(5.0) + i2 )):divInt(len((\"\"R\"\" + s0.rstrip())),int(7.0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 2, 5, 9, 9, 2, 2], [1, 1, 1, 1, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 0, 3, 0, 2, 1, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 2, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [20], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 4, 0, 2, 1, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni1 = len(in1[i1:])\\ni1 += int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 4, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 1, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 0, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0], [1, 0], [0, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 11, 0, 34, 9, 7, 4, 5, 6, 1, 1, 15, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):len(getCharFromString(in1, i0)[i2:])]:{:\\nres0 = saveChr(abs(mod(i2,int(0.0))))[( int(7.0) + int(4.0) ):i0] not in in0[:( mod(( int(7.0) + i2 ),divInt(min(mod(i2,( len((\"\"R\"\" + getCharFromString(s0, min(int(7.0), i1))).rstrip()) * divInt(max(i2, i0),int(1.0)) )), int(7.0)),i0)) - i2 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 2, 1, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 0, 0, 3, 0, 0, 6, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2.rstrip()[abs(len(in2[:abs(i0)])):] not in in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [1, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 1, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\ni1 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 3, 0, 0, 0, 0, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [3, 5, 4, 4, 3, 3, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 1, 0, 1], [0, 1], [17], [5], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 1, 1, 5, 0, 12, 1, 5, 0, 1, 7, 2, 1, 15, 3, 2, 3, 2, 1, 1, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):len(in1[abs(i0):])]:{:\\nloopBreak% = 0\\nwhile in0 not in \"\"R\"\".rstrip()[:i2]:{:\\nres0 = ( i0 != i0 or ( in0.endswith(saveChr(min(divInt(int(4.0),len((\"\"f\"\" + in1.lstrip()))), i1))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 2, 4, 4, 0, 0, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 7, 0, 4, 0, 0, 5, 0, 1, 8, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):len(in1.rstrip())]:{:\\nres0 = in0 not in saveChr(abs(i2))[min(i0, int(0.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 0, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2[len(in2):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 4, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 6, 0, 3, 0, 0, 5, 1, 1, 11, 2, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1[len(in1):].rstrip()):{:\\nb2 = \"\"R\"\"[len(in0[int(0.0):i1]):] not in saveChr(abs(i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 1, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [0, 0, 0, 4, 0, 0, 0, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 3, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\ni0 = len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 0, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 2, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 4, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 0, 13, 3, 3, 2, 1, 2, 0, 0, 6, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[max(len(getCharFromString(in2[i1:], i2)), abs(mod(i2,int(0.0)))):] not in saveChr(( ( i0 + i1 ) + int(7.0) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0], [1, 5], [3, 3, 1, 2, 3], [1, 0, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 0, 3, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 2, 4, 2, 2, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [5, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 3, 8, 3, 0, 5, 3, 1, 0, 3, 3, 5, 0, 13, 1, 4, 0, 1, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1) != i0 or True ) and not ( i2 \\l max(mod(i2,int(0.0)), int(7.0)) or int(5.0) \\l min(i0, i0) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 2, 1], [0, 1], [0], [0], [0], [], [], [0], [3], [1, 2], [0], [], [1], [1, 0], [0], [0], [1, 1], [7, 2], [1, 0], [0], [0, 1, 2], [], [], [], [], [0, 3, 0, 4], [], [0], [3, 3, 3, 4, 4, 0, 0], [1], [], [2, 2, 0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i1 \\ge int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [0, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 1, 2, 0, 0, 0, 2, 1, 3, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 4, 0, 13, 4, 3, 2, 2, 3, 1, 0, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( len(s0[len(in2):]) != mod(int(0.0),i0) and False ) and \"\"R\"\".endswith(in1[( i2 * abs(( int(7.0) + mod(i2,i0) )) ):]) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [1, 0, 1, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [3, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[int(0.0):]:{:\\nres0 = in1 not in in1[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 3, 2, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [2], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nin1 = in2[saveOrd(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 1, 2, 2, 1, 1, 0, 2, 1, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 12, 2, 5, 0, 2, 7, 0, 1, 10, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[abs(int(0.0)):min(mod(i1,int(7.0)), mod(int(5.0),len(in1[i1:])))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 7, 1, 3, 0, 1, 4, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[max(abs(mod(int(5.0),i1)), abs(i2)):]:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [0, 0, 0, 2, 1, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0 not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0, 0, 1], [0, 0], [1, 5], [3, 3, 1, 3, 0], [1, 0, 1], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 1, 0, 0, 1, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 2, 8, 2, 1, 5, 3, 1, 1, 3, 3, 3, 0, 8, 1, 1, 0, 1, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( ( len(in2[int(0.0):]) != i0 or True ) and in2 not in in1[i2:] ):{:\\nres0 = ( b2 or int(9.0) \\l mod(i2,int(5.0)) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 2, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 3, 2, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 3, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 0, 3], [1, 0], [2, 1, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 1, 8, 1, 4, 0, 1, 3, 0, 1, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(len(in1), int(07.0)):]:{:\\ni0 = mod(abs(len(saveChr(i1))),int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 1, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 0, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 2, 1, 1, 2], [1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 3, 0, 0, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = (in1 + in0)[abs(i1):] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 0, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 1, 2, 3, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [5, 2, 4, 4, 5, 0, 4], [1], [0], [0, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 9, 7, 7, 4, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 3, 1, 0, 2, 0, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3], [1, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 0, 33, 9, 7, 3, 6, 6, 1, 1, 15, 4, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):int(0.0)]:{:\\nres0 = in1[mod(int(7.0),i2):mod(i2,int(5.0))][( int(7.0) - len(saveChr(i2).capitalize()[abs(divInt(min(int(0.0), i2),divInt(i1,divInt(i2,( len(s0) * ( min(i1, divInt(max(int(9.0), int(7.0)),int(7.0))) * int(4.0) ) ))))):i2]) ):] not in (\"\"R\"\" + s0.lstrip()).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 3, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 3, 1, 1, 2, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1[divInt(mod(int(0.0),i0),( i2 - int(7.0) )):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [2, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 2, 0, 2, 0], [0, 0], [1, 5], [0, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 2, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3, 0], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 9, 9, 7, 0, 32, 10, 6, 6, 4, 6, 1, 0, 15, 5, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in getCharFromString(in1, len(saveChr(abs(int(7.0)))[i0:mod(i2,int(7.0))]))[min(int(5.0), divInt(int(2.0),( divInt(( int(2.0) + i2 ),( len(in1.rstrip()) + ( i0 - ( i1 - divInt(int(5.0),i2) ) ) )) + ( min(int(7.0), i1) * int(5.0) ) ))):]:{:\\nloopBreak% = 0\\nwhile res0:{:\\nin0 = (\"\"R\"\" + getCharFromString(s0, int(9.0))).lstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 7, 4, 7, 8, 1, 7, 7, 9, 6, 5, 0, 2, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 2], [0, 1, 1], [1, 3, 0, 2, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 1, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 1, 1, 2, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [3, 1, 0, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 3, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 3, 4, 3, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len((s1 + in2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [1, 0], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 0, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [0, 0, 0, 1, 0, 3, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 2, 4, 0, 0, 1, 0, 2, 0, 1, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[i0:][i2:]:{:\\ni2 = i1\\ni1 += int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 2, 1, 3, 2, 0, 2, 2, 1, 2, 2, 3, 2, 0, 2, 1, 2, 3, 0, 1, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 1, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 2, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 8, 2, 3, 0, 2, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 = len(in1[mod(int(6.0),abs(divInt(i2,int(7.0)))):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 4, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 2, 0, 1, 5, 0, 1, 9, 3, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(saveChr(len(in2)).capitalize()):]:{:\\nres0 = in1[mod(int(84.0),i0):] not in in0.rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 12, 2, 5, 0, 2, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[abs(len(in1)):]:{:\\nres0 = i1 != abs(min(mod(i1,int(7.0)), mod(int(7.0),len(in1[i1:]))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in2[min(mod(int(0.0),i0), mod(i2,int(7.0))):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [3, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 4, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(getCharFromString(in1[len(in1):], i0)):]:{:\\nb0 = int(0.0) \\ge abs(mod(i1,int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [2, 2, 3, 1, 0, 0, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 3, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 2, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 6, 2, 1, 0, 2, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[mod(divInt(len(in2),int(7.0)),i0):] not in in1[i2:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [1, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 1, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 11, 2, 5, 0, 2, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = len(in1[i1:]) != abs(min(mod(i1,int(0.0)), mod(int(7.0),len(in1))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0], [], [], [], [], [], [0, 0, 0, 0, 1, 0, 1], [4, 6, 0, 6, 2, 7, 4], [2, 1, 2, 1, 1, 0, 1, 1], [1], [3, 2, 2, 2, 2, 2, 0, 3, 0, 1, 1, 0, 2, 3, 0, 1, 0], [0, 0, 1, 1, 0, 0], [2, 3, 0], [2, 0, 2, 0, 1], [0, 1, 1], [4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 4, 1, 12, 5, 2, 4, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= abs(( ( divInt(mod(( i1 + len(in1) ),i2),int(46062.0)) * int(74.0) ) + i1 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 3, 1, 0, 0, 1, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in1[saveOrd(in0):] not in s0[:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 9, 7, 8, 2, 1, 2, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 0, 3, 0, 1, 1, 1, 3, 0, 0, 2, 1, 1, 0, 2, 3, 2, 0, 0, 3, 2, 1, 0, 2, 3, 3, 3, 1, 2, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 0, 1, 2, 1, 0, 1, 3, 1], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 1, 1, 0, 1, 3, 1, 0, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 4, 1, 4], [1, 1], [0], [4, 0, 0, 2, 4, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 0, 3, 0, 0], [3, 0], [2, 1, 0, 0, 1], [0, 1], [17], [17], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 5, 0, 13, 0, 5, 0, 0, 6, 2, 1, 16, 6, 1, 3, 2, 1, 1, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in getCharFromString(in2, len(in1)):{:\\nin1 = getCharFromString(in1[len(getCharFromString((\"\"R\"\" + getCharFromString(s1, i1)), abs(i2))):max(i2, int(7.0))].lstrip(\"\"r\"\")[:int(9.0)], int(7.0)).capitalize()[max(i0, i1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [1, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 4, 1, 7, 4, 9, 2, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0, 2], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 2, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 3, 2, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 4, 0, 1, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 4, 2, 4, 0, 1, 1, 0, 2, 1, 0, 5, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif getCharFromString(s0, len(\"\"R\"\"))[:i1] not in in2:{:\\ni1 = i2\\ni0 += int(0.0)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 0, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 1, 2, 2, 3, 0, 8, 1, 2, 0, 1, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i2 != len(s0[i1:]):{:\\nb0 = ( int(0.0) \\l len(in2) or ( in1[mod(i1,int(7.0)):] not in in2 and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [1], [1, 1], [0], [0], [], [], [], [4], [1], [0], [], [], [], [], [0], [1, 0, 1, 1, 1], [6, 5, 1, 7, 3], [2, 2, 1, 0, 2, 0], [1, 1, 1], [1, 3, 3, 0, 0, 1, 0, 3, 1, 3, 0, 1], [], [0, 4, 1, 0], [1, 1], [], [3, 4, 4], [], [0], [3, 2, 0, 0], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 5, 5, 6, 2, 12, 0, 4, 2, 0, 2, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(6.0) \\le min(saveOrd((in0[i2:i2] + in1)), int(51.0)):{:\\ni1 -= i0\\n:}\\ni2 -= max(int(7.0), min(i0, int(3.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 9, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 2, 0, 2, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 8, 2, 2, 0, 2, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = i0 != mod(i2,divInt(i2,int(79.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 1, 3, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 2, 1, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 4, 4, 2, 0, 4, 3, 1, 0, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 1, 3, 0, 1, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(\"\"R\"\") != divInt(i0,saveOrd(in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 11, 5, 2, 1, 4, 6, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[mod(len(in1),mod(int(0.0),( divInt(i0,int(7.0)) + divInt(int(5.0),len(in1.capitalize())) ))):]:{:\\nin0 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 0, 0, 2, 0, 5, 1, 2, 1, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[( len(in1) + i0 ):]:{:\\nb1 = ( ( i2 != len(in1) or True ) and s1.startswith(s0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [1, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nb1 = in1[len(in0):] in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 3, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 4, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 4, 0, 0, 5, 0, 0, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s0[len(getCharFromString(in2[len(in1):], i2)):] not in in1[abs(saveOrd(in0[:i1])):i1]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 5, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 7, 2, 2, 0, 2, 3, 1, 0, 7, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = getCharFromString(s2, len(in2[mod(divInt(int(0.0),len(in1)),i0):]))[i2:] not in \"\"R\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 6, 0, 1, 7, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nb0 = in1.capitalize() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 2, 0, 3, 0, 0, 1, 2, 2, 3, 2, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 3, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 1, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 6, 7, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 0, 0, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 1, 1, 3, 0, 8, 1, 3, 0, 1, 4, 1, 0, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[max(len(in2), i0):] != \"\"R\"\":{:\\nres0 = ( i2 != abs(divInt(i2,int(5.0))) or ( in1.endswith(in1) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 3, 0, 3, 2, 0, 0, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 2, 1, 3, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1, 3, 2], [0, 0, 2, 1, 0, 2, 1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 12, 0, 49, 16, 10, 8, 8, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in1):] not in s0[abs(i0):min(mod(i2,i2), ( int(0.0) + ( i0 + divInt(( divInt(int(7.0),i1) * ( i2 - ( i1 + len(saveChr(min(divInt(int(5.0),max(( min(int(7.0), i2) * int(7.0) ), int(1.0))), i0))) ) ) ),i0) ) ))].capitalize()[divInt(int(7.0),max(divInt(len((\"\"R\"\" + in0.rstrip())),i2), mod(( ( int(7.0) - int(9.0) ) - divInt(int(8.0),i2) ),int(5.0)))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 3, 0, 1, 2, 2, 1, 1, 1, 3, 2, 0, 2, 3, 1, 1, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 4, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in2), i1):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 1, 5, 3, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 0, 2, 2, 3, 0, 0, 2, 2, 0, 0, 2, 2, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 4, 1, 0, 0, 0, 4, 2, 1, 2], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 0, 4, 0, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 3, 1, 0, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s0[len(in2):] not in \"\"R\"\"[saveOrd(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 8, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 2, 1, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 1, 2, 3, 2, 0, 2, 3, 2, 2, 0, 2, 3, 1, 2, 1, 1, 0, 0, 3, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 1, 4, 4, 0, 4], [1], [0], [1, 0, 0, 4, 0, 0, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"R\"\" not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1], [], [0], [], [], [], [], [0, 0], [0], [0, 0], [0], [], [0], [], [], [], [1, 0, 1, 1], [9, 3, 4, 0], [], [], [1, 2, 1, 1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 1, 2, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 7, 1, 2, 0, 1, 6, 0, 1, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[:int(8.0)][mod(int(7.0),len(in0[i1:])):] not in s0[:i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 3, 3, 0, 0, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 4, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 2, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 4, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = s0[len(in0):].startswith(s0[i2:abs(min(i1, i2))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [1, 0, 0], [0, 0, 1, 0, 2, 0, 0], [0, 0], [0, 5], [3, 3, 3, 0, 0], [1, 0, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 1, 3, 5, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 3, 1, 7, 1, 1, 5, 3, 0, 0, 0, 0, 2, 0, 5, 1, 2, 1, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[( len(in1) + i0 ):]:{:\\nres0 = ( ( i2 \\g len(s1) or ( in0 in in2 and b2 ) ) or res0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 5, 0, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1], [0, 1, 1], [3, 3, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 4, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 0, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 0, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 2, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\"[min(int(9.0), int(5.0)):] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 5, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 1, 2, 3, 3, 2, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 1], [1, 0], [1, 2, 0, 0, 1], [2], [5], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 11, 1, 49, 15, 10, 8, 7, 5, 0, 1, 11, 2, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[:len(in1[len(in1):mod(int(0.0),i0)][mod(i2,int(7.0)):])]:{:\\ni1 = ( int(5.0) + abs(min(i0, mod(divInt(int(7.0),i1),( len(in0[:( int(5.0) + ( min(max(divInt(i2,( abs(int(1.0)) * i1 )), int(7.0)), int(7.0)) - i0 ) )].capitalize()[i0:divInt(int(9.0),max(int(8.0), len(saveChr(i0))))]) + mod(( ( int(5.0) * int(0.0) ) - ( int(4.0) - i1 ) ),int(8.0)) )))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni2 = max(i2, int(17.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [0, 8, 2], [0, 0], [0], [2, 0, 3, 1, 1], [0], [1], [1], [], [5, 5], [], [], [4, 3], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 1, 5, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( i0 - max(int(0.0), int(82.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 2, 0, 2, 0, 0, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 4, 0, 12, 4, 3, 3, 1, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in2[len(in0):].endswith(s0.capitalize()[( ( i1 + divInt(i2,i2) ) + ( int(0.0) * abs(i0) ) ):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [1, 1], [], [0], [], [], [1, 0], [], [1, 2], [], [3, 0], [0], [1, 0], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [0], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [1, 0], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 0, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1, 0], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 3, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 0, 6, 0, 2, 4, 2, 1, 1, 0, 0, 2, 1, 3, 0, 2, 0, 0, 6, 0, 0, 9, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s2 not in in2:{:\\nres0 = ( ( True or in0.endswith(in1[saveOrd(in0):]) ) and b2 )\\n:}else:{:\\ni0 = len(s0.rstrip()[i1:])\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 3, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in0):]:{:\\nres0 = \"\"R\"\"[i1:] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [1, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 11, 2, 5, 1, 1, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in0), abs(i0)):]:{:\\nres0 = s0[:min(mod(int(0.0),int(7.0)), ( int(5.0) + len(in0) ))] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 3, 0, 0, 0, 2, 0, 0, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in0[len(in1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 8, 5, 3, 9, 9, 0, 7, 9, 0], [0, 0], [1], [1, 0, 1, 3, 1, 1], [0], [1], [1], [], [5, 0, 2], [1], [], [4, 0, 2, 0], [1], [], [0], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 6, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 1, 2, 2, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 8, 1, 3, 0, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\ni0 = max(max(i2, i2), abs(mod(i0,int(0.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 3, 0, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 2, 0, 1, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nb0 = in0.capitalize().endswith(s0[len(saveChr(mod(int(84.0),i0))):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [0, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 1, 3, 3, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 1, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1[i1:] not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 0, 1], [4, 5, 0, 1], [2, 0, 1], [], [0, 2, 0, 0, 0, 3, 2, 2, 1, 0, 1, 0], [1, 0, 0, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [1, 2, 0], [1], [5, 0, 2], [1], [0], [3, 4, 4, 0, 0, 3, 1, 2, 0], [3, 0], [1], [2, 1], [2], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i2 == mod(i0,i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 1, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 7, 0, 33, 10, 7, 6, 4, 7, 1, 1, 15, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:int(8.0)][mod(int(7.0),len(in0[mod(i1,int(5.0)):])):].startswith(s0[:( int(7.0) + len(getCharFromString((\"\"R\"\" + saveChr(i1)), divInt(( ( int(2.0) + i1 ) * ( min(len(in1), i1) - ( min(divInt(int(1.0),i0), ( max(int(7.0), i2) + int(7.0) )) * int(9.0) ) ) ),i1))) )])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 319}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 3, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 4, 0, 2, 0, 0, 5, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(int(3.0), len(in1)):]:{:\\nin1 = in0\\ni0 = int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 2], [], [0], [], [], [1, 2, 2], [5], [2, 0, 1, 0, 2, 0], [0], [4], [0], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [1, 5, 2, 8, 4, 7, 5, 8, 7, 4], [2, 2, 0, 0, 1, 2, 1, 0, 0, 0], [], [1, 2, 3, 3, 3, 1, 0, 1], [1], [0, 4, 4], [], [1], [2, 5, 1], [], [], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveChr(int(1.0)).startswith(s2)\\nin2 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 2, 1, 3, 0, 2, 2, 1, 1, 0, 2, 3, 2, 0, 3, 3, 1, 1, 0, 2, 3, 0, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nb2 = in1[abs(i0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 4, 3, 1, 3, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s2[len(in1):]:{:\\nres0 = in1.capitalize() not in in0[len(saveChr(mod(int(84.0),i0))):mod(( int(5.0) + divInt(int(7.0),abs(i0)) ),i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 1, 1], [5, 7, 0, 7, 2], [0, 2, 2, 0], [1], [3, 2, 3, 3, 2, 3, 0, 3, 1, 2, 2, 1, 0, 1, 0], [0, 0, 1, 1], [2, 4, 1, 1, 4], [2, 0, 2, 1, 2, 0], [1, 1], [3], [], [], [0, 4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 4, 1, 15, 4, 5, 3, 2, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(( saveOrd(in0) + max(( max(i2, saveOrd(saveChr(int(5.0)))) * mod(mod(int(707.0),i2),int(2.0)) ), i0) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [0, 2], [1], [], [0], [], [], [0], [1], [], [0], [1], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [4, 6, 3, 0, 1, 7, 8, 3], [2, 0, 2, 1, 2, 2], [1], [3, 0, 1, 3, 0, 3, 3, 2, 1, 2, 3, 1, 2, 0, 3, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 0, 2, 0, 0, 1, 0, 1], [2, 2, 0], [0, 1, 0], [4, 4, 5], [], [], [3, 0, 2, 0], [0], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 2, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= saveOrd((in1 + in1[:i0]))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 0, 5, 0, 8, 1, 2], [0, 0, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 1, 1, 1, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[( len(in1) + i0 ):]:{:\\nb2 = in0.startswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[int(0.0):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 0, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 3, 0, 4, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 0, 13, 3, 3, 2, 1, 5, 1, 1, 11, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in (in2 + getCharFromString(in1, len(in1)))[len(\"\"R\"\"[i1:]):]:{:\\nres0 = in0[i2:abs(mod(i2,int(0.0)))] not in saveChr(( ( i0 + i1 ) + int(7.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 9, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 2, 1, 1, 1, 2, 3, 1, 3, 1, 0, 3, 0, 2, 3, 3, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 2, 4, 3, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 4, 0, 20, 3, 6, 3, 0, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s2[saveOrd(getCharFromString(in1[( int(2.0) + int(9.0) ):], int(5.0))):]:{:\\nb0 = in0 not in saveChr(( len(in0[int(7.0):abs(int(7.0))]) + i0 ))[min(i2, ( len((\"\"R\"\" + s0.rstrip())[:min(i2, int(1.0))]) * int(0.0) )):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 0, 0, 1, 0, 0, 0, 1], [0, 7, 5, 9, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 2, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [2, 0, 0, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 2, 0, 8, 2, 2, 1, 1, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:abs(min(divInt(int(0759.0),i0), ( i2 + int(6177.0) )))]:{:\\nb0 = s0 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 2, 0, 1, 1, 0, 0, 3, 3, 3, 2, 2, 3, 1, 0, 1, 0, 3, 2, 1, 1, 3, 2, 2, 0, 0, 1, 3, 2, 0, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 8, 8, 9, 0, 32, 8, 7, 3, 5, 6, 1, 0, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s2[:mod(divInt(i0,int(0.0)),int(3.0))] not in in2:{:\\nres0 = ( i2 != i2 or ( in1[len(in2):].endswith(in0[len(saveChr(abs(( divInt(min(int(5.0), i0),int(7.0)) + i1 )))):len((\"\"R\"\" + s0.rstrip()))].capitalize()[divInt(int(6.0),int(1.0)):min(divInt(( i2 + i1 ),int(7.0)), max(( i2 * int(7.0) ), i0))]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1], [5, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 2, 1, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 13, 0, 49, 14, 9, 7, 7, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(s2):]:{:\\nloopBreak% = 0\\nwhile in1.rstrip()[abs(i0):] not in in0[int(7.0):i1]:{:\\nres0 = ( divInt(i2,int(7.0)) != abs(min(len(s0[i0:divInt(( mod(int(5.0),i1) + ( min(( i2 + ( i1 - ( int(2.0) - i2 ) ) ), divInt(max(int(2.0), i0),int(5.0))) + int(7.0) ) ),i0)]), i0)) or ( (\"\"R\"\" + saveChr(( int(5.0) * min(int(9.0), max(i1, divInt(mod(mod(int(8.0),int(5.0)),( int(0.0) - i1 )),int(4.0)))) ))).capitalize().endswith(in1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 9, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 1], [0, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 2, 1, 2], [1, 3], [2, 2, 0, 0, 1], [0], [21], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 33, 9, 7, 5, 4, 5, 0, 1, 11, 3, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in0.rstrip()[abs(i0):] not in in0[int(7.0):abs(divInt(i1,int(9.0)))].capitalize()[min(int(5.0), len(saveChr(i2))):divInt(( mod(int(2.0),i2) + ( min(( i1 + ( i2 - ( int(2.0) - i1 ) ) ), mod(max(int(5.0), i2),int(7.0))) + int(5.0) ) ),i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 2, 0, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 2, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [0], [0], [2, 0, 0, 2, 0, 2, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [25], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2[len(s0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 0, 1], [2, 1, 2, 0, 0], [0, 2], [1, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 2, 1, 0, 2, 1, 1, 2, 0], [0, 1, 1], [2, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4, 1, 1], [1, 1], [0], [2, 0, 0, 4, 3, 3, 0, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 0], [1, 0], [2, 2, 0, 2, 1], [0, 0], [17, 20], [], [], [20]], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 10, 2, 32, 10, 6, 7, 4, 9, 2, 1, 17, 3, 0, 2, 2, 2, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[divInt(i1,i1):]:{:\\ni2 = int(07.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile in1 != getCharFromString(((in1 + in0) + in0[len(saveChr(mod(i1,int(5.0)))):]), ( int(7.0) + len((\"\"R\"\" + getCharFromString(in1, i0))) )):{:\\ni2 += divInt(( ( int(2.0) * i1 ) - ( abs(min(i1, ( len(\"\"U\"\") + divInt(int(1.0),i2) ))) * ( min(int(7.0), i0) - int(7.0) ) ) ),int(9.0))\\ns1 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 3, 1, 0, 2, 0, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 1, 0, 2, 2, 2, 1, 2, 2, 3, 0, 1, 3, 3, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 5, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 4, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 7, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = \"\"R\"\"[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 1, 7, 7, 1, 1, 7, 3, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 1, 1, 1, 0, 0, 2, 0], [0, 1, 1], [3, 0, 2, 1, 0, 2, 0, 3, 2, 1, 2, 0, 0, 2, 2, 3, 0, 2, 3, 1, 0, 2, 3, 2, 0, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 3], [2, 0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in0[i0:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [0], [0], [], [], [], [], [0], [], [], [], [], [], [], [], [], [2, 1], [0], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 3, 1, 3, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[( ( int(0.0) + i0 ) + ( i2 * int(7.0) ) ):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nb0 = in1[i0:] not in in0\\ni1 = int(07.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0, 0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 3, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 8, 0, 4, 0, 0, 6, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1[saveOrd(in0):])]:{:\\ns0 = \"\"R\"\"[i0:min(i2, i1)]\\ni0 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0], [4, 5], [3, 3, 1, 0], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 3, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 0, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 2, 1, 5, 1, 0, 4, 2, 1, 0, 2, 2, 3, 0, 10, 2, 3, 2, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in s0[( len(s2) + i0 ):]:{:\\nres0 = ( ( min(abs(( i2 + int(0.0) )), i1) != int(7.0) or True ) and b2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 1, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 0, 5, 4], [], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 11, 1, 34, 8, 7, 5, 3, 5, 0, 1, 11, 2, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[min(int(0.0), i0):][i2:]:{:\\nres0 = in1[len(in1):int(7.0)] not in s0[:i2].rstrip()[int(1.0):mod(int(7.0),abs(i0))]\\ni1 = ( ( divInt(int(2.0),i2) + ( min(divInt(i1,len(saveChr(max(( int(1.0) + i2 ), ( max(int(7.0), i0) * int(7.0) ))))), int(9.0)) - i0 ) ) + i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 0, 0, 2, 0, 5, 1, 2, 1, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[( len(in1) + i0 ):]:{:\\nb0 = ( ( i2 != len(in1) or True ) and in0.startswith(s0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 5, 4, 3, 3, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 10, 0, 50, 15, 10, 9, 6, 6, 1, 0, 14, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s2[len(in2[len(in2):i0][int(0.0):]):] not in in1[abs(mod(i2,int(75.0))):]:{:\\nin0 = in0[:mod(int(7.0),min(i2, ( divInt(( int(2.0) + i0 ),( len(getCharFromString((\"\"R\"\" + saveChr(min(i1, ( max(( int(1.0) + i2 ), divInt(abs(int(7.0)),i1)) * int(7.0) )))), int(9.0))) - i2 )) + ( divInt(int(8.0),max(int(5.0), max(i0, divInt(( ( int(0.0) * int(4.0) ) - ( int(8.0) - i0 ) ),int(5.0))))) * int(9.0) ) )))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 4, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 0, 1, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 1, 1, 0, 1, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i0):]:{:\\nb2 = in1[int(6.0):i0] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 0, 7, 7, 6, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 0, 3, 2, 0, 1, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 4, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = s1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 1, 2, 0], [0], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 4, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 13, 13, 13, 1, 49, 15, 9, 8, 7, 6, 0, 0, 11, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s1 not in in2:{:\\nb2 = ( len(in1) != len(in1[mod(int(0.0),i0):]) or ( in1.endswith(s0[( i2 + int(7.0) ):( int(5.0) + min(i2, i1) )].capitalize()[mod(divInt(int(7.0),i1),divInt(min(( i2 * ( len(saveChr(divInt(min(i1, ( max(int(6.0), i2) - int(1.0) )),int(7.0)))) + i0 ) ), i0),divInt(int(7.0),abs(int(9.0))))):]) and True ) )\\n:}else:{:\\ni1 = max(i2, mod(( ( int(8.0) * int(5.0) ) - ( int(0.0) - i0 ) ),int(4.0)))\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 2, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[min(len(in1), i0):]:{:\\nin1 = in0[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0], [1, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 1, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 2, 1, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1[len(in2):] not in \"\"R\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1, 1, 0], [0, 1, 1], [3, 3, 0, 2, 3, 3, 0, 1, 2, 1, 3, 3, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 2, 1, 0, 0, 0, 1, 1, 3, 1, 1, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 3, 3, 0, 3, 2, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3], [1, 0], [0, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 12, 1, 51, 15, 9, 7, 8, 6, 1, 1, 15, 4, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), i0):mod(len(in1[:min(i1, int(0.0))]),divInt(int(7.0),len(in0)))]:{:\\nres0 = getCharFromString(saveChr(abs(( divInt(( max(i2, ( int(5.0) + ( i1 + divInt(i1,( int(7.0) * i2 )) ) )) - ( min(int(2.0), divInt(int(5.0),i1)) + i2 ) ),i0) * int(7.0) )))[int(5.0):max(int(9.0), int(8.0))], i0)[divInt(mod(( int(5.0) - int(0.0) ),divInt(int(4.0),i0)),int(8.0)):int(59.0)] not in (\"\"R\"\" + s0.lstrip()).rstrip()\\ni1 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [1, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 6, 7, 0, 1, 3, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 2, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 1, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 3, 2, 0, 0, 3, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 11, 2, 4, 1, 1, 6, 1, 0, 15, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s0[len((in2[len(in1):] + (in1 + in0[int(0.0):i0]))):] not in getCharFromString((\"\"R\"\" + saveChr(abs(( i1 + int(7.0) )))), mod(int(5.0),saveOrd(s0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [1], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 4, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 1, 0, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 += len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 0, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 33, 9, 7, 5, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1[abs(int(1.0)):])]:{:\\nres0 = in0 not in getCharFromString(s0[i0:], divInt(i1,i2))[min(int(7.0), len(saveChr(int(5.0)))):divInt(( divInt(int(2.0),i0) + ( min(( i1 + ( i2 - ( int(2.0) - i1 ) ) ), divInt(max(int(5.0), i2),int(7.0))) + int(5.0) ) ),i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1], [], [0], [], [], [0], [], [0, 0], [], [2], [2, 1], [], [0], [], [0, 0, 1, 1], [3, 6, 9, 1], [0, 2, 2, 0], [1], [3, 1, 1, 0, 2, 0, 2, 3, 0], [1, 1, 0], [0, 3], [1, 2], [1, 1], [0, 0, 4], [], [0], [0, 3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 4, 4, 1, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not True:{:\\ni0 -= min(int(369.0), int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 3, 0, 0, 0, 2, 0, 0, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in0[len(in1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 0, 1], [], [1, 1, 1], [], [0, 0], [], [], [], [], [1], [], [], [], [1, 0], [], [], [1], [5], [0, 2, 0, 0, 2, 0, 2], [1, 0, 0], [0, 0, 2, 0, 0, 0], [1, 0], [], [1, 1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 6, 2, 1, 2, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[abs(( ( int(0.0) + i0 ) - int(5.0) )):] not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 0, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 1, 1, 0, 0, 2, 1, 2, 3, 0, 2, 1, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 2, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 2, 3, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 11, 0, 4, 0, 0, 5, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len((in1 + in1)[i0:])):]:{:\\nres0 = int(0.0) != len(getCharFromString(in2[abs(i2):int(7.0)], int(5.0))[int(7.0):i2])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 8, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 0, 3], [3, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 3, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s2[abs(abs(int(7.0))):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 0, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = s1[mod(i0,int(0.0)):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 9, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 4, 5, 9, 9, 2, 2], [0, 1, 2, 0, 2, 2, 1, 0, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 2, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 0, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 14, 14, 10, 0, 45, 12, 9, 5, 7, 5, 1, 1, 14, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nres0 = ( ( len(in1[abs(int(7.0)):]) != mod(divInt(i0,int(7.0)),min(int(9.0), len(in0))) or True ) and getCharFromString(saveChr(i1)[( divInt(( int(2.0) + i2 ),( min(( i0 + divInt(i2,divInt(int(2.0),i2)) ), ( max(int(5.0), i1) - int(7.0) )) - int(5.0) )) + int(9.0) ):], i0)[divInt(int(8.0),min(int(5.0), max(i0, i0))):mod(int(0.0),int(4.0))] not in (\"\"R\"\" + saveChr(int(4.0))).rstrip() )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1, 1, 1, 1, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 3, 3, 0, 3, 0, 1, 0, 1, 0, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 3, 0, 0, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(s0), i0):]:{:\\ni2 = len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 9, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 3, 3, 0, 0, 2, 2, 1, 0, 2, 1, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 1, 1, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 8, 0, 32, 10, 7, 4, 6, 3, 1, 0, 9, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[:len(in2[:len(in1)])][mod(int(2.0),i0):] not in saveChr(mod(i2,int(9.0)))[:( abs(min(i2, i0)) * divInt(divInt(int(5.0),i1),divInt(int(7.0),( i2 + ( len(\"\"R\"\") * divInt(min(i1, ( max(int(6.0), i2) + int(1.0) )),int(7.0)) ) ))) )]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 6, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 1, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[saveOrd(in1):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [1, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 4, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 11, 0, 49, 16, 9, 7, 9, 6, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nin1 = s1[len(saveChr(mod(int(0.0),mod(( i0 + int(7.0) ),divInt(int(5.0),abs(i2)))))[i2:divInt(divInt(int(7.0),i2),( min(( i1 + divInt(len(s0[( min(i2, mod(max(int(6.0), i1),int(1.0))) * int(7.0) ):i2]),i0) ), divInt(int(7.0),abs(int(9.0)))) - max(i0, ( ( ( int(8.0) + int(5.0) ) * mod(int(0.0),i2) ) - int(4.0) )) ))]):].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 2, 2, 5, 5, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 3, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 1, 2, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 5, 0, 3, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 = max(abs(int(8.0)), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 1, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 0, 2, 2, 0, 1, 2, 2, 1, 0, 1, 2, 2, 2, 0, 1, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 3, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 3, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i1:]:{:\\nb1 = in1 not in in1[len(in0):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 6, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 3, 0, 1, 2, 1, 2, 1, 0, 2, 1, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [4, 1, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 8, 1, 2, 1, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):int(8.0)]:{:\\nres0 = ( int(6.0) + i2 ) != max(i2, int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 4, 0, 12, 3, 2, 1, 2, 6, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nb2 = ( ( len(in0) != len(in1[mod(int(0.0),i0):]) or True ) and in0.endswith(s0[divInt(i2,int(7.0)):( int(5.0) + i2 )].capitalize()[i0:]) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 1, 2, 3, 2, 2, 2, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 2, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [3, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 10, 0, 49, 17, 8, 7, 10, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nres0 = in1[len(s0):] not in s0[mod(int(0.0),i0):mod(i1,int(7.0))].capitalize()[( int(5.0) * abs(min(i2, divInt(divInt(int(7.0),i2),divInt(len(saveChr(( i1 + ( int(6.0) * divInt(min(( mod(divInt(int(1.0),i2),int(7.0)) - int(7.0) ), i1),i2) ) ))),( int(9.0) + max(int(8.0), abs(i0)) ))))) ):( ( mod(int(5.0),int(0.0)) * divInt(int(4.0),i0) ) - int(8.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 2, 1, 7, 2, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 2, 1, 0, 1, 0, 1, 2, 1, 2, 0, 0, 0, 0, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 0, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 1, 3, 3, 4], [1], [0], [2, 2, 0, 1, 2, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 6, 6, 6, 0, 16, 3, 1, 2, 1, 3, 1, 1, 10, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[int(5.0):][len(\"\"R\"\"):]:{:\\nres0 = ( ( mod(int(7.0),i0) != int(5.0) or True ) and saveChr(i2)[int(7.0):( int(2.0) * ( i2 + i0 ) )].capitalize()[i1:i2] not in in1[:int(1.0)] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 5, 1, 1, 3, 2, 1, 1, 3, 3, 5, 2, 12, 3, 3, 2, 2, 3, 1, 0, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( ( len(s1[len(s0):]) != mod(int(0.0),i0) or True ) and \"\"R\"\".endswith(in1) ):{:\\ni2 = mod(i2,int(7.0))\\n:}else:{:\\ni0 += ( int(5.0) + abs(i1) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1], [], [0], [], [], [0], [], [0, 0], [], [2], [2, 1], [], [0], [], [0, 0, 1, 1], [8, 6, 9, 1], [0, 2, 2, 0], [1], [3, 1, 1, 0, 2, 0, 2, 3, 0], [1, 1, 0], [0, 3], [1, 2], [1, 1], [0, 0, 4], [], [0], [0, 3, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 4, 4, 1, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not True:{:\\ni0 -= min(int(869.0), int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 2, 1, 2, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 2, 2, 0, 2, 1, 0, 2, 1, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 3, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 7, 7, 10, 0, 31, 9, 5, 5, 4, 6, 0, 1, 11, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in0[mod(len(in1),i2):int(0.0)][len(in1):]:{:\\nres0 = ( in0 in s0[( i2 + int(7.0) ):i0].rstrip()[int(5.0):abs(( divInt(i1,( int(7.0) + i1 )) * divInt(int(7.0),( i0 - min(len(saveChr(( i1 * i0 ))), divInt(i0,int(1.0))) )) ))] or i0 != int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 3, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 12, 2, 5, 0, 2, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(len(in1), i1):]:{:\\nres0 = abs(min(mod(i1,int(0.0)), mod(int(7.0),len(in1)))) != i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [0], [0], [], [], [], [], [], [], [], [3, 3, 1], [], [], [], [], [], [], [], [], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 3, 2, 1, 0, 4, 0, 1, 0, 1, 4, 4, 2, 0, 2, 2, 2, 0, 4], [], [], [2, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 2, 0], [], [2, 0, 2], [], [0, 0, 0], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [5, 1, 8, 9, 2, 0, 1, 2, 6, 7], [0, 1, 0, 1, 1, 0, 0], [0], [0, 1, 0, 3, 3, 3, 0, 0, 3, 3, 3, 1, 2, 0, 2, 0, 2, 1, 3, 0], [1, 0, 1, 1], [2, 2, 1, 2, 4], [], [0, 0, 0, 0], [2, 3, 1, 3, 2, 0, 2, 0], [], [], [4, 2, 4, 2, 2, 2, 0, 0, 2, 3, 3, 4, 4, 0, 3, 0, 2, 3, 4, 2], [2, 3, 2, 1], [2], [0, 1, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 0, 10, 0, 5, 0, 0, 3, 0, 0, 8, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:i0][:int(5.0)][:i1].strip()[abs(abs(max(i0, i1))):abs(saveOrd(s1))].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 1, 1, 2, 0, 0], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 1, 1, 1, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2[( len(in1) + i0 ):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 3, 2, 0, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 4, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2[len(in1):]\\ni2 = len(in1[i1:])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 5, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 2, 0, 2, 0, 1, 1, 2, 3, 2, 2, 2, 2, 1, 0, 2, 0, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 0, 1], [2, 0, 1, 1, 2, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 0, 34, 12, 4, 6, 6, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[saveOrd(in1):]:{:\\nres0 = getCharFromString(in1, len(saveChr(int(7.0))[divInt(i0,divInt(i2,int(7.0))):int(5.0)]))[( abs(divInt(( ( ( int(5.0) * i0 ) + ( i0 - divInt(i1,( i2 - divInt(int(2.0),i1) )) ) ) * divInt(min(int(5.0), i2),int(7.0)) ),int(5.0))) * i0 ):].startswith(in0[i0:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in1[max(mod(int(0.0),i1), mod(i2,int(7.0))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 5, 9, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 3, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 3, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 3, 4], [1], [0], [2, 0, 3, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 0, 3, 0, 0, 5, 1, 1, 11, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len((in1[len(s0):] + \"\"R\"\")):]:{:\\nres0 = getCharFromString(in0[i0:i2], abs(int(9.0))) not in saveChr(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 1, 8, 1, 2, 0, 1, 7, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(i1, i1):]:{:\\nb1 = in1 not in in1[int(0.0):]\\ni1 = len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = in1[mod(i1,int(75.0)):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 0, 7, 6, 1, 7, 3, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 0, 2, 3, 2, 0, 1, 0, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 0, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 10, 2, 2, 0, 2, 2, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[i0:]:{:\\nres0 = max(i1, mod(abs(mod(i2,int(07.0))),i0)) != int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 4, 4, 2, 0, 10, 1, 3, 0, 1, 6, 0, 0, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( int(7.0) != int(7.0) or ( getCharFromString(in0[i0:divInt(i2,int(5.0))], abs(int(2.0))).endswith(s0) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 1, 2, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0], [1, 5, 3, 1, 0, 3, 4], [1], [0], [2, 0, 0, 3, 0, 0, 2, 4, 1, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 10, 0, 48, 16, 10, 6, 10, 5, 1, 1, 10, 2, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in0):]:{:\\nres0 = (s1 + s0) == getCharFromString(\"\"R\"\", abs(int(0.0)))[:mod(abs(mod(int(8.0),int(5.0))),( int(7.0) + min(i0, divInt(( divInt(( i2 + ( len(saveChr(divInt(i2,( min(max(int(2.0), i0), divInt(abs(int(1.0)),i1)) * int(0.0) )))) - int(7.0) ) ),i2) + i1 ),mod(int(1.0),max(( abs(i2) + divInt(i0,mod(int(8.0),int(5.0))) ), divInt(int(0.0),i0))))) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 4, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 6, 0, 3, 0, 0, 4, 1, 1, 11, 4, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(saveChr(len(in1))[i0:].capitalize()):]:{:\\nres0 = \"\"R\"\" not in in1[int(0.0):len(saveChr(i2))].rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 1, 2, 0, 1, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 4, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 7, 0, 34, 9, 9, 3, 6, 5, 1, 1, 8, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nin1 = (getCharFromString(in0, max(abs(i0), min(mod(int(0.0),int(7.0)), ( int(5771.0) + max(i1, divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len(\"\"R\"\"), divInt(int(9.0),i1)) )),divInt(max(int(8.0), divInt(int(5.0),int(0.0))),i2))) )))) + saveChr(i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 9, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1], [3, 3, 2, 0, 2, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 2, 0, 2, 3, 1, 0, 3, 3, 3, 1, 1, 1, 3, 0, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 1, 0, 4, 3, 1, 0, 1], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 31, 8, 9, 4, 4, 6, 0, 1, 8, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(len(in1), mod(i0,divInt(( i2 + int(1.0) ),divInt(int(7.0),max(i0, min(( divInt(( i0 + ( saveOrd(in2[int(5.0):]) * i1 ) ),len(in1)) + max(min(int(9.0), int(7.0)), int(1.0)) ), max(i1, i1))))))):]:{:\\ns0 = saveChr(int(7.0)).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 0, 0], [2], [0, 1], [0], [0, 0], [], [], [2], [2], [1, 0], [0], [], [1], [], [0], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [1, 4, 7, 7, 3, 3, 4, 4, 0, 1, 4, 3, 2, 9, 2], [0, 2, 1, 0, 0, 1, 1], [1, 1], [3, 2, 0, 2, 0, 2, 1, 3, 2, 0, 1, 3, 1, 0, 3, 1, 1, 2, 3, 1, 3, 1, 2, 0, 0, 3, 3], [0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 4, 1, 3, 2, 4], [2, 2, 2, 1, 0], [0, 0], [4], [1], [0], [4, 2, 4, 1], [3, 2], [2], [2], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 6, 0, 25, 6, 6, 4, 2, 0, 1, 0, 4, 2, 1, 1, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = min(( i0 * divInt(i2,divInt(int(147.0),max(( i1 * int(7.0) ), min(int(3.0), i0)))) ), min(int(3.0), int(4.0))) == ( saveOrd(\"\"U\"\".capitalize()[int(4.0):].strip()) * max(int(0.0), ( i0 - i1 )) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 1, 0, 0, 1, 1, 0, 3, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = int(0.0) != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 6, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 1, 1, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 2, 1, 5, 0, 0, 1, 2, 1, 0, 0, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\" not in \"\";\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 4, 5, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\ni0 = len(in2[i2:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 3, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 13, 0, 52, 16, 10, 7, 9, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[max(mod(int(0.0),i0), mod(i2,int(7.0))):( abs(min(i2, i0)) + divInt(divInt(int(5.0),i1),divInt(len(in1),( i2 + ( min(divInt(max(i1, ( abs(int(7.0)) * i2 )),int(6.0)), int(1.0)) - i0 ) ))) )][i0:]):]:{:\\nres0 = in0[:mod(int(7.0),max(int(7.0), len(saveChr(i1))))].capitalize()[divInt(( ( int(9.0) + int(8.0) ) * ( int(5.0) - i2 ) ),int(0.0)):divInt(int(4.0),i1)] not in (\"\"R\"\" + s0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1[len(in1):] not in in0[i0:int(07.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 0, 2], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 1, 1, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 1, 0, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 1, 8, 1, 2, 0, 1, 5, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(max(i0, int(1.0)), i2):]:{:\\nres0 = in1 not in (in1 + in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = mod(i0,int(7.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 0, 2, 3, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 9, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 2, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 3, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in0[len(in1):]:{:\\nb0 = in0[( int(2.0) + i0 ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 3, 0, 0, 0, 0, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 0, 0, 6, 2, 1, 9, 0, 0, 3, 2, 1, 0, 0, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[len(in0):] not in \"\"R\"\"[abs(i2):]:{:\\nin0 = \"\";\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 1, 3, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 3, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 1, 8, 0, 3, 0, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nb2 = in1[int(47.0):].startswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(in0[i2:abs(i0)].rstrip()[int(5.0):int(7.0)])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 5, 4], [1], [0], [2, 0, 0, 2, 2, 0, 0, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in2):i1][int(0.0):] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 0, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 3, 1, 1, 2, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nb2 = in1[mod(mod(int(0.0),i0),( i2 * int(7.0) )):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 1, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"R\"\" not in s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [0, 1, 0, 2, 1], [0], [2, 0, 2, 2, 0, 0, 0], [1, 0, 0], [], [1, 1, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 7, 3, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(i1,( ( i0 - i2 ) - i1 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 0, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 2, 2, 0, 2, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[mod(int(0.0),i1):mod(i2,i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 1, 2, 2, 4, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 1, 3, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 0, 0, 2, 3, 2, 0, 2, 2, 2, 1, 1, 2, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 0, 1], [0, 0, 1, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 32, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[int(7.0):] == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 2], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 0, 3, 0, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 3, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 4, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 33, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 5, 0, 3, 0, 0, 5, 0, 1, 10, 4, 2, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize()[len(saveChr(len(in1))):]:{:\\nres0 = in1.endswith(in0.lstrip().rstrip()[abs(int(0.0)):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i0\\n", "other_info": {}, "test_fitness": 391}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 6, 0, 15, 2, 4, 0, 2, 4, 0, 1, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(len(in1), i0):int(07.0)]:{:\\nres0 = in1[abs(mod(i2,int(5.0))):] not in getCharFromString(saveChr(i2)[:i2], min(i2, divInt(i2,int(7.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 389}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 2, 2, 1, 3, 0, 0, 2, 2, 1, 3, 0, 3, 2, 0, 2, 3, 2, 3, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 3, 3, 0, 1, 2, 1], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [1, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 35, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1 in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 424}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [2, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [5, 5, 4, 4, 3, 0, 4, 1], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3, 2], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 37, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 11, 0, 49, 17, 8, 7, 10, 8, 1, 1, 15, 4, 1, 2, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[mod(max(mod(int(0.0),i0), ( divInt(int(7.0),divInt(int(1.0),len(in1))) + i0 )),i2):]:{:\\nloopBreak% = 0\\nwhile in1.capitalize() not in in0[divInt(( int(7.0) + i0 ),( abs(divInt(i1,( min(mod(len(getCharFromString(s0, i2)),divInt(min(int(6.0), i1),int(1.0))), int(7.0)) * i2 ))) - i0 )):]:{:\\nres0 = ( ( int(7.0) + max(int(9.0), abs(i0)) ) != ( ( mod(int(8.0),int(5.0)) * mod(int(0.0),i2) ) - int(4.0) ) or ( in1.endswith((\"\"R\"\" + s1.capitalize()).rstrip()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 558}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 2, 3, 2, 1, 1, 2, 2, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 2, 3, 0, 1, 2, 1, 0], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 0, 3], [1, 0], [0, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 38, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 9, 0, 51, 17, 10, 7, 10, 6, 0, 1, 9, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(len(in1), i0):mod(abs(mod(int(07.0),int(2.0))),( divInt(abs(i0),( divInt(divInt(int(7.0),i2),( len(in1.rstrip()) + min(i0, divInt(max(( int(6.0) + i1 ), mod(abs(int(1.0)),i2)),int(7.0))) )) * int(7.0) )) * i1 ))]:{:\\nres0 = in0[divInt(( int(9.0) + max(int(8.0), min(i2, ( ( mod(int(5.0),int(0.0)) * divInt(int(4.0),i0) ) - int(8.0) ))) ),int(59.0)):] not in getCharFromString(s0, int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 332}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 7, 5, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [1, 3, 3, 2, 0, 2, 2, 1, 3, 3, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 3, 3, 0, 1, 0, 1], [2, 0, 1, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 39, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[int(7.0):]:{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 584}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 3, 2, 3, 0, 0, 2, 3, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 1, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 1, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 1, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 39, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 7, 0, 38, 12, 8, 4, 8, 5, 1, 1, 7, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),max(int(0.0), abs(mod(i0,int(7.0))))):divInt(int(5.0),min(i2, divInt(( mod(int(7.0),max(( min(i2, i0) + ( max(divInt(int(2.0),i1), ( mod(int(1.0),i2) + int(7.0) )) * int(7.0) ) ), i1)) - int(9.0) ),divInt(int(8.0),abs(int(5.0))))))]:{:\\nres0 = (in1 + in0) not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 385}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [2, 3, 0, 3, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 4, 0, 4], [1], [0], [0, 2, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 40, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 11, 0, 34, 10, 6, 6, 4, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = getCharFromString(in1[mod(abs(i0),len(in2)):], i2)[divInt(i2,int(7.0)):] in saveChr(abs(int(7.0)))[min(i0, ( divInt(( int(5.0) + i1 ),( len(in1[( i2 + ( i1 - divInt(int(2.0),i2) ) ):( min(int(2.0), i0) - int(5.0) )]) + int(7.0) )) * i0 )):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 332}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 2, 1, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 40, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[mod(i2,int(0.0)):] in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 339}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 0, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 1, 4, 2, 4, 2, 2, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 40, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 == \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 332}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 4, 0, 0, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 40, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 0, 1, 7, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(saveChr(len(in1)).capitalize()):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 541}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 0, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 40, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 1, 9, 1, 2, 0, 1, 6, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(in0)) in getCharFromString(s0[i0:i2], int(0.0))[mod(i2,int(9.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(5.0)\\n", "other_info": {}, "test_fitness": 332}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 40, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 6, 0, 13, 2, 2, 2, 0, 5, 0, 1, 10, 1, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(( ( int(0.0) + i0 ) - int(7.0) ), i2):]:{:\\nres0 = in1 != in1[i1:saveOrd(in0[:int(5.0)].capitalize()[i0:i1])][i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 462}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 3, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [2, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 41, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 12, 4, 1, 1, 3, 5, 0, 1, 8, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(int(8.0),mod(int(7.0),i1)):]:{:\\nres0 = in1 not in in1[:( i2 + int(5.0) )][divInt(int(3.0),len(in0[i1:])):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 565}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 6, 5, 7, 9, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 0, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 3, 0, 1, 2, 0, 2, 1, 0, 2, 2, 1, 0, 0, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 1, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 41, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 8, 1, 2, 1, 0, 2, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(int(8.0)):]:{:\\nres0 = ( int(6.0) + i2 ) != max(i2, int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 561}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 9, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 0, 2, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 3, 1, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 42, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 1, 5, 0, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[abs(len(s1)):]:{:\\nres0 = abs(min(i0, mod(i2,int(7.0)))) != len(in1[int(9.0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 581}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 4, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 2, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[abs(int(0.0)):] == getCharFromString(in2, i0)\\n", "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [4, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 6, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 0, 1, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 0, 0, 3, 0, 1, 2, 1], [1, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 42, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 7, 1, 2, 1, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):( int(7.0) - i2 )]:{:\\nres0 = i2 \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 404}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 4, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 2, 3, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 0, 40, 14, 8, 6, 8, 3, 1, 0, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"R\"\"[:mod(max(divInt(( saveOrd(s0) + divInt(i0,int(4.0)) ),divInt(int(4.0),divInt(i0,i2))), ( ( int(5.0) + i0 ) * divInt(abs(( i1 - mod(min(divInt(len(in0[i2:]),( min(int(7.0), i1) + int(6.0) )), int(1.0)),i2) )),i0) )),( int(7.0) * max(int(7.0), abs(i0)) ))] == in1\\n", "other_info": {}, "test_fitness": 333}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 4, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 43, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, abs(len(in1)))[i0:]:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 0, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 0, 0, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in2[len(in2):].startswith(in1)\\n", "other_info": {}, "test_fitness": 333}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 3, 1, 7, 6, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 3, 2, 0, 0, 0, 2, 1, 1, 0, 2, 3, 1, 0, 3, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0], [0, 5, 3, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 43, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 7, 0, 22, 6, 5, 3, 3, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nres0 = in1[len(in0):] in getCharFromString(s1[i1:], i2)[abs(mod(i2,int(9.0))):( int(7.0) + min(int(5.0), ( mod(( int(7.0) + i0 ),len(saveChr(divInt(i1,i2)))) * i1 )) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 453}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 0, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 43, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(i0):]:{:\\nres0 = in1 not in in2[int(0.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 44, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 49, 16, 8, 7, 9, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[mod(mod(int(0.0),i1),( i2 + int(7.0) )):divInt(int(5.0),min(i2, i0))]):][divInt(divInt(int(7.0),i1),( len(in1) + ( i2 * divInt(min(( len(in0[:i1].capitalize()[mod(min(int(6.0), i2),int(1.0)):int(7.0)]) - i0 ), i0),divInt(int(7.0),max(int(9.0), abs(i1)))) ) )):]:{:\\nres0 = saveChr(( ( ( int(8.0) + int(5.0) ) * mod(int(0.0),i2) ) - int(4.0) )) not in (\"\"R\"\" + s0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 591}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 0, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 44, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 7, 0, 31, 9, 8, 3, 6, 3, 0, 0, 5, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in2[max(max(i0, mod(abs(mod(i0,int(0.0))),( int(7.0) + min(int(1.0), i2) ))), divInt(divInt(int(7.0),i0),divInt(len(in2),min(i1, ( max(( int(6.0) + i2 ), divInt(abs(int(1.0)),i1)) * int(7.0) ))))):] not in in1.rstrip()\\n", "other_info": {}, "test_fitness": 550}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 2, 2, 2, 0, 0, 0, 1, 2, 3, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 1, 1, 1], [0], [17], [], [], [20]], "fitness": 44, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 3, 0, 1, 2, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(2.0):]:{:\\nres0 = in1 not in in1[:divInt(mod(( i0 * i0 ),i2),int(7.0))]\\ns0 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 631}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 6, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(s2),i0):]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 5, 5, 7, 7, 6, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(len(in1), i0):]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 3, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 3, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 4, 0, 4, 0, 3, 4, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1], [0, 5, 1, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 0, 1, 4, 1, 1, 0], [0, 0, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(s1)):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 2, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(len(s2)):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 3, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 2, 1, 2, 1, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 0, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(len(s2), i0):]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 2, 2, 0, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 0, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [4, 2, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 0, 4, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, saveOrd(s0)):{:\\nres0 = in1[abs(i0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 5, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [1, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 1, 2, 0, 0, 2, 3, 1, 3, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4, 4, 5, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 0, 2, 0, 4, 0, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = s0[:len(in1)] not in in0[i1:int(07.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 544}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 2, 1, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 46, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 8, 3, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2.rstrip():{:\\nres0 = in1 not in in1.capitalize()[len(saveChr(abs(i1))[int(77.0):]):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 611}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 2], [0, 1, 1], [1, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 3, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 5, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = in1 not in (in1 + s0)[int(1.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 651}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 2, 1, 2, 7, 8, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 1, 1, 0, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 0, 2, 0, 2, 1, 2, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 2, 1, 2, 1, 0, 1, 1, 3, 0, 2, 3, 0, 0, 2, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 18, 0, 59, 18, 11, 8, 10, 6, 1, 1, 15, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in0[i0:])]:{:\\nres0 = in0 not in getCharFromString(saveChr(i2)[abs(mod(i2,int(8.0))):i0], int(7.0))[min(i1, ( i2 + ( int(5.0) + divInt(( mod(( i1 * len((\"\"R\"\" + getCharFromString(s0, ( int(7.0) - int(2.0) ))).rstrip()) ),i2) + divInt(min(int(1.0), i0),max(i0, i1)) ),i2) ) )):( int(2.0) * abs(divInt(max(i1, divInt(( ( mod(int(7.0),divInt(int(8.0),i1)) - int(8.0) ) - int(5.0) ),abs(i0))),divInt(max(i1, i0),divInt(int(0.0),i0)))) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 557}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i1:]:{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 2, 1, 2, 7, 8, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [0, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 0, 2, 0, 2, 1, 2, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 2, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 0, 2, 1, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 1, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 651}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 3, 1, 0, 2, 0, 1, 2, 1, 3, 2, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 4, 0, 2, 2, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in1.capitalize() not in in1[i0:][len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 6, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(len(in1), i0):]:{:\\nres0 = in1 not in saveChr(int(0.0)).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 1, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [0, 3, 1, 3, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 3, 0, 1], [0, 0, 1, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 4, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nres0 = in1 not in in0[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [0, 0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 5, 4, 0, 3], [1], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 1, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 1, 32, 9, 8, 5, 4, 9, 1, 1, 15, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[:len(in1)]:{:\\nres0 = (in1 + in0) not in in2[:len(in1[:i0])]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(0.0)\\ns0 = getCharFromString((\"\"R\"\" + saveChr(abs(mod(i1,int(7.0))))), mod(int(7.0),min(i1, ( divInt(( int(7.0) + i0 ),( len(in0) + min(i2, ( max(( int(2.0) * i1 ), divInt(abs(int(1.0)),i1)) - int(7.0) )) )) + int(7.0) ))))\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 4, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 34, 12, 6, 4, 8, 6, 0, 1, 10, 4, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2.capitalize():{:\\nres0 = getCharFromString(in1.rstrip(), max(mod(divInt(int(0.0),i0),( divInt(int(7.0),divInt(int(1.0),len(in1[i0:]))) + i2 )), divInt(( int(7.0) + i0 ),( abs(divInt(i1,( min(mod(len(getCharFromString(in0, i2)),divInt(min(int(6.0), i1),int(1.0))), int(7.0)) * i2 ))) - i0 )))) not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 5, 9, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 3, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 3, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 4, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 4, 1, 1, 7, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, abs(len(in1[i0:])))[i2:]:{:\\nres0 = in1 not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 2, 1], [0, 0], [4, 5], [3, 0, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 0, 1, 2, 1, 0, 0, 0, 1, 0], [0, 1, 1], [2, 1, 0, 3, 3, 2, 0, 3, 0, 1, 0, 1, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 3, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 0, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 2, 2, 4, 0, 11, 2, 3, 1, 1, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[mod(int(0.0),i0):max(len(in1), ( i1 + abs(i0) ))]:{:\\nres0 = ( b2 or int(7.0) != i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 0, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 4], [0], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s1):]:{:\\nres0 = len(in1[i2:]) != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 0, 0, 0, 1, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 1, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2:{:\\nres0 = in1 not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 2, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 0, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 2, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 3, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 14, 1, 50, 15, 9, 9, 6, 5, 1, 1, 10, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = in1[max(i1, i2):] not in (\"\"R\"\"[abs(mod(i2,int(0.0))):( ( i0 + i1 ) + int(7.0) )] + in0[divInt(( int(5.0) + i2 ),int(7.0)):min(divInt(i1,( abs(( min(i2, divInt(max(int(7.0), i0),int(3.0))) - int(7.0) )) + i0 )), i0)])\\ni0 = ( int(7.0) * abs(divInt(max(i2, divInt(( ( int(9.0) - int(8.0) ) - ( int(5.0) * i0 ) ),int(0.0))),int(4.0))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 11, 0, 49, 15, 10, 8, 7, 6, 1, 1, 15, 4, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1[abs(i0):]))[int(0.0):]:{:\\nres0 = in1 not in saveChr(abs(mod(i2,int(7.0))))[divInt(int(5.0),min(i2, ( divInt(( int(7.0) + i0 ),divInt(len(in0[( i2 + min(max(( int(7.0) - i2 ), divInt(abs(int(1.0)),i1)), int(7.0)) ):int(7.0)]),i2)) - i0 ))):( int(9.0) + max(divInt(len((\"\"R\"\" + s0.lstrip()).rstrip()),i0), mod(( ( int(8.0) * int(5.0) ) - ( int(0.0) - i1 ) ),int(4.0))) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 0, 1, 2, 1, 0, 1, 0], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 3, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 0, 0, 0, 2, 4, 1, 1, 4, 3, 1, 4, 0, 1, 0], [3, 3, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 3, 0, 10, 2, 2, 1, 1, 5, 1, 1, 9, 1, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[:mod(len(in1),i0)][int(0.0):]:{:\\nres0 = ( ( len(in1) != ( i1 + int(7.0) ) or True ) and in0.startswith(\"\"R\"\".rstrip()[i0:int(5.0)]) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 6, 5, 6, 4, 0, 7, 7, 4, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 1, 0, 1, 3, 2, 3, 1, 3, 1, 3, 0, 2, 2, 2, 0, 1, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 1, 2, 0, 3, 0, 1, 2, 1, 0], [1, 1, 1, 0, 2, 1, 2, 2], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 2, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 4, 0, 1, 0, 0, 4, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in getCharFromString(in2, abs(int(06.0))):{:\\nres0 = in1 not in in1[i2:][int(5.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [0, 3, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 1, 3, 5, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 3, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2:{:\\nres0 = i0 != len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1], [4, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 1, 2, 0, 1, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[:len(in1)]:{:\\nres0 = len(in1.capitalize()) != mod(i0,i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 2, 4, 2, 2, 0, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 9, 1, 2, 0, 1, 5, 0, 1, 11, 3, 2, 4, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1 not in saveChr(len(in0[i0:int(0.0)][i2:mod(i2,int(7.0))].lstrip()[:int(5.0)])).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 33, 8, 8, 5, 3, 5, 0, 1, 11, 2, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(len(in1[i0:i2][:abs(int(0.0))])):]:{:\\nres0 = in1 not in in0[:i2].rstrip()[int(7.0):mod(int(1.0),min(i0, ( ( divInt(int(7.0),i1) + ( len(saveChr(divInt(i2,max(max(( int(2.0) + i1 ), ( abs(int(1.0)) * i2 )), int(7.0))))) - int(7.0) ) ) + i0 )))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 5, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 0, 1, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 3, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 12, 1, 5, 0, 1, 6, 1, 1, 15, 5, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(saveChr(len(in1))))[i0:]:{:\\nres0 = in1 not in in0[i2:abs(mod(i2,int(0.0)))].rstrip()[min(int(7.0), len((\"\"R\"\" + getCharFromString(s0, i0)).lstrip())):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [0, 3, 1, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 1, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[i1:]:{:\\nres0 = in1 not in in1[max(int(7.0), int(7.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2], [], [1, 5], [3, 3, 1], [], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [3, 5, 2, 4, 2, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 1, 11, 2, 5, 0, 2, 6, 1, 1, 10, 1, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(s2):]:{:\\nres0 = in1[len(s2):] not in \"\"R\"\".rstrip()[:abs(int(0.0))]\\ni1 = min(mod(i1,int(7.0)), mod(int(5.0),len(s0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [3, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 1, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 1, 0, 5, 1, 2, 1, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[:( len(in1) + int(0.0) )]:{:\\nres0 = ( ( i0 \\ge len(in1) or True ) and in0.startswith(s0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 1, 1, 0, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 1, 0, 2, 3, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 3], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 1, 0, 0, 3, 1, 1, 6, 1, 1, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.rstrip()[min(int(0.0), int(7.0)):]:{:\\nres0 = \"\"R\"\"[:i0] != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 1, 2, 0, 4, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 1, 8, 1, 3, 1, 0, 3, 1, 1, 5, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = len(in1[i0:]) != i0\\ni1 = abs(( i1 + int(0.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 4, 3, 4, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 0, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 3, 4, 2, 1, 6, 0, 1, 9, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[max(len(s2), i0):]:{:\\nres0 = in1.rstrip() not in in0[( abs(mod(i0,int(07.0))) + ( int(1.0) + saveOrd(getCharFromString(s0, i2)) ) ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 1, 0], [0, 1, 1], [0, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 1, 1, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 1, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nres0 = in1 not in in1[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 7, 4, 7, 0, 1, 7, 7, 6, 6, 5, 0, 2, 8, 5, 9, 9, 2, 2], [0, 0, 1, 0, 2, 0, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 1, 0, 2, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 3, 0, 0, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 1, 1, 0, 0, 2, 2, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 1, 0, 1, 2, 1, 1, 1, 2, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [3, 1, 0, 0, 3, 0, 1, 3, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 50, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 1, 1, 8, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1):]:{:\\nres0 = (\"\"R\"\" + in1) not in in0[int(9.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 635}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 0, 2, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 3, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 0, 3, 1, 0, 1], [0, 0, 1, 1, 0, 2, 2, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 3, 4, 5, 3, 0, 4], [1], [0], [0, 0, 0, 2, 4, 4, 2, 2, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 581}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 1, 2, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 4, 0, 1, 6, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1):]:{:\\nres0 = in1 not in saveChr(int(0.0)).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 638}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 3, 0, 1, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 0, 3, 2, 0, 2, 3, 2, 3, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 0, 1, 2, 1], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in0[len(in1):]:{:\\nres0 = in1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 638}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 5, 4, 0, 4], [0], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 5, 1, 2, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = in2[abs(mod(i0,i0)):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 570}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 4, 2, 4, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 8, 1, 3, 0, 1, 4, 0, 1, 6, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in0[max(len(in1), i0):]:{:\\nres0 = getCharFromString(in1, int(07.0)) not in saveChr(abs(mod(i2,int(5.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 638}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 2, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 3, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 0, 12, 2, 3, 2, 0, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1):]:{:\\nres0 = in1[( ( int(0.0) + i0 ) - saveOrd(in0) ):] not in s0[i2:i1].capitalize()[min(int(7.0), i0):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 638}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 52, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 5, 0, 3, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(len(in1), i0):]:{:\\nres0 = in2[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = len(\"\"R\"\")\\n", "other_info": {}, "test_fitness": 569}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 2, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 2, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 4, 0, 1, 0, 1], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 3, 0, 5, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 9, 0, 34, 9, 9, 5, 4, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(s0):]:{:\\nres0 = len(in2[mod(i0,( ( i2 + int(1.0) ) + divInt(int(7.0),max(i0, min(( divInt(int(5.0),i0) * ( saveOrd(in1) + ( i1 + min(max(min(int(7.0), int(4.0)), divInt(max(int(1.0), i2),int(2.0))), i1) ) ) ), i1))) )):]) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 2, 0, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 2, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 6, 0, 13, 2, 2, 0, 2, 3, 1, 1, 10, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = in0[abs(i0):] not in saveChr(int(0.0))[:i2].capitalize()[mod(i2,int(7.0)):divInt(i0,int(5.0))][i1:i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 2, 1, 0, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[i2:]:{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [1, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 1, 4, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = len(in0) != i0\\ni2 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 3, 0, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 3, 0, 3, 2, 0, 2, 3, 2, 3, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 3, 3, 0, 1, 2, 1], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 2, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 10, 0, 33, 9, 9, 3, 6, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(mod(mod(len(in1),i0),( i2 + abs(divInt(int(0.0),len(in1[i2:]))) )), i2):]:{:\\nres0 = in0 not in saveChr(mod(divInt(int(7.0),len(s0)),i1))[min(( i2 - ( max(divInt(abs(i1),i2), max(int(5.0), i0)) - int(7.0) ) ), int(6.0)):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 4, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 3, 3, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 4, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 2, 0, 9, 0, 4, 0, 0, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in getCharFromString(in2, len(in1)):{:\\nres0 = ( ( len(in1[i0:]) != i2 or True ) and in0 not in saveChr(int(0.0))[abs(min(int(9.0), int(5.0))):] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 2, 4, 7, 7, 9, 8, 5, 0, 5, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 2, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 2, 1, 0, 0, 2, 1, 3, 2, 0, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 1, 1, 7, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in2)):{:\\nres0 = ( ( len(in1[i0:]) != i2 or True ) and in0 != \"\"R\"\" )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [2, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 2, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 2, 0, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 0, 1], [1, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 2, 0, 0], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 9, 9, 9, 0, 34, 10, 6, 6, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, saveOrd(in1)):{:\\nres0 = ( ( len(in1[int(7.0):]) == int(7.0) or True ) and in0 not in in2[mod(divInt(i0,int(5.0)),abs(int(2.0))):min(i2, ( divInt(( int(2.0) - i2 ),( len(saveChr(( i0 + ( i1 * divInt(int(5.0),i2) ) ))) - ( min(int(7.0), i1) + int(5.0) ) )) + int(9.0) ))][i2:][:i0] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 1, 7, 4, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 0, 2, 1, 1], [0, 1, 1], [2, 2, 0, 1, 3, 2, 0, 1, 0, 1, 2, 2, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 0, 3, 2, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 1, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 0, 2, 1, 2, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 5, 3, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 10, 3, 1, 2, 1, 3, 1, 1, 5, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[( divInt(i1,int(3.0)) + max(( i0 - int(7.0) ), i2) ):]:{:\\nres0 = in0 != \"\"R\"\"[int(1.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 1, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 1, 0, 2, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 56, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 3, 0, 0, 0, 0, 4, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[i1:]:{:\\nres0 = in0 not in getCharFromString(in1, int(8.0))[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 657}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 3, 3, 1, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 56, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 1, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( len(in1[i0:]) + i2 ) != len(in2)\\n", "other_info": {}, "test_fitness": 562}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 3, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 3, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 3, 0, 4, 0, 3, 4, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 2], [1], [0], [2, 0, 0, 4, 0, 0, 4, 4, 2, 1, 4, 0, 1, 4, 1, 1, 0], [3, 1, 3, 0], [1, 5], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 0, 1, 1, 3, 0, 8, 1, 3, 0, 1, 4, 0, 0, 7, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0[len(in2):]) != i0:{:\\nres0 = ( i2 \\l len(s1.rstrip()) or ( in1 not in saveChr(mod(i0,int(1.0))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 7, 4, 7, 0, 1, 2, 7, 9, 6, 5, 0, 2, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 0, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 1, 1, 2, 0, 1], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [3, 1, 0, 0, 3, 0, 1, 2, 3, 2], [0, 0, 2, 1, 0, 2, 1, 1, 1, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 4, 2, 4, 3, 2, 4], [1], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [20], [], [], [20]], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 52, 17, 10, 10, 7, 7, 1, 1, 14, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(s2):]:{:\\nres0 = (in1 + in0) not in s2[max(i0, mod(min(( i2 + int(9.0) ), min(int(7.0), len(in1[i2:mod(( divInt(min(i0, divInt(max(( i2 + ( divInt(( int(4.0) * i0 ),( abs(int(7.0)) - i1 )) + int(0.0) ) ), int(1.0)),i2)),i0) * divInt(i0,len(getCharFromString((\"\"U\"\" + saveChr(int(2.0))), abs(i2)))) ),( ( ( int(7.0) - int(9.0) ) - ( int(6.0) - i2 ) ) + int(5.0) ))]))),divInt(int(0.0),int(2.0)))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 2, 1, 1, 2, 0], [0, 0], [5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 2], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 0, 3, 0, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 3, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 1, 1, 1], [0, 5, 4, 1, 4, 0, 4], [1], [0], [2, 0, 0, 4, 2, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [3, 2, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 4, 2, 1, 1, 1, 0, 1, 8, 8, 11, 0, 38, 10, 9, 4, 6, 4, 0, 0, 11, 4, 2, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( s0[abs(len(in2)):].endswith(in1[abs(int(8.0)):].rstrip()) or i2 != mod(i0,min(mod(int(7.0),len(s1.lstrip().capitalize()[i1:i1])), ( mod(int(5.0),i1) + divInt(max(divInt(i0,( max(i0, abs(i1)) + ( int(7.0) * int(7.0) ) )), i1),mod(int(1.0),i1)) ))) ):{:\\nres0 = i1 \\l ( int(8.0) - len(saveChr(int(7.0))) )\\n:}\\n", "other_info": {}, "test_fitness": 433}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 5, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 1, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 3, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [4, 0, 0, 4, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 0, 1, 6, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1)):{:\\nres0 = saveChr(len(in1)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 633}, {"genotype": [[0], [1, 1, 1], [1, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 2, 1, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [4, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 2, 0, 8, 1, 2, 0, 1, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( len(s0[divInt(int(0.0),i0):]) != min(i2, int(7.0)) or True ) and in2 not in in1[int(5.0):] )\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [1], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [2, 3, 0, 0, 1, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 3, 0, 8, 2, 1, 1, 1, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( mod(len(s2[i0:]),i2) \\l int(0.0) or True ) and in2 not in in1[( i2 + int(9.0) ):] )\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 0, 0, 2, 0, 5, 1, 2, 1, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[( len(in1) * i0 ):]:{:\\nres0 = ( ( i0 != len(in0) or True ) and in0.startswith(s0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 1, 2, 1, 1], [0, 1, 1], [2, 3, 2, 2, 0, 3, 0, 0, 2, 1, 0, 0, 0, 2, 2, 2, 0, 2, 3, 2, 0, 2, 0, 2, 3, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 0, 3, 1, 3, 2, 2, 2, 2, 1, 3, 2, 1, 0, 1, 3, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0], [3, 3, 2, 0, 4, 3, 1, 2, 1, 3], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 2, 1, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 13, 0, 34, 12, 6, 4, 8, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(\"\"R\"\"[mod(( i0 + len(in1) ),i2):i2]),mod(int(0.0),i2)):][i1:]:{:\\nres0 = saveChr(i2)[divInt(divInt(( i1 + ( abs(divInt(i2,( i0 + mod(min(i0, divInt(saveOrd(in1),int(7.0))),i1) ))) - len(in0) ) ),int(5.0)),i2):] == saveChr(i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 9, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 1, 3, 0, 0, 2, 2, 1, 3, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 10, 1, 3, 0, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = in1[len(s0):i0] == s0[int(7.0):i2].capitalize()[divInt(i2,int(7.0)):abs(int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 6, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 5, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [3], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 1, 0, 1, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = int(0.0) != mod(int(5.0),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 9, 5], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 2, 1, 1, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 2, 0, 2, 2, 3, 3, 2, 1, 3, 2, 3, 3, 0, 0, 3, 3, 1, 2, 3, 2, 1, 1, 0, 1, 2, 0, 3, 0, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0], [3, 3, 2, 4, 3, 0, 1, 2, 1, 1, 1, 1, 3, 1, 0, 1, 1, 4, 2, 2], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1, 2, 2], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1], [3, 5, 4, 4, 1, 5, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 21, 21, 17, 0, 81, 24, 20, 14, 10, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in getCharFromString(in2, len(in1[len(in1):]))[abs(int(0.0)):]:{:\\nres0 = saveOrd(s1[( i0 + int(7.0) ):mod(int(5.0),len(in2[i1:]))]) != ( mod(( int(7.0) + i1 ),( min(max(i1, ( abs(( int(2.0) * i0 )) * divInt(max(int(1.0), i2),( int(7.0) + i1 )) )), divInt(divInt(int(5.0),max(int(9.0), max(i1, ( ( ( int(8.0) * int(5.0) ) - divInt(int(0.0),i2) ) - int(4.0) )))),i0)) * mod(i0,divInt(( max(len(saveChr(divInt(int(8.0),max(( min(max(i2, i1), max(saveOrd((\"\"R\"\" + in1.rstrip())), int(59.0))) + ( abs(mod(int(9.0),int(2.0))) + i1 ) ), int(2.0))))), ( i0 - abs(i0) )) * int(9.0) ),int(5.0))) )) * i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 1, 0, 3, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(s2):]:{:\\nres0 = len(in1[i0:]) != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 7, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 3, 4, 1, 2, 3, 1, 1, 5, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nres0 = len(\"\"R\"\"[divInt(int(8.0),abs(mod(i0,int(4.0)))):]) != ( int(7.0) - min(i2, i2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [3, 1, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 4, 4, 4, 1, 12, 2, 3, 0, 2, 6, 1, 1, 10, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (\"\"R\"\" + in2):{:\\nres0 = ( ( len(in1[int(0.0):]) != i0 or True ) or in1 not in s1[int(7.0):] )\\ni1 = len(s0[mod(i1,int(5.0)):mod(int(7.0),abs(i1))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 3, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2:{:\\nres0 = in1 == in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 4, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 4, 1, 1, 8, 2, 1, 2, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(in1):].rstrip()):]:{:\\nres0 = saveChr(int(0.0)) not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 0, 1, 0, 2, 2, 1, 2, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 1, 2, 1, 1, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 2, 2, 0, 3, 0, 1, 2, 1, 0, 3], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 1, 3, 3, 0, 4], [1], [0], [2, 0, 4, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 9, 1, 37, 10, 9, 6, 4, 3, 0, 1, 5, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(getCharFromString(saveChr(abs(i1)), abs(min(mod(i1,int(0.0)), mod(int(7.0),len(s1)))))):]:{:\\nres0 = i0 != ( mod(( int(5.0) + i1 ),( min(max(i0, ( abs(( int(7.0) + i2 )) * divInt(max(int(2.0), i2),int(1.0)) )), int(7.0)) - i1 )) + int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = ( int(9.0) - int(8.0) )\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [2, 1, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 15, 15, 6, 0, 33, 10, 8, 4, 6, 5, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[mod(abs(max(i0, abs(( int(07.0) + int(577.0) )))),divInt(int(1.0),min(i1, divInt(( ( int(7.0) + i2 ) - divInt(len(in1),int(7.0)) ),i0)))):]:{:\\nres0 = max(max(divInt(int(9.0),i1), divInt(len((in1 + in0)),int(85.0))), ( int(04.0) - int(85.0) )) != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 3, 0, 0, 0, 0, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 4, 3, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 3, 0, 0, 5, 1, 1, 10, 1, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1[len(in1):].endswith(in1[abs(i0):i2].rstrip()[:i0])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 5, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 8, 0, 33, 9, 8, 5, 4, 5, 0, 1, 8, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1[len(in1):i1]):][int(0.0):]:{:\\nres0 = abs(mod(i1,int(7.0))) != mod(int(5.0),min(i1, ( divInt(( int(7.0) + i1 ),( len(in0[min(i0, ( max(( int(2.0) + i2 ), divInt(abs(int(1.0)),i1)) * int(7.0) )):]) - int(7.0) )) + i1 )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 3, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 2, 0, 1, 0, 2, 2, 2], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 2, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1, 1, 1, 0, 2, 1, 3, 0, 3, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 0, 2], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 3, 0, 4, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 18, 18, 15, 1, 59, 17, 11, 7, 10, 6, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len((in1 + getCharFromString(in1[i0:i2], int(0.0)))[max(mod(i2,int(7.0)), mod(int(5.0),abs(( divInt(( divInt(min(i1, ( len(in0[( i1 * divInt(( divInt(int(7.0),i2) + mod(min(int(4.0), max(int(1.0), int(3.0))),i1) ),i2) ):( int(7.0) * abs(int(9.0)) )]) - max(i2, ( divInt(i0,int(8.0)) + int(5.0) )) )),mod(int(0.0),i1)) * int(4.0) ),int(8.0)) - int(59.0) )))):i0]):]:{:\\nres0 = saveChr(divInt(int(9.0),min(i2, abs(i2)))) not in (\"\"R\"\" + s0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(2.0)\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 9, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 1, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 5, 0, 3, 0, 0, 2, 1, 1, 3, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(\"\"R\"\")):]:{:\\nres0 = abs(int(6.0)) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 1, 0], [0, 0], [0, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [0, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 2, 5, 2, 0, 3, 2, 1, 0, 0, 0, 3, 0, 5, 0, 2, 0, 0, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[i0:]:{:\\nres0 = ( ( len(in1) != i0 or True ) or i0 \\l len(in0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 0, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 11, 0, 34, 9, 6, 5, 4, 6, 1, 1, 15, 2, 0, 6, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(in1):int(5.0)][i0:i1]):]:{:\\nres0 = in0[mod(i2,int(7.0)):][:abs(int(5.0))][min(i0, divInt(( divInt(int(2.0),i1) + ( len(getCharFromString((\"\"R\"\" + saveChr(( i2 + ( i1 - ( int(2.0) - i2 ) ) ))), divInt(min(int(5.0), i0),int(7.0)))) + int(5.0) ) ),i0)):i0] in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 0, 1], [2, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 4, 4, 4, 1, 12, 2, 3, 0, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(int(0.0), i0):]:{:\\nres0 = ( ( int(7.0) != len(in1) or True ) or in1[mod(i1,int(5.0)):] not in s1 )\\ni1 = mod(int(7.0),abs(i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 0, 1, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [3, 5, 4, 1, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 59, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 3, 0, 0, 6, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0.rstrip()[len(in2[i0:]):] not in in1\\n", "other_info": {}, "test_fitness": 642}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 6, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 3, 0, 1, 2, 1, 2, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 1, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 59, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 10, 0, 49, 16, 9, 8, 8, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[abs(( mod(int(8.0),i1) + max(i2, int(6.0)) )):]:{:\\nres0 = mod(int(5.0),divInt(int(7.0),i1)) != ( divInt(int(6.0),i0) + ( min(( i1 * divInt(min(( len(in1) - i2 ), divInt(min(int(1.0), i1),int(7.0))),int(7.0)) ), max(i2, mod(int(9.0),abs(int(8.0))))) + max(i0, ( ( ( int(5.0) * int(0.0) ) - divInt(int(4.0),i0) ) - int(8.0) )) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 737}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 3, 4, 1, 0, 3, 4], [1], [0], [2, 0, 0, 3, 4, 0, 1, 4, 1, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 60, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 2, 0, 0, 4, 1, 1, 8, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in0[len(in1):]:{:\\nres0 = (getCharFromString(s1, abs(int(0.0))) + \"\"R\"\") not in saveChr(int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 654}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 1, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 3, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 62, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0[len(in2):] not in \"\"R\"\"\\n", "other_info": {}, "test_fitness": 647}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 2, 0, 3, 0, 2, 2, 0, 0, 0, 3, 3, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 0, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 2, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [1], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[:len(in2)] in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [1, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [4, 4, 0, 0, 2, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [4], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 2, 5, 1, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1[saveOrd(in2):]) \\g min(i0, min(mod(int(4.0),int(7.0)), ( int(5.0) + abs(i1) )))\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 0, 0, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0, 2], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 2, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 1, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 2, 0, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 1, 0, 0, 1], [0], [15], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 8, 2, 2, 1, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = mod(len(s0[i0:i2]),len(in2)) != ( i0 + int(7.0) )\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 6, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 3, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 5, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [3], [], [], [20]], "fitness": 69, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 8, 2, 1, 0, 2, 3, 0, 1, 6, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in saveChr(len(in2))[int(0.0):]:{:\\nres0 = in1[mod(int(7.0),i0):] != saveChr(mod(i2,int(6.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 4, 9, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [2, 0, 2, 2, 2, 2, 0, 1, 3, 1, 3, 0, 2, 2, 3, 1, 0, 2, 3, 3, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 4, 0, 4, 0, 1], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 7, 0, 32, 10, 8, 5, 5, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = mod(i0,( ( divInt(( i1 + int(1.0) ),len(s0[int(4.0):])) + len(in2) ) * i0 )) != ( ( max(int(9.0), i0) + divInt(min(saveOrd(in1[i1:]), min(saveOrd(in2), divInt(int(7.0),int(7.0)))),divInt(min(int(1.0), i2),int(7.0))) ) + i1 )\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 3, 4, 4, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 3, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 74, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 9, 1, 2, 0, 1, 6, 2, 1, 17, 4, 2, 4, 2, 1, 0, 0, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in (getCharFromString(in2.rstrip(), len(in1)) + in1[len((\"\"R\"\" + in0.capitalize())[i2:int(0.0)]):int(9.0)].lstrip()[mod(i2,int(5.0)):])[int(7.0):]:{:\\nres0 = \"\";\"\" not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 878}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0], [0, 1, 1], [3, 3, 2, 2, 0, 2, 0, 1, 2, 2, 0, 3, 0, 2, 2, 0, 0, 2, 3, 3, 3, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 2, 0, 1], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [3, 3, 2, 0, 3, 3, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [6], [], [2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 38, 11, 10, 2, 9, 7, 2, 1, 16, 2, 0, 5, 2, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):].startswith(s0[mod(mod(i0,divInt(i2,int(0.0))),( ( i2 + abs(i0) ) + divInt(divInt(i1,i2),divInt(min(len((\"\"G\"\" + saveChr(len(in1)))[:mod(max(divInt(abs(i1),divInt(max(int(7.0), i2),int(5.0))), int(7.0)),i0)]), i0),int(8.0))) )):int(1.0)].capitalize()[saveOrd(\"\"2\"\"):int(7.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\";\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 7, 5, 7, 7, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 4], [1, 2, 2, 0, 1, 2, 2, 2, 0, 0, 2, 0, 1, 0, 2, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 1, 2, 2, 3, 3, 0, 3, 2, 0, 1, 2, 1, 2, 2, 0, 2, 3, 3, 0, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 2, 1, 3, 0, 1, 2, 1, 3, 1, 0, 3, 2, 3, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0, 1, 0], [17, 14], [22], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 20, 20, 16, 0, 75, 23, 17, 12, 11, 7, 3, 0, 17, 2, 0, 4, 3, 2, 1, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):len(in1[i1:])] not in in1:{:\\nres0 = ( i2 != abs(mod(i2,int(0.0))) or ( getCharFromString(in0[( int(7.0) + max(int(5.0), ( mod(( int(7.0) + i0 ),divInt(len(\"\"R\"\"),( int(7.0) * min(max(( int(9.0) - i1 ), divInt(abs(int(7.0)),i2)), int(7.0)) ))) + int(9.0) )) ):i2], i2)[( int(8.0) * max(divInt(len((\"\"w\"\" + saveChr(i0))),divInt(( ( int(5.0) - int(0.0) ) - ( int(4.0) * i0 ) ),int(8.0))), max(i2, mod(min(int(59.0), divInt(( len(s0) + abs(i0) ),len(\"\"O\"\"))),( i1 + int(9.0) )))) ):mod(int(2.0),mod(mod(i0,( abs(min(i2, i1)) - int(2.0) )),int(4.0)))].endswith(in1) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [0, 3, 1, 0, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 2], [0, 0], [17, 2], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 8, 8, 10, 0, 32, 9, 5, 5, 4, 7, 2, 1, 16, 2, 0, 5, 2, 2, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nloopBreak% = 0\\nwhile in1 not in s1[len(in0):]:{:\\nres0 = ( int(5.0) != i1 or ( s0[i2:][mod(i0,int(7.0)):len(getCharFromString((\"\"R\"\" + saveChr(int(5.0))), abs(i1)))][divInt(( divInt(int(2.0),i2) + ( min(( i1 + ( i2 - ( int(2.0) - i0 ) ) ), divInt(len(in1),int(5.0))) + i0 ) ),int(7.0)):int(5.0)].endswith(\"\"C\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 0, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 2, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 3, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 0, 1], [3, 0], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 6, 0, 18, 5, 3, 3, 2, 5, 2, 1, 14, 2, 0, 4, 2, 1, 0, 0, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = (in1 + \"\";\"\"[:len(in0[i2:i2])])[abs(mod(i2,int(0.0))):] not in getCharFromString((\"\"R\"\" + saveChr(( ( i0 + i1 ) + int(7.0) ))), mod(( int(5.0) + i2 ),int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 0, 0, 0, 1], [0], [2, 0, 0, 2, 1, 0, 1, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 0, 3], [0, 0], [2, 2, 0, 2, 1], [0, 3, 2, 1, 3, 0, 3, 3], [17, 18], [23], [3], [20, 3, 1, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 8, 1, 7, 0, 0, 2, 8, 2, 1, 1, 4], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\"[len(in1):] not in \"\";3xS\\\\\\n\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 0, 2, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 2, 3, 3, 1, 3, 0, 2, 2, 3, 2, 3, 0, 2, 3, 0, 3, 1, 3, 1, 3, 3, 2, 3, 1, 3, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [3, 3, 1, 0, 4, 0, 1, 4, 1, 1, 0, 1, 4, 1, 2, 2, 1, 4, 3, 2, 3, 4, 4], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 5, 4, 0, 4], [1, 1, 1, 1, 1, 1, 1], [0], [2, 0, 0, 2, 0, 1, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 1, 2, 2, 2, 1, 1, 4, 1], [3, 1, 3, 0, 2], [1, 0], [2, 2, 0, 0, 1, 2], [0, 0, 2, 0, 3, 1, 0], [17, 0, 13, 6], [3], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 18, 18, 16, 0, 77, 21, 23, 11, 10, 7, 7, 1, 25, 5, 2, 6, 7, 4, 1, 1, 1], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in2[( i0 + ( ( i2 + int(1.0) ) * mod(int(7.0),max(i0, min(( divInt(int(5.0),i0) + ( saveOrd(\"\"R\"\") + ( i1 * min(max(saveOrd(saveChr(int(7.0)).rstrip()), int(7.0)), divInt(max(int(1.0), i2),int(7.0))) ) ) ), i1))) ) ):]) != i1 or True ) and in1[i0:( int(7.0) - max(divInt(min(i0, divInt(( ( int(9.0) - int(8.0) ) * ( int(5.0) + i0 ) ),int(0.0))),int(4.0)), divInt(max(saveOrd((\"\"A\"\" + getCharFromString(s0, int(8.0))).lstrip()), max(i0, mod(( abs(divInt(abs(i0),mod(max(i0, saveOrd(\"\"0\"\")),int(59.0)))) + len(in1) ),int(9.0)))),abs(len(\"\"N\"\")))) )] not in \"\";\"\"[divInt(saveOrd(\"\"d\"\"),int(2.0)):][:saveOrd(\"\"G\"\".capitalize())][i0:i1] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 4, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [3], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 2, 2, 3, 0, 8, 0, 3, 0, 0, 5, 2, 0, 15, 4, 2, 3, 2, 1, 1, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in getCharFromString(in1, len(\"\"R\"\"))[i0:]:{:\\nres0 = ( int(0.0) != len(saveChr(i2)) or ( in1[i2:int(7.0)].endswith((\"\"d\"\" + in0.lstrip()).rstrip()) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 3, 0, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 0, 1, 3, 4], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 2], [2, 2, 0, 0, 1], [0, 3], [24], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 12, 0, 49, 14, 11, 7, 7, 6, 2, 1, 16, 4, 2, 4, 2, 1, 0, 0, 1], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(len(in1), int(7.0)):]:{:\\nres0 = in1.rstrip()[int(7.0):] not in saveChr(i2)[mod(abs(i2),min(len(in0[min(i2, divInt(( divInt(int(5.0),i0) + ( max(( i1 + ( i2 - ( int(2.0) - i1 ) ) ), divInt(min(int(2.0), i2),int(5.0))) + i0 ) ),max(i0, ( int(7.0) * len((\"\"Y\"\" + getCharFromString(s0, int(5.0))).strip()) )))):saveOrd(\"\";\"\")]), i0)):divInt(divInt(mod(int(9.0),int(8.0)),( int(5.0) - i1 )),int(0.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 1, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 1], [17], [0], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 3, 1, 7, 0, 0, 2, 3, 1, 1, 0, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[len(in1):] not in \"\";a\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2, 2], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [1, 1, 1], [1, 3, 3, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 4, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 4, 5, 4], [1, 0, 0, 0, 0, 0, 1], [0], [2, 4, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 2, 2, 0, 2, 1], [17, 23], [6, 22], [5, 9, 4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 1, 4, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 1, 31, 8, 8, 6, 3, 10, 7, 1, 17, 3, 1, 4, 7, 2, 2, 3, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, int(07.0))[len(in1[len(in1):]):]:{:\\nres0 = in0[int(5.0):abs(i1)] not in s0[i1:int(7.0)]\\ni1 += divInt(int(2.0),min(i1, mod(( divInt(int(1.0),i0) + ( len(saveChr(saveOrd((\"\"R\"\" + in1.rstrip())))) * i2 ) ),( max(( int(7.0) * i1 ), ( abs(int(7.0)) + i1 )) * int(9.0) ))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = \"\"g59X4w\"\"\\nin2 = in1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 0, 3, 3, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 4, 0, 1, 0, 1, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 1, 1, 1], [0], [2, 4, 0, 2, 2, 1, 2, 4, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 3, 0, 1, 3, 0], [17, 25, 16], [21], [8], [20, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 15, 0, 48, 11, 10, 4, 7, 2, 7, 0, 15, 3, 1, 5, 7, 3, 1, 1, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile getCharFromString(in2, max(len(\"\"R\"\"[i0:int(07.0)][abs(mod(i2,int(5.0))):]), i2))[i2:] not in saveChr(min(saveOrd(\"\"8;Zv\"\"[:divInt(i2,int(7.0))]), int(2.0)))[i2:( min(divInt(i2,divInt(i2,divInt(int(5.0),i0))), ( max(int(5.0), i0) + min(int(5.0), i0) )) + i1 )]:{:\\nres0 = ( ( int(9.0) * max(int(4.0), max(i2, divInt(( i0 - int(5.0) ),int(0.0)))) ) != mod(int(4.0),i0) or ( \"\"]\"\".endswith((\"\"Q\"\" + in2.rstrip())) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 3, 4, 7, 0, 1, 7, 7, 9, 6, 5, 0, 8, 8, 5, 9, 9, 2, 2], [0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 1, 1, 2, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [3, 1, 0, 4, 3, 0, 1, 2, 1, 2], [0, 0, 2, 0, 0, 2, 2, 1, 1, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 5, 4, 2, 3, 0, 4], [1, 0, 0, 1], [0], [2, 0, 4, 3, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 2, 2], [17], [], [3, 7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 11, 0, 52, 17, 10, 11, 6, 6, 4, 1, 15, 3, 1, 3, 4, 1, 0, 2, 1], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString((\"\"R\"\" + in1), max(i0, mod(min(( i0 + int(9.0) ), saveOrd(s2[int(3.0):])),len(in0[i1:( ( mod(min(i0, divInt(max(( i2 + ( divInt(int(4.0),int(7.0)) * i1 ) ), ( abs(int(0.0)) + i1 )),int(1.0))),int(7.0)) + i2 ) * i0 )]))))):]:{:\\nres0 = saveChr(( divInt(max(int(7.0), abs(i0)),( ( ( int(9.0) * int(6.0) ) - ( int(5.0) - i2 ) ) + int(0.0) )) + divInt(int(8.0),int(8.0)) )) not in (\"\";37\"\" + s0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 0, 0, 1, 2, 1, 2, 0, 0, 2, 0], [0, 1, 1], [3, 3, 0, 2, 0, 2, 0, 1, 2, 2, 0, 3, 0, 2, 2, 0, 0, 2, 3, 3, 0, 2, 3, 3, 3, 2, 2, 3, 1, 0, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 2, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [3, 3, 2, 0, 3, 4, 1, 2, 1, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 2, 4, 4, 3, 0, 4], [1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 2, 0, 1, 0], [2, 1, 3], [3, 0], [0, 2, 0, 0, 1], [0, 3, 2, 0], [14, 12], [], [2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 11, 0, 39, 10, 11, 1, 9, 7, 4, 1, 16, 2, 0, 5, 4, 2, 0, 1, 1], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):len(in1[i2:])]:{:\\nres0 = in0 not in s0[mod(i2,mod(i0,int(0.0))):divInt(( i0 + abs(i1) ),divInt(divInt(i2,i1),mod(min(len(saveChr(i2)), mod(saveOrd((\"\"O\"\" + in1[:max(abs(divInt(divInt(max(int(7.0), i0),int(5.0)),int(7.0))), i0)])),i2)),int(8.0))))].capitalize()[int(1.0):max(int(7.0), len(\"\";2M\"\"))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 5, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 1, 1, 1, 2, 0, 1], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 0, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 0, 3, 0, 4, 0], [1, 1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 2, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 0], [17, 1], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 16, 16, 11, 0, 50, 17, 7, 8, 9, 7, 2, 1, 16, 3, 1, 4, 2, 2, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i1):]:{:\\nloopBreak% = 0\\nwhile s0 not in in0:{:\\nres0 = ( int(3.0) != len(s0) or ( getCharFromString(in1[mod(i1,int(7.0)):( int(5.0) + abs(i1) )], divInt(( ( int(7.0) - i1 ) * ( min(len(saveChr(i0)), divInt(divInt(( int(2.0) - i1 ),divInt(i1,int(1.0))),i1)) + int(7.0) ) ),int(7.0)))[i2:].endswith((\"\"R\"\" + \"\"B\"\"[mod(( int(9.0) * min(int(8.0), max(i0, ( ( divInt(int(5.0),int(5.0)) - mod(int(4.0),i1) ) - int(8.0) ))) ),int(59.0)):].rstrip())) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 9, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 4, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 2, 0, 2, 0, 1, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 0, 0, 2, 1], [0, 0], [17, 18], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 0, 33, 9, 7, 5, 4, 2, 2, 0, 8, 0, 0, 4, 2, 2, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = s0[abs(saveOrd(in2[abs(int(7.0)):i0])):mod(i2,int(9.0))][min(int(5.0), len(\"\"R\"\")):int(2.0)] not in \"\"S\"\"[divInt(( divInt(int(2.0),i2) + ( min(( i0 + ( i1 * ( int(5.0) - i2 ) ) ), divInt(max(int(7.0), i1),int(5.0))) + int(9.0) ) ),i2):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 0, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 4, 1, 0, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [0, 0, 0, 0, 1], [0], [2, 4, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 3], [1, 0, 0], [2, 2, 0, 2, 1], [0, 2, 1, 0, 3], [17, 13], [10], [5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 5, 0, 17, 3, 5, 2, 1, 5, 5, 1, 15, 4, 3, 5, 5, 2, 1, 1, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(len(in1)):abs(i0)][min(int(0.0), i2):].rstrip()[int(7.0):]:{:\\nres0 = saveChr(mod(int(1.0),saveOrd(in1[:i2])))[( ( i0 + int(7.0) ) + i1 ):] in (\"\"R5kN;\"\" + in0.lstrip()).lstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 2, 4, 7, 7, 9, 8, 5, 0, 5, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [0, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 2, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 2, 1, 0, 0, 2, 1, 3, 2, 0, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1, 0, 0, 0, 0, 1], [0], [2, 1, 0, 2, 0, 4, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 2, 2, 2, 3, 2], [17], [], [8, 8, 7, 7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 4, 0, 8, 1, 2, 0, 1, 3, 6, 1, 8, 2, 0, 2, 6, 1, 0, 4, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[i0:]:{:\\nres0 = ( ( len(in2) != i2 or True ) and in0[i1:] not in getCharFromString(\"\"887;7\"\", len(saveChr(mod(i0,int(9.0))))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 3], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2, 2, 1, 2], [0], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 3, 0, 0, 2, 2, 1, 3, 3, 1, 2, 3, 3, 1, 1, 1, 1, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 0, 1, 0, 1, 2, 0], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0], [2, 5, 4, 4, 0, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0, 1], [17], [16], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 20, 20, 16, 0, 69, 19, 15, 8, 11, 7, 2, 1, 16, 3, 1, 4, 2, 1, 1, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):len(in1[mod(int(0.0),i0):])]:{:\\nloopBreak% = 0\\nwhile s0 not in s0[mod(i2,int(7.0)):( int(5.0) - abs(i2) )].capitalize()[i0:divInt(divInt(int(7.0),i1),divInt(min(( i2 + ( len(saveChr(divInt(min(i1, ( max(int(6.0), i2) * int(1.0) )),int(7.0)))) - i0 ) ), i0),mod(int(7.0),abs(int(9.0)))))]:{:\\nres0 = ( max(i0, divInt(( ( int(8.0) + int(5.0) ) * ( int(0.0) - i1 ) ),int(4.0))) != min(mod(max(i2, i2),mod(divInt(int(8.0),min(max(int(59.0), ( abs(min(int(9.0), int(2.0))) - int(2.0) )), int(3.0))),i1)), i2) or ( (\"\"R\"\" + in1.rstrip()).endswith(\"\"q\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [4, 0, 0], [2, 2], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 2, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1], [2, 2, 0, 0, 1], [0, 0], [17, 18], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 8, 8, 9, 0, 34, 11, 6, 4, 7, 7, 2, 1, 16, 3, 1, 4, 2, 2, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nloopBreak% = 0\\nwhile in1[len(in0):] not in s0[mod(int(0.0),i1):mod(i2,int(7.0))].capitalize()[( divInt(int(5.0),i2) + i0 ):divInt(divInt(int(7.0),i1),( abs(( i2 + divInt(min(( len(saveChr(int(6.0))) * mod(min(int(1.0), i1),int(7.0)) ), int(7.0)),i2) )) - i0 ))]:{:\\nb1 = (\"\"R\"\" + in1.rstrip()).endswith(\"\"S\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 1, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 2, 0, 3, 6], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2], [0, 1, 1], [0, 3, 1, 3, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 3, 2, 0, 2, 2, 1, 2, 3, 1, 3, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 2, 3, 3, 1, 0, 1, 3, 1, 1, 3, 1, 2, 1, 0, 3, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 0, 1, 3, 1, 4, 0, 1, 0], [0, 0, 1, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 3, 3, 0, 4, 1, 2], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 4, 4, 0, 1, 0, 4, 1, 2, 2, 1, 0], [2, 1, 3, 0], [4, 0], [2, 2, 0, 0, 2, 0, 0], [0, 0, 2], [17, 18], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 23, 23, 13, 0, 67, 17, 15, 9, 8, 9, 3, 1, 23, 4, 1, 7, 3, 2, 0, 1, 0], "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[i0:]:{:\\nloopBreak% = 0\\nwhile in1 not in in0[len(in0):]:{:\\nres0 = ( int(7.0) != len(s0[i2:][mod(i2,int(7.0)):abs(int(1.0))][min(i0, divInt(( divInt(int(2.0),i1) + ( len((saveChr(( abs(( i2 + ( ( int(2.0) - ( max(int(5.0), min(int(7.0), int(5.0))) + i1 ) ) + i2 ) )) * divInt(int(9.0),max(int(8.0), len(in1.rstrip(\"\"R\"\")))) )) + s1).capitalize()) - i0 ) ),divInt(divInt(( int(5.0) - int(0.0) ),( int(4.0) * i0 )),int(8.0)))):int(59.0)]) or ( getCharFromString(\"\"S\"\", mod(max(saveOrd(\"\"6\"\"[int(9.0):i0][int(2.0):min(int(2.0), int(2.0))]), max(int(0.0), divInt(int(3.0),i1))),min(i2, int(6.0)))).endswith(s2) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2], [], [1, 5], [3, 3, 1], [], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 3, 1, 3, 2, 3, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 2, 0, 3], [1, 1], [0], [2, 0, 1, 1, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0, 1], [17], [6], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 4, 2, 1, 6, 0, 0, 1, 2, 1, 1, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = \"\"g\"\" not in in1\\ni1 = len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 3, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 4, 2, 0, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0, 1], [17], [9], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 4, 4, 7, 0, 17, 2, 4, 0, 2, 5, 2, 1, 11, 1, 0, 4, 2, 1, 1, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(len(in0), i0):]:{:\\nloopBreak% = 0\\nwhile in1[int(0.0):] not in getCharFromString(in0[abs(mod(i2,int(7.0))):], i2):{:\\nres0 = ( i0 != min(i2, mod(i2,int(5.0))) or ( \"\"R\"\"[int(7.0):i2].endswith(\"\"j\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 1, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 1, 2, 3, 0, 3], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 3, 2, 4], [0, 2, 1, 1, 2, 1, 2, 2, 0, 2], [0, 0, 1, 0, 0, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 0, 4, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 0], [17, 0], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 10, 0, 56, 18, 13, 10, 8, 6, 3, 1, 16, 3, 2, 4, 3, 2, 0, 0, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(\"\"R\"\"[abs(i0):min(divInt(int(0.0),int(7.0)), ( int(5.0) + ( i2 * divInt(( mod(int(7.0),i0) - ( len(in0[int(7.0):i0]) - min(max(( int(1.0) * i1 ), divInt(abs(int(7.0)),( int(1.0) - int(9.0) ))), i2) ) ),i0) ) ))].rstrip()):] not in saveChr(divInt(int(8.0),max(mod(max(i0, ( ( ( int(5.0) * int(0.0) ) * mod(int(4.0),i1) ) + int(8.0) )),len((\"\";\"\" + s0.lstrip()))), mod(int(59.0),( abs(i0) * saveOrd(\"\"A\"\") )))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [1, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2, 1, 2, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 0, 3, 3], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2, 3, 3, 3, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4, 4], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], [0], [2, 2, 0, 2, 1, 4, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0, 1, 0, 1], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 0, 1, 1, 3, 2, 2, 0, 0, 2, 1, 0, 2, 1], [17, 14, 12, 22, 19], [6, 19, 7, 14], [9, 4, 2, 4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 0, 13, 13, 13, 1, 54, 15, 14, 9, 6, 8, 14, 1, 20, 3, 1, 5, 14, 5, 4, 4, 1], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"[len(getCharFromString(in1[i1:], i1)):abs(mod(i1,int(3.0)))]):][mod(int(7.0),min(i1, ( divInt(( int(5.0) + i0 ),( len(in1[:min(i2, ( max(( int(7.0) + i1 ), divInt(abs(int(2.0)),i1)) * int(1.0) ))]) - int(7.0) )) + i2 ))):]:{:\\nb1 = ( divInt(int(7.0),max(int(9.0), abs(i2))) * divInt(( ( int(8.0) - int(5.0) ) - ( int(0.0) * i1 ) ),int(4.0)) ) != len(saveChr(len((\"\"Og\"\" + in0.rstrip()))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( i2 \\l len(\"\"t;9\"\") or ( in2 not in \"\"4MW2\"\" and True ) ):{:\\ni0 = saveOrd(in1)\\nin1 = \"\"hT4o\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [4, 0], [2, 2, 0, 2, 1], [0], [12], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1[max(int(9.0), i0):].endswith(\"\"M\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 1, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1, 1], [0], [1, 0, 1, 2, 0, 3, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0, 2], [17], [], [5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 2, 0, 8, 2, 2, 1, 1, 2, 2, 1, 3, 0, 0, 0, 2, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = ( ( abs(mod(i2,int(0.0))) != abs(( i2 + int(7.0) )) or True ) and in0 not in \"\"5\"\" )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [0, 2], [0, 0], [0], [0, 0], [], [], [1, 2, 1], [4, 3, 4], [1, 0, 1, 1], [0, 0, 0], [], [3, 3, 1], [1], [0], [], [1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [0, 6, 6, 7, 5, 0, 5, 0, 5, 7, 8, 8], [0, 1], [], [1, 1, 2, 0, 1, 3, 2, 1, 1, 1], [1, 1], [3, 0], [], [1, 0], [3, 5], [1], [0], [0, 1], [], [], [], [3], [], [], [], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 2, 3, 4, 3, 0, 1, 1, 0, 0, 12, 12, 1, 0, 10, 2, 1, 0, 2, 2, 1, 1, 2, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(0.0) \\le int(66750.0)\\nloopBreak% = 0\\nfor in0 in in2:{:\\nb2 = ( mod(i0,int(5.0)) \\ge len(\"\"[\"\") or divInt(int(0.0),int(5.0)) \\le int(788.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 0, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 0, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 12, 0, 34, 9, 7, 6, 3, 5, 2, 1, 14, 2, 0, 5, 2, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1[len(in1):mod(i2,abs(( i2 + int(0.0) )))]):][( int(7.0) + min(i2, ( ( divInt(int(5.0),i2) * ( i1 - i2 ) ) + i1 )) ):]:{:\\nres0 = getCharFromString(in0[:len(\"\"R\"\")], min(( int(7.0) * i2 ), divInt(max(int(7.0), i0),i0)))[int(1.0):i0] not in (\"\"4\"\" + saveChr(i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 0, 1, 1, 1, 1, 1, 1], [5, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [0, 3, 0, 3, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 2, 0, 2, 1, 0, 1, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 1, 2], [17], [0], [5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 2, 32, 9, 8, 7, 3, 3, 3, 1, 7, 0, 0, 3, 3, 1, 1, 1, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[i1:][len(\"\"R\"\"[i1:len(in1)]):]:{:\\ni1 = abs(( int(5.0) + int(7.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += mod(int(57.0),min(i0, ( mod(( int(2.0) * i2 ),( len(\"\"a5\"\") - min(i1, ( max(( int(1.0) + i1 ), divInt(abs(int(7.0)),i2)) * int(7.0) )) )) - int(9.0) )))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 2, 2, 2], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 0, 1, 0, 2, 3, 0, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 2, 4], [1, 1, 1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 1], [17], [1], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 12, 12, 13, 1, 49, 14, 11, 8, 6, 6, 3, 0, 17, 3, 1, 4, 3, 1, 1, 0, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in \"\"R\"\"[len(in1):]:{:\\nres0 = ( mod(i0,abs(( i2 + int(0.0) ))) != ( int(4.0) + min(i2, divInt(( i2 * int(5.0) ),i1)) ) or ( getCharFromString(in1[divInt(len(saveChr(i2)),i1):min(max(( int(7.0) - i2 ), ( abs(int(7.0)) + i0 )), int(1.0))], int(7.0))[i0:max(divInt(int(7.0),saveOrd((\"\";\"\" + in0.rstrip()))), ( len(\"\"b\"\") * i2 ))].endswith(s2) and True ) )\\n:}else:{:\\ni2 = divInt(divInt(( int(9.0) - int(8.0) ),( int(5.0) - i2 )),int(0.0))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 2, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1, 1], [0], [2, 1, 0, 2, 0, 4, 2, 2, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 11, 0, 49, 16, 8, 9, 7, 4, 2, 1, 11, 1, 0, 5, 2, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[abs(len(in2)):]:{:\\nres0 = in1[int(7.0):].startswith(getCharFromString(in2[:int(7.0)][mod(( i0 + int(5.0) ),( int(2.0) + abs(i2) )):divInt(( divInt(int(2.0),i2) - ( min(( i0 - divInt(i1,( len(\"\"5\"\") + i2 )) ), divInt(max(int(5.0), i1),int(7.0))) * int(5.0) ) ),i2)][i0:divInt(int(9.0),max(int(8.0), abs(i0)))], ( ( ( int(5.0) - int(0.0) ) - mod(int(4.0),i0) ) * int(8.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [0, 1], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 5, 1, 3, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0, 1, 2], [0, 1, 1], [3, 1, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 3, 1, 1, 0, 1, 0, 2, 3, 3, 3, 3, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [4, 1, 2, 0, 2, 0, 3, 2, 1, 3, 3, 0, 3], [0, 2, 0, 1, 0, 2, 0, 2, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [3, 5, 3, 4, 3, 0, 4], [1, 1, 0, 0, 0, 0, 1], [0], [2, 0, 2, 2, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 1, 3, 3, 1, 2], [17], [1, 9, 9], [2], [20, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 14, 14, 15, 0, 58, 17, 13, 8, 9, 6, 7, 1, 16, 2, 0, 5, 7, 1, 3, 1, 2], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(\"\"R\"\"[int(07.0):i2][i2:]):]:{:\\nres0 = ( ( max(( i2 + int(1.0) ), mod(int(7.0),( i0 * divInt(( divInt(abs(i1),( min(( i2 + divInt(( divInt(int(5.0),i1) - divInt(abs(int(1.0)),i2) ),int(3.0)) ), int(7.0)) + i0 )) * min(( int(9.0) + len(in0) ), int(8.0)) ),abs(i0)) ))) != mod(( divInt(int(5.0),max(int(0.0), int(4.0))) * i0 ),int(8.0)) and True ) or in1[i1:divInt(len(in0[:len(getCharFromString((\"\"b\"\" + saveChr(min(len(s0), i0))), i1))]),i2)] not in \"\"j;<j2\"\" )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 8, 6, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 2, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 1, 2, 1, 3, 3], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 4], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4, 5, 1], [1, 1], [0], [2, 2, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [23], [], [20]], "fitness": 9223372036854775807, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):][len(in1):]:{:\\nloopBreak% = 0\\nwhile in0 not in getCharFromString(s0[i0:int(0.0)], mod(mod(i0,int(7.0)),divInt(int(5.0),abs(i2))))[divInt(( ( int(7.0) + i0 ) * ( min(( i1 * mod(len(saveChr(divInt(int(2.0),i2))),mod(min(int(8.0), i1),int(6.0))) ), int(7.0)) - divInt(i2,( int(9.0) + max(int(8.0), abs(i0)) )) ) ),( ( divInt(int(5.0),int(0.0)) * mod(int(4.0),i0) ) - int(8.0) )):max(i0, int(59.0))]:{:\\nres0 = ( ( int(9.0) - len((\"\"R\"\" + in1.rstrip())) ) != saveOrd(\"\"x\"\") or ( in2.endswith(s1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 17, 17, 11, 0, 56, 18, 11, 8, 10, 9, 2, 1, 18, 3, 1, 4, 2, 1, 1, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [8], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 1, 1, 7, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = getCharFromString(in0, len(\"\"I\"\"))[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2, 0], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0, 1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 1, 0, 1, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 4, 0, 0, 2, 2, 7, 2, 2, 3, 2, 1, 1, 11, 11, 9, 1, 32, 7, 6, 4, 3, 7, 2, 0, 16, 3, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in2[len(in2):] not in getCharFromString(in1, len(in1)):{:\\nres0 = ( int(0.0) != i0 or ( saveChr(int(9.0))[mod(i2,int(5.0)):].endswith(in0[int(7.0):int(7.0)]) and True ) )\\ni2 = abs(i0)\\n:}\\ns0 = (\"\"R\"\" + in1.rstrip())[( ( mod(int(1.0),i1) + ( i2 + divInt(i2,min(len(\"\"6\"\"), int(0.0))) ) ) * int(7.0) ):i2]\\nb2 = ( min(int(9.0), i0) - int(8.0) ) \\l int(5.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 2, 1, 2], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 2, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 0, 0, 3, 3, 2, 1, 0, 3, 3, 1, 0, 0, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 0, 1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 2, 0, 1, 3, 1], [17, 13], [2, 11], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 13, 0, 49, 15, 11, 10, 5, 6, 6, 1, 16, 4, 1, 4, 6, 2, 2, 1, 1], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1[len(in1):]))[divInt(i0,abs(( i2 + ( ( int(0.0) + min(i2, ( divInt(( int(7.0) * i2 ),( len(saveChr(i1)[i2:min(max(divInt(int(5.0),i1), abs(max(int(7.0), i2))), i0)]) - int(7.0) )) + i0 )) ) * i2 ) ))):]:{:\\nres0 = in0[( int(1.0) - len((\"\"R\"\" + saveChr(divInt(saveOrd(s0),i1))).rstrip()) ):divInt(( ( int(7.0) - int(7.0) ) * ( int(9.0) + i2 ) ),int(8.0))] in \"\"0Nc;l\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 4, 8, 2, 1, 2, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 3, 0, 3, 0, 1, 1, 1, 3, 0, 2, 2, 1, 1, 0, 2, 3, 2, 0, 0, 3, 2, 1, 0, 2, 3, 3, 3, 1, 2, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 0, 1, 2, 1, 0, 1, 3, 1], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 1, 1, 0, 1, 3, 1, 0, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 4, 1, 4], [1, 1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 0, 3], [3, 0], [2, 1, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 38, 8, 11, 3, 5, 7, 2, 1, 17, 4, 1, 4, 2, 1, 0, 0, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(saveChr(mod(abs(i1),max(i2, int(6.0))))[int(6.0):int(4.0)]))[:max(i2, mod(( int(8.0) + int(2.0) ),i0))] not in in1[divInt(min(( i1 + i2 ), max(divInt(int(1.0),i1), divInt(len(getCharFromString((\"\"R\"\" + s1.lstrip(\"\";\"\")), max(min(int(2.0), ( i2 * i0 )), int(7.0)))),int(9.0)))),saveOrd(in1)):int(8.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 4, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [2, 2, 2], [17], [], [8, 4, 7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 7, 7, 10, 0, 33, 9, 7, 6, 3, 5, 3, 0, 16, 4, 1, 3, 3, 0, 0, 3, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in getCharFromString(in1, len(\"\"8\"\"))[i0:]:{:\\nres0 = ( int(0.0) != len(saveChr(i2)) or ( in1[i2:int(7.0)].endswith((\"\"4\"\" + getCharFromString(in0, mod(int(5.0),min(i1, divInt(( divInt(saveOrd(\"\"7\"\"),i1) + ( min(( i2 + ( i1 * ( int(7.0) - i2 ) ) ), ( max(int(2.0), i0) + int(5.0) )) * int(7.0) ) ),i0))))).rstrip()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [1, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 2, 0, 4, 4, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [22], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 0, 2, 0, 0, 5, 1, 1, 11, 3, 1, 2, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\nres0 = in1[len(getCharFromString(saveChr(i0), i2)):int(0.0)] not in \"\"W\"\"[len(in0):].rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 0, 2, 0, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 2, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 2], [21], [], [3, 8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 6, 6, 12, 0, 34, 10, 6, 5, 5, 5, 3, 0, 15, 4, 1, 3, 3, 1, 0, 2, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[min(i0, mod(i2,i2)):] not in in2:{:\\nres0 = ( ( i0 * int(0.0) ) != ( int(7.0) + len(in1[i1:]) ) or ( getCharFromString(\"\"V\"\", i2)[mod(divInt(int(5.0),i1),divInt(abs(( i2 * ( min(divInt(len(in1),i0), ( min(int(7.0), i0) - int(6.0) )) + int(1.0) ) )),i1)):i0].capitalize().endswith((\"\"38\"\" + in0.rstrip()).capitalize()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0], [3, 3, 2, 0, 3, 1, 1, 3, 1, 2, 2], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [3], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 1, 14, 14, 10, 0, 50, 15, 11, 7, 8, 4, 2, 0, 10, 1, 0, 3, 2, 1, 1, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(in2[len(in2):]) != abs(i0):{:\\nres0 = ( min(mod(int(0.0),int(7.0)), ( int(5.0) + len(in1[i1:]) )) \\l divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len(in1), divInt(int(1.0),i1)) )),divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2)) or ( \"\"R\"\" not in getCharFromString(\"\"d\"\"[i1:mod(int(8.0),abs(( abs(i2) - divInt(( ( int(5.0) + int(0.0) ) * ( int(4.0) - i0 ) ),int(8.0)) )))], i0) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 7, 1, 7, 4, 8, 7, 7, 8, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 0, 8, 3, 7, 9], [2, 2, 0, 0, 1, 2, 2, 2, 0, 0, 2, 2, 0, 0, 1, 2, 2, 2, 0, 1, 0, 1], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 2, 2, 0, 2, 1, 2, 1, 3, 2, 3, 3, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 1, 3, 1, 2, 1, 1, 2, 1, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 3, 1, 0, 3, 0, 2, 0, 0, 2, 3, 3, 1, 2, 0, 0, 2, 0, 0, 2, 0, 3, 3, 3, 3, 2, 0, 3, 3, 0, 1, 3, 2, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 2, 1, 1, 0, 3, 2, 1, 3, 2, 3, 1, 0, 1, 4, 0, 0, 0, 1, 3, 2, 2, 2], [2, 2, 2, 1, 0, 2, 0, 1, 1, 1, 0, 2, 1, 2], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [3, 5, 3, 0, 3, 0, 4], [1, 1], [0], [2, 0, 2, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 0], [0, 0], [11, 10], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 24, 24, 22, 0, 92, 25, 24, 14, 11, 7, 2, 1, 16, 2, 0, 5, 2, 2, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[max(int(07.0), i2):]:{:\\nres0 = in0[int(1.0):max(( i2 * int(7.0) ), mod(int(4.0),abs(i0)))][( mod(( max(i0, divInt(( ( i1 * divInt(int(8.0),divInt(int(7.0),max(divInt(min(len(s0), i2),int(7.0)), mod(i2,i2)))) ) * ( int(8.0) - abs(int(8.0)) ) ),max(int(5.0), len(in0[int(0.0):( int(4.0) + int(8.0) )])))) * ( int(59.0) + divInt(int(9.0),abs(int(2.0))) ) ),i0) - mod(len(s0[max(i0, mod(min(int(2.0), i2),max(i2, ( i0 - i0 )))):( saveOrd(getCharFromString((\"\"L\"\" + saveChr(min(int(0.0), ( i1 - i2 )))), ( i2 + i2 ))) * ( i0 - min(min(max(len(in1), mod(i1,abs(abs(i0)))), int(8.0)), abs(( i1 * int(3.0) ))) ) )]),int(79.0)) ):] not in \"\"K\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 1, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 2, 1, 1, 2], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [25], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in \"\"Z\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 7, 2, 2, 5, 4, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 2, 0, 1, 2, 1, 1, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 1, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 1, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 2, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 5, 5, 3, 0, 12, 2, 2, 0, 2, 4, 2, 0, 10, 0, 0, 4, 2, 1, 0, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( int(7.0) != mod(i0,int(7.0)) or ( \"\"R\"\"[divInt(int(7.0),int(2.0)):int(2.0)].endswith(\"\";\"\"[i2:i2]) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 1, 2, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 2, 0, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 3, 1, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 2], [1, 0], [2, 2, 0, 0, 1], [1], [13], [18], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = in1[len(in0):] not in \"\"s\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [0], [1, 0], [0], [0, 0], [], [], [3], [5], [0, 1], [0], [], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 2, 1, 1, 6, 4, 0, 8, 8, 3, 3, 7], [1, 2, 2, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 1, 0, 0, 2, 2, 2, 0, 0, 1, 1], [0], [0, 2, 2, 0, 2, 2, 2, 1, 0, 2, 0, 3, 2, 2, 1, 0, 2, 2, 3, 3, 0, 2, 0, 1, 2, 2, 0, 1, 3, 2, 3, 2, 1, 1, 2, 0, 2, 1, 3, 1, 1, 3, 0, 2, 2, 0, 2, 2, 3, 3, 1, 0, 2, 0, 0, 2, 2, 0, 3, 0, 0, 0, 1, 2, 0, 1, 0, 2, 2, 0, 0, 1, 3], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [2, 4, 1, 2, 4, 4, 3, 0, 2, 1, 3], [1, 2, 2, 2, 1, 2, 0, 0, 1, 1, 1, 0, 2, 0, 2, 0, 2], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0], [0, 5, 1], [0, 1, 1, 1, 1, 1, 1, 1], [0], [4, 4, 2, 3, 3, 1, 4, 4, 2, 0, 2, 4, 1, 2, 1, 4, 1, 2, 1, 3, 1, 0, 1], [3, 2, 1, 2, 3, 2], [2, 5], [1, 2, 1, 1, 0], [2, 1, 2, 1, 1, 0, 1, 3], [16], [7, 14, 3, 20], [6, 9], [21]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 13, 13, 23, 1, 73, 27, 11, 17, 10, 3, 8, 1, 23, 6, 2, 5, 8, 1, 4, 2, 1], "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\nloopBreak% = 0\\nfor s0 in ((\"\"6h\"\" + saveChr(divInt(( i2 - mod(( ( int(1.0) * i0 ) * mod(i1,abs(( ( int(8.0) * i0 ) - divInt(divInt(saveOrd(in2[max(i1, ( i0 * int(2.0) )):].capitalize()),( ( i2 + int(1.0) ) + abs(mod(saveOrd(\"\"9\"\".strip(\"\"o\"\"[:( int(1.0) - int(6.0) )])[:mod(i0,divInt(int(4.0),saveOrd(\"\"d\"\".capitalize())))]),int(0.0))) )),int(8.0)) ))) ),len(\"\"Q\"\"[i1:( divInt(i0,divInt(( min(abs(int(8.0)), i1) - ( i1 - i0 ) ),( ( i0 + max(i2, i2) ) * i2 ))) + int(3.0) )])) ),( i0 * int(3.0) )))) + (\"\"u\"\" + s1))[:i0].capitalize().strip():{:\\nres0 = not ( ( i1 + i1 ) * int(7.0) ) != len(\"\"<\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 7, 1, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 5, 1, 6, 8, 5, 9, 2, 4, 9, 9], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0, 0, 0, 1, 2, 1, 2, 2, 2, 0, 1, 1], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 1, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 0, 2, 3, 1, 2, 2, 2, 1, 3, 3, 2, 3, 1, 0, 1, 3, 3, 2, 3, 2, 2, 2, 1, 1, 1, 1, 0, 2, 0, 0, 2, 1, 2, 0, 3, 0, 2, 2, 1, 3, 0, 2, 1, 3, 3, 2, 1, 2, 0, 2, 3, 1, 3, 3, 0, 3, 0, 3, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0], [4, 1, 2, 0, 3, 0, 1, 2, 1, 1, 3, 1, 1, 1, 1, 2, 1, 2, 4, 1, 0, 3, 1, 4, 3], [1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 1, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [3, 5, 3, 1, 3, 0, 4, 1, 3], [1, 1, 1, 1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0, 1, 4, 1, 0], [0, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 0, 1], [17, 4], [6], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 29, 29, 24, 0, 112, 35, 25, 19, 16, 9, 4, 1, 21, 4, 2, 4, 4, 2, 1, 0, 1], "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(in0):]:{:\\nloopBreak% = 0\\nwhile getCharFromString(s1, int(8.0))[i2:] not in in0[int(7.0):max(mod(i2,int(1.0)), mod(int(7.0),abs(int(4.0))))]:{:\\nb2 = ( ( divInt(( min(i2, divInt(len(s0[( i0 - ( divInt(( int(1.0) * i1 ),divInt(min(int(7.0), i2),int(7.0))) - int(9.0) ) ):i1]),i2)) + mod(int(8.0),max(int(5.0), abs(i0))) ),( ( ( int(0.0) + int(4.0) ) - divInt(int(8.0),i0) ) + int(59.0) )) + max(i0, divInt(i1,( max(int(9.0), ( ( ( int(2.0) + len(saveChr(max(( max(int(2.0), i0) + int(5.0) ), max(max(( abs(( divInt(divInt(int(1.0),int(6.0)),int(8.0)) - int(5.0) )) * i0 ), divInt(i0,i1)), ( int(9.0) + mod(i2,max(i1, ( divInt(int(2.0),abs(i2)) + mod(int(4.0),saveOrd((\"\"R\"\" + in1.rstrip()))) ))) ))))) ) - max(mod(int(9.0),( i2 * ( min(int(9.0), len(\"\";\"\")) - max(i2, saveOrd(s1)) ) )), i0) ) + len(\"\"E\"\") )) - i1 ))) ) != i1 or ( \"\"g\"\".lstrip().endswith(in0) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 3, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 3, 2], [17], [], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 0, 12, 1, 3, 0, 1, 5, 3, 1, 16, 4, 1, 4, 3, 1, 0, 1, 1], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, int(0.0))[i0:] not in saveChr(int(7.0))[len(((\"\"R\"\" + getCharFromString(in1, i2)).rstrip() + \"\";3\"\")[i2:int(5.0)]):mod(int(2.0),abs(i0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 6, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 1, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 4, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0, 2], [17, 20], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 6, 0, 32, 8, 9, 5, 3, 5, 3, 1, 14, 2, 0, 4, 3, 2, 0, 1, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(\"\"R\"\"[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(len(\"\"U\"\"), divInt(int(5.0),divInt(int(7.0),i0))) ):( min(( int(7.0) + saveOrd((\"\"6\"\" + saveChr(abs(( int(6.0) * i1 ))))) ), ( max(int(7.0), i2) - int(7.0) )) + int(9.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 2, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 1, 0, 0, 1], [2], [20], [], [8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 4, 1, 0, 3, 1, 1, 0, 1, 1, 1, 0, 5, 0, 3, 0, 0, 3, 1, 1, 4, 0, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):saveOrd(\"\"8\"\")]:{:\\nres0 = ( not abs(int(0.0)) \\l i0 or True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 2, 2, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 3, 1, 3], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1, 1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0, 1], [17], [1], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 11, 0, 54, 18, 11, 10, 8, 6, 2, 1, 16, 3, 1, 5, 2, 1, 1, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(in2):][( divInt(divInt(( i1 + int(0.0) ),( int(5.0) + abs(i2) )),i2) * ( ( int(5.0) - i0 ) + divInt(min(( i1 * ( len(in0[:divInt(min(i2, divInt(max(int(7.0), i1),int(6.0))),int(1.0))].capitalize()[:i2]) - i0 ) ), ( int(7.0) - abs(int(7.0)) )),max(i0, divInt(mod(( int(9.0) * int(8.0) ),( int(5.0) + i0 )),int(0.0)))) ) ):]):]:{:\\nres0 = saveChr(divInt(int(4.0),max(int(8.0), len((\"\"R\"\" + s0.rstrip()))))).endswith(\"\"b\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 0, 1], [0], [2, 2, 0, 2, 3, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2], [1, 0], [2, 2, 0, 2, 1], [0, 3, 1, 0], [17, 0], [18], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 9, 0, 33, 11, 6, 4, 7, 6, 4, 1, 16, 2, 0, 5, 4, 2, 1, 0, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(saveOrd((in1 + \"\"R\"\"[mod(int(0.0),i1):])[( i2 + int(7.0) ):divInt(int(5.0),len(in1[:i0]))]),i0):][divInt(divInt(int(7.0),i1),( abs(( i2 + divInt(min(( len((\"\";\"\" + in0.capitalize()).capitalize()) * i1 ), mod(min(int(6.0), i2),int(1.0))),int(7.0)) )) - i0 )):]:{:\\ns0 = \"\"sA\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 1, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 2, 0, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 1, 1, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 0, 0, 1], [0], [25], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 0, 2, 0, 0, 4, 1, 1, 7, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in2[i0:int(0.0)][i1:])):]:{:\\nres0 = in1 not in \"\"Z\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 2, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0], [0, 1, 1], [2, 1, 0, 1, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1, 1], [0], [2, 0, 0, 2, 4, 1, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [9], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 1, 33, 10, 5, 5, 5, 5, 2, 1, 15, 3, 1, 5, 2, 1, 1, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(int(0.0),i0):]:{:\\nres0 = in1 not in getCharFromString(\"\"R\"\", int(2.0))[len(in1[:i2][int(5.0):int(2.0)][mod(int(2.0),len(saveChr(i2))):( divInt(divInt(int(1.0),i0),( abs(( i2 + ( min(divInt(int(7.0),i2), ( len((\"\"j\"\" + in1.rstrip())) + int(7.0) )) * i1 ) )) - int(9.0) )) + int(8.0) )]):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 3, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 3, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 4, 0, 3, 4, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 2, 0, 1, 4, 1, 1, 0], [3, 0, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 1, 3], [17], [4], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 6, 0, 29, 9, 8, 4, 5, 7, 3, 1, 16, 3, 2, 4, 3, 1, 1, 0, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in1):] not in getCharFromString(s0[i0:i2], len(in1[mod(i0,int(1.0)):mod(int(7.0),min(i2, ( mod(( int(3.0) + i1 ),mod(saveOrd(\"\"R\"\"),( i2 + min(len(\"\"e\"\".lstrip()), ( int(7.0) * int(7.0) )) ))) - divInt(saveOrd(\"\";\"\"),int(1.0)) )))])).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 3, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 1, 2, 1, 1, 0, 2, 1], [0, 1, 1], [3, 3, 2, 2, 0, 0, 0, 1, 3, 1, 3, 3, 0, 2, 2, 2, 0, 2, 3, 2, 0, 2, 0, 2, 3, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 3, 3, 3, 3, 1, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 3, 0, 1, 2, 2, 2], [2, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 5, 4, 4, 3, 1, 4], [1, 0, 0, 0, 0, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [0, 2, 0, 2, 1], [0, 3, 1, 1, 3, 3, 0, 1], [17, 12], [25, 15, 23], [], [20, 20, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 11, 11, 17, 1, 58, 15, 16, 7, 8, 6, 8, 0, 16, 3, 1, 4, 8, 2, 3, 0, 3], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):len(in1[mod(mod(i0,i2),i2):])] not in in1:{:\\nres0 = ( int(0.0) != abs(int(7.0)) or ( saveChr(min(len(in0[i2:]), ( divInt(divInt(i1,mod(min(( i2 * ( i1 + divInt(max(i2, ( abs(int(5.0)) * i0 )),max(int(2.0), i0)) ) ), i1),mod(int(6.0),len(saveChr(int(1.0)))))),len((\"\"R\"\" + s1.rstrip()))) - i2 )))[divInt(( ( int(7.0) + int(3.0) ) - ( int(9.0) - i1 ) ),int(8.0)):min(i1, max(abs(abs(abs(int(5.0)))), i0))].endswith(\"\";zp;.Mx\"\") and True ) )\\n:}else:{:\\ni2 = i1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [0, 2], [2, 1], [0], [0, 0], [], [], [2], [2], [1, 0], [0], [], [1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 8, 3, 6, 3, 4, 4, 0, 1, 4, 3, 2, 9, 2, 4, 9, 1, 0, 1, 4, 6, 3, 4, 1, 1, 5, 7, 3, 0], [0, 2, 2, 0, 0, 1, 2, 0, 1, 0, 1, 0, 2, 2, 2, 0, 1, 2, 2, 0, 1, 2, 1, 0, 0, 2, 2, 1, 1, 0, 0], [1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 0, 2, 2, 1, 0, 0, 0, 2, 0, 2, 0, 2, 2, 3, 1, 1, 0, 1, 0, 2, 0, 1, 2, 3, 0, 2, 3, 0, 0, 1, 2, 3, 1, 3, 0, 3, 3, 1, 2, 1, 0, 0, 2, 3, 2, 2, 3, 1, 1, 1, 2, 3, 3, 0, 0, 0, 0, 2, 2, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 2, 1, 3, 2, 4, 0, 0, 4, 2, 1, 3, 1, 1, 3, 3, 4, 4, 0, 3, 1], [0, 2, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1, 2, 1, 2, 2, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0], [4, 4, 5, 1, 1, 1, 5, 5, 2, 4], [1, 1, 1], [0], [4, 2, 2, 1, 0, 0, 2, 3, 2, 4, 3, 4, 2, 0, 4, 2, 2, 4, 4, 4, 3, 3, 0, 2, 4, 0, 3, 2, 2, 0, 1, 1, 0, 4, 2, 0], [2, 2, 0, 1, 1, 1, 0, 1, 1], [2], [2, 2, 2, 2, 2, 1, 2, 0, 0, 0, 0], [0, 0, 2], [20, 13], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 30, 31, 1, 114, 32, 24, 17, 16, 10, 3, 1, 36, 9, 0, 11, 3, 2, 0, 1, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in \"\"U\"\"[min(max(i0, int(3.0)), min(( i2 + int(2.0) ), mod(int(8.0),max(abs(mod(( ( int(3.0) * i2 ) * ( max(len(in1), i0) - ( abs(divInt(int(6.0),i0)) * divInt(saveOrd(in2),int(3.0)) ) ) ),i1)), int(4.0))))):][int(4.0):].capitalize():{:\\ns1 = ((getCharFromString(s1[i2:], ( ( int(0.0) * min(int(14.0), min(i0, divInt(divInt(mod(int(32.0),int(9.0)),divInt(int(2.0),i1)),int(4.0)))) ) - saveOrd(saveChr(abs(i0))) )) + saveChr(divInt(( int(9.0) - i1 ),i0))[i2:][:( i2 * ( i2 + mod(divInt(max(int(1.0), int(0.0)),i0),int(1.0)) ) )]).capitalize()[i1:] + saveChr(divInt(i2,int(4.0))))[mod(len(getCharFromString(((s1 + saveChr(i2)[mod(max(i0, i1),int(6.0)):( max(int(3.0), len(in2)) + i2 )]) + (in2[len(\"\"N\"\"):saveOrd(\"\"1\"\")][int(4.0):( int(1.0) - i1 )] + s2)), i0)),( saveOrd(saveChr(( divInt(min(int(1.0), int(5.0)),int(7.0)) * ( len(in1[max(i0, i2):i2]) - i1 ) ))) * ( divInt(int(3.0),int(0.0)) * i1 ) )):]\\ni0 -= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1, 0, 1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0, 2, 3], [17], [], [9], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 11, 0, 33, 9, 7, 5, 4, 6, 3, 1, 16, 3, 1, 5, 3, 1, 0, 1, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0[( ( int(0.0) + i0 ) - ( i2 * i1 ) ):saveOrd(in1)]):int(7.0)][i0:]:{:\\nres0 = in0[:i1].capitalize()[i2:mod(mod(int(5.0),i1),divInt(min(( i2 - min(len(saveChr(( saveOrd((\"\"R\"\" + s0.rstrip())) + i1 ))), divInt(max(int(7.0), i0),int(6.0))) ), int(1.0)),i0))] not in \"\"9;\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 2, 0], [0, 0], [3, 5, 2], [2, 3, 1, 1], [0, 0], [1, 0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 7, 5, 8, 7, 5, 7, 7, 9, 8, 5, 0, 4, 3, 5, 9, 9, 2, 2, 1, 3, 7, 0, 8, 9, 7, 8, 4, 2, 9, 3, 3, 6, 6, 8, 9, 0, 6, 3, 8], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 0, 1, 1, 2, 1, 2, 2, 1, 0, 1, 2, 0, 2], [0, 1, 1], [0, 3, 0, 0, 3, 2, 0, 1, 3, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 3, 2, 1, 1, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 3, 1, 3, 0, 2, 3, 0, 1, 1, 2, 2, 2, 2, 0, 3, 0, 1, 0, 0, 2, 3, 1, 2, 0, 0, 3, 3, 1, 1, 1, 1, 2, 2, 2, 0, 0, 2, 1, 3, 2, 2, 0, 3, 2, 0, 1, 3, 2, 1, 1, 2, 0, 3, 0, 1, 1, 0, 1, 2, 1, 1, 2, 1, 1], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [1, 1, 2, 0, 3, 0, 1, 2, 1, 1, 2, 1, 0, 0, 2, 0, 2, 2, 1, 1, 0, 1], [0, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 1, 6, 1, 3, 2, 1, 0, 1, 32, 32, 25, 0, 105, 29, 22, 14, 15, 5, 2, 0, 16, 3, 1, 5, 2, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s1[i0:][max(i2, i2):] != in2[max(mod(i0,int(0.0)), abs(int(7.0))):min(len(in1), ( divInt(( int(5.0) + i1 ),divInt(min(divInt(i2,max(abs(( int(8.0) * i1 )), max(( int(7.0) * int(5.0) ), int(7.0)))), int(7.0)),i2)) - i0 ))]:{:\\nloopBreak% = 0\\nwhile not divInt(int(9.0),max(int(8.0), abs(i0))) != ( divInt(mod(int(5.0),int(0.0)),( int(4.0) - max(int(3.0), min(i1, ( min(i2, int(59.0)) + int(9.0) ))) )) + ( divInt(( mod(i0,abs(i1)) + int(2.0) ),i1) + i2 ) ):{:\\nres0 = ( getCharFromString(in1[:mod(min(int(2.0), ( i1 + i2 )),abs(abs(int(1.0))))], int(3.0))[int(7.0):int(0.0)].endswith(saveChr(mod(( mod(i2,i1) + ( int(8.0) * max(divInt(mod(i0,max(divInt(i1,int(9.0)), min(( int(7.0) * int(8.0) ), ( i2 * max(i0, int(4.0)) )))),int(2.0)), i2) ) ),int(933.0)))) and (\"\"R\"\" + in0.rstrip()) == \"\"8\"\" )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 3, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 4], [1, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0, 1, 3], [17], [6], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 7, 7, 10, 0, 33, 8, 8, 5, 3, 8, 3, 1, 17, 3, 1, 4, 3, 1, 1, 0, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):( ( int(0.0) + saveOrd(in1[int(7.0):]) ) - i0 )]:{:\\nloopBreak% = 0\\nwhile in0 not in s0[i2:min(int(5.0), i1)].capitalize()[i0:i1]:{:\\nres0 = ( ( mod(int(7.0),i2) * mod(min(divInt(i1,len(saveChr(saveOrd((\"\"R\"\" + in1.rstrip()))))), ( max(i2, ( abs(int(6.0)) - i1 )) + int(1.0) )),int(7.0)) ) != i0 or ( \"\"g;\"\".endswith(in1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 3, 7, 0, 1, 7, 1, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 0, 1], [0, 1, 1], [3, 3, 3, 0, 3, 2, 2, 0, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 2, 0, 0, 3, 2, 3, 3, 1, 3, 3, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 1, 2, 0, 3, 4, 1, 0, 1, 3, 2, 2, 4, 0, 1, 3, 4], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 1], [1, 1, 1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 0, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0, 3, 2], [17], [], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 14, 0, 60, 18, 17, 10, 8, 8, 3, 1, 17, 2, 0, 4, 3, 1, 0, 1, 1], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in1[max(abs(i0), min(mod(( i2 - ( len(getCharFromString(in0, saveOrd(s0))[i2:divInt(( divInt(int(0.0),i0) + ( max(( i1 * min(max(divInt(int(7.0),i2), ( len(\"\"R\"\") - int(3.0) )), i1) ), int(7.0)) + int(0.0) ) ),i2)][i0:]) * divInt(int(1.0),abs(divInt(abs(i0),( ( ( int(7.0) - int(1.0) ) - mod(int(1.0),i2) ) * divInt(i2,i0) )))) ) ),saveOrd((\"\";\"\" + saveChr(( min(max(int(8.0), len(in1)), saveOrd(\"\"3\"\")) + i1 ))))), int(5.0))):] not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2, 2, 0, 1], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1, 2, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 4, 3], [1, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 1, 3], [17], [14], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 3, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 19, 19, 13, 1, 54, 16, 10, 9, 7, 9, 3, 1, 16, 2, 0, 4, 3, 1, 1, 0, 1], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i1:]:{:\\nloopBreak% = 0\\nwhile in1 not in in1[len(in0):]:{:\\nres0 = ( i1 != int(071.0) or ( s0[len(in1[mod(i1,int(7.0)):]):mod(int(2.0),abs(i1))].endswith(getCharFromString((\"\"R\"\" + saveChr(( divInt(( int(1.0) + i0 ),( min(len(in1), i2) + ( min(( int(7.0) * i1 ), divInt(max(int(7.0), i1),int(9.0))) - int(8.0) ) )) + i2 ))), ( divInt(int(5.0),abs(int(0.0))) * max(i2, divInt(( ( int(4.0) - int(8.0) ) - ( int(59.0) * i2 ) ),int(9.0))) ))) and True ) )\\ni0 = max(int(2.0), mod(int(2.0),i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = \"\"o;\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 3, 0, 1, 2, 0, 3, 0, 3, 2, 2, 1, 0, 3, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1, 1, 0, 1], [0], [1, 0, 0, 2, 1, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 1, 3], [17], [23], [4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 4, 1, 7, 0, 0, 1, 4, 1, 1, 1, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nloopBreak% = 0\\nwhile in2 != in1:{:\\nres0 = ( abs(len(\"\"4\"\"[i0:])) != int(0.0) or ( s0.endswith(\"\"x;\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1, 1, 0, 2, 1, 1, 2, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 1], [0], [2, 0, 0, 4, 2, 0, 4, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3], [1, 0], [0, 2, 0, 2, 1], [0, 3, 1, 0, 0], [17, 18, 12], [8], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 10, 1, 40, 11, 11, 6, 5, 7, 5, 1, 16, 4, 2, 3, 5, 3, 1, 0, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(getCharFromString(in1[i2:], abs(min(divInt(i1,int(0.0)), mod(int(7.0),len(saveChr(i1)))))))]:{:\\nres0 = in0 not in s0[( divInt(( int(5.0) + i1 ),( min(max(i0, ( abs(( int(7.0) + i2 )) * divInt(max(int(2.0), i1),int(1.0)) )), int(7.0)) - i1 )) + ( divInt(int(7.0),len((\"\"R\"\" + in1.lstrip()).rstrip())) * int(9.0) ) ):saveOrd(\"\";iSM\"\")]\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 2, 0, 1, 0, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 1, 0], [17, 16], [0], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 12, 12, 13, 0, 50, 15, 10, 11, 4, 6, 3, 0, 17, 4, 1, 4, 3, 2, 1, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in getCharFromString(in1, len(saveChr(i0)[i1:abs(mod(i2,int(0.0)))]))[( int(0.0) + i0 ):]:{:\\nres0 = ( i1 != ( ( ( int(5.0) + i2 ) * mod(min(( i1 - len(in1[min(( int(7.0) + i2 ), ( max(int(7.0), i2) * int(1.0) )):int(7.0)]) ), i0),i1) ) - ( int(7.0) - abs(divInt(max(i0, divInt(( ( int(9.0) * int(8.0) ) + ( int(5.0) + i1 ) ),int(0.0))),saveOrd((\"\"R\"\" + in0.capitalize()).rstrip()))) ) ) or ( \"\"aQ\"\".endswith(s0) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 0, 4, 0, 4], [1, 1], [0], [2, 1, 0, 2, 4, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [15], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 1, 8, 1, 3, 0, 1, 3, 2, 1, 8, 2, 0, 2, 2, 1, 1, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in \"\"R\"\"[len(in2):]:{:\\nb1 = getCharFromString(in1, int(0.0))[len(\"\"p\"\"):] not in saveChr(i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = abs(mod(int(7.0),int(5.0)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 1, 2, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 3, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 13, 13, 13, 1, 50, 15, 10, 7, 8, 6, 2, 0, 16, 3, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in1):] not in in1[len(in1):]:{:\\nres0 = ( mod(int(0.0),i0) != mod(i2,int(7.0)) or ( in0[( abs(min(i2, i2)) + divInt(divInt(int(5.0),i1),divInt(len(saveChr(( i2 + ( min(divInt(max(i1, ( abs(int(7.0)) * i2 )),int(6.0)), int(1.0)) - i0 ) ))),i0)) ):mod(int(7.0),max(int(7.0), saveOrd((\"\"R\"\" + s0.rstrip()))))].capitalize()[i1:divInt(( ( int(9.0) + int(8.0) ) * ( int(5.0) - i2 ) ),int(0.0))].endswith(\"\"0\"\") and True ) )\\n:}else:{:\\ni1 = int(4.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 3, 1, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [9], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 10, 0, 40, 10, 11, 4, 6, 6, 2, 1, 16, 3, 1, 5, 2, 1, 1, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[min(mod(int(0.0),i1), mod(i2,int(7.0))):] not in in0[:abs(int(5.0))].capitalize()[min(len(saveChr(i2)), ( divInt(int(7.0),i2) + divInt(min(divInt(i1,( max(( abs(i2) + divInt(max(int(6.0), i1),int(1.0)) ), int(7.0)) * i2 )), i0),( int(7.0) - saveOrd((\"\"R\"\" + s0.rstrip())) )) )):int(9.0)][saveOrd(\"\"j\"\"):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 1, 2, 2, 5, 8, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 1, 3, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 3, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1, 1], [0], [2, 4, 0, 2, 0, 0, 2, 2, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 2], [0, 1], [17], [11], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 11, 0, 49, 15, 9, 9, 6, 5, 2, 1, 15, 3, 1, 5, 2, 1, 1, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize()[len(in0[:i0]):]:{:\\nres0 = in1 not in \"\"R\"\"[int(7.0):][len(saveChr(i2)):mod(i2,int(7.0))][abs(int(1.0)):min(i0, ( ( ( int(2.0) + i1 ) + divInt(len((\"\"l\"\" + in0.rstrip())),divInt(i2,( i1 - ( int(2.0) + min(divInt(max(int(5.0), ( int(8.0) + int(5.0) )),i2), i0) ) ))) ) * divInt(int(9.0),min(int(8.0), max(i0, divInt(( ( int(5.0) - int(0.0) ) - ( int(4.0) * i0 ) ),int(8.0))))) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 1, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 1, 0, 1], [0, 1], [17], [25], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 4, 2, 1, 8, 0, 0, 3, 2, 1, 1, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\"[:len(s1)] not in \"\"z\"\"[:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2, 2], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 6, 5, 9, 5], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2, 1, 1, 0, 0, 0, 1, 0, 2, 1], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1, 2, 2, 3, 2, 3, 0, 0, 3, 3, 1, 1, 2, 2, 2, 2, 1, 2, 3, 0, 2, 1, 3, 3, 1, 0, 0, 2, 3, 0, 3, 0, 1, 2, 3, 3, 3, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0], [2, 1, 2, 0, 3, 1, 1, 2, 1, 1, 2, 1, 0, 0, 4, 1, 0, 1, 3, 2, 2, 4, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1], [2, 5, 5, 4, 3, 0, 4, 4, 2, 2], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 2, 1], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 1], [17], [17], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 1, 4, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 23, 23, 21, 1, 89, 25, 23, 13, 12, 10, 3, 1, 19, 3, 2, 5, 3, 1, 1, 0, 1], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(max(i0, i2)):]:{:\\nres0 = in2 not in in1[abs(int(0.0)):]\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = s0\\nin1 = in1[int(7.0):mod(int(1.0),min(i1, ( ( divInt(int(7.0),i2) + ( len(saveChr(divInt(i1,max(max(( int(2.0) + i2 ), ( abs(int(1.0)) * i0 )), int(7.0))))) - int(7.0) ) ) + i0 )))].rstrip()[i0:divInt(int(9.0),max(( max(i2, divInt(divInt(( int(8.0) * int(5.0) ),( int(0.0) - i1 )),int(4.0))) - abs(int(8.0)) ), ( mod(max(divInt(min(i1, i0),min(saveOrd((\"\"R\"\" + s2.lstrip())), int(59.0))), int(9.0)),divInt(divInt(( ( int(2.0) * mod(max(i0, mod(int(2.0),min(max(int(6.0), i0), i1))),( len(\"\";\"\") + i0 )) ) + abs(i2) ),int(59.0)),( abs(saveOrd(s2)) - len(\"\"r\"\"[:int(5.0)]) ))) - i1 )))]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1, 1], [0], [2, 0, 3, 2, 0, 1, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 2], [17], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 2, 4, 1, 1, 6, 2, 1, 15, 2, 0, 4, 2, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len((in1[len(\"\"R\"\"):] + in1[i2:int(0.0)])):]:{:\\nres0 = in2[abs(( i1 + int(7.0) )):] not in getCharFromString((\"\"6\"\" + saveChr(mod(int(5.0),saveOrd(s0)))), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 2, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 1, 4, 2, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 4, 4, 4, 0, 12, 2, 3, 0, 2, 4, 2, 0, 10, 1, 0, 3, 2, 1, 0, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in2[saveOrd(in2):] not in s1[:len(in1)]:{:\\nres0 = ( i0 != int(27.0) or ( getCharFromString(\"\"R\"\", int(5.0))[mod(i2,int(7.0)):divInt(i2,abs(i2))].endswith(\"\";\"\") and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 1, 5, 3, 0, 4], [1, 1], [0], [2, 0, 1, 4, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 2, 1, 6, 1, 0, 1, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = s1.capitalize() not in \"\"7\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 2, 9, 3, 0, 1, 5, 6, 4], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 2, 1, 0, 2, 3, 2, 2, 0, 1, 3, 1, 0, 1, 3, 1, 2, 1, 3, 1, 2, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1, 2, 2, 4, 1, 1, 1, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 5, 4, 4, 4, 0, 4], [1, 1, 1, 1], [0], [2, 0, 0, 2, 0, 2, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [1, 0, 1, 3], [17], [19, 21], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 27, 27, 14, 1, 73, 22, 16, 11, 11, 5, 4, 1, 16, 3, 1, 4, 4, 1, 2, 0, 1], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1[abs(i0):])]:{:\\nres0 = \"\"t\"\"[min(mod(int(0.0),int(7.0)), ( int(5.0) + len(getCharFromString(\"\"R\"\"[i1:divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len(saveChr(divInt(int(1.0),i1))), divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2)) )),i1)], mod(int(8.0),abs(divInt(abs(i2),( ( ( int(5.0) - int(0.0) ) + mod(int(4.0),i0) ) * int(8.0) )))))) )):saveOrd((\"\"v\"\" + in1.rstrip()))] not in \"\";\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = ( ( int(59.0) - i1 ) - divInt(max(( ( i1 * int(9.0) ) + max(int(2.0), i0) ), int(2.0)),max(int(29.0), ( int(301.0) + max(int(5.0), mod(i0,int(64.0))) ))) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 3, 2, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 0, 3, 3, 1, 4], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 0, 0, 4, 5, 1], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 2, 3, 1, 4, 0, 1, 0, 4, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1, 0], [1, 3], [17], [5], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 37, 11, 10, 5, 6, 9, 2, 1, 19, 2, 0, 6, 2, 0, 1, 0, 1], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(s0)]:{:\\nres0 = in1[len(s0):] not in s0[:mod(int(0.0),i2)][( i2 - int(7.0) ):( int(5.0) + abs(i2) )][len((\"\"f\"\" + in1.capitalize())[mod(divInt(int(7.0),i2),divInt(len(\"\";\"\"),( i1 * ( min(divInt(len(in2),i2), len(saveChr(( int(6.0) - i1 )))) + max(int(1.0), i1) ) ))):i0]):divInt(int(7.0),saveOrd(s1))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [9], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 9, 9, 10, 0, 38, 11, 8, 4, 7, 6, 2, 0, 15, 2, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s1[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( mod(int(0.0),i1) != mod(i2,int(7.0)) or ( \"\"R\"\"[( int(5.0) + abs(i0) ):i0].endswith(in0[divInt(divInt(int(7.0),i1),divInt(min(( i2 + ( len((\"\"9\"\" + s0.rstrip()).capitalize()) * divInt(min(i1, ( max(int(6.0), i2) - int(1.0) )),int(7.0)) ) ), i0),i0)):mod(int(7.0),abs(int(9.0)))]) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [1, 5, 4, 4, 0, 0, 4], [1, 0, 0, 0, 1], [0], [2, 0, 0, 4, 3, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 2, 3, 1, 2], [17], [6], [5, 5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 1, 49, 16, 9, 7, 9, 6, 5, 1, 16, 4, 1, 3, 5, 1, 1, 2, 1], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = (in1 + saveChr(len(s0[mod(int(0.0),mod(( i0 + int(7.0) ),divInt(int(5.0),abs(i2)))):i2]))[divInt(divInt(int(7.0),i2),( min(( i1 + divInt(len((\"\"R\"\" + getCharFromString(s0, ( min(i2, mod(max(int(6.0), i1),int(1.0))) * int(7.0) ))).rstrip()),i2) ), i0) - divInt(int(7.0),abs(int(9.0))) )):]).capitalize() not in \"\"5;g5\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = max(i0, ( ( ( int(8.0) + int(5.0) ) * mod(int(0.0),i1) ) - int(4.0) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2], [0, 0], [1, 5], [3, 3, 1, 3, 2, 0, 2], [1, 0, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 2, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 1, 0, 3, 0, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 1, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [2, 3], [17], [], [9], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 2, 0, 9, 0, 2, 7, 3, 1, 0, 3, 3, 3, 0, 11, 0, 5, 0, 0, 7, 2, 1, 15, 2, 0, 4, 2, 0, 0, 1, 1], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( True or ( in1[saveOrd(in0):] not in getCharFromString(\"\"9\"\"[i0:int(2.0)], abs(max(i2, int(7.0))))[int(2.0):i2] and not b2 ) ) and not s0.endswith((\"\";\"\" + saveChr(len(in1)))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 6, 2, 3, 2, 6, 5, 9, 8, 5, 0, 4, 2, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2, 2, 1, 0], [0, 1, 1], [3, 3, 2, 3, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 1, 0, 0, 2, 2, 2, 1, 1, 2, 1, 2, 2, 3, 0, 3, 2, 1, 1, 0, 2, 0, 1, 3], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [1, 2, 2, 0, 3, 0, 1, 4, 1, 0, 2, 4], [0, 0, 1, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0], [2, 0, 0, 1, 4, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 3], [3, 0, 3], [2, 0, 0, 0, 1], [0, 2, 2, 1, 2, 0, 2, 0, 0, 2, 0, 3, 2, 3, 3, 2, 3, 2], [17, 1, 10, 20, 16], [3], [0, 5, 9, 8, 6, 9, 7, 6], [20, 11, 2, 2]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 16, 16, 15, 1, 60, 19, 12, 8, 11, 5, 18, 0, 16, 4, 3, 2, 18, 5, 1, 8, 4], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[max(abs(mod(abs(i0),divInt(i2,int(7.0)))), min(len(in2), min(i2, ( divInt(( int(7.0) + i0 ),( max(( i1 + ( i2 - mod(int(6.0),i1) ) ), ( saveOrd(\"\"R\"\") - int(2.0) )) + int(3.0) )) + int(2.0) )))):] not in in1.lstrip(\"\"05d9B8K\"\"):{:\\nres0 = ( int(6.0) != i2 or ( saveChr(i0).endswith(in1[divInt(int(5.0),max(int(9.0), i0)):i0]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = divInt(mod(( int(8.0) - int(5.0) ),( int(0.0) - divInt(mod(min(i2, abs(divInt(int(4.0),int(2.0)))),i2),mod(i1,int(59.0))) )),saveOrd((\"\"U6Q;9(\\\\\\t\"\" + in0.lstrip(\"\"7\\\\\\t6\"\")).lstrip()))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 1, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 0, 3, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0], [1, 0], [2, 2, 0, 1, 1], [0, 1, 3], [17], [9], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 33, 11, 6, 4, 7, 6, 3, 1, 16, 2, 0, 4, 3, 1, 1, 0, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[mod(mod(int(0.0),int(4.0)),( i0 + int(5.0) )):] not in (\"\"R\"\"[divInt(int(7.0),len(s0[:i2])):i2] + (\"\"j\"\" + getCharFromString(s0, divInt(divInt(int(6.0),i0),( abs(( i1 + divInt(min(( len(\"\";\"\") * i2 ), mod(min(int(1.0), i1),int(7.0))),int(7.0)) )) - i2 )))).capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 1, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 1, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 0, 3, 1], [1, 0], [2, 2, 1, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 14, 14, 11, 0, 50, 16, 9, 7, 9, 6, 2, 1, 14, 4, 2, 2, 2, 1, 0, 0, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\"[max(len(in2), i0):]:{:\\nloopBreak% = 0\\nwhile in1.rstrip() not in in1[mod(abs(mod(i0,int(0.0))),( int(7.0) + min(i2, divInt(divInt(mod(int(1.0),i0),( len(getCharFromString(in0, min(i1, ( i2 + divInt(int(1.0),i1) )))) * ( max(int(6.0), i2) + int(1.0) ) )),int(7.0))) )):]:{:\\nres0 = ( i0 != mod(divInt(int(7.0),abs(int(9.0))),max(i0, ( ( ( int(8.0) + int(5.0) ) * mod(int(0.0),i1) ) - int(4.0) ))) or ( s0.endswith((\"\";\"\" + saveChr(int(8.0))).lstrip()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 0, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 3, 0, 0, 4], [1, 1, 0, 0, 0, 1], [0], [2, 1, 2, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 3, 0, 1, 1, 1], [17, 14], [3, 5, 6], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 12, 1, 5, 0, 1, 5, 6, 1, 17, 4, 2, 5, 6, 2, 3, 0, 1], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2.rstrip()[len(saveChr(int(7.0))[int(7.0):i2]):mod(i2,i2)][abs(saveOrd(in1[:len((\"\";\"\" + getCharFromString(in0, i0)).lstrip())])):]):]:{:\\nres0 = \"\"Odfg\"\" not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 2, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 2, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 1, 0, 1, 0, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0, 1, 1, 3, 0, 3], [17, 16], [2, 3], [], [20, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 5, 0, 2, 3, 2, 1, 0, 4, 4, 4, 0, 12, 1, 3, 1, 0, 6, 6, 1, 14, 2, 0, 4, 6, 2, 2, 0, 2], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):saveOrd(in1[i0:])]:{:\\nres0 = ( ( in0 not in getCharFromString(\"\"R\"\"[int(2.0):abs(( i2 + int(7.0) ))], int(2.0))[i2:int(7.0)] or True ) and s0.endswith((\"\"cd;Q?\"\" + saveChr(i0))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 0, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 3, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 2], [1, 0], [2, 2, 0, 0, 1], [0, 1], [21], [8], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 12, 4, 2, 2, 2, 6, 2, 1, 15, 3, 0, 3, 2, 1, 1, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len((in1[mod(( i0 * i2 ),( i2 + int(0.0) )):] + in1)):]:{:\\nres0 = \"\"V\"\".capitalize()[mod(int(7.0),len(in0)):i0] not in (\"\"i\"\" + s0.capitalize()).capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1], [0, 2, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 1, 3, 0, 3, 3, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 4, 1, 1, 3, 1], [1, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 0, 0, 4], [1, 1], [0], [2, 1, 1, 0, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 0], [8, 17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 2, 1, 4, 0, 0, 1, 2, 2, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"I\"\"[len(\"\"R\"\"):]:{:\\nres0 = int(02.0) != len(s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 7, 9, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 9], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0], [4, 1, 2, 0, 3, 1, 1, 3, 1, 0, 0, 3, 4], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 0, 0, 0, 4], [1, 0, 0, 0, 1, 1, 1], [0], [2, 4, 0, 3, 1, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [1, 2, 0, 0, 1], [0, 2, 0, 0, 3, 2, 1], [17, 0, 19], [21], [4, 3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 20, 20, 10, 0, 51, 15, 13, 7, 8, 4, 7, 1, 15, 4, 1, 2, 7, 3, 1, 2, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in getCharFromString(in2, saveOrd((\"\"R\"\" + in1)))[:max(abs(i0), min(mod(int(079771.0),int(7.0)), ( len(\"\"4AT;\"\") + max(i1, divInt(divInt(( int(7.0) + i2 ),( max(int(9.0), i0) - len(saveChr(max(divInt(int(8.0),i1), divInt(min(int(5.0), divInt(int(0.0),int(4.0))),i2)))) )),i1)) )))]:{:\\nb1 = mod(int(859.0),min(divInt(len(\"\"3\"\"[i2:]),( ( ( int(9.0) - int(2.0) ) + ( int(2.0) * i0 ) ) - int(9.0) )), saveOrd((\"\"v\"\" + s0.capitalize()).rstrip()))) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 0, 2], [1, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 5], [0, 1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 1, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [3, 2, 2, 2], [17], [], [2, 1, 3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 11, 1, 49, 15, 11, 10, 6, 8, 4, 1, 16, 2, 0, 3, 4, 0, 0, 3, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\";2\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( i1 != abs(min(mod(i1,int(0.0)), mod(int(7.0),len(s0)))) or ( in1[i1:( divInt(( int(5.0) + i1 ),( min(max(i0, ( abs(( int(7.0) + i2 )) * divInt(max(int(2.0), i1),int(1.0)) )), int(7.0)) - i1 )) + ( divInt(int(7.0),saveOrd(getCharFromString((\"\"1\"\" + saveChr(int(9.0))), len(in2)))) * i2 ) )].endswith(\"\"3\"\") and True ) ):{:\\ni0 -= divInt(( ( int(8.0) - int(5.0) ) * ( int(0.0) + i2 ) ),int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 2, 0, 0, 3, 2, 0, 1, 2, 2, 0, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [0, 0, 1], [0], [1, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 2], [8], [11], [5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 3, 0, 0, 0, 3, 1, 1, 1, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"Il5\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 0, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 1, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [1, 3, 3, 0, 3, 0, 4, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 2, 4, 4, 5, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3], [1, 0], [2, 0, 0, 0, 1], [0, 3, 0], [17, 2], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 37, 11, 7, 3, 8, 6, 3, 1, 16, 4, 2, 4, 3, 2, 0, 0, 1], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[mod(max(i0, int(0.0)),len(in1)):]:{:\\nres0 = in1[mod(i2,i2):( int(7.0) + len(in2) )] not in getCharFromString(saveChr(int(5.0))[divInt(( divInt(int(7.0),i0) + ( min(divInt(i1,int(2.0)), len((\"\"R\"\" + s0.lstrip()).rstrip())) * divInt(int(1.0),i2) ) ),mod(min(int(7.0), i1),int(7.0))):int(1.0)], i2)[i0:divInt(int(8.0),saveOrd(\"\";C\"\"))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 1], [0, 1, 1], [3, 1, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 3, 3, 3], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 0, 3, 2, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 3, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 2, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0, 1], [17], [23], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 16, 16, 10, 0, 54, 16, 13, 9, 7, 7, 2, 0, 17, 2, 0, 5, 2, 1, 1, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[:int(8.0)][mod(int(7.0),len(in0[divInt(i1,int(5.0)):])):]:{:\\nres0 = ( ( int(7.0) + abs(i1) ) != divInt(( ( int(2.0) + i1 ) * ( min(len(in0[:i1]), ( min(divInt(int(1.0),i0), ( max(int(7.0), i2) - int(7.0) )) + int(9.0) )) * i1 ) ),divInt(divInt(int(8.0),abs(int(5.0))),max(i1, ( ( ( int(0.0) - int(4.0) ) - mod(int(8.0),i2) ) * int(59.0) )))) or ( getCharFromString((\"\"R\"\" + saveChr(min(i1, len(s0)))), abs(saveOrd(\"\"x\"\"))).endswith(in1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0, 2], [0, 1, 1], [3, 3, 1, 1, 3, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1, 0, 1, 3, 1, 0, 0, 3], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 2, 2, 2, 3], [0, 1, 0, 0, 1, 2, 0, 2, 0], [0, 0, 1, 0, 0, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 4, 2, 4, 0, 0, 2, 3, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 1, 0, 0, 1], [0, 1], [17], [21], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 11, 0, 58, 17, 14, 9, 8, 6, 2, 1, 17, 4, 1, 4, 2, 1, 1, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(saveChr(len(in2))[:len(in1)], int(0.0))[int(7.0):]:{:\\nres0 = (in1[abs(i0):min(int(5.0), divInt(int(7.0),len((\"\"R\"\" + saveChr(i2)).rstrip())))] + in0)[( ( divInt(int(7.0),i0) + ( min(mod(( max(abs(( int(1.0) - i0 )), divInt(max(int(7.0), ( int(7.0) + i1 )),divInt(i2,mod(int(9.0),max(( abs(i0) + ( ( mod(int(8.0),int(5.0)) - mod(int(0.0),i0) ) * int(4.0) ) ), abs(int(8.0))))))) + i1 ),int(59.0)), abs(int(9.0))) * i0 ) ) + i2 ):len(\"\"v\"\")] != s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 7, 1, 1, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 1, 2, 0, 0, 3, 2, 1, 0, 2, 3, 1, 0, 2, 3, 2, 3, 0, 2, 2, 1, 0, 1, 2, 0, 0, 2, 1, 1, 1, 3, 1, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 3, 2, 1], [2, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [11], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 10, 0, 34, 11, 7, 5, 6, 7, 2, 1, 16, 3, 2, 4, 2, 1, 1, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] == s0[mod(int(0.0),i0):( i2 * min(( int(7.0) + divInt(i2,i0) ), min(divInt(int(1.0),i1), divInt(len((\"\"R\"\" + in1.lstrip()).rstrip()),int(7.0)))) )].capitalize()[i1:( min(( len(\"\"l\"\") * i1 ), divInt(( int(7.0) * i1 ),int(1.0))) + divInt(i0,i0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 1, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [3, 0, 0, 2, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3, 0], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 39, 10, 10, 4, 6, 6, 2, 1, 16, 3, 1, 4, 2, 1, 0, 0, 1], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\nres0 = in1[max(len(in0[mod(int(0.0),i1):abs(int(7.0))].capitalize()[int(5.0):divInt(int(7.0),min(i2, i2))]), ( divInt(int(6.0),i0) + divInt(len(saveChr(divInt(i1,( min(( max(i2, divInt(abs(int(1.0)),i1)) + int(7.0) ), int(7.0)) * i2 )))),i0) )):][( int(9.0) - max(int(8.0), len((\"\";\"\" + s0.rstrip()))) ):] != \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 4, 5, 7, 4, 7, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0, 1, 2, 0, 1, 0, 2, 2, 1], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 3, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 1, 2, 2, 0, 2, 0, 3, 1, 2, 1, 1, 2, 2, 1, 3, 3, 0, 0, 1, 3, 3, 3, 2, 1, 3, 1, 0, 2, 2, 0, 3, 3, 3, 1, 1, 0, 2, 1, 3, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 1, 3, 3, 0, 1, 0, 1, 4, 2, 2, 4, 0, 4, 1, 1, 0, 4, 2, 2, 3, 4], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 5, 4, 5, 5, 0, 4, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 2, 4, 0, 1, 0, 2, 1], [3, 1, 3, 0], [1, 0], [0, 0, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 25, 25, 18, 0, 91, 26, 23, 13, 13, 8, 2, 1, 19, 4, 2, 5, 2, 1, 0, 0, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(min(( i0 - max(( i2 + int(1.0) ), ( int(7.0) * len(in1) )) ), i0), mod(( len(in2[int(5.0):i0]) - divInt(min(( i1 + max(min(( int(7.0) * int(7.0) ), divInt(max(int(1.0), i2),int(7.0))), i1) ), i1),i0) ),( int(7.0) - saveOrd(in2) ))):divInt(abs(i0),divInt(( ( int(9.0) - int(8.0) ) * ( int(5.0) + i1 ) ),int(0.0)))]:{:\\nres0 = abs(divInt(int(4.0),mod(( i2 + divInt(i0,saveOrd(saveChr(int(8.0)).rstrip())) ),mod(int(59.0),int(9.0))))) != divInt(( int(2.0) - min(saveOrd(s0[i1:i0]), int(2.0)) ),max(max(min(divInt(int(4.0),saveOrd((getCharFromString(in1, int(5.0))[i2:mod(( i2 - abs(abs(len(\"\"R\"\"))) ),int(7.0))] + in1).lstrip())), int(4.0)), i1), mod(int(7.0),saveOrd(\"\";\"\"[:int(2.0)]))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 10, 0, 38, 11, 8, 6, 5, 6, 2, 1, 16, 3, 1, 5, 2, 1, 0, 0, 1], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[saveOrd(in0):] not in getCharFromString((\"\"R\"\" + s0.rstrip()), ( int(0.0) * i0 ))[:( i2 + int(7.0) )][( int(5.0) * abs(i2) ):i0].capitalize()[mod(mod(int(7.0),i1),divInt(min(( i2 - ( len(\"\";\"\") + divInt(min(i1, ( max(int(6.0), i2) * int(1.0) )),int(7.0)) ) ), i0),i0)):divInt(int(7.0),abs(int(9.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 2, 0, 2, 0, 0, 3, 1, 0, 0, 1, 2, 2, 1, 3, 2, 3, 2, 1, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 0], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 34, 10, 8, 5, 5, 7, 1, 1, 15, 3, 1, 4, 1, 0, 0, 1, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[( mod(( i1 + mod(i2,i1) ),saveOrd(in0)) - int(0.0) ):] not in s0[i2:i1].capitalize()[int(7.0):divInt(divInt(int(5.0),min(( min(( int(7.0) * len(saveChr(saveOrd((\"\"1\"\" + s0.rstrip())))) ), mod(max(i2, ( abs(int(6.0)) - i1 )),int(1.0))) + int(7.0) ), i2)),i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 0, 1, 0, 0], [0], [4, 5], [3, 3, 1, 0], [0, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2, 2], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 2, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1, 0, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [2, 5, 4, 4, 4, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 2, 1], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 2, 1, 6, 1, 1, 4, 2, 1, 1, 13, 13, 11, 1, 50, 16, 11, 8, 8, 5, 1, 0, 10, 1, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s2[saveOrd(in2):].startswith(in1[len(in1):]):{:\\nb1 = ( ( abs(int(0.0)) != min(mod(i1,mod(( int(7.0) + len(\"\";\"\".capitalize()[:i1]) ),divInt(( ( int(5.0) + i1 ) * ( min(max(abs(divInt(divInt(( int(7.0) - i1 ),i0),max(int(8.0), i2))), int(1.0)), int(7.0)) + i1 ) ),mod(mod(int(7.0),min(i1, len(in1))),i2)))), ( ( ( int(1.0) * int(8.0) ) - divInt(int(5.0),i2) ) - int(0.0) )) and True ) and b2 )\\ni2 = int(4.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2, 2, 1, 1, 1, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 3, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 2, 0, 1, 2, 3, 0, 0, 2, 3, 0, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 3, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 3, 4, 4, 3, 5, 4], [1, 0, 1], [0], [2, 0, 3, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 1], [17], [11], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 19, 14, 0, 62, 19, 13, 10, 9, 7, 3, 1, 16, 2, 0, 4, 3, 1, 1, 0, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len((in1[len(in1):] + in0[i0:int(07.0)])):]:{:\\nres0 = in2[abs(mod(min(int(57.0), mod(int(2.0),len(getCharFromString((\"\"R\"\" + saveChr(i1)), ( divInt(( int(1.0) + i1 ),( min(max(i1, ( abs(( int(7.0) + i0 )) * divInt(max(int(7.0), i2),int(9.0)) )), int(8.0)) - i1 )) + ( divInt(int(5.0),max(int(0.0), len(in1))) * i1 ) ))))),divInt(( ( int(4.0) - int(8.0) ) - ( int(59.0) * i2 ) ),int(9.0)))):mod(divInt(i2,int(2.0)),divInt(max(i1, i1),( min(i1, i1) + int(2.0) )))] not in \"\";l\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 2, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 1, 1, 0, 3, 0, 3, 2, 3, 1, 2, 3, 2, 1, 0, 0, 1, 3, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 0, 3, 0, 4], [1], [0], [2, 1, 4, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [2], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 7, 7, 5, 0, 20, 4, 5, 1, 3, 4, 1, 0, 8, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( \"\"C\"\"[mod(int(27.0),int(5.0)):] not in getCharFromString(s1, i0) or max(i2, max(mod(abs(int(7.0)),( min(divInt(int(4.0),i2), i0) + int(1.0) )), len(in2))) != i1 ):{:\\nres0 = ( in1.endswith(s0[int(7.0):]) and True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1], [2, 1, 2, 0, 0, 2, 0], [0, 2, 0], [0, 1, 2, 1], [0, 0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 1, 0, 2, 2, 1], [1, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 5, 5, 3, 0], [0, 1, 1, 0, 0, 0, 1], [0, 0], [2, 0, 0, 2, 0, 0, 1, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 1, 0, 1, 2, 2, 2], [17, 11], [18, 25], [3, 6, 3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 2, 3, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 14, 2, 51, 15, 11, 11, 6, 11, 7, 2, 17, 2, 0, 3, 7, 2, 2, 3, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"Rs\"\"\\nloopBreak% = 0\\nwhile ( i1 != abs(min(mod(i1,int(0.0)), mod(int(7.0),len(s0)))) or ( in1[i1:( divInt(( int(5.0) + i1 ),( min(max(i0, ( abs(( int(7.0) + i2 )) * divInt(max(int(2.0), i1),int(1.0)) )), int(7.0)) - i1 )) + ( divInt(int(7.0),abs(int(9.0))) * len(getCharFromString((\"\"L\"\" + saveChr(i2)), divInt(( ( int(8.0) - int(5.0) ) - ( int(0.0) * i1 ) ),int(4.0)))) ) )].endswith(in2) and True ) ):{:\\ni0 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = \"\"z363\"\"\\nloopBreak% = 0\\nfor in0 in s0:{:\\ni2 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 1, 1, 8, 2, 0, 2, 1, 0, 0, 1, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(\"\"0\"\"))[i2:] not in saveChr(int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 4, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 1, 2, 3, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 0, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 2, 2, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 2, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [1, 2], [17], [23], [2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 7, 0, 32, 8, 7, 5, 3, 6, 2, 1, 16, 2, 0, 6, 2, 0, 1, 1, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s0[len(s2):] not in getCharFromString((\"\"x\"\" + saveChr(int(7.0))), int(4.0))[int(5.0):mod(abs(int(2.0)),saveOrd(s2))][:int(2.0)][len(\"\"2\"\"):i0][divInt(( divInt(int(5.0),i2) + ( min(i2, i0) + ( i1 - ( int(7.0) - i2 ) ) ) ),( max(int(5.0), i1) + int(9.0) )):int(8.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 1, 1, 3, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 3, 2, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [22], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 6, 6, 11, 0, 34, 11, 6, 6, 5, 7, 2, 1, 16, 4, 2, 3, 2, 1, 1, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1.rstrip() not in in0:{:\\nres0 = ( len(saveChr(( int(0.0) * i0 ))[( i2 + int(7.0) ):]) != ( int(5.0) * mod(i2,i0) ) or ( s0[mod(divInt(int(7.0),i1),abs(( ( i2 - divInt(min(( len((\"\"R\"\" + in1.capitalize()).lstrip()) + i1 ), divInt(min(int(1.0), i2),int(1.0))),i0) ) * i0 ))):i2].endswith(\"\"w\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 1, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 3, 2, 3, 0, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 1, 0, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 2, 4, 0, 1, 0], [0, 1, 3], [2], [2, 2, 0, 0, 1], [0, 1], [17], [25], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 33, 7, 10, 5, 2, 6, 2, 1, 16, 3, 1, 5, 2, 1, 1, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[len(in1):] not in getCharFromString(in0[i0:i2], abs(mod(i0,int(0.0))))[( int(7.0) + min(i0, ( ( int(5.0) + int(7.0) ) * i1 )) ):( len(saveChr(divInt(i2,abs(max(max(int(7.0), min(( len((s0.strip()[:i2] + \"\"z\"\")) - i2 ), int(1.0))), int(7.0)))))) + i0 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 4, 8, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1, 1, 2], [0, 1, 1], [3, 1, 3, 0, 3, 2, 0, 2, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 1, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 1, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 0, 3, 3, 0, 3, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [4, 1, 2, 0, 3, 0, 1, 2, 1, 3, 4], [0, 0, 2, 1, 0, 2, 1, 2, 2, 2], [0, 1, 0, 0, 0, 0, 1, 0], [2, 5, 3, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 4, 0, 2, 1, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 0, 0], [17, 25, 3], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 14, 0, 57, 18, 11, 10, 8, 5, 3, 1, 16, 4, 1, 4, 3, 3, 0, 0, 0], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[saveOrd(in0):]:{:\\nb0 = getCharFromString(in1, int(0.0))[max(i1, abs(( i2 + divInt(( int(7.0) + min(i2, mod(( divInt(len(\"\"R\"\"[i0:( min(( int(1.0) * divInt(( divInt(int(7.0),i1) - divInt(max(int(4.0), i2),int(8.0)) ),int(7.0)) ), i1) + i2 )]),( int(7.0) * abs(int(9.0)) )) - int(8.0) ),i0)) ),( ( mod(int(5.0),int(0.0)) * divInt(int(4.0),i0) ) * int(8.0) )) ))):] in saveChr(( i1 * i1 ))[max(len((\"\"Z\"\" + getCharFromString(in0, i1)).rstrip()), saveOrd(\"\"D\"\")):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 9, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 2], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 4, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 2, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 6, 0, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(s2):]:{:\\nin1 = s2[saveOrd(\"\";\"\"):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 2, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 3, 2, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 2, 1, 3, 0, 1, 2, 1, 3, 2, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4, 0], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 8], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 11, 0, 55, 18, 13, 10, 8, 8, 2, 1, 17, 3, 1, 4, 2, 2, 0, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + max(i0, ( mod(( int(5.0) + i1 ),divInt(len(saveChr(( int(7.0) * min(max(( int(7.0) - divInt(( abs(int(9.0)) + i2 ),int(7.0)) ), int(7.0)), i1) ))),i2)) * divInt(int(9.0),max(divInt(len((\"\"R\"\" + in1.rstrip())),i0), ( ( ( int(8.0) - int(5.0) ) - mod(int(0.0),i0) ) * int(4.0) ))) )) ):divInt(abs(saveOrd(\"\"I\"\")),( saveOrd(s0) + i2 ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1], [2, 1, 0, 0, 0, 0, 2, 1, 0, 1], [1, 2], [0, 1, 2, 0, 2, 2, 2, 1], [0], [0, 0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0, 2, 2], [0, 0], [1, 5, 3], [3, 3, 1], [1, 0], [0], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2, 0], [0, 1, 1], [1, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [5, 5, 4, 4, 3, 0, 4, 4, 5, 5, 4, 3], [1, 1, 1, 1, 1], [0], [2, 1, 0, 4, 0, 0, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0, 1, 1], [2, 1, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0, 2, 3, 2, 3], [17], [], [3, 8], [20, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 2, 8, 0, 5, 0, 0, 2, 2, 8, 2, 3, 3, 2, 1, 1, 16, 16, 13, 2, 49, 16, 8, 8, 9, 12, 5, 0, 19, 4, 1, 1, 5, 1, 0, 2, 2], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(84.0) != len(\"\"R\"\"[mod(int(5.0),i0):]):{:\\nres0 = ( mod(( int(7.0) + divInt(int(2.0),len(in2)) ),i0) \\l i2 or ( in2.capitalize() not in in1 and True ) )\\ni0 = divInt(divInt(int(1.0),i1),( abs(( i2 + divInt(min(( len(in1) * i1 ), mod(min(int(7.0), i2),int(7.0))),int(1.0)) )) - i0 ))\\nin0 = saveChr(i0)\\nb2 = s0.endswith(in1)\\n:}\\nin1 = (\"\"3\"\" + getCharFromString(in2, divInt(int(8.0),max(int(5.0), abs(i0))))).rstrip()\\nloopBreak% = 0\\nwhile \"\";\"\" != in2:{:\\nin1 = \"\"8\"\"\\nin0 = \"\"*\"\"\\ni2 += ( ( ( int(0.0) * int(4.0) ) - mod(int(8.0),i0) ) - int(59.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], [2, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0], [1, 0], [2, 1, 1, 1, 2, 0, 2, 1, 1], [0], [0, 0, 0, 0, 0, 0], [], [], [3], [0], [0, 2, 2, 1], [0], [2, 1], [3, 3, 1], [0], [], [1], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [5, 4, 4, 9, 0, 0, 7, 9, 0, 0, 8, 0, 6, 4, 0, 7, 1, 5, 8, 3, 0, 0, 1, 6, 0, 3, 1, 2, 9, 8, 7], [0, 2, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 1, 0, 2, 2, 0, 2, 2, 1, 0, 0, 1, 2, 2, 0, 2, 2, 2, 1, 1, 2, 0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1, 0, 0], [2, 0, 1, 3, 0, 0, 1, 2, 0, 0, 0, 3, 2, 2, 0, 3, 2, 2, 2, 0, 2, 0, 2, 3, 3, 3, 3, 1, 2, 0, 0, 2, 3, 3, 3, 0, 3, 0, 2, 0, 0, 2, 0, 3, 1, 1, 0, 1, 2, 1, 0, 1, 3, 3, 1, 3, 3, 0, 3, 2, 2, 2, 0, 2, 3, 2, 3, 2, 2, 1, 2, 0, 0, 0, 3, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 0, 0, 0, 3, 1, 3, 2, 3, 0, 0, 3, 0, 3, 3, 3, 2, 0, 2, 2, 3, 0, 3, 1, 3, 3, 2, 0, 2, 0, 1, 1, 1, 3, 1, 0, 3, 1, 2, 2, 1, 2, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 3, 2, 1, 0, 4, 0, 1, 0, 1, 4, 4, 2, 0, 2, 2, 2, 0, 4, 1, 2, 4, 4, 2, 4, 4, 4, 2, 0, 1, 0, 0, 1, 4, 1], [0, 2, 1, 1, 0, 0, 2, 1, 1, 2, 2, 2, 0, 2, 0, 1, 0, 1, 2], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0], [2, 0, 5, 4, 5, 3, 0, 5, 4, 2, 3, 0, 3, 5, 5], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0], [0, 2, 2, 2, 3, 0, 3, 2, 4, 0, 1, 4, 0, 4, 3, 1, 4, 1, 1, 4, 1, 4, 2, 0, 4, 3, 0, 1, 2, 2, 2, 2, 4, 0, 1, 0, 0, 1, 1, 2, 2, 4, 0, 1, 0, 1], [0, 1, 3, 1, 3, 0, 2, 2, 0], [1, 3], [1, 1, 1, 2, 1, 2, 0, 1, 1, 2, 2], [0, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 0, 1, 2], [14, 18, 1, 16, 16], [13, 18, 10], [3, 9], [19, 11, 2, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 2, 9, 1, 6, 0, 0, 1, 1, 4, 1, 2, 1, 1, 0, 1, 31, 31, 42, 5, 132, 34, 35, 19, 17, 15, 14, 1, 46, 9, 2, 11, 14, 5, 3, 2, 4], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( s2 == (s0 + (getCharFromString(in2, ( i0 + int(5.0) ))[max(i2, i1):] + \"\"O\"\"))[:int(4.0)][:mod(i1,i0)][:i1] and saveChr(len(in1)) not in (\"\":S3\"\" + saveChr(( mod(i1,abs(( ( ( i2 * divInt(i2,mod(max(min(saveOrd(\"\"B\"\"), min(int(4.0), divInt(i2,i2))), divInt(max(min(max(i2, saveOrd(\"\"Q\"\")), i1), mod(i0,i2)),mod(i2,saveOrd(\"\"n\"\".lstrip(getCharFromString(in2[:int(9.0)], int(0.0))))))),i0)) ) - int(0.0) ) - divInt(int(7.0),i2) ))) + int(900.0) ))).rstrip() ):{:\\nin0 = (s0 + \"\"s\"\").capitalize()\\ni2 = abs(min(int(8.0), abs(abs(i1))))\\n:}else:{:\\ni0 += abs(( ( ( i0 * mod(min(( saveOrd(in2.capitalize()[:mod(( int(0.0) - ( i1 - i2 ) ),i2)][:max(abs(divInt(int(6.0),int(4.0))), ( int(0.0) * saveOrd(\"\"(\"\") ))][( int(7.0) * int(1.0) ):i0][i2:]) * i2 ), saveOrd(in1)),int(5.0)) ) + abs(( saveOrd(s2) * i2 )) ) + i1 ))\\nloopBreak% = 0\\nfor in0 in \"\"\\\\\\t\"\":{:\\ni1 -= saveOrd(\"\"#\"\")\\ns0 = getCharFromString(in0, i2)[saveOrd(\"\"Q\"\"):][abs(min(( i0 + mod(( max(i2, min(int(8.0), min(max(divInt(i2,divInt(i0,int(3.0))), int(0.0)), int(0.0)))) - saveOrd(in2) ),int(1.0)) ), i1)):]\\nres0 = max(int(6.0), divInt(divInt(int(0.0),( i2 * int(3.0) )),int(1.0))) \\l i2\\nin2 = \"\"k9\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(2987.0)\\ni0 = i0\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 2, 2, 0, 0, 2, 2, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 3, 0, 3, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 1, 0, 0, 2, 0, 1, 2, 1, 4, 4], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [3, 2, 3], [5, 0], [2, 1, 0, 0, 1], [0, 0, 0], [17, 18, 3], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 13, 0, 57, 18, 11, 8, 10, 6, 3, 1, 17, 3, 2, 5, 3, 3, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[max(mod(int(0.0),i0), ( i2 * int(7.0) )):( int(5.0) + divInt(i2,i1) )][:divInt(divInt(int(7.0),i1),( min(( i2 * divInt(min(( abs(i2) - divInt(min(int(6.0), i2),int(1.0)) ), int(7.0)),mod(i0,( int(7.0) + max(int(9.0), abs(i0)) ))) ), ( ( divInt(int(8.0),int(5.0)) * mod(int(0.0),i2) ) - int(4.0) )) - max(divInt(saveOrd(in1),i2), saveOrd(\"\"R\"\"[:int(8.0)].strip((\"\"S\"\" + in0.lstrip()).capitalize())[i2:int(59.0)])) ))]):]:{:\\nres0 = \"\"D\"\" not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [2, 3, 1, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 1, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 2, 2, 1, 2, 2, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 0, 0, 0, 1, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 8, 0, 32, 9, 5, 5, 4, 4, 2, 1, 14, 2, 0, 6, 2, 1, 0, 0, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[divInt(len(in1),int(7.0)):]:{:\\nres0 = s1[int(7.0):i0] not in \"\"R\"\"[divInt(i2,int(5.0)):len(saveChr(int(2.0))[:abs(i2)][:( divInt(( int(2.0) + i0 ),( min(( i1 + int(5.0) ), i2) - ( int(7.0) * i1 ) )) + divInt(len((\"\";\"\" + saveChr(int(5.0)))),i2) )])][int(9.0):int(8.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 1, 2, 1, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 3, 3, 0, 4], [1, 1], [0], [2, 2, 0, 2, 2, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1, 1], [0, 1], [17], [18], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 9, 0, 50, 16, 9, 9, 7, 5, 2, 1, 15, 2, 0, 6, 2, 1, 1, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1[int(8.0):][:mod(int(7.0),len(\"\"R\"\"[:mod(int(5.0),int(7.0))]))]):][( int(2.0) * abs(i1) ):]:{:\\nres0 = in0[:divInt(( ( int(1.0) + i0 ) * ( min(len(getCharFromString((\"\"s\"\" + saveChr(i1)), ( min(divInt(int(7.0),i1), ( max(int(7.0), i0) - int(9.0) )) + int(8.0) ))), i2) * divInt(divInt(int(5.0),abs(int(0.0))),max(i1, ( ( ( int(4.0) - int(8.0) ) - mod(int(59.0),i1) ) * int(9.0) ))) ) ),i2)] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 7, 4, 7, 0, 1, 1, 7, 9, 6, 5, 5, 2, 9, 5, 9, 9, 2, 2], [0, 0, 2, 0, 2, 2, 1, 2, 0, 1, 2, 2, 2], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 1, 3, 0, 3, 2, 2, 1, 1, 2, 2, 0, 1, 2, 0, 1, 1, 2, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [3, 1, 0, 0, 3, 2, 1, 2, 1, 2, 2, 1], [0, 0, 2, 1, 0, 2, 2, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 1, 0, 2, 0, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [18], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 13, 0, 56, 17, 12, 11, 6, 5, 1, 1, 11, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1):]:{:\\nres0 = (\"\"S\"\" + in1) not in in0[max(i0, mod(min(( i0 + int(9.0) ), min(int(7.0), len(getCharFromString(saveChr(i2), ( ( mod(abs(i0),divInt(max(( i2 + ( divInt(( int(4.0) * i2 ),i1) - abs(int(7.0)) ) ), i2),int(0.0))) + int(1.0) ) * i0 ))[max(( int(1.0) * abs(int(7.0)) ), abs(i1)):max(divInt(( int(9.0) - int(6.0) ),( ( i2 * int(5.0) ) + ( i2 + int(5.0) ) )), int(2.0))]))),divInt(i2,int(9.0)))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 3, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 1, 2, 0, 2, 3, 2, 0, 1, 3, 3, 1, 0, 1, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 2, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 2, 3, 2, 2, 0, 4], [1, 1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 0, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [10], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 7, 0, 29, 7, 7, 4, 3, 6, 2, 1, 17, 4, 1, 5, 2, 1, 1, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s2[len(in0[i0:i2][int(8.0):]):]:{:\\nres0 = s2 not in getCharFromString(getCharFromString((\"\"R\"\" + s2.capitalize()).rstrip(), saveOrd(\"\"k\"\"))[:mod(i2,int(4.0))], mod(int(5.0),abs(i0)))[( divInt(int(7.0),( i1 + ( min(( i2 + int(2.0) ), len(s0)) * min(int(1.0), i1) ) )) - int(3.0) ):abs(int(7.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 9, 7, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 2, 0, 3, 1, 0, 0, 2, 2, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 2, 1, 1, 3, 3, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 4, 1, 0, 1, 3, 1, 0], [1, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0, 0, 3], [17, 15], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 16, 16, 12, 0, 56, 17, 12, 9, 8, 7, 3, 1, 16, 2, 0, 4, 3, 2, 0, 0, 1], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[len(in0):] not in saveChr(mod(i0,abs(int(0.0))))[i2:]:{:\\nb0 = ( i2 != ( ( min(i0, divInt(( divInt(int(7.0),i1) - ( len(s0[( int(5.0) * saveOrd(\"\"R\"\") ):max(divInt(int(7.0),i2), ( min(int(7.0), i1) * int(1.0) ))]) - int(7.0) ) ),i2)) + i0 ) * divInt(int(7.0),max(divInt(len((\"\"P\"\" + saveChr(i0))),( ( ( int(9.0) - int(9.0) ) - mod(int(7.0),i2) ) * divInt(int(0.0),int(4.0)) )), max(min(int(8.0), int(59.0)), i2))) ) or ( in1.endswith(\"\";\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [1, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 4, 4, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [22], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 1, 0, 4, 1, 1, 11, 4, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nres0 = getCharFromString(saveChr(i0), i2)[int(0.0):] not in \"\"W\"\"[len(in1):( i2 - int(7.0) )].lstrip().rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0, 2, 2, 2, 0, 0, 0, 0, 1, 1, 0, 2], [0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 1, 1, 2, 0, 0, 2, 3, 3, 3, 0, 3, 0, 3, 2, 2, 2, 2, 3, 1, 0, 2, 3, 0, 0, 0, 0, 3, 0, 3, 0, 3, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [3, 0, 2, 0, 3, 0, 1, 2, 1, 0, 1, 1, 1, 4, 1, 3, 4, 2, 0, 0, 2], [0, 2, 1, 2, 1, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4, 5], [1, 1, 1], [0], [2, 1, 0, 2, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 0, 0], [3, 1, 3], [4, 0], [2, 0, 0, 2, 1], [0, 1, 0], [17, 0], [16], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 18, 18, 21, 0, 83, 24, 21, 11, 13, 8, 3, 1, 19, 3, 2, 4, 3, 2, 1, 0, 0], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[min(int(0.0), i0):abs(i2)] not in (in1[int(7.0):].rstrip(saveChr(int(5.0)))[divInt(int(7.0),min(i0, divInt(( mod(int(7.0),i0) + divInt(len((\"\"q\"\" + s0.lstrip())),mod(( min(max(( int(1.0) * i1 ), divInt(abs(int(7.0)),( int(7.0) - i2 ))), divInt(i0,mod(int(9.0),max(( min(i0, ( ( divInt(int(8.0),int(5.0)) * mod(int(0.0),i1) ) - int(4.0) )) - max(i0, int(8.0)) ), int(59.0))))) + ( i2 - i2 ) ),( max(max(saveOrd(\"\"A\"\"), i2), max(i0, len(s0))) - divInt(mod(divInt(( saveOrd(in1) + int(9.0) ),i0),( abs(i0) + i0 )),i1) ))) ),i1))):min(i0, min(i2, abs(int(2.0))))] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 0, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [0, 1], [0], [2, 0, 0, 0, 1, 4, 2, 4, 2, 2, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 2], [17], [], [5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 2, 1, 5, 0, 0, 1, 2, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.startswith(\"\"R5\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [7, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 3], [0, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 2, 0, 0, 0, 1, 0, 1, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 2, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 0, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 3, 1, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 0, 3, 0, 2, 0, 1, 2, 1, 3, 0, 0, 3, 3, 2, 3, 2, 3, 2, 1, 0, 2, 2, 3, 0, 0, 1, 3, 1, 2, 1, 0, 2, 1, 1, 3], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 2, 0, 3, 0, 1, 4, 1, 4, 1, 1, 0, 1, 2, 4, 0, 1, 4, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 2, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4, 3], [1, 1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 4, 1], [0, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 0, 3, 3, 2], [17, 10], [], [9], [20, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 20, 20, 19, 0, 85, 27, 20, 14, 13, 8, 5, 1, 19, 4, 1, 4, 5, 2, 0, 1, 2], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[divInt(i0,abs(( ( int(7.0) + divInt(int(7.0),min(i2, ( divInt(( ( i2 + divInt(len(saveChr(i2)),i1) ) * min(max(( int(5.0) - i2 ), divInt(saveOrd((\"\"R\"\" + in1.rstrip())),int(7.0))), i1) ),max(int(7.0), divInt(i2,( int(1.0) + saveOrd(\"\"K\"\") )))) * ( max(i1, ( mod(divInt(int(7.0),int(7.0)),mod(int(9.0),i0)) - int(8.0) )) - int(5.0) ) ))) ) * i1 ))):max(i2, ( i0 + int(0.0) ))], ( int(4.0) + min(i0, i0) ))[max(abs(mod(saveOrd(in0),mod(min(( int(8.0) - i1 ), mod(divInt(max(i0, i1),int(59.0)),saveOrd(saveChr(int(9.0))))),( int(2.0) * i0 )))), ( int(2.0) + int(3.0) )):len(\"\";.9\"\")]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 1, 2, 0], [0, 0], [1, 0], [3, 3, 2], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 0], [1, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1, 1], [0], [1, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 3, 3], [1, 0], [2, 0, 0, 2, 1], [0, 2], [23], [], [7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 4, 2, 1, 1, 1, 0, 1, 2, 2, 3, 1, 8, 1, 3, 1, 1, 4, 1, 0, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif \"\"X\"\" not in s0:{:\\nres0 = ( len(in2) != len(in1[i0:]) or int(0.0) \\l saveOrd(in1) )\\n:}else:{:\\ni1 += mod(i1,int(3.0))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 4, 3, 8, 3], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 2], [0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1, 3, 1, 3, 2, 1, 3, 1, 3, 0, 3, 3, 1, 1, 0, 3, 3, 1, 0, 3, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 0, 0, 4, 1, 1, 0, 3, 0, 3, 1, 3], [0, 0, 0, 0, 0, 2, 2, 2, 2], [1, 0, 0, 0, 0, 0, 1, 0, 1], [1, 5, 4, 5, 3, 0, 4, 5], [1, 1, 1, 1], [0], [2, 0, 2, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 2, 3, 0, 1, 0], [3, 1, 3], [4, 0], [0, 2, 0, 2, 1, 0], [0, 1, 2, 3], [17], [22], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 23, 23, 13, 0, 72, 18, 20, 9, 9, 8, 4, 1, 22, 3, 2, 6, 4, 1, 1, 1, 1], "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1[max(int(07.0), i0):abs(i2)][int(5.0):]):int(7.0)]:{:\\nres0 = \"\"R\"\" not in in2[:mod(int(7.0),min(i0, ( ( divInt(int(1.0),i0) + ( len(saveChr(divInt(( min(max(( int(7.0) + i1 ), divInt(abs(int(7.0)),( int(9.0) + i2 ))), divInt(i0,divInt(int(8.0),max(( min(i0, ( ( mod(int(5.0),int(0.0)) + divInt(int(4.0),i1) ) + int(8.0) )) * int(59.0) ), int(9.0))))) * min(int(2.0), saveOrd((\"\"w\"\" + in0.lstrip()))) ),mod(int(2.0),max(int(4.0), max(i0, min(len(\"\"6\"\"), int(3.0)))))))) * int(8.0) ) ) * i0 )))].rstrip(s0)[min(len((in1 + \"\";\"\")[int(3.0):i0]), max(len(in2), i2)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 7, 1, 1, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 3, 2, 1, 2, 0, 0, 2, 1, 1, 0, 2, 3, 1, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 0, 1, 0, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 4, 3, 0, 1, 2, 1], [2, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1, 0, 0, 1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0, 1, 1, 1], [17], [3, 6, 20], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 0, 37, 12, 7, 5, 7, 6, 4, 1, 15, 2, 0, 5, 4, 1, 3, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[:len(s2)]):][mod(int(0.0),i0):]:{:\\nres0 = in0[:( ( min(mod(int(7.0),divInt(i2,i2)), divInt(int(1.0),int(7.0))) * i0 ) + ( saveOrd(\"\"R\"\") * int(7.0) ) )].capitalize()[i1:( len((\"\"dgu\"\" + saveChr(divInt(min(i1, ( max(int(1.0), i1) * int(1.0) )),divInt(i1,i0))))) + mod(int(7.0),i0) )] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1, 1, 0, 2, 1, 1, 2, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 4, 3, 0, 1, 2, 1, 3], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 4, 4], [1, 0, 1], [0], [2, 0, 0, 2, 2, 4, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0, 2, 0], [17, 24], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 10, 0, 50, 16, 10, 10, 6, 6, 3, 1, 16, 3, 1, 5, 3, 2, 0, 1, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1[max(i2, int(02.0)):], abs(( i1 + int(5.0) )))[mod(int(7.0),saveOrd(s0[:i1])):( mod(( int(2.0) + i1 ),( len(saveChr(min(i0, ( max(( int(1.0) * i2 ), divInt(abs(int(7.0)),i1)) * ( int(5.0) + i1 ) )))) * divInt(divInt(int(9.0),max(int(8.0), len((\"\"R\"\" + in1.rstrip())))),i2) )) - ( ( ( int(5.0) - int(0.0) ) * divInt(int(4.0),i0) ) + int(8.0) ) )][:int(59.0)] not in \"\"6Y\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [0, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [0, 7, 1, 7, 5, 1, 3, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 0, 4, 3, 5, 5, 9, 4, 9, 2, 6, 8], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 2, 2, 1, 1, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 3, 1, 1, 0, 1, 2, 2, 2, 1, 1, 2, 0, 2, 2, 1, 1, 3, 2, 2, 0, 3, 0, 1, 2, 0, 1, 1, 2, 0, 3, 0, 2, 2, 3, 1, 3, 0, 2, 3, 0, 3, 0, 1, 3, 3, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [4, 1, 2, 0, 2, 0, 3, 2, 1, 3, 4, 3, 0, 3, 0, 0, 1, 2], [0, 2, 0, 1, 0, 2, 0, 2, 1, 1, 0, 1, 2, 2, 0, 2, 2, 2], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [3, 5, 3, 4, 3, 0, 4], [1, 1, 1, 1, 1, 1], [0], [2, 0, 2, 2, 1, 4, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0, 1, 4, 4, 2, 1, 1], [0, 1, 3, 0, 3], [1, 0], [2, 2, 0, 0, 1, 1], [0, 1, 0, 0, 2, 2], [17, 22, 8], [19], [6, 0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 30, 30, 19, 0, 91, 29, 18, 18, 11, 6, 6, 1, 23, 5, 2, 6, 6, 3, 1, 2, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(\"\"R\"\"[int(07.0):i2][int(1.0):]):]:{:\\nloopBreak% = 0\\nwhile getCharFromString(in0[max(( i2 + mod(divInt(int(7.0),int(5.0)),i2) ), ( divInt(( abs(i0) * ( min(( i1 + ( divInt(( int(1.0) - i2 ),divInt(abs(int(3.0)),i1)) + int(7.0) ) ), int(9.0)) * i2 ) ),min(divInt(int(8.0),len(in1[:int(5.0)])), abs(i0))) + ( ( ( int(0.0) * max(int(4.0), int(8.0)) ) - i0 ) - int(59.0) ) )):( ( mod(int(9.0),int(2.0)) + ( i0 - divInt(( int(2.0) * int(0.0) ),len(saveChr(( divInt(i0,saveOrd((\"\"t\"\" + in0.rstrip()))) * i0 )))) ) ) + int(435.0) )], ( i0 * int(59.0) )) not in \"\"W\"\":{:\\nres0 = ( int(4.0) != divInt(i0,len(s0)) and ( \"\"I\"\".endswith(getCharFromString(\"\"6\"\"[:i0].lstrip(), ( ( min(int(9.0), len(\"\"0\"\")) * i0 ) * divInt(min(i0, min(i0, int(2.0))),max(abs(int(6.0)), int(8.0))) ))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 5, 1, 4, 3, 0, 4], [1, 0, 1, 0, 1], [0], [2, 0, 3, 2, 2, 0, 2, 2, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1, 2], [0, 3, 3, 1, 3], [17], [12], [], [20, 17, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 6, 0, 17, 4, 3, 2, 2, 3, 5, 0, 15, 1, 0, 6, 5, 1, 1, 0, 3], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = in2[( saveOrd((in2[i0:int(07.0)][len(\"\"R\"\"[divInt(i2,int(5.0)):][:( i2 + abs(i2) )][:divInt(i2,int(7.0))]):] + \"\";.\"\")) + int(2.0) ):] != (\"\"m*\"\" + getCharFromString(s1, i2))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 3, 3, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1, 1, 0, 1], [0], [2, 0, 0, 2, 4, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 3, 0, 3], [1, 12], [], [], [20, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 34, 10, 8, 5, 5, 5, 4, 1, 16, 4, 1, 4, 4, 2, 0, 0, 2], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = \"\"B\"\".capitalize()[mod(( int(0.0) + i0 ),len(saveChr(len(in1[int(7.0):( int(5.0) + min(i2, i2) )]))[mod(divInt(int(7.0),i1),divInt(len((\"\";\"\" + in0.capitalize()).rstrip()),( i1 * ( min(divInt(max(i2, ( abs(int(6.0)) - i1 )),int(1.0)), int(7.0)) + i2 ) ))):i0])):] not in \"\"M!\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 3, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 2, 1, 0, 0, 3, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0, 2, 1], [17], [15], [4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 11, 0, 40, 11, 11, 5, 6, 7, 3, 1, 16, 3, 1, 4, 3, 1, 1, 1, 0], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1[mod(int(0.0),i0):])]:{:\\nres0 = in0 not in s0[mod(i2,int(7.0)):( int(5.0) + abs(min(i1, divInt(divInt(i0,i1),( len(saveChr(( i2 + ( min(divInt(max(i1, ( abs(int(7.0)) * i2 )),divInt(int(6.0),i0)), i0) - max(int(1.0), len((\"\"R\"\" + in1.rstrip()))) ) ))) + int(7.0) )))) )].capitalize()[len(\"\"4p\"\"):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 0, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 3, 3, 0, 4], [0, 0, 0, 1, 1], [0], [2, 0, 0, 1, 1, 4, 2, 4, 2, 2, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [3, 3, 0, 2, 2], [17], [], [5, 3], [20, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 5, 1, 5, 0, 0, 1, 5, 1, 0, 2, 2], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = \"\";]R5\"\".startswith(\"\"3\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 6, 2, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 3, 3, 0, 1, 4, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1, 1], [0], [2, 4, 0, 2, 4, 0, 2, 4, 0, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0, 3], [1, 0], [2, 2, 2, 0, 1], [0, 2], [17], [], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 13, 3, 4, 1, 2, 5, 2, 1, 15, 5, 2, 3, 2, 1, 0, 1, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize()[len(saveChr(len(in1))[mod(int(0.0),max(divInt(i0,int(1.0)), ( int(5.0) + len(in1.rstrip()[i2:]) ))):]):]:{:\\nres0 = \"\"R\"\" not in getCharFromString((\"\"0\"\" + in1.lstrip()), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [0, 0, 0], [], [0], [], [], [0, 0, 3, 2], [3], [1, 0, 0, 0, 2], [0], [4], [1, 3, 0], [1], [0], [], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 9, 6, 1, 7, 1, 2, 8, 7, 7, 3, 6, 3, 2, 3, 7, 1, 6, 9, 8, 0], [0, 1, 0, 2, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0, 1, 1, 2, 2], [1, 1], [2, 1, 2, 2, 1, 0, 0, 2, 2, 1, 0, 3, 0, 0, 2, 3, 2, 3, 2, 2, 3, 3, 1, 0, 0, 3, 3, 2, 2, 3, 2, 0, 3, 1, 2, 3, 1, 1, 0, 2, 1, 2, 3, 1, 1, 1, 0, 1, 3, 0, 3, 3, 1, 3, 1, 0, 3, 0, 2, 0, 2, 2, 0, 0, 3, 2, 0, 3, 3, 1, 3, 2, 0, 3, 0, 3, 3, 2, 2, 1, 2, 0, 1, 2, 3, 0, 3, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 4, 2, 1, 3, 4, 1, 0, 2, 3, 2, 0, 3, 4, 0, 0, 3, 0, 0, 4, 1, 2, 4, 2], [1, 1, 0, 0, 1, 2, 1, 2, 0, 0, 2, 2], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0], [4, 2, 5, 1, 5, 0, 4, 0, 1], [1, 1, 1, 1], [], [3, 0, 3, 2, 0, 2, 0, 1, 4, 4, 3, 4, 2, 4, 0, 4, 0, 3, 1, 4, 2, 2, 0, 0, 1, 1, 0, 0], [1, 1, 2, 3, 1, 2], [3], [0, 0, 0, 0, 2], [0, 3, 1, 2], [19], [21], [4], [24]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 4, 1, 5, 1, 1, 3, 1, 1, 0, 21, 21, 21, 0, 88, 24, 25, 12, 12, 9, 4, 0, 28, 6, 1, 5, 4, 1, 1, 1, 1], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = mod(int(0.0),mod(( int(961.0) - i0 ),i1)) \\ge ( ( int(7.0) - i0 ) + min(i2, i1) )\\nb0 = True\\nres0 = ( b2 or (in1 + (s2[( abs(divInt(saveOrd(in2[( mod(abs(max(int(12.0), i0)),i0) + len(\"\"T\"\") ):saveOrd(saveChr(( mod(max(( i0 - min(int(8.0), mod(abs(int(7.0)),int(7.0))) ), i0),( int(3.0) * divInt(len(saveChr(int(6.0))),int(3.0)) )) - int(2.0) )))]),i2)) * int(3.0) ):abs(i0)] + (s1.lstrip(saveChr(min(len(in2), int(7.0))))[saveOrd((\"\"?\"\" + s0[int(1.0):][i0:min(i0, divInt(i1,( ( i0 + i1 ) + min(divInt(i0,len(in1)), min(int(6.0), min(divInt(i1,saveOrd(\"\"v\"\")), i1))) )))].capitalize())):max(abs(( mod(int(9.0),( i2 * int(8.0) )) * divInt(saveOrd(\"\"4\"\"),i2) )), abs(int(0.0)))].capitalize() + s0))).startswith(s1) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 0, 0, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 0, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1, 3, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 2, 1, 0], [0, 1, 3], [3, 0], [2, 2, 2, 0, 1], [0, 3, 0, 3], [17, 4], [], [], [20, 0]], "fitness": 9223372036854775807, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( len(getCharFromString(in0[i0:min(mod(i2,i2), ( int(0.0) + len(\"\"R\"\") ))], i0)[( divInt(( divInt(i1,( min(( i1 + i1 ), max(divInt(int(3.0),i2), ( min(int(5.0), i0) * int(7.0) ))) - int(7.0) )) + i0 ),i2) * divInt(int(1.0),max(divInt(len((\"\";\"\" + saveChr(i2))),( ( ( int(7.0) - int(7.0) ) - mod(int(9.0),i0) ) * int(8.0) )), int(5.0))) ):]) != int(0.0) or ( \"\"E\"\"[:i0].endswith(s0) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 12, 12, 14, 0, 52, 16, 10, 9, 7, 6, 4, 0, 17, 2, 0, 5, 4, 2, 0, 0, 2]}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 5, 6, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2, 0, 1, 1], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 3, 2, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2, 0, 2, 1, 0, 2, 3, 3, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 1, 1, 2, 1, 3, 2, 1, 2, 2, 0, 0, 3, 1, 0, 2, 3, 3, 3, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 0, 1, 1, 2, 2, 3, 1], [2, 0, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [1, 5, 4, 5, 3, 0, 4, 2], [1, 1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 2], [17], [], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 19, 19, 16, 0, 71, 23, 14, 11, 12, 8, 2, 1, 15, 2, 0, 3, 2, 1, 0, 1, 0], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in2 not in in0:{:\\nres0 = ( len(s0) != abs(divInt(i0,divInt(i2,int(7.0)))) or ( getCharFromString(in1[min(( divInt(i0,( ( ( int(7.0) * i0 ) + ( divInt(( i1 * divInt(i2,divInt(int(5.0),i1)) ),mod(len(\"\"R\"\"),min(i2, int(5.0)))) - int(6.0) ) ) * i0 )) * i0 ), ( int(5.0) - max(int(7.0), min(i0, ( divInt(divInt(int(5.0),int(9.0)),( int(8.0) - i1 )) * int(5.0) ))) )):max(i2, int(0.0))], int(4.0))[mod(int(8.0),max(( int(59.0) + divInt(divInt(i0,i1),abs(int(9.0))) ), i1)):].endswith((\"\"1\"\" + saveChr(( abs(len(s2)) + max(int(2.0), int(2.0)) )))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [0, 1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 5, 1, 2, 0, 1, 4, 2, 1, 6, 0, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(mod(i0,i2)):]:{:\\nres0 = in1 not in \"\"R;\"\"[len(in1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [0, 0, 0, 0, 1], [0], [2, 4, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0, 2, 0, 3], [17, 3, 10], [], [5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 5, 0, 5, 1, 1, 1, 5, 3, 0, 1, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2.rstrip()[abs(len(\"\"RD5K;\"\")):] not in in2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 1, 1], [1, 0], [0], [], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 1, 1, 0, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 0, 3, 0, 4], [1], [0], [2, 1, 0, 0, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [14], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 3, 1, 0, 2, 1, 1, 0, 4, 4, 1, 0, 5, 1, 1, 0, 1, 2, 1, 1, 3, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in \"\"O\"\"[mod(int(37.0),int(57.0)):]:{:\\nres0 = ( True or i0 != len(in2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 2, 3, 0, 1, 0, 1], [0], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 0, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 3, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 2], [17], [], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 0, 3, 0, 0, 6, 2, 1, 15, 3, 1, 3, 2, 1, 0, 1, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in1[len((\"\"R\"\" + s0[len(saveChr(int(7.0))):i0].capitalize())):] not in (\"\"3\"\" + s0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 4, 1, 1, 1], [0, 2, 2, 0, 1, 2, 1, 1, 0, 0, 0, 1, 2], [0, 1, 1], [3, 3, 1, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 2, 1, 0, 1, 1, 0, 3, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 2, 0, 2, 1, 2, 1, 3, 2, 1, 0, 1, 1, 1, 2, 3, 2, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 0, 0, 3, 0, 1, 0, 2], [0, 0, 1, 1, 2, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 5, 5, 5, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 4, 2, 2, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 1, 1], [0, 2], [17], [], [8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 23, 23, 13, 0, 70, 24, 11, 12, 12, 6, 2, 1, 15, 2, 0, 5, 2, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = in2[len(getCharFromString(in0[:int(7.0)][:int(7.0)][i0:mod(( int(5.0) + ( int(2.0) + saveOrd(\"\"R\"\") ) ),i2)], divInt(( mod(int(2.0),i2) - ( min(( i0 - divInt(min(( min(i1, mod(divInt(int(5.0),i2),int(7.0))) * int(5.0) ), i1),len((\"\"8\"\" + saveChr(( int(9.0) * min(int(8.0), max(i1, ( ( mod(int(5.0),int(0.0)) - divInt(int(4.0),i0) ) - int(8.0) ))) ))))) ), divInt(mod(i0,( int(59.0) * ( int(9.0) + min(( int(2.0) + i0 ), int(2.0)) ) )),int(4.0))) - int(1.0) ) ),divInt(abs(mod(i1,int(1.0))),int(1.0))))):i2] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 3, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 2, 3, 1, 3], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 4, 3, 0, 1, 0, 1, 4, 1, 2, 4], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4, 4], [1, 1], [0], [2, 0, 2, 2, 0, 0, 4, 1, 2, 0, 4, 3, 2, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [0, 2, 0, 0, 1], [0, 1], [17], [14], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 11, 0, 54, 16, 13, 9, 7, 7, 2, 1, 17, 3, 2, 5, 2, 1, 1, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(in2):mod(i0,len(\"\"R\"\".rstrip()))][( i2 * int(1.0) ):]):( int(7.0) + saveOrd(in0[i0:divInt(( len(saveChr(int(5.0))) * i0 ),divInt(min(( i1 - max(min(( int(7.0) + int(7.0) ), divInt(max(int(1.0), i2),int(7.0))), i1) ), i1),i0))]) )]:{:\\nres0 = ( int(7.0) * saveOrd((s0.lstrip()[:divInt(max(i0, divInt(( ( int(9.0) - int(8.0) ) - ( int(5.0) * i0 ) ),int(0.0))),int(4.0))] + \"\"o\"\")) ) != mod(abs(int(8.0)),saveOrd(in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [3, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 3, 3, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4, 2, 2, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 0], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0, 1], [17], [3], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 0, 14, 14, 10, 0, 54, 16, 14, 9, 7, 8, 2, 1, 16, 2, 0, 4, 2, 1, 1, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile len(in1[mod(int(0.0),abs(mod(i1,int(7.0)))):]) \\ge ( int(5.0) + min(i1, divInt(( ( int(7.0) + i1 ) * ( len(in0) - min(i1, ( max(divInt(int(2.0),i0), ( abs(int(1.0)) + i2 )) * int(7.0) )) ) ),int(7.0))) ):{:\\nres0 = ( i1 \\l divInt(divInt(int(9.0),max(int(8.0), saveOrd(s0[:i1]))),( ( ( int(5.0) - int(0.0) ) - mod(int(4.0),i2) ) * int(8.0) )) or ( in1[abs(abs(saveOrd(getCharFromString((\"\"R\"\" + saveChr(saveOrd(s0))), i0)))):] not in \"\"d\"\" and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2], [], [1, 5], [3, 3, 1], [], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 0, 2, 3, 0, 1, 3, 2, 2, 3, 0, 0, 0, 2, 3, 1, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1, 0, 1, 3, 1, 1, 3, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 5, 4, 4, 2, 0, 3], [1, 1, 0, 1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 3, 1, 3], [17], [25], [], [20, 0]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 16, 1, 67, 20, 16, 8, 12, 7, 4, 1, 17, 3, 1, 4, 4, 1, 1, 0, 2], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(getCharFromString(\"\"R\"\", min(int(0.0), min(mod(i0,int(7.0)), mod(int(5.0),len(s2)))))[i1:]):( divInt(( int(7.0) + i1 ),( min(max(abs(( divInt(divInt(int(8.0),i1),i0) + max(int(1.0), i2) )), int(7.0)), int(7.0)) * i1 )) - ( mod(int(1.0),min(i1, max(i2, mod(( ( int(8.0) + int(5.0) ) * ( int(0.0) - i2 ) ),int(4.0))))) - len(saveChr(divInt(i2,divInt(max(i1, int(8.0)),max(divInt(divInt(len((\"\";\"\" + s0.rstrip())),i2),i1), i0))))) ) )][divInt(len(\"\"z\"\"),int(59.0)):] not in in0\\ni0 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [9, 7, 4, 7, 0, 1, 7, 7, 9, 6, 5, 0, 2, 8, 5, 9, 9, 2, 2, 9, 5, 4, 4, 5, 8, 2, 2, 4, 4, 4, 4], [2, 0, 2, 0, 2, 0, 1, 2, 0, 0, 2, 2, 2, 0, 0, 0, 2, 1, 2, 2, 0, 2, 0, 2, 0, 2], [0, 1, 1], [3, 2, 0, 2, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 1, 1, 2, 0, 0, 2, 1, 3, 1, 2, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 1, 1, 2, 0, 1, 3, 3, 2, 2, 2, 3, 0, 0, 3, 3, 2, 2, 0, 2, 3, 0, 2, 2, 0, 3, 2, 3, 1, 0, 1, 1, 0, 2, 3, 1, 1, 2, 0, 0, 3, 3, 1, 1, 0, 2, 2, 1, 2, 0, 2, 3, 1, 2, 0, 3, 2, 2, 0, 0, 2, 1, 3, 2, 1, 1, 0, 3, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 0, 0, 0, 3, 0, 1, 2, 1, 2, 1, 0, 0, 0, 2, 1, 1, 4, 4, 0, 2, 4, 4, 3, 2], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1, 1, 0, 1, 0, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 5, 4, 4, 3, 5, 4], [1, 1, 1, 1], [0], [2, 0, 0, 3, 1, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0, 1], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 1, 0], [17, 9], [5, 2], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 31, 31, 26, 0, 120, 40, 25, 18, 22, 7, 4, 1, 18, 2, 0, 4, 4, 2, 2, 0, 0], "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(mod(i2,( min(( i0 + int(9.0) ), min(int(7.0), min(i2, ( mod(divInt(len(in1),i0),( min(( i2 + mod(( ( int(4.0) * i0 ) + divInt(max(int(7.0), int(0.0)),int(1.0)) ),( i1 + i2 )) ), ( int(7.0) * abs(int(7.0)) )) - ( i0 - ( divInt(divInt(int(9.0),int(6.0)),( int(5.0) * i0 )) + int(0.0) ) ) )) + max(abs(int(2.0)), int(8.0)) )))) - ( i2 - int(5.0) ) ))):]:{:\\nres0 = (\"\"R\"\" + in1) not in in0[max(min(( divInt(( min(i2, i2) + min(abs(divInt(divInt(i0,mod(max(i0, divInt(divInt(i0,max(( saveOrd(getCharFromString((\"\"f\"\" + saveChr(int(9.0))), i2)) - int(9.0) ), int(2.0))),i1)),divInt(saveOrd(in2),int(2.0)))),int(9.0))), divInt(i2,i2)) ),min(abs(int(5.0)), int(4.0))) + i0 ), divInt(divInt(int(4.0),mod(i2,divInt(saveOrd(\"\"c\"\"),int(5.0)))),( i0 + saveOrd(in1) ))), ( divInt(i2,i0) - divInt(int(8.0),len(\"\"J\"\")) )):mod(int(2.0),int(24.0))][i2:abs(int(4.0))][int(44.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 3, 5, 2, 2, 5, 2, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 1, 0, 1, 3, 2, 3, 0, 2, 2, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 3, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 2, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0, 2, 0, 3], [17, 21], [], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 9, 9, 10, 0, 33, 7, 7, 3, 4, 5, 4, 0, 16, 2, 1, 6, 4, 2, 0, 1, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):].endswith(in1[len(in1):]):{:\\nb1 = ( int(5.0) != int(3.0) or ( (\"\"R\"\" + saveChr(i0)).rstrip()[int(5.0):i2][:int(2.0)][abs(mod(min(i2, divInt(( i0 + int(2.0) ),i1)),divInt(len(in0),( i2 + divInt(i1,( int(5.0) - i2 )) )))):min(max(int(2.0), i0), int(5.0))][int(9.0):i0].endswith(\"\"0V;\"\") and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 0, 0, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 2, 0, 2, 3, 2, 0, 1, 1, 0, 0, 3, 1, 3, 2, 1, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 0, 1, 3, 2, 0], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0, 0], [17, 2], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 14, 0, 54, 16, 12, 8, 8, 6, 2, 1, 14, 2, 0, 4, 2, 2, 0, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[max(i0, min(mod(i2,i2), ( int(0.0) + len(s0) ))):i0][min(( divInt(int(3.0),i1) + ( max(divInt(i2,min(max(( divInt(i1,divInt(len(getCharFromString((\"\"C\"\" + saveChr(( i2 - int(5.0) ))), int(7.0))),i0)) - i0 ), abs(int(7.0))), min(divInt(int(1.0),i2), mod(( ( int(7.0) + int(7.0) ) * ( int(9.0) - i2 ) ),int(8.0))))), divInt(int(5.0),int(0.0))) - i0 ) ), i0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 4, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 0, 0, 2, 0], [0, 1, 1], [2, 3, 3, 0, 3, 2, 0, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 3, 3, 0, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 2, 2, 2, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 1, 1, 2, 1, 2, 3, 2, 1, 0, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [3, 3, 2, 0, 1, 0, 1, 0, 1, 3, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 5, 4, 3, 0, 4], [1, 1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 4, 1, 0], [0, 1, 3, 2], [1, 0], [0, 2, 2, 0, 1], [0, 1], [17], [12], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 16, 0, 62, 20, 10, 11, 9, 5, 2, 1, 16, 4, 1, 5, 2, 1, 1, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[divInt(len(in2[len(in1):]),i0):][abs(( i2 + i2 )):( int(0.0) + min(i0, divInt(( divInt(int(7.0),i1) * ( max(( min(max(i2, int(5.0)), int(7.0)) - i1 ), divInt(min(int(7.0), i2),int(1.0))) + int(7.0) ) ),i0)) )]:{:\\nres0 = getCharFromString(in0[:i0], ( int(7.0) * divInt(divInt(( i2 - ( ( mod(int(9.0),int(8.0)) - divInt(int(4.0),i2) ) * int(0.0) ) ),i0),i0) ))[int(4.0):int(8.0)] not in saveChr(mod(int(59.0),( max(( int(9.0) + i2 ), len((\"\"R\"\" + \"\"m\"\".capitalize().rstrip()))) + i0 )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 5, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 2, 2, 2, 0, 1, 0], [0, 1, 1], [3, 3, 2, 2, 0, 2, 0, 1, 2, 3, 3, 0, 0, 2, 2, 2, 0, 2, 3, 2, 0, 2, 0, 2, 3, 0, 2, 3, 2, 0, 3, 0, 0, 0, 2, 2, 3, 1, 3, 0, 1, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 3, 1, 3, 2], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 5, 4, 4, 4, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [1, 2, 3], [1, 0], [2, 2, 0, 2, 1], [0, 2], [17], [], [9], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 17, 0, 53, 18, 11, 8, 10, 7, 2, 1, 16, 2, 0, 5, 2, 1, 0, 1, 0], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in1):] in saveChr(mod(mod(i1,( i2 + int(0.0) )),divInt(abs(min(i0, i0)),divInt(mod(( i1 + ( len(s0[divInt(i2,( i1 + mod(min(i2, divInt(max(( i0 - len((\"\"R\"\" + in1.capitalize())[:i0]) ), i0),i2)),( ( max(int(7.0), len(\"\"9\"\")) + i2 ) * int(5.0) )) )):]) - divInt(divInt(int(7.0),int(6.0)),( int(1.0) - i2 )) ) ),int(7.0)),abs(i0)))))[i1:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 0, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0, 0, 2, 0], [0, 0], [1, 5, 0], [3, 3, 1, 3, 1], [1, 0, 1], [0, 1], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 1, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 2], [1, 1, 1], [0], [2, 0, 0, 2, 0, 2, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0, 1], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0, 0, 3], [17, 6], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 0, 0, 2, 1, 9, 1, 3, 5, 3, 2, 0, 17, 17, 13, 0, 53, 16, 10, 9, 7, 8, 3, 1, 18, 2, 0, 5, 3, 2, 0, 0, 1], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[len(in0[i1:][int(075.0):]):] not in s0[:abs(mod(i1,int(7.0)))]:{:\\nres0 = ( mod(int(2.0),min(i1, ( divInt(( int(1.0) + i1 ),( len(getCharFromString((\"\"R\"\" + saveChr(min(i0, ( max(( int(7.0) + i2 ), divInt(abs(int(7.0)),i1)) * int(9.0) )))), int(8.0))) - i1 )) + ( divInt(int(5.0),max(int(0.0), min(i2, divInt(( ( int(4.0) * int(8.0) ) - ( int(59.0) - i1 ) ),int(9.0))))) * mod(i1,i1) ) ))) != i2 or ( in1.endswith(\"\"G\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( s2 in \"\";\"\" or False )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 0, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 4, 1, 3], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 2, 1, 4, 3, 2, 4, 4, 1, 0], [2, 1, 3, 1, 1], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 12, 0, 49, 15, 10, 7, 8, 5, 2, 1, 17, 5, 1, 5, 2, 1, 0, 0, 1], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(in1):].capitalize()):]:{:\\nres0 = saveChr(mod(int(7.0),i0))[mod(i2,int(7.0)):( int(5.0) + abs(min(i2, divInt(divInt(int(7.0),i0),divInt(len(\"\"R\"\"[( i1 + ( min(divInt(max(i2, ( saveOrd((saveChr(i1)[:i2] + saveChr(int(6.0))).rstrip()) * int(1.0) )),i0), i0) * mod(int(7.0),max(int(7.0), len(\"\";\"\"))) ) ):i2]),divInt(( ( int(9.0) + int(8.0) ) * ( int(5.0) - i1 ) ),int(0.0)))))) )] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 0, 1, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 3, 4, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 3], [1, 0, 0], [2, 2, 0, 0, 1], [0, 3, 3], [17], [], [], [20, 29]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 1, 8, 0, 2, 0, 0, 5, 3, 1, 16, 4, 3, 4, 3, 1, 0, 0, 2], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len((in1.rstrip() + in1)):]:{:\\nres0 = saveChr(i0)[int(0.0):] not in (\"\"R\"\" + in0.lstrip()).lstrip()[int(7.0):len(\"\";^\"\")][i2:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(5.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [1, 2, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 1, 2, 1, 0, 2, 1, 2, 0], [0, 0, 1, 0, 1, 1, 1, 0], [0, 2, 4, 4, 3, 0, 4], [1, 1], [0], [2, 2, 0, 2, 2, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1, 2], [0, 3], [25], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 16, 0, 58, 18, 10, 10, 8, 4, 2, 1, 14, 2, 1, 6, 2, 1, 0, 0, 1], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[max(abs(int(0.0)), i1):][abs(i2):]:{:\\nres0 = in1[i0:int(7.0)][divInt(int(5.0),min(i0, ( ( divInt(int(7.0),i1) + ( len(\"\"Z\"\"[:mod(( min(max(( int(7.0) + i2 ), divInt(abs(int(1.0)),( int(7.0) - i0 ))), mod(i0,mod(int(7.0),max(( saveOrd(in1[i1:]) * ( ( mod(int(9.0),int(8.0)) - divInt(int(5.0),i0) ) + int(0.0) ) ), ( i1 * i0 ))))) - i1 ),i1)]) * int(4.0) ) ) + i1 ))):i1] != (\"\";\"\" + saveChr(int(8.0))).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 2, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 0, 2, 1], [0], [13], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s1[len(getCharFromString((\"\"N\"\" + in1.rstrip()), int(7.0))):].capitalize()[i0:mod(i2,int(7.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 5, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 3, 1, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [2, 0, 1, 1, 2, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 5, 4, 5, 3, 0, 4], [1, 1, 0, 1], [0], [2, 1, 0, 2, 2, 0, 2, 2, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 2, 1, 2], [0, 1, 3, 0], [17, 3], [10], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 49, 17, 7, 7, 10, 5, 4, 1, 15, 1, 0, 6, 4, 2, 1, 0, 1], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in \"\"R\"\"[:len(in2)]:{:\\nres0 = in1[len(in2[abs(divInt(i0,divInt(i2,int(7.0)))):][:min(int(7.0), ( i0 * divInt(( ( int(5.0) + i0 ) - divInt(( divInt(i1,( i2 - divInt(int(5.0),i1) )) * mod(len(\"\"k\"\"),int(2.0)) ),i2) ),int(5.0)) ))][int(7.0):]):i0][i0:] not in (\"\";D\"\" + getCharFromString(in0, divInt(int(5.0),min(int(9.0), max(i0, ( ( divInt(int(8.0),int(5.0)) * mod(int(0.0),i1) ) - int(4.0) ))))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 3, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 3, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 4, 0, 3, 4, 1, 4], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4, 5, 4, 4], [1, 1, 1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 0, 1, 4, 1, 1, 0, 0], [3, 0, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 0, 0], [17, 15, 22], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 6, 6, 8, 1, 32, 9, 10, 4, 5, 10, 3, 1, 18, 3, 2, 3, 3, 3, 0, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nloopBreak% = 0\\nwhile in1 not in in1:{:\\nres0 = ( len(in0[len(s0):]) != i0 or ( in1[i2:len(getCharFromString(in2, mod(i0,int(1.0))))].rstrip()[mod(int(7.0),min(i2, ( mod(( int(3.0) + i1 ),mod(saveOrd(\"\"R\"\"),( i2 + min(len(\"\"P\"\".lstrip()), ( int(7.0) * int(7.0) )) ))) - mod(saveOrd(\"\"W\"\"),int(1.0)) ))):].endswith(in1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = max(saveOrd(in1), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 5, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 3, 1, 2, 0, 2, 0, 3, 1, 0, 2, 2, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 0, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [2, 0, 1, 0, 2, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 0], [17, 6], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 6, 6, 12, 0, 34, 10, 6, 6, 4, 7, 2, 1, 15, 2, 0, 4, 2, 2, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[len(in0):] not in getCharFromString(s0[abs(divInt(i0,divInt(i2,int(7.0)))):], min(int(7.0), ( i0 * divInt(i0,len(\"\"R\"\")) )))[int(5.0):i1]:{:\\nres0 = ( ( ( ( i2 + ( i1 - divInt(int(5.0),i2) ) ) + ( min(int(2.0), i0) * i0 ) ) * int(5.0) ) != i0 or ( (\"\"G\"\" + saveChr(i1)).endswith(in1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 2, 2, 0, 0, 1, 2], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 2, 1, 3, 0, 0, 2, 3, 1, 3], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1], [0, 5, 4, 4, 3, 1, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0, 0], [6, 11], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 17, 17, 12, 0, 59, 19, 12, 9, 10, 7, 2, 0, 17, 3, 1, 4, 2, 2, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[mod(( int(0.0) + i0 ),mod(i1,int(7.0))):divInt(int(5.0),len(in1))]:{:\\nres0 = ( abs(( ( divInt(int(7.0),i2) + divInt(min(divInt(i0,mod(len(in0[( min(i1, ( max(int(6.0), i2) * int(1.0) )) - int(7.0) ):i2].capitalize()[i2:( int(7.0) + abs(int(9.0)) )]),max(i0, ( divInt(divInt(int(8.0),int(5.0)),( int(0.0) * i0 )) - int(4.0) )))), int(8.0)),( int(59.0) - len(saveChr(i1)) )) ) * i2 )) != mod(abs(int(9.0)),len((\"\"G\"\" + s1.rstrip()))) or ( \"\"L\"\".endswith(in1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 0, 2, 0, 1, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [1, 1], [0], [2, 3, 0, 4, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3], [1, 0], [2, 0, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 32, 9, 6, 5, 4, 6, 2, 1, 17, 4, 2, 4, 2, 1, 0, 0, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in1 + getCharFromString(in1, len(saveChr(len(in1[i0:i2].rstrip()[i2:mod(i0,int(0.0))])))))[( int(7.0) + i1 ):]:{:\\nres0 = (\"\"R\"\" + in0.lstrip())[i2:( divInt(( int(5.0) + i1 ),divInt(abs(( int(7.0) * min(len(\"\";\"\"), ( int(7.0) - i2 )) )),divInt(min(int(9.0), i0),int(7.0)))) + int(7.0) )] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 2, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 1, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 4, 4, 2, 4, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 3, 3], [17], [], [], [20, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 8, 8, 14, 1, 34, 7, 7, 2, 5, 3, 3, 0, 15, 4, 1, 4, 3, 1, 0, 0, 2], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in2[max(len(in2), i0):] not in getCharFromString(saveChr(int(07.0)), abs(mod(i2,int(5.0))))[i2:]:{:\\nres0 = ( i2 != max(i2, divInt(i2,int(7.0))) or ( \"\"R\"\"[int(2.0):i2].rstrip()[( saveOrd(\"\";\"\") + divInt(i2,divInt(i0,divInt(int(5.0),i0))) ):( min(int(5.0), i0) + max(int(5.0), i1) )].endswith((\"\";\"\" + in1.capitalize())) and True ) )\\n:}else:{:\\ni2 = i0\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [1, 3, 0, 0, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 2, 4, 4, 3, 0, 4], [0, 1], [0], [2, 0, 0, 2, 1, 4, 2, 4, 2, 2, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 1], [17], [12], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 8, 1, 1, 0, 1, 3, 2, 1, 8, 2, 0, 3, 2, 1, 1, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[int(0.0):]:{:\\nb1 = in1.endswith(\"\"Rm\"\"[:len(getCharFromString(saveChr(i1)[i2:i2], mod(i0,int(7.0))))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 3, 0, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [9], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 10, 0, 49, 16, 9, 7, 9, 7, 2, 1, 17, 3, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len((in1 + in1)):]:{:\\nres0 = in0 not in getCharFromString((\"\"R\"\" + s0.rstrip()), len(\"\"9\"\"))[mod(int(07.0),divInt(( i0 + int(5.0) ),divInt(int(7.0),abs(int(6.0))))):i2][divInt(divInt(int(1.0),i2),( min(( i0 + divInt(len(in1),( min(i1, mod(max(int(7.0), i2),int(7.0))) * int(9.0) )) ), i1) - i2 )):divInt(int(8.0),abs(int(5.0)))].capitalize()[max(i0, ( ( ( int(0.0) + int(4.0) ) * divInt(int(8.0),i0) ) - int(59.0) )):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 4, 5, 1, 1, 6, 6, 3, 2, 0, 6, 9, 6, 6, 6], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0, 2, 1, 2, 1, 0, 2, 1, 0, 2, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0], [0, 1, 1], [3, 3, 1, 0, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 1, 1, 2, 0, 2, 3, 2, 3, 2, 1, 3, 2, 2, 1, 1, 3, 0, 1, 2, 2, 0, 1, 2, 3, 0, 1, 2, 3, 2, 0, 1, 1, 3, 1, 1, 3, 1, 2, 2, 2, 3, 2, 0, 0, 2, 3, 0, 3, 3, 0, 2, 3, 3, 1, 0, 3, 1, 0, 3, 2, 0, 0, 0, 1, 1, 0, 1, 0, 2, 3, 0, 0, 2, 3, 2, 3, 1, 3, 3, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 2, 0, 3, 0, 1, 2, 1, 2, 2, 1, 3, 1, 1, 1, 4, 1, 4, 0, 1, 0, 2, 0, 0, 4, 3, 4, 3, 2, 1, 2], [0, 0, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [4, 5, 4, 4, 3, 0, 4, 3, 4, 2], [1, 1, 1], [0], [2, 4, 0, 2, 0, 0, 2, 3, 2, 0, 4, 3, 1, 4, 0, 1, 0, 4, 2, 2, 0, 2, 4, 1, 4, 4, 2, 0, 0], [3, 1, 3, 3, 0, 1, 1], [1, 5, 2], [2, 1, 0, 0, 1, 0, 2, 0], [0, 2, 1], [17], [19], [7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 33, 33, 30, 0, 133, 39, 32, 19, 20, 10, 3, 1, 29, 7, 3, 8, 3, 1, 1, 1, 0], "tree_depth": 68, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2.rstrip()[max(len(in1[:int(0.0)]), i0):]:{:\\nres0 = in1 != (in0[abs(min(i2, int(7.0))):divInt(int(5.0),len(saveChr(i0)))] + (\"\"R\"\" + s0.strip(\"\"7\"\")))[( ( divInt(int(7.0),i0) + ( min(mod(( max(abs(( int(7.0) + i1 )), divInt(max(int(1.0), ( int(7.0) * i2 )),divInt(i0,mod(int(7.0),abs(( abs(i0) + ( ( divInt(int(9.0),int(8.0)) * mod(int(5.0),i1) ) + int(0.0) ) )))))) + ( i0 + int(4.0) ) ),int(8.0)), ( i2 - divInt(max(divInt(len(in1),divInt(int(59.0),max(divInt(( int(9.0) - int(2.0) ),max(i1, int(2.0))), mod(mod(i2,int(4.0)),divInt(max(i1, int(5.0)),mod(saveOrd(in0[( i0 - int(1.0) ):int(1.0)][:max(int(6.0), int(6.0))].strip()),saveOrd(getCharFromString(\"\"t\"\", int(3.0))[( divInt(( min(divInt(i2,i1), divInt(max(i0, min(abs(i2), ( min(min(int(2.0), i1), saveOrd(saveChr(int(0.0)))) + i0 ))),len(saveChr(( i0 + i1 ))))) - i1 ),int(6.0)) * int(9.0) ):]))))))), i2),int(6.0)) )) - i1 ) ) - mod(saveOrd(in1[i1:i0]),( len(s2) - ( abs(int(6.0)) - max(abs(int(6.0)), i0) ) )) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [0, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1, 2, 0, 1], [0, 1, 1], [1, 2, 2, 0, 0, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 12], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 15, 1, 50, 15, 8, 7, 8, 6, 2, 1, 15, 3, 1, 4, 2, 2, 0, 0, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nloopBreak% = 0\\nwhile in1 not in in1[divInt(divInt(i1,i2),max(i2, int(7.0))):]:{:\\nres0 = ( ( int(5.0) + len(\"\"R\"\") ) != i0 and ( in0[i1:divInt(divInt(int(7.0),i2),divInt(abs(( i1 + ( min(divInt(len(saveChr(i2)),( min(int(6.0), i0) * int(1.0) )), int(7.0)) - i0 ) )),i2))].capitalize()[mod(int(7.0),max(int(9.0), abs(i1))):divInt(( ( int(8.0) + int(5.0) ) * ( int(0.0) - i2 ) ),int(4.0))].endswith((\"\"M\"\" + s0.rstrip())) or True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 3, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 3, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 2, 1, 3, 1, 3, 1, 3, 1, 1, 3, 1, 3], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 4, 1, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 5, 2, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 1], [17], [18, 13], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 18, 18, 11, 0, 62, 18, 16, 9, 9, 7, 3, 1, 17, 3, 1, 4, 3, 1, 2, 0, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(\"\"R\"\"[abs(i0):min(mod(i2,int(0.0)), ( int(0.0) + ( i2 + divInt(( divInt(int(5.0),i0) * ( len(saveChr(( i1 - min(max(divInt(int(2.0),i2), ( abs(int(7.0)) + i1 )), int(1.0)) ))) * max(i2, i0) ) ),divInt(int(7.0),max(divInt(min(i0, ( ( ( int(7.0) - int(9.0) ) - mod(int(8.0),i2) ) * int(5.0) )),divInt(divInt(int(0.0),max(int(4.0), saveOrd((\"\"s\"\" + s0.rstrip())))),int(8.0))), max(int(59.0), int(9.0))))) ) ))], saveOrd(\"\"n\"\"))[int(2.0):saveOrd(in1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 1, 3, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 4, 1, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 2], [17], [], [0, 3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 3, 3, 1, 8, 2, 0, 2, 3, 1, 0, 2, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = getCharFromString(\"\"R\"\", len(\"\"03\"\"))[i0:] not in saveChr(int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1, 1], [0], [2, 0, 0, 2, 4, 2, 2, 4, 2, 3, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 0, 12, 1, 3, 0, 1, 5, 2, 1, 17, 4, 1, 5, 2, 1, 0, 1, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(saveChr(int(0.0))[i0:int(7.0)][len(((\"\"R\"\" + in1.capitalize()).rstrip() + \"\"3\"\")[:i2]):i2], int(5.0))[mod(int(2.0),abs(i0)):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 2, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 0, 3, 2, 2, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0, 2, 0], [17, 7], [], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 5, 0, 16, 4, 3, 1, 3, 5, 3, 1, 15, 1, 0, 5, 3, 2, 0, 1, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[mod(saveOrd(s2),i0):]:{:\\nres0 = in1[int(07.0):] != (\"\"R\"\"[:len(\"\"3\"\")][:divInt(i2,int(5.0))][( i2 + abs(i2) ):divInt(i2,int(7.0))] + (\"\"H\"\" + getCharFromString(in0, int(2.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 0, 1], [2, 2, 2, 0, 0], [0, 2, 1], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0, 2], [0, 0], [1, 5, 4], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2, 2, 0, 0], [1, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 4, 4], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 1, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 2, 1], [0, 0, 2], [17, 1], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 3, 2, 1, 2, 0, 0, 1, 1, 7, 1, 3, 3, 2, 1, 1, 14, 14, 13, 1, 53, 15, 12, 10, 6, 9, 3, 1, 17, 2, 0, 3, 3, 2, 0, 1, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nloopBreak% = 0\\nwhile in1[len(in0):] not in \"\"R\"\":{:\\nif ( i1 != abs(min(mod(i1,int(0.0)), mod(int(7.0),len(s0)))) or ( in1[i1:( divInt(( int(5.0) + i1 ),( min(max(i0, ( abs(( int(7.0) + i2 )) * divInt(max(int(2.0), i1),int(1.0)) )), int(7.0)) - i1 )) + ( divInt(int(7.0),len(getCharFromString((\"\"B\"\" + saveChr(int(9.0))), max(i2, divInt(( ( int(8.0) * int(5.0) ) - ( int(0.0) - i2 ) ),int(4.0)))))) * int(8.0) ) )].endswith(in1) and True ) ):{:\\nres0 = \"\"6\"\".startswith(in1)\\ni2 += min(i0, i0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [2], [17], [], [2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 1, 1, 8, 0, 0, 3, 1, 0, 0, 1, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1):]:{:\\nres0 = in1[len(\"\"2\"\"):] not in in2[i2:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [6, 7, 9, 7, 6, 1, 7, 7, 9, 5, 5, 0, 4, 8, 5, 9, 9, 2, 2, 8, 7, 0, 6, 3, 8, 0, 9, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 1, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 2, 1, 3, 2, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 3, 2, 2, 2, 2, 1, 3, 2, 1, 2, 2, 2, 2, 3, 2, 1, 1, 3, 2, 0, 0, 3, 3, 1, 2, 2, 0, 3, 1, 0, 2, 2, 0, 1, 2, 0, 0, 1, 3, 2, 3, 0, 1, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 3, 3, 3, 0, 2, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0], [3, 3, 2, 0, 3, 0, 3, 2, 1, 2, 3, 0, 0, 3, 1, 4, 4, 1, 2, 3, 3, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 2, 2, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [0, 5, 4, 4, 3, 1, 4, 5], [1, 1, 1, 1, 0, 1, 1, 1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 0, 4, 1, 2, 4, 2, 0, 1, 2, 4, 4, 1, 1], [2, 3, 3, 0, 3, 3, 1], [1, 0, 5, 2], [2, 2, 0, 0, 1, 2, 2], [0, 1, 1, 3, 0, 1, 0, 1], [17, 16, 25], [5, 18, 10, 24], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 28, 28, 24, 1, 108, 37, 22, 18, 19, 8, 8, 0, 30, 7, 4, 7, 8, 3, 4, 0, 1], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif \"\"R\"\"[len(s0):] not in in2[len(in1):]:{:\\nres0 = ( mod(int(6.0),abs(divInt(i0,int(7.0)))) != divInt(int(9.0),min(divInt(i2,divInt(divInt(int(7.0),i2),( len(in1[( i0 + mod(min(( len((\"\"f\"\" + in0.lstrip()).rstrip()) + i1 ), divInt(abs(int(6.0)),i2)),int(1.0)) ):int(7.0)].capitalize()[i1:i2]) * divInt(int(7.0),max(int(9.0), abs(i0))) ))), ( ( ( int(5.0) - int(5.0) ) + mod(int(0.0),len(\"\"s\"\")) ) * mod(( ( ( int(4.0) - min(( int(8.0) - ( divInt(( mod(min(mod(int(59.0),int(9.0)), len(s1)),( i0 * i0 )) + max(saveOrd(in1), int(2.0)) ),mod(mod(i1,saveOrd(getCharFromString(\"\";\"\", int(2.0)))),i1)) + divInt(( i0 - int(8.0) ),divInt(i1,i0)) ) ), int(7.0)) ) * max(( abs(i0) * int(0.0) ), i2) ) + int(6.0) ),int(3.0)) ))) or ( in2[int(8.0):].strip(\"\"Qk\"\")[:( divInt(( i0 - i1 ),i1) - len(saveChr(len(\"\"Z\"\")).strip()[max(i0, ( i0 - int(0.0) )):]) )].endswith(\"\"y\"\") and True ) )\\n:}else:{:\\ni1 = int(92.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2, 1], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [4, 3, 2, 0, 3, 1, 1, 3, 1, 3, 4], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1, 1, 0, 1], [0], [2, 0, 0, 2, 0, 1, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0, 4], [0, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 1, 2, 2, 2, 3], [17], [22], [5, 4, 6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 4, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 16, 16, 11, 2, 50, 15, 11, 7, 9, 6, 6, 0, 18, 4, 1, 3, 6, 1, 1, 3, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[saveOrd(in2):] not in in1[len(\"\"R\"\"):]:{:\\nres0 = ( abs(i0) != min(mod(int(0.0),int(7.0)), ( int(5.0) + len(\"\"w\"\") )) or ( getCharFromString(\"\"5\"\"[i1:divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len(saveChr(divInt(int(1.0),i1))), divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2)) )),i1)], ( int(8.0) - len((\"\"4\"\" + in1.rstrip())) )).endswith(\"\"6;\"\") and True ) )\\ni2 = mod(saveOrd(in0),i0)\\n:}else:{:\\ns0 = saveChr(( divInt(( int(5.0) + int(0.0) ),mod(int(4.0),i0)) * int(8.0) ))\\ni1 -= int(59.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 6, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 1, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 2, 2, 3, 3, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4, 4], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 2, 0, 2, 0, 4, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 1, 2, 1], [0, 1], [17], [3], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 18, 18, 9, 0, 55, 18, 11, 10, 8, 7, 2, 1, 16, 3, 1, 4, 2, 1, 1, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( int(8.0) != mod(int(7.0),len(in1[:mod(i1,int(6.0))][( int(7.0) + abs(i2) ):divInt(( ( int(2.0) + i1 ) * ( min(len(in0[i1:]), ( min(divInt(int(1.0),i0), ( max(int(7.0), i2) + int(7.0) )) + int(9.0) )) * i1 ) ),divInt(divInt(int(8.0),abs(int(5.0))),max(i1, ( ( ( int(0.0) - int(4.0) ) - mod(int(8.0),i2) ) * int(59.0) ))))])) or True ) and getCharFromString(s0, int(9.0)) not in saveChr(divInt(( saveOrd((\"\"R\"\" + in1.rstrip())) + saveOrd(\"\"d\"\") ),int(2.0))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 2, 1, 2, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 1, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 1, 1, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 1], [5], [24], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 8, 8, 10, 0, 33, 9, 7, 3, 6, 4, 2, 0, 10, 1, 0, 3, 2, 1, 1, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2[saveOrd(in2):] not in in1[:len(in1)]:{:\\nres0 = ( i0 != int(07.0) or ( saveChr(max(mod(divInt(int(5.0),( i2 + min(i2, divInt(i2,int(7.0))) )),int(6.0)), i2))[divInt(saveOrd(\"\"F\"\"),divInt(i2,( i2 + ( int(1.0) * i2 ) ))):divInt(min(int(7.0), i0),max(int(7.0), i0))].endswith(\"\"y\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 3, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [1, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 1, 2, 0, 2, 3, 2, 0, 1, 3, 3, 1, 0, 1, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 2, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 1, 2, 0, 4], [1, 1], [0], [2, 0, 0, 2, 3, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 0, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 0, 12, 2, 2, 0, 2, 6, 2, 1, 17, 4, 1, 4, 2, 1, 0, 0, 1], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[int(8.0):]:{:\\nb0 = in1 not in (s1 + getCharFromString(getCharFromString((\"\"R\"\" + s2.capitalize()).rstrip(), i0)[i2:int(4.0)], len(\"\";\"\"))[mod(i2,int(5.0)):mod(int(7.0),saveOrd(s0))])[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0], [0, 1, 1], [3, 3, 2, 2, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [2, 5, 4, 1, 3, 0, 4], [1, 1], [0], [2, 0, 0, 0, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [18], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 14, 14, 12, 0, 51, 16, 9, 7, 9, 7, 2, 1, 16, 3, 1, 4, 2, 1, 1, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile s1 not in in0[len(s0[mod(mod(i0,( i2 + int(7.0) )),divInt(int(7.0),abs(i2))):i0].capitalize()[divInt(divInt(int(5.0),i1),( min(( i2 + divInt(len(saveChr(( min(i1, mod(max(int(7.0), i2),int(6.0))) * int(1.0) ))),i0) ), i0) - divInt(int(7.0),abs(int(7.0))) )):max(i2, ( ( ( int(9.0) + int(8.0) ) * divInt(int(5.0),i0) ) - int(0.0) ))]):]:{:\\nres0 = ( int(4.0) != int(8.0) or ( (\"\"R\"\" + in1.rstrip()).endswith(\"\"s\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 8, 4, 8, 3, 9, 9, 2, 2], [0, 2, 2, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 3, 3, 2, 2, 1, 1, 1, 0, 3, 0, 2, 2, 2, 3, 0, 2, 2, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1, 3, 1, 1, 1, 1, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 3, 3, 0, 3, 0, 1, 0, 1, 0, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 2, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 3], [17], [], [9], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 18, 18, 13, 1, 54, 15, 10, 9, 6, 5, 3, 1, 14, 2, 0, 5, 3, 1, 0, 1, 1], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(s0[len(in1):min(mod(divInt(int(0.0),int(7.0)),int(5.0)), i0)][len(\"\"R\"\"[i2:( divInt(( min(i2, ( ( divInt(i0,( i1 + ( int(7.0) + i0 ) )) * divInt(max(int(2.0), i1),int(5.0)) ) - int(7.0) )) + i1 ),i0) * ( int(5.0) - min(int(9.0), max(i0, ( ( i0 - int(8.0) ) * int(5.0) ))) ) )]):]), divInt(int(8.0),i1)):]:{:\\nres0 = in0[:int(4.0)] not in getCharFromString((\"\"9;\"\" + saveChr(min(int(8.0), int(39.0)))), int(9.0))\\ni1 = int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 2, 2, 0, 0, 0, 1, 2, 3, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1, 4], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4, 3], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 1, 1, 1], [0, 0, 0], [17, 10, 1], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 7, 7, 11, 0, 39, 11, 10, 4, 7, 8, 3, 1, 16, 3, 1, 3, 3, 3, 0, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nloopBreak% = 0\\nwhile in1[:divInt(mod(i0,i0),i2)] not in s0:{:\\nres0 = ( int(2.0) != ( abs(min(i0, i1)) * divInt(divInt(int(7.0),i2),divInt(len(\"\"R\"\".capitalize()[:( i1 + ( min(divInt(max(i2, ( abs(int(5.0)) * i0 )),int(7.0)), int(6.0)) - i0 ) )]),i0)) ) or ( s0.endswith(saveChr(mod(int(1.0),max(int(7.0), saveOrd((\"\"K\"\" + in1.rstrip())))))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = \"\"B\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 2, 0, 2, 0, 1, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 2, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 3, 0, 3, 4, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 0, 0, 0, 1], [0], [2, 0, 4, 2, 4, 0, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 2, 3, 1, 2, 0, 0, 2], [17, 22, 16], [2], [3, 6, 8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 9, 0, 32, 11, 6, 5, 6, 6, 8, 1, 16, 4, 1, 4, 8, 3, 1, 3, 1], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(saveChr(mod(( ( i0 + mod(i2,int(0.0)) ) + saveOrd(in1) ),int(7.0)))[i1:].capitalize()):]:{:\\nres0 = in1[i0:i1].rstrip()[( divInt(int(5.0),i2) * divInt(( mod(i1,len(in0)) - min(( len((\"\"R\"\" + saveChr(i2))) + divInt(saveOrd(s0),int(7.0)) ), i1) ),int(6.0)) ):int(1.0)] not in \"\"3;c6WQ8\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 2, 2, 1, 0, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [1, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 2, 0], [17, 16], [], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 14, 14, 12, 0, 51, 16, 9, 7, 9, 6, 3, 1, 16, 3, 1, 4, 3, 2, 0, 1, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nloopBreak% = 0\\nwhile in2 not in in1[:len(in1)][len(in0[mod(int(0.0),i0):mod(i2,( divInt(int(7.0),i2) * i0 ))].capitalize()[abs(divInt(divInt(int(5.0),i1),( min(( i2 + divInt(len(saveChr(( min(i1, mod(max(int(7.0), i2),int(6.0))) * int(1.0) ))),i0) ), i0) - divInt(int(7.0),abs(int(7.0))) ))):max(i2, ( ( ( int(9.0) + int(8.0) ) * mod(int(5.0),i2) ) - int(0.0) ))]):]:{:\\nres0 = ( int(4.0) != int(8.0) or ( (\"\"3\"\" + s0.rstrip()).endswith(\"\"Q\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 1], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1, 0], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1, 1, 1], [0, 1, 1], [0, 2, 2, 3, 0, 2, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 1, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 3], [17], [2], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 2, 1, 6, 1, 1, 4, 2, 1, 0, 6, 6, 14, 0, 38, 10, 8, 6, 4, 5, 3, 1, 16, 3, 1, 5, 3, 1, 1, 0, 1], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[i0:]:{:\\nloopBreak% = 0\\nwhile ( ( ( ( len(s1[i0:( i1 + i0 )][saveOrd(in1):]) - int(0.0) ) * i1 ) != i2 or True ) and getCharFromString(in1[:i1], mod(mod(int(7.0),i2),divInt(min(( i1 - min(len(saveChr(( saveOrd((\"\"c\"\" + in0.rstrip())) + i0 ))), divInt(max(int(5.0), i0),int(7.0))) ), int(6.0)),i1)))[i1:( i1 * abs(int(1.0)) )] not in \"\";\"\" ):{:\\nres0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 4, 0, 1, 0, 1], [2, 0, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [2], [17], [], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 5, 0, 15, 3, 4, 1, 2, 5, 1, 1, 9, 1, 0, 3, 1, 0, 0, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[saveOrd(in1):len(s0[i0:])]:{:\\nb1 = in0.startswith(getCharFromString(\"\"3\"\", int(1.0))[abs(mod(i2,int(7.0))):divInt(i2,min(i2, ( i2 * int(5.0) )))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 7, 4, 7, 0, 1, 3, 7, 9, 6, 5, 0, 9, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 0, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 3, 1, 2, 3, 2, 0, 2, 2, 2, 1, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0], [3, 1, 0, 0, 2, 0, 1, 2, 1, 2], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [23], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 8, 0, 53, 18, 10, 10, 8, 4, 1, 1, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(\"\"X\"\", max(i0, mod(min(( i0 + int(9.0) ), min(int(7.0), abs(i2))),( ( divInt(min(int(4.0), divInt(max(( i0 + ( divInt(divInt(int(7.0),int(0.0)),( abs(int(1.0)) + i1 )) - int(3.0) ) ), int(7.0)),i0)),i1) + divInt(int(9.0),max(int(6.0), abs(i2))) ) * ( ( ( int(5.0) - int(0.0) ) - ( int(9.0) * divInt(int(8.0),divInt(int(5.0),int(9.0))) ) ) + int(9.0) ) )))) not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 8, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1, 1, 1, 3, 1, 0, 2, 1, 3, 1, 3], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2, 0, 4], [0, 1, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0], [1, 5, 4, 5, 3, 3, 4], [1, 1], [0], [2, 2, 0, 2, 0, 4, 2, 4, 1, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2, 1], [1, 0], [2, 0, 0, 0, 1], [0, 0], [17, 12], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 18, 18, 13, 0, 59, 17, 12, 7, 10, 4, 2, 1, 15, 5, 1, 4, 2, 2, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1[( i0 + int(8.0) ):max(mod(i2,int(8.0)), ( int(5.0) - abs(i2) ))]):mod(( divInt(( i0 * ( min(divInt(i1,( len(getCharFromString(saveChr(min(int(7.0), i2))[divInt(max(int(2.0), i1),int(1.0)):int(0.0)], i2)) - i0 )), divInt(int(7.0),abs(( max(i0, mod(i2,divInt(int(1.0),int(8.0)))) + mod(int(5.0),i1) )))) + int(0.0) ) ),int(4.0)) - int(8.0) ),abs(int(59.0)))][i0:]:{:\\nb2 = \"\"R\"\".endswith((\"\"M\"\" + saveChr(divInt(int(9.0),min(int(2.0), saveOrd(in2))))).capitalize().rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 3, 0, 2, 0, 2, 2, 1, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 0, 1], [1, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 0], [17, 12], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 8, 0, 25, 8, 5, 5, 3, 6, 2, 1, 14, 2, 0, 4, 2, 2, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in2):] not in getCharFromString(s0[saveOrd(\"\"R\"\"):], mod(i0,( i2 - int(7.0) )))[min(i2, ( i0 + divInt(( int(7.0) - int(5.0) ),i1) )):divInt(len((\"\"M\"\" + saveChr(( i2 - ( i1 + i2 ) )))),int(2.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0, 1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 0, 3, 1, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 1, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 1, 0, 4, 2, 4, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 0, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 3], [17], [], [], [20, 8]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 0, 0, 1, 2, 7, 2, 2, 3, 2, 1, 1, 9, 9, 13, 1, 34, 7, 7, 2, 5, 3, 3, 0, 11, 2, 0, 3, 3, 1, 0, 0, 2], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in2[max(len(in2), i0):] not in \"\"R\"\":{:\\nloopBreak% = 0\\nwhile ( int(07.0) != abs(mod(i0,int(5.0))) or ( s1.endswith(getCharFromString(getCharFromString(\"\";\"\"[i2:i2], min(int(7.0), divInt(i2,int(2.0))))[int(5.0):], i2)) and True ) ):{:\\nres0 = ( saveOrd(\"\"%\"\") + divInt(i2,divInt(i2,divInt(int(5.0),i0))) ) \\l ( min(int(5.0), i0) + max(int(9.0), i0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni1 = i1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 5, 4, 4], [1, 0, 0, 1], [0], [2, 0, 3, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 1, 1], [17], [22, 7, 15], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 11, 1, 50, 15, 10, 9, 6, 8, 4, 1, 16, 2, 0, 4, 4, 1, 3, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len((in2[len(in1):] + in0[i0:int(07.0)])):]:{:\\nres0 = in2[abs(mod(i1,int(5.0))):mod(int(7.0),min(i1, ( divInt(( int(2.0) + i1 ),( len(getCharFromString((\"\"R\"\" + saveChr(min(i0, ( max(( int(1.0) + i2 ), divInt(abs(int(7.0)),i1)) * int(7.0) )))), int(9.0))) - i1 )) + ( divInt(int(8.0),max(int(5.0), abs(i2))) * divInt(( ( int(0.0) - int(4.0) ) - ( int(8.0) * i0 ) ),int(59.0)) ) )))] == in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(9.0)\\nin1 = \"\"whp\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 2, 3, 0, 2, 0, 1, 2, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 5, 5, 4, 3, 0, 4], [1, 0, 0, 0, 0, 1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 1, 0, 1, 2], [17, 20], [15, 19], [5, 8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 12, 0, 51, 16, 11, 7, 9, 6, 6, 1, 16, 4, 2, 4, 6, 2, 2, 2, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize()[len(in2[len(in1):]):]:{:\\nres0 = saveChr(mod(abs(i0),mod(i2,int(0.0))))[( divInt(min(i2, i0),divInt(divInt(int(7.0),i1),( len(in0[( i2 + divInt(min(( max(i1, mod(abs(int(5.0)),i2)) + int(7.0) ), int(6.0)),i0) ):i0]) * divInt(int(1.0),max(int(7.0), max(i1, ( ( ( int(7.0) - int(9.0) ) + divInt(int(8.0),i0) ) * int(5.0) )))) ))) - len((\"\"R\"\" + s0.lstrip()).rstrip()) ):int(0.0)] not in \"\"5pUt8\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 3, 2, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 0, 0, 4], [1, 1], [0], [2, 0, 1, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0, 1], [17], [2], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 2, 1, 7, 0, 0, 2, 2, 1, 1, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[saveOrd(\"\"R\"\"):]:{:\\nres0 = in1[:len(in1)] not in \"\"c\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 6, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 2, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 5, 4], [1, 1], [0], [2, 0, 1, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 0], [0, 0], [17, 22], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 10, 10, 9, 0, 34, 10, 5, 7, 3, 5, 2, 1, 14, 2, 0, 5, 2, 2, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[saveOrd(\"\"R\"\"):]:{:\\nres0 = ( ( len(in1[int(7.0):]) != int(7.0) or True ) and in1 not in in0[mod(divInt(i0,int(5.0)),abs(int(2.0))):min(i2, ( divInt(( int(2.0) + i2 ),( int(5.0) + ( i0 - ( i1 - ( int(7.0) + i2 ) ) ) )) * ( len(getCharFromString((\"\"W\"\" + saveChr(int(5.0))), i1)) - int(9.0) ) ))][int(8.0):i2][i0:] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 1, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 1], [17], [3], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 7, 1, 3, 0, 1, 3, 2, 1, 6, 0, 0, 2, 2, 1, 1, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1[:min(mod(int(0.0),i0), abs(i2))] not in \"\"d\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [1, 1, 1], [3, 0, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 1, 3, 4], [1, 0, 1], [0], [2, 0, 0, 4, 0, 3, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 2], [7], [2], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 5, 0, 2, 1, 0, 7, 3, 1, 15, 4, 2, 2, 3, 1, 1, 1, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(s2, i0) not in (\"\"H\"\" + saveChr(i2))\\ni2 += int(0.0)\\ns1 = in0[len((\"\"c6\"\" + in1.lstrip()).rstrip()):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 0, 1, 1], [0], [2, 2, 1, 2, 1, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 0, 3, 2], [17, 5], [], [5], [20, 5]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 11, 0, 40, 10, 10, 4, 6, 3, 5, 1, 15, 3, 1, 5, 5, 2, 0, 1, 2], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[max(len(\"\";\"\"[mod(int(0.0),i1):abs(i2)]), int(7.0)):][divInt(int(5.0),min(i2, i0)):]:{:\\nres0 = \"\"F\"\"\" not in in2[:( divInt(int(7.0),i1) + divInt(len(saveChr(divInt(i2,( min(( max(i1, divInt(abs(int(6.0)),i2)) + int(1.0) ), int(7.0)) * i0 )))),i0) )].capitalize()[( int(7.0) - max(int(9.0), saveOrd((\"\"5\"\" + in1.rstrip()))) ):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [1, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1, 0, 0, 0, 0, 1], [0], [1, 1, 0, 3, 0, 4, 4, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 3, 3], [1, 0], [1, 2, 0, 0, 1], [0, 3, 3, 2, 0, 1], [22, 4], [4], [4], [20, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 6, 1, 2, 0, 0, 0, 6, 2, 1, 1, 2], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"W\"\":{:\\ni0 = len(\"\";#4Ee\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 1, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 1, 0, 1, 0, 1, 0, 0, 2, 2, 0], [0, 1, 1], [2, 2, 0, 0, 3, 2, 0, 2, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 2, 1, 0, 3, 2, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 1, 0, 4], [1, 1], [0], [2, 4, 2, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [24], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 2, 5, 2, 1, 2, 2, 0, 0, 13, 13, 16, 0, 59, 19, 11, 11, 8, 7, 2, 1, 17, 4, 2, 4, 2, 1, 1, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[( ( i1 + i2 ) + len(in1) ):].rstrip()[mod(i0,( i0 * int(0.0) )):]:{:\\nres0 = ( ( len(in1) != int(7.0) or ( divInt(( int(5.0) - i1 ),( abs(divInt(i2,min(len(saveChr(( min(i1, divInt(i0,int(7.0))) + i1 ))[int(7.0):i0]), i1))) * i0 )) - divInt(int(1.0),max(( abs(i0) - ( ( divInt(int(7.0),int(7.0)) * mod(int(9.0),i2) ) + int(8.0) ) ), max(len(s1[( int(5.0) + i2 ):len((\"\"R\"\" + s0.capitalize()).lstrip())]), divInt(int(0.0),i0)))) ) \\l int(4.0) ) and \"\"y\"\".startswith(in1) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}]