[{"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i2,int(7.0))))[mod(int(5.0),min(i2, ( divInt(( int(7.0) + i0 ),divInt(len(saveChr(( i1 + ( min(divInt(int(2.0),i2), ( max(int(1.0), i1) * int(7.0) )) - int(7.0) ) ))),i2)) + i0 ))):divInt(int(9.0),abs(int(8.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 38, 11, 8, 5, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(i0, ( divInt(( int(5.0) + i1 ),divInt(len(saveChr(( i2 * min(max(( int(7.0) - i1 ), divInt(abs(int(7.0)),i2)), int(1.0)) ))),int(7.0))) + i0 )) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 9, 8, 5, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i1:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 6, 3, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 2, 1, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [0, 3, 3, 2], [1, 0], [2, 2, 2, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 0, 2, 0, 0, 7, 0, 1, 15, 4, 2, 4, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString((s0.capitalize() + in1).lstrip()[:i0].rstrip()[i2:], int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [2, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 5, 0, 18, 5, 3, 2, 3, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s1[i0:int(5.0)], mod(divInt(i2,int(7.0)),( int(5.0) + len(saveChr(i2)) )))[i0:divInt(( int(8.0) * i1 ),int(2.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 1, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 3, 3, 3, 1, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 1, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 8, 1, 5, 1, 0, 6, 1, 1, 10, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\".capitalize()[( int(0.0) + abs(abs(len(in0))) ):int(6.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 0, 2, 1, 1, 3, 3, 0, 0, 2, 2, 1, 2, 2, 3, 2, 0, 2, 3, 3, 2, 0, 2, 3, 3, 0, 3, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 2, 1, 1, 0, 1, 4, 2], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 4, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 1, 12, 2, 5, 1, 1, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in0[( int(0.0) + abs(i0) ):mod(int(7.0),int(5.0))]\\ni0 = abs(abs(i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 1}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 0, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [2, 1, 0, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 4, 0, 3, 0, 0, 6, 1, 1, 9, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(\"\"R\"\"[:int(0.0)])\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 1, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 10, 3, 2, 1, 2, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[mod(int(0.0),mod(( int(7.0) + i1 ),i2)):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 8, 2, 3, 0, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1[len(in0):]) != mod(i0,divInt(i0,int(8.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 1, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 1, 1, 8, 0, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != \"\";\"\"[:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 6, 5, 2, 8, 1, 2, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 1, 1, 0, 3, 0, 0, 0, 2, 3, 3, 0, 2, 0, 2, 1, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 4, 1, 0, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 11, 2, 3, 0, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in1[divInt(int(5.0),int(6.0)):mod(int(5.0),int(2.0))].capitalize()[i1:abs(i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 2, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 3, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [3], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 7, 0, 1, 15, 3, 2, 5, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != (s0.lstrip() + in1).rstrip().capitalize()[i0:int(6.0)][:i2][mod(i1,int(1.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 13, 4, 3, 1, 3, 5, 0, 1, 9, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(mod(int(0.0),int(6.0))).capitalize()[mod(abs(int(5.0)),( mod(i1,i0) + i1 )):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 2, 1, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 3, 1, 2, 2, 3, 1, 2, 2, 0, 1, 0, 1, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 1, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 2, 0, 16, 4, 5, 0, 4, 6, 1, 1, 12, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in0[abs(int(0.0)):divInt(mod(len(saveChr(int(6.0))),mod(divInt(i1,int(5.0)),i0)),int(2.0))].capitalize()[len(\"\"R\"\"):int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 3, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 1, 2, 0, 0, 2, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 12, 3, 2, 0, 3, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in0[divInt(int(0.0),int(6.0)):mod(i1,int(3.0))].capitalize()[int(2.0):mod(i0,i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 2, 2, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [3], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != \"\";\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 3, 2, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 1, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [3], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 8, 1, 2, 0, 1, 5, 1, 1, 11, 1, 0, 5, 1, 0, 0, 0, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != \"\";\"\".capitalize()[i0:int(6.0)][:int(1.0)][mod(i2,int(1.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 1, 0, 11, 2, 3, 1, 1, 7, 0, 1, 15, 3, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != saveChr(i0).capitalize()[int(6.0):int(1.0)][:( int(9.0) + int(2.0) )][mod(int(5.0),saveOrd((s0.rstrip() + in1))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [20], [], [], [20]], "fitness": 0, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 3, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != \"\"U\"\"\\ni0 = abs(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 1, 7, 9, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 1, 0, 3, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 31, 8, 7, 5, 3, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i2,int(7.0))))[mod(i2,min(i0, int(5.0))):( divInt(int(7.0),i2) + ( len(saveChr(( i2 + ( min(int(2.0), int(1.0)) * i1 ) ))) - max(i2, ( i0 + int(1.0) )) ) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 2, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [5, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 5, 0, 18, 6, 3, 2, 4, 5, 0, 1, 9, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(i0)[mod(divInt(( i2 + int(0.0) ),divInt(int(7.0),len(saveChr(i2)))),i0):( mod(int(5.0),i1) * int(8.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 6, 5, 2, 8, 1, 2, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 1, 1, 0, 3, 2, 0, 0, 2, 3, 3, 0, 2, 0, 2, 1, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 4, 1, 0, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 5, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in2[divInt(int(3.0),int(6.0)):mod(int(5.0),int(2.0))].capitalize()[i1:abs(( i0 + i1 ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 1, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 6, 1, 3, 0, 1, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(abs(mod(i0,int(8.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 2, 1, 1, 6, 7, 9, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 3, 2, 1, 0, 1, 3, 0, 2, 1, 2, 1, 2, 2, 3, 2, 2, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 1, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 1, 4, 0, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 5, 2], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 0, 3, 1, 0, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [2], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 1, 5, 0, 1, 7, 0, 1, 11, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[:i0][int(5.0):abs(min(mod(int(7.0),i2), int(5.0)))][len(in2):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 0, 13, 3, 2, 2, 1, 6, 0, 1, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in1[:( int(0.0) + i0 )][mod(i2,int(1.0)):int(5.0)][int(7.0):( i2 + i2 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 1, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 11, 2, 3, 1, 1, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in1[( int(0.0) + i0 ):mod(i2,abs(int(6.0)))].rstrip()[int(5.0):int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 1, 5, 6, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 0, 2, 3, 1, 1, 0, 0, 3, 0, 3, 1, 3, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 1, 0, 2, 4, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 2, 0, 4, 0, 2, 4, 0, 1, 3, 4, 4, 0, 4, 0], [2, 2, 1, 2, 1], [4, 0], [2, 2, 0, 0, 2], [0], [21], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 6, 1, 2, 1, 0, 6, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0.capitalize()):] != s2.capitalize()[( int(6.0) + i1 ):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 1, 0, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[( int(0.0) + i1 ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 2, 1, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 9, 2, 2, 1, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in1[( int(0.0) + i0 ):mod(i2,int(8.0))].capitalize()[int(2.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 2, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 13, 4, 3, 1, 3, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(i0)[mod(divInt(( i2 + int(0.0) ),divInt(int(7.0),len(s0))),i2):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 3, 0, 0, 5, 1, 1, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != \"\"R\"\"[:abs(int(0.0))].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 8, 2, 2, 0, 2, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[mod(int(0.0),int(7.0)):divInt(int(5.0),i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 6, 5, 2, 8, 1, 2, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 1, 2, 0, 3, 0, 0, 0, 2, 3, 3, 0, 2, 0, 2, 1, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 4, 1, 0, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 5, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 2, 1, 6, 0, 1, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in2[:( int(3.0) + int(6.0) )][:divInt(int(5.0),( i1 - abs(i0) ))][i1:i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 3, 2, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[( int(0.0) * int(7.0) ):divInt(i0,int(5.0))].capitalize()[( int(7.0) + abs(i0) ):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 2, 2, 2, 1, 0, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 1, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 11, 3, 3, 2, 1, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(i0)[int(0.0):( divInt(( int(7.0) + i2 ),int(5.0)) * len(s0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 1, 1, 9, 0, 0, 4, 1, 0, 0, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != \"\";\"\"[:i0][:int(6.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 8, 2, 6, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [2, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 0, 2, 1, 1, 3, 3, 0, 0, 2, 2, 1, 2, 2, 3, 2, 0, 2, 3, 3, 2, 0, 2, 3, 3, 0, 3, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 2, 1, 1, 0, 1, 4, 2], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 4, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in0[i2:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 2, 1, 1, 2, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 1, 1, 2, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 4, 0, 2, 0, 1], [0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0], [5, 5, 4, 4, 3, 0, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 1, 2, 2, 0, 4, 3, 4, 0, 0, 1, 0], [3, 1, 3], [3, 0, 0], [2, 2, 1, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != \"\"u\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 3, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 0, 2, 0, 0, 5, 1, 1, 9, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != \"\"R\"\"[i1:int(5.0)][int(7.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 3, 2, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[( int(0.0) + int(7.0) ):divInt(i0,int(5.0))].capitalize()[( int(7.0) + abs(i1) ):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 3, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 2, 3, 0, 1, 2, 1, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 2], [1, 0], [2, 2, 2, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 9, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(i0)[i2:].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 11, 3, 3, 1, 2, 7, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0, i0)[int(0.0):mod(divInt(i2,int(7.0)),( int(5.0) + len(in1) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 1, 1, 2, 0, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 2, 0, 13, 3, 3, 2, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in0[( int(0.0) + int(6.0) ):divInt(abs(int(5.0)),int(2.0))].capitalize()[( i1 * int(7.0) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 3, 0, 1, 2, 2, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 8, 1, 4, 0, 1, 6, 1, 1, 10, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\".capitalize()[mod(int(0.0),len(s0)):min(i1, int(4.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 3, 3, 2, 1, 3, 2, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 2, 1, 2, 0, 0, 0, 2, 3, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [3, 3, 2, 4, 3, 2, 4, 0, 1, 2, 3, 2, 0, 3, 2, 3], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 1, 2, 0], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0, 2, 1, 2, 0, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0, 0], [0, 1], [17], [17], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 10, 0, 60, 19, 16, 12, 7, 10, 2, 1, 22, 3, 1, 7, 2, 1, 1, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != saveChr(i0).capitalize()[int(6.0):abs(( saveOrd((s0.rstrip() + in1)) + len(\"\"R\"\") ))][:mod(int(1.0),abs(( divInt(saveOrd(s1),( int(1.0) + min(max(abs(len(\"\"r\"\"[i2:( ( ( int(2.0) - i1 ) * divInt(abs(int(5.0)),i0) ) - int(5.0) )])), int(7.0)), i1) )) * ( divInt(int(7.0),min(int(9.0), len(s2[i2:divInt(( ( int(8.0) - int(5.0) ) - ( int(0.0) * i1 ) ),int(4.0))]))) + divInt(abs(mod(int(8.0),( i2 + i0 ))),i0) ) )))][( len(s0) - int(59.0) ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 2, 2, 2, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[( int(3.0) + i1 ):( i2 + i2 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 6, 7, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 3, 2, 2, 0, 1, 1, 3, 0, 0, 3, 2, 1, 0, 2, 1, 2, 1, 1, 3, 2, 3, 0, 2, 3, 1, 3, 1, 1, 0, 1, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 1, 2, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 4, 0, 22, 5, 6, 2, 3, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s1[abs(int(0.0)):max(mod(( i1 + int(7.0) ),int(5.0)), abs(i2))].capitalize()[i2:min(( int(7.0) + i2 ), mod(int(6.0),divInt(int(1.0),int(7.0))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 3, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 0, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 5, 0, 13, 3, 2, 3, 0, 6, 0, 1, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in1[:( i0 + i2 )][( i2 + int(0.0) ):int(1.0)][int(3.0):( i2 - i1 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [0, 1, 1], [2, 1, 1, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 5, 2], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 3, 0, 0, 8, 0, 1, 11, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0, i0)[i0:len(in2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = saveChr(i2)\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 3, 1, 1, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 2, 4, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 0, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [3], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 0, 3, 0, 0, 6, 0, 1, 9, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != s0[:abs(int(6.0))][i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 0, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 3, 0, 0, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = len(in1.capitalize()[len(in0):]) != int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 0, 2, 0, 0, 5, 1, 1, 10, 0, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != \"\"R\"\"[i1:][:int(6.0)][:int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 0, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 0, 12, 2, 3, 1, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + i0 ):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 9, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(i1).capitalize()[int(0.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 6, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 3, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(saveChr(i0), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 0, 3, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 4}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 2, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 5, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 13, 4, 3, 1, 3, 5, 0, 1, 9, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(i1).capitalize()[mod(int(0.0),mod(abs(int(6.0)),( mod(i0,i1) + i1 ))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 6, 5, 2, 8, 1, 2, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 1, 3, 0, 3, 0, 0, 0, 2, 3, 3, 0, 2, 0, 2, 1, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 4, 1, 0, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 2, 4, 0, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in0[divInt(int(3.0),int(6.0)):divInt(int(5.0),abs(i1))].capitalize()[min(i0, i1):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 9, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 1, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 2, 1, 0, 1, 3, 0, 3, 2, 3, 1, 0, 2, 3, 2, 0, 2, 1, 3, 1, 0, 2, 3, 1, 0, 1, 2, 1, 0, 2, 2, 3, 1, 3, 0, 2, 2, 2, 0, 1, 2, 1, 0, 1, 1, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 2, 1, 1, 0, 2, 4, 2], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 0, 4, 2, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1, 0], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 6, 0, 31, 8, 9, 4, 4, 5, 1, 1, 9, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[mod(int(6.0),abs(mod(( int(7.0) + i0 ),int(5.0)))):][abs(i2):abs(divInt(max(int(9.0), i0),( max(divInt(i0,( int(6.0) - min(int(1.0), i1) )), ( abs(int(7.0)) * i1 )) - int(7.0) )))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 0, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1[len(in0.capitalize()):] not in saveChr(divInt(int(6.0),i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 0, 3, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 4}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 3, 1, 1, 2, 3, 1, 2, 2, 0, 1, 0, 1, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 3, 0, 0, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(abs(int(0.0))).capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 8, 1, 2, 0, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[int(0.0):int(7.0)].capitalize()[i1:mod(i2,int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 3, 2, 1, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [16], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 13, 3, 4, 1, 2, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize()[len(in0[mod(int(0.0),len(in1[:mod(min(( int(9.0) + int(5.0) ), int(7.0)),i1)])):]):] not in saveChr(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 2, 1, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in1[( int(0.0) + i0 ):mod(i2,abs(int(1.0)))].rstrip()[int(5.0):( i2 - i2 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 0, 3, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 8, 2, 3, 0, 2, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(mod(int(0.0),abs(mod(i1,i2)))).capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 2, 8, 1, 7, 7, 9, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 2, 1, 0, 1, 3, 0, 2, 1, 2, 1, 1, 2, 3, 2, 2, 2, 3, 3, 1, 2, 2, 3, 1, 0, 1, 2, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 1, 1, 0, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 2], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 8, 0, 50, 16, 10, 9, 7, 8, 1, 1, 15, 1, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[:i0][int(5.0):abs(mod(( int(7.0) + i2 ),int(5.0)))][min(i2, ( int(2.0) + mod(int(8.0),int(1.0)) )):( len((\"\"R\"\" + in1).capitalize()) * divInt(divInt(( max(max(int(7.0), ( ( min(int(7.0), i0) - int(9.0) ) + mod(int(7.0),i1) )), divInt(int(5.0),max(int(0.0), saveOrd(s2)))) * i2 ),( ( ( int(4.0) - int(8.0) ) - mod(int(59.0),i1) ) * int(9.0) )),i2) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 1, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 4, 1, 2], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 9, 0, 51, 16, 12, 7, 9, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[max(abs(mod(i0,divInt(i2,int(8.0)))), ( int(7.0) - min(i2, len(in0)) )):] not in saveChr(divInt(divInt(int(5.0),int(7.0)),divInt(min(( i0 + ( max(divInt(abs(i1),( max(int(6.0), mod(int(1.0),int(7.0))) * i2 )), i1) - divInt(int(7.0),saveOrd(saveChr(max(abs(i2), ( ( ( int(9.0) + int(8.0) ) * mod(int(5.0),i0) ) - int(0.0) ))))) ) ), int(4.0)),int(8.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 166}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 11, 6, 4, 7, 6, 1, 1, 15, 4, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),mod(int(0.0),i0)):]:{:\\nres0 = in1[( i2 + int(7.0) ):] not in saveChr(divInt(int(5.0),len(in0[i2:i0])))[divInt(divInt(int(7.0),i1),( abs(( i2 + divInt(min(( len((\"\"R\"\" + s0.lstrip()).rstrip()) * i1 ), mod(min(int(6.0), i2),int(1.0))),int(7.0)) )) - i0 )):i0].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 166}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 2, 5, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 3, 0, 2, 0, 0, 1, 2, 3, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 3, 4, 2, 4, 4, 1], [1, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 2, 4, 3, 4, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 1, 1, 2], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 1, 12, 2, 4, 2, 0, 7, 1, 1, 17, 4, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[int(7.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = len(getCharFromString(saveChr(i2)[( i1 - i0 ):][:int(2.0)], ( len((s1.capitalize().rstrip() + \"\"R\"\")) + len(in1) ))[:i1])\\n", "other_info": {}, "test_fitness": 167}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 2, 5, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 3, 0, 2, 0, 0, 1, 2, 3, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 3, 4, 2, 4, 4, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 2, 4, 3, 4, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 1, 2, 2], [1], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 3, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[int(7.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = len(s1)\\n", "other_info": {}, "test_fitness": 167}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 5, 7, 7, 9, 8, 8, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 1, 2, 2, 2], [0, 1, 1], [3, 3, 2, 3, 1, 0, 0, 1, 2, 2, 1, 0, 2, 2, 2, 0, 1, 2, 3, 2, 0, 1, 3, 3, 3, 0, 2, 3, 1, 0, 1, 0, 3, 0, 1, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 0, 2, 0, 2, 1, 0, 1, 4, 4], [0, 0, 2, 1, 0, 2, 2, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 10, 0, 40, 9, 11, 3, 6, 6, 1, 1, 15, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.capitalize()[max(( min(int(0.0), i1) + i2 ), int(7.0)):] not in saveChr(divInt(( int(5.0) + i1 ),mod(divInt(divInt(i0,int(7.0)),divInt(abs(( i1 * int(6.0) )),min(abs(max(i2, divInt(min(int(5.0), i1),int(7.0)))), i2))),max(i1, int(7.0)))))[int(9.0):saveOrd(in0[int(8.0):saveOrd((\"\"R\"\" + getCharFromString(s0, i2)).rstrip())])]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 166}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2, 0], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 1, 1, 3, 2, 2, 2, 2, 1, 1, 2, 3, 3, 0, 1, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 3, 2, 0, 0, 0, 2, 3, 0, 1, 2, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4, 0, 3, 2], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 6, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1[int(8.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i2\\n", "other_info": {}, "test_fitness": 161}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2, 0], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [1, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 1, 1, 3, 2, 2, 2, 2, 1, 1, 2, 3, 3, 0, 1, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 3, 2, 0, 0, 0, 2, 3, 0, 1, 2, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 0, 3, 2], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [1, 1, 0, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 6, "mapping_values": [1, 5, 5, 1, 4, 1, 4, 0, 0, 3, 1, 4, 1, 1, 2, 1, 0, 0, 9, 9, 6, 1, 31, 9, 8, 6, 4, 8, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1[int(8.0):] not in in0\\ni2 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = in1\\nb2 = ( abs(divInt(i2,( int(7.0) + int(5.0) ))) \\l abs(( divInt(( mod(int(7.0),int(7.0)) * ( len(saveChr(len(s0[:i0]))) - int(4.0) ) ),max(( int(7.0) + i0 ), divInt(abs(int(7.0)),i2))) * int(9.0) )) or res0 )\\n", "other_info": {}, "test_fitness": 161}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 6, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[int(8.0):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2, 0], [0], [0, 0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 0, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [1, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 3, 3, 0, 1, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 3, 2, 0, 0, 0, 2, 3, 0, 1, 2, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2, 0], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 2, 4, 0, 3, 2], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [1, 1, 0, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 6, "mapping_values": [1, 5, 5, 2, 3, 1, 3, 0, 0, 2, 0, 4, 0, 1, 3, 1, 1, 0, 1, 1, 2, 1, 4, 0, 2, 1, 0, 7, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nloopBreak% = 0\\nwhile in1[int(8.0):] not in in2:{:\\nres0 = ( b2 or True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += i2\\ns2 = in1\\n", "other_info": {}, "test_fitness": 164}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 0, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 6, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1[max(mod(int(8.0),i0), divInt(i2,int(3.0))):] not in in0.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 161}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 2, 4, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 6, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.capitalize()[int(9.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 161}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2, 0], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 0, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [1, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 3, 3, 0, 1, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 3, 2, 0, 0, 0, 2, 3, 0, 1, 2, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2, 0], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 0, 3, 2], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [1, 1, 0, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 6, "mapping_values": [1, 5, 5, 2, 3, 1, 3, 0, 0, 2, 0, 4, 0, 1, 3, 1, 1, 0, 9, 9, 7, 1, 32, 8, 9, 6, 3, 7, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nloopBreak% = 0\\nwhile in1[int(8.0):] not in in0:{:\\nres0 = ( b2 or True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += i2\\ns0 = saveChr(abs(divInt(i2,( abs(int(7.0)) * len(in1[i0:( divInt(( int(5.0) * int(7.0) ),mod(len(saveChr(max(i0, int(7.0)))),abs(( int(4.0) + i2 )))) - ( max(int(7.0), i0) * int(7.0) ) )]) ))))[:int(9.0)]\\n", "other_info": {}, "test_fitness": 161}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 8, 1, 8, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 1, 0, 3, 2, 4, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 2], [1, 0], [2, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1[int(6.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 168}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [2, 3, 2, 1, 1, 2, 3, 1, 1, 2, 0, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 3, 0, 17, 5, 3, 1, 4, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[divInt(len(in1),mod(int(0.0),int(6.0))):]:{:\\nres0 = in1[mod(len(in0),int(5.0)):] not in in0[int(2.0):( i1 + int(7.0) )].capitalize()[i0:mod(abs(int(1.0)),i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 199}, {"genotype": [[0], [1, 0, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 0, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 1, 2, 0], [0, 0], [3, 5], [3, 3, 2], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 6, 2, 4, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [1, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 1, 4, 1, 4, 3], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3, 0], [1, 3], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 8, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 2, 2, 4, 2, 1, 1, 1, 0, 0, 5, 5, 1, 0, 8, 0, 2, 0, 0, 8, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[int(6.0):] != s1\\nb2 = ( int(6.0) != len(s1) or i2 \\l int(2.0) )\\nin1 = s1[int(4.0):int(2.0)].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 168}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 1, 0, 11, 3, 3, 1, 2, 5, 1, 1, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[mod(len(in1),mod(int(0.0),i0)):]:{:\\nres0 = in1.capitalize()[( max(int(1.0), int(5.0)) + int(7.0) ):] not in in0[len(\"\"R\"\"):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 156}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [5], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1 not in in0\\nin0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 0, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1[i0:] not in in0.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 236}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 9, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 0, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[max(i0, int(0.0)):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [2, 3, 0, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[mod(len(in1),i1):]:{:\\nres0 = in1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 3, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 1, 3, 1, 0, 1, 1, 0, 0, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1, 3, 1], [0, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s0):] not in saveChr(i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 4, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 5, 0, 1, 6, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.rstrip() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(6.0)\\n", "other_info": {}, "test_fitness": 232}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 0, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 0, 1, 1, 0, 0, 2], [0, 1, 1], [3, 1, 2, 1, 1, 2, 3, 1, 2, 1, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0, 1, 1, 3, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 1, 4, 1, 2, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0], [5, 5, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 2, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[int(3.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 182}, {"genotype": [[0], [1, 0, 1], [2, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 7, 5, 2, 0, 6, 4, 2, 9, 8, 5, 7, 4, 8, 5, 6, 9, 2, 6, 6], [2, 2, 0, 0, 1, 2, 1, 2, 2, 1, 0, 2, 0, 2], [1, 1, 1], [3, 0, 2, 1, 2, 2, 2, 0, 2, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 1, 0, 0, 3, 2, 3, 0, 2, 3, 3, 0, 3, 0, 1, 0, 2, 1, 0, 1, 1, 0, 3, 1, 2, 1, 1, 2, 1, 3, 1, 3, 3, 0, 3, 0, 2, 1, 2, 1, 3, 1, 2, 2, 1, 1, 0, 1, 3, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [3, 1, 2, 0, 1, 3, 2, 2, 3, 2, 4, 1, 2, 0, 0, 2], [1, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 4, 4, 4, 0, 1, 0], [1, 1, 3, 1], [3, 0], [2, 2, 0, 0, 1], [1], [17], [20], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 13, 1, 39, 12, 8, 6, 7, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[i2:] not in in0\\ni2 -= mod(int(8.0),divInt(divInt(divInt(i0,mod(divInt(max(i0, i1),( ( int(7.0) + i2 ) * ( abs(int(5.0)) - i1 ) )),i2)),min(( max(i2, ( len(saveChr(abs(i1))[abs(i0):int(2.0)]) + i2 )) - mod(int(0.0),i0) ), int(6.0))),int(4.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 3, 1, 2, 3, 1, 2, 2, 1, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 1, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 234}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 3, 1, 2, 3, 1, 2, 2, 1, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 1, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 234}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 6, 3, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 2, 1, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 2, 4, 1, 4, 3, 4, 0, 0, 1, 0], [0, 3, 3, 2], [1, 0], [2, 2, 2, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 2, 2, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 5, 0, 18, 6, 2, 1, 5, 4, 0, 1, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(saveChr(i0)):] not in saveChr(mod(mod(divInt(i2,int(0.0)),mod(int(7.0),int(5.0))),i2))[i0:( divInt(int(8.0),i1) + int(2.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 0, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 3, 2, 0, 2, 2, 1, 2, 1, 1, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 3, 0, 1, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 0], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 12, 4, 3, 1, 3, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1[abs(mod(i0,( divInt(int(8.0),mod(int(7.0),int(5.0))) + i2 ))):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i0):]:{:\\nres0 = in1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 1, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 2, 2, 0, 0, 0, 2, 0, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 0, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize()[len(in1[i2:]):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 3, 2, 2, 1, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 4, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 10, 3, 3, 1, 2, 4, 1, 1, 8, 2, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[len(saveChr(mod(abs(divInt(( int(0.0) + i1 ),i1)),int(7.0))).capitalize()):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 0, 1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2, 1], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 2, 2, 0, 2, 0, 0], [0, 1, 1], [3, 1, 0, 3, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 4, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0], [1, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 2, 3, 0, 1, 3, 4, 4, 0, 4, 0], [2, 2, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 0, 0, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in0[int(7.0):]\\ni2 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 235}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 9, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 2, 1, 0, 1, 3, 0, 3, 2, 3, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 2, 1, 0, 2, 2, 3, 1, 3, 0, 2, 2, 2, 0, 1, 2, 1, 0, 1, 1, 3, 0], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 2, 2, 1, 1, 0, 2, 4, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 2, 0, 0, 4, 2, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 10, 3, 3, 1, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1[mod(int(6.0),abs(mod(( int(7.0) + i0 ),int(5.0)))):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 2, 3, 0, 2, 1, 2, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 3, 2, 3, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 3, 0, 2, 2, 0, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [3, 0, 0], [2, 2, 0, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 1, 33, 11, 6, 4, 7, 7, 1, 1, 15, 2, 0, 4, 1, 0, 1, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = (in1 + in0[:i2][( len(\"\"u\"\") + i2 ):mod(int(2.0),( int(7.0) + int(0.0) ))])[int(2.0):] not in (saveChr(i1) + s0).capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = mod(divInt(divInt(int(5.0),i1),( abs(( min(divInt(i2,divInt(int(5.0),int(7.0))), mod(len(in1),int(7.0))) - i1 )) - abs(int(9.0)) )),i2)\\n", "other_info": {}, "test_fitness": 203}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 7, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 2, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 12, 3, 2, 0, 3, 4, 0, 1, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(saveChr(i0)):] not in saveChr(divInt(i2,divInt(i2,int(0.0))))[divInt(int(7.0),int(5.0)):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [1, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 2, 4, 4], [1], [0], [2, 0, 0, 4, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 5, 5, 1, 4, 1, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 1, 3, 0, 1, 1, 0, 8, 0, 1, 8, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in0\\ni2 += int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = in1\\nin1 = saveChr(int(2.0))\\n", "other_info": {}, "test_fitness": 234}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 0, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 5, 0, 3, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = min(int(0.0), i2)\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 3, 0, 2, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 4, 1, 7, 0, 3, 0, 0, 6, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[min(i0, int(6.0)):] not in (in0 + s0.capitalize()[i2:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = abs(i2)\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 3, 2, 2, 0, 1, 3, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 1, 1, 3, 2, 3, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 3, 0, 0, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(abs(int(0.0))).capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 8, 1, 4, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[abs(len(in1)):]:{:\\nres0 = in1[abs(mod(i0,min(i2, int(8.0)))):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 4, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 0, 3, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 2, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 1, 12, 2, 5, 0, 2, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = max(mod(int(0.0),abs(i2)), min(int(7.0), mod(int(4.0),abs(i2))))\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 9, 5, 2, 8, 1, 2, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 1, 2, 1, 1, 2, 1, 1, 0, 3, 0, 0, 0, 2, 3, 3, 0, 2, 0, 2, 1, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 4, 1, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 5, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 5, 5, 0, 0, 8, 2, 1, 0, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = ( ( int(3.0) != divInt(int(9.0),int(5.0)) or True ) and in1[:mod(int(2.0),int(8.0))] not in in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 232}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 7, 0, 4, 0, 0, 5, 1, 1, 11, 2, 0, 4, 1, 0, 0, 0, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in2):] != \"\";\"\"[:i0][int(6.0):abs(saveOrd(saveChr(i2).capitalize()))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 8, 2, 3, 0, 2, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(abs(mod(i0,divInt(i1,int(8.0)))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 2, 1, 0, 1, 0, 3, 1, 1, 2, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 3, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 234}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 3, 1, 2, 3, 1, 2, 2, 1, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 1, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 234}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 6, 7, 7, 7, 8, 3, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 2, 2, 2], [0, 1, 1], [3, 3, 2, 3, 1, 0, 0, 1, 2, 2, 1, 0, 2, 2, 2, 0, 1, 2, 3, 2, 0, 0, 0, 2, 3, 0, 2, 3, 1, 0, 1, 0, 3, 0, 1, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 2, 0, 2, 1, 0, 1, 4], [0, 0, 2, 1, 0, 2, 2, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 9, 0, 31, 10, 6, 6, 4, 5, 0, 1, 9, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.capitalize()[len(saveChr(( min(int(0.0), i1) + i2 ))[int(7.0):( ( int(5.0) + i1 ) * mod(mod(divInt(i0,int(7.0)),( abs(( i1 - i2 )) + i1 )),divInt(min(i2, ( abs(int(6.0)) * i0 )),int(6.0))) )]):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 234}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 4, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 10, 4, 2, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(saveChr(i2).capitalize()):] not in in0.lstrip().rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 218}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 2, 0, 0, 0, 3, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 4, 1, 5, 1, 1, 1, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[i1:] not in in0\\ni2 = ( i1 - i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 2, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [2, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 3, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 12, 2, 3, 1, 1, 6, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in (in0 + getCharFromString(s0[i2:i2], int(0.0))[max(( i2 * int(7.0) ), mod(int(2.0),abs(i0))):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [0], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 2, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[abs(divInt(int(0.0),int(7.0))):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 0, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 0, 1, 1, 0, 0, 2], [0, 1, 1], [3, 1, 2, 1, 1, 2, 3, 1, 2, 1, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0, 1, 1, 3, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 1, 4, 1, 2, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0], [5, 5, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 2, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 6, 6, 4, 0, 17, 4, 3, 1, 3, 8, 1, 1, 17, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[int(3.0):] not in in0:{:\\nres0 = ( mod(int(0.0),int(5.0)) != divInt(len(in1[int(2.0):( int(8.0) + i1 )].capitalize()[i0:]),i1) or ( saveChr(divInt(saveOrd((in1.rstrip()[:int(1.0)] + \"\"R\"\")),i1)).endswith(s1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 182}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 8, 2, 6, 1, 7, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 2, 0, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 3, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 1, 1, 0, 1, 2], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[:i0], int(0.0))[mod(i1,i1):int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 6, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 4, 2, 0, 1, 1, 0, 1, 4, 2], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 4, 2, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 5, 1, 3, 0, 1, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = mod(int(0.0),saveOrd(s0))\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 3, 1, 2, 3, 1, 2, 2, 1, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 1, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 234}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 4, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 1, 1, 2, 0, 0, 0, 1, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 1, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 1, 0, 3, 0, 1, 2, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [3, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 13, 1, 34, 8, 7, 5, 3, 6, 0, 1, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), max(int(8.0), i1)):]:{:\\nres0 = in1[mod(i2,i1):] not in in2[i0:int(7.0)][min(i1, i1):mod(( int(4.0) + i1 ),( int(7.0) + divInt(i2,( len(s0[:( min(i0, ( max(int(6.0), i0) * int(1.0) )) - int(7.0) )]) + i0 )) ))]\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 232}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 0, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 1, 3, 0, 1, 4, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[min(i0, i2):] not in saveChr(abs(mod(i2,int(0.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 0, 6, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [2, 3, 1, 1, 0, 2, 1, 1, 2, 2, 3, 1, 0, 2, 3, 3, 1, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 2, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 2, 4, 4, 1], [1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 1, 0, 2], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 6, 0, 33, 9, 7, 2, 7, 4, 1, 1, 11, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[mod(len(in1),int(0.0)):]:{:\\nres0 = in1[:int(2.0)][i1:] not in \"\"R\"\"[divInt(int(0.0),int(6.0)):].capitalize()[( mod(min(int(8.0), i0),divInt(abs(abs(int(1.0))),mod(i1,divInt(int(8.0),int(7.0))))) + max(( saveOrd(saveChr(int(9.0))) * mod(max(i1, i2),int(8.0)) ), int(5.0)) ):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 5, 3, 5, 0, 4, 2, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 1, 0], [0, 1, 1], [3, 0, 1, 2, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 2, 2, 1, 1, 1, 3, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 3, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [3, 4, 3, 0, 0, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 0, 2, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 0, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[i0:] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 0, 3, 2, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [3], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 0, 12, 2, 3, 1, 1, 5, 0, 1, 11, 2, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(s0):] != saveChr(i0).capitalize()[int(6.0):int(1.0)][:mod(i2,i1)][abs(( i0 - i1 )):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 5, 6, 3, 7, 7, 9, 8, 3, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 2, 2, 2], [0, 1, 1], [3, 3, 1, 3, 1, 0, 0, 1, 2, 3, 1, 2, 2, 2, 2, 0, 1, 2, 3, 2, 0, 0, 3, 2, 3, 0, 2, 3, 1, 0, 1, 0, 3, 0, 1, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 0, 2, 0, 2, 1, 0, 1, 4, 3], [2, 0, 2, 1, 0, 2, 2, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 10, 0, 40, 9, 11, 4, 5, 6, 1, 1, 15, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.capitalize()[max(int(0.0), min(int(7.0), i1)):] not in saveChr(i2)[int(5.0):( abs(int(5.0)) * divInt(( mod(divInt(i1,int(6.0)),divInt(min(( i0 + i1 ), abs(( max(i2, divInt(min(int(3.0), i1),int(7.0))) * i2 ))),max(i0, int(7.0)))) - int(9.0) ),saveOrd(in0[int(8.0):len((\"\"R\"\" + getCharFromString(s0, i2)).rstrip())])) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 5, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0], [0, 1, 1], [3, 3, 1, 1, 3, 1, 2, 1, 2, 1, 3, 0, 2, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 2, 0, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(s1)) not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 0, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 1, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 3, 0, 1, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 0], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 8, 2, 3, 1, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1[abs(mod(i0,( i2 + int(8.0) ))):] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 2, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 0, 2, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 6, 1, 3, 0, 1, 6, 1, 1, 9, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1 not in getCharFromString(in0, len(s0[i0:]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = mod(len(\"\"R\"\"),i2)\\n", "other_info": {}, "test_fitness": 239}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 0, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 5, 1, 13, 2, 4, 1, 1, 5, 1, 1, 9, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[len(s2):] not in \"\"R\"\"[mod(int(0.0),i0):][abs(i2):int(3.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = ( int(5.0) + min(i1, i0) )\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 2, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [2, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 3, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 4, 0, 7, 0, 2, 0, 0, 5, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in (saveChr(i2)[i2:].capitalize() + in0[int(0.0):max(i2, i0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 0, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 2, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [1, 1, 1], [3, 1, 3, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 3, 4, 1, 2, 3], [1], [0], [2, 0, 0, 0, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3, 3], [1, 3], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni2 -= int(6.0)\\nres0 = in1 != s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 1, 2, 1, 0, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 4, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 2, 0, 13, 3, 3, 2, 1, 4, 1, 1, 8, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(len(in1), ( int(0.0) + int(6.0) )):]:{:\\nres0 = in1[mod(abs(int(5.0)),( int(2.0) * i1 )):] not in \"\"R\"\"[int(7.0):i2].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 179}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1, 1, 1, 1, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 2, 2, 0, 0, 0, 1, 0, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 10, 2, 2, 0, 2, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize()[len(in1[i2:]):]:{:\\nres0 = in1 not in \"\"R\"\"[len(in0[int(6.0):mod(divInt(i1,i1),i1)]):int(1.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 6, 5, 2, 8, 1, 2, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 0, 2, 1, 1, 2, 1, 1, 0, 3, 0, 0, 0, 2, 3, 3, 0, 2, 0, 2, 1, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 4, 1, 0, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 5, 4, 1], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 9, 2, 1, 0, 2, 4, 0, 1, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2.capitalize()[len(in1[i1:]):]:{:\\nres0 = in1 not in saveChr(divInt(int(3.0),int(6.0)))[mod(int(5.0),int(2.0)):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 2, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[abs(abs(i0)):] not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [3, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(s0):] != s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 0, 1], [2, 0, 1, 0, 0], [0, 2], [0, 0, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 4, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 1, 0, 0, 1, 0, 0, 2], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 1, 0, 3, 1, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 0, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [3, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 2, 1, 6, 1, 2, 3, 2, 1, 0, 11, 11, 15, 0, 50, 14, 10, 7, 7, 7, 1, 1, 14, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[max(len(in1), max(int(8.0), i1)):]:{:\\nres0 = in1[mod(i2,i2):] not in in0[i0:][int(7.0):min(i1, i2)]\\nb2 = ( mod(( int(4.0) + i1 ),divInt(len(s0),divInt(i2,( max(( max(i1, ( abs(int(7.0)) + i0 )) * int(6.0) ), divInt(i0,i1)) - ( int(1.0) + max(int(7.0), len(in1)) ) )))) != i0 or ( saveChr(divInt(mod(( int(7.0) * int(9.0) ),( int(8.0) - i0 )),int(5.0))).endswith((\"\"R\"\" + saveChr(i2))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 3, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 12, 0, 53, 16, 11, 9, 7, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s1):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(i0, ( divInt(( int(5.0) + i0 ),divInt(len(saveChr(( ( min(max(divInt(int(7.0),abs(( max(int(7.0), i2) * int(1.0) ))), int(7.0)), i1) - i2 ) + divInt(int(7.0),max(divInt(abs(i0),( ( ( int(9.0) * int(8.0) ) - mod(int(5.0),i0) ) - int(0.0) )), int(4.0))) ))),i0)) * i1 )) ):int(8.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 3, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 0, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 1, 8, 1, 3, 1, 0, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(s2):] not in s0.capitalize()[( int(0.0) + i0 ):abs(i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(3.0)\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 4, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[i0:] not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 0, 0, 4, 0, 1, 2, 1, 4], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 38, 11, 10, 4, 7, 6, 0, 1, 8, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[max(min(mod(i0,divInt(i2,int(8.0))), ( int(7.0) * min(i2, saveOrd(in0)) )), mod(divInt(int(5.0),i0),divInt(min(( i1 + ( max(divInt(abs(i2),( max(int(7.0), i1) * int(6.0) )), int(1.0)) - i2 ) ), i0),mod(int(7.0),saveOrd(saveChr(int(7.0))))))):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 179}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 2, 1, 2, 1, 2, 0, 0, 1, 0, 0, 0, 0, 1, 2], [0, 1, 1], [3, 3, 2, 3, 0, 0, 0, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 2, 0, 2, 1, 2, 0, 2, 0, 3, 0, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], [3, 0, 0, 2, 3, 2, 1, 0, 1, 0, 0, 4], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 17, 0, 63, 20, 12, 11, 9, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[min(( min(i1, i1) - i1 ), int(0.0)):] != in0[:divInt(( int(7.0) + i2 ),i1)][divInt(divInt(i2,i1),divInt(abs(( i2 * ( len(saveChr(divInt(abs(i0),( max(int(5.0), i0) - int(7.0) )))) + int(6.0) ) )),min(i1, divInt(int(1.0),max(int(7.0), min(i0, mod(( ( int(7.0) * int(9.0) ) - ( int(8.0) - i0 ) ),int(5.0)))))))):min(divInt(divInt(i0,( int(0.0) * ( i0 + ( i1 + saveOrd((\"\"R\"\" + s0.rstrip())) ) ) )),i2), int(4.0))][int(8.0):].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 5, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 3, 1, 2, 1, 2, 1, 3, 0, 2, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 2, 0, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 1, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 4, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 2, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 0, 0, 4, 0, 1, 0, 0, 4, 1, 1, 7, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[int(0.0):] not in \"\"R\"\"[int(0.0):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 2, 1, 1, 3, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 1, 2, 0, 2, 0, 2, 1, 1, 2, 1, 1, 2, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 1, 4, 2, 2, 0, 1], [0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 5], [1], [0], [2, 0, 0, 2, 4, 0, 2, 2, 2, 0, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [3, 0, 0], [2, 2, 0, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 1, 0, 12, 1, 5, 1, 0, 7, 1, 1, 16, 3, 1, 5, 1, 0, 1, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize()[len(in0[abs(max(( int(2.0) + int(7.0) ), saveOrd(saveChr(int(0.0))))):][:int(2.0)][int(5.0):i0]):] != (s0.lstrip(in1) + \"\"u\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 1, 1, 3, 0, 3, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 3, 0, 2, 1, 1, 0, 3, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 1, 3], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 2, 8, 1, 2, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 2, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 0, 0, 3, 1, 2, 1, 1, 2, 2, 0, 0, 3, 2, 3, 1, 0, 2, 0, 2, 0, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 2, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [3, 5, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[i1:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 0, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 5, 1, 13, 2, 4, 1, 1, 5, 0, 1, 9, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(s2):] not in saveChr(mod(int(3.0),i0)).capitalize()[abs(i1):int(3.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = ( int(5.0) + min(i0, i0) )\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 0, 0, 1, 0, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 3, 0, 2, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 4, 4, 5, 1, 13, 1, 4, 1, 0, 6, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = ( ( min(i0, int(6.0)) != i2 or True ) and in1[abs(i1):] not in (s0 + s0.capitalize()[int(7.0):]) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = ( int(5.0) + min(i1, int(7.0)) )\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 5, 5, 4, 0, 13, 2, 3, 1, 1, 4, 0, 1, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = ( ( ( int(77.0) + int(5.0) ) != i0 or True ) and in1.capitalize()[i2:] not in saveChr(int(7.0))[divInt(int(6.0),abs(i2)):i1] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 2, 4, 2, 1, 2, 4, 0, 4, 0, 1, 1, 0], [2, 2, 3, 3], [5, 0], [2, 1, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = \"\"R\"\" != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 8, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 2, 2, 2, 1, 2, 1, 0, 2], [0, 1, 1], [3, 0, 0, 3, 1, 2, 1, 1, 0, 1, 1, 0, 3, 2, 3, 1, 0, 0, 0, 2, 0, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 2, 0, 2, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 4, 4, 1, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [3, 5, 4, 4, 3, 5, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 6, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[i1:] not in in0\\nin2 = \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 8, 2, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 1, 0], [0, 1, 1], [2, 3, 3, 1, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4, 4], [1], [0], [2, 0, 0, 2, 4, 0, 0, 2, 4, 2, 4, 3, 2, 0, 2, 2, 0, 0], [1, 2, 3, 3], [0, 0], [2, 2, 2, 1, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 13, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 3, 0, 11, 3, 2, 2, 1, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[( len(in1) + len(saveChr(int(1.0))[i1:]) ):]:{:\\nres0 = ( ( ( i2 + int(8.0) ) \\l mod(int(2.0),i2) or True ) and in1 not in in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 256}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 0, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 0, 1, 1, 0, 0, 2], [0, 1, 1], [3, 1, 2, 1, 1, 2, 3, 1, 2, 1, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0, 1, 1, 3, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 1, 4, 1, 2, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0], [5, 5, 4, 2, 3, 4, 4, 1], [1], [0], [2, 3, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 2, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 2, 0, 12, 3, 2, 1, 2, 4, 0, 0, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (in2 + in2[len(in1):])[int(30.0):] not in s2[mod(int(5.0),int(2.0)):divInt(len(saveChr(int(8.0))),( int(1.0) + i1 ))].capitalize()[i0:]\\n", "other_info": {}, "test_fitness": 319}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 1, 2, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 2, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 1, 1, 0], [2, 1, 3, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 14, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 3, 0, 22, 8, 5, 3, 5, 6, 1, 1, 11, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[:len(in0)] not in \"\"R\"\".capitalize()[( int(0.0) + int(6.0) ):divInt(abs(( mod(mod(mod(int(1.0),i1),mod(len(in0),int(2.0))),i2) * len(saveChr(i0)) )),( int(4.0) + int(1.0) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 265}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 9, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 1, 0, 0, 0, 2], [0, 1, 1], [3, 1, 0, 2, 0, 2, 2, 1, 2, 1, 3, 3, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 0, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 5, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 14, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 12, 0, 52, 16, 10, 7, 9, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2[int(8.0):] not in saveChr(i0)[mod(i2,divInt(( int(7.0) + divInt(int(5.0),len(s0[:min(min(divInt(divInt(int(7.0),i2),( len(saveChr(( i0 + divInt(min(( i1 * i2 ), mod(max(int(9.0), i1),int(1.0))),int(7.0)) ))) + i1 )), i0), divInt(int(7.0),abs(int(9.0))))])) ),max(i0, ( ( ( int(8.0) + int(5.0) ) * divInt(int(0.0),i0) ) - int(4.0) )))):len((\"\"R\"\" + s0.rstrip()))][i2:int(8.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 244}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [4, 0, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 15, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(s1):]:{:\\nres0 = in1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 249}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [4, 0, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 15, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 4, 4, 2, 0, 10, 2, 2, 2, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(s1):]:{:\\nres0 = ( ( min(( int(0.0) + i0 ), ( i2 - int(1.0) )) != int(5.0) or True ) and in1[int(7.0):] not in in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 3, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [1, 3, 0, 0, 2, 3, 0, 1, 2, 1, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 4, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 2], [1, 0], [2, 2, 2, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 15, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 6, 0, 1, 15, 4, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[int(6.0):][len(in1[i0:]):]:{:\\nres0 = in1 not in saveChr(i2)[:mod(len((in0.capitalize() + s0).rstrip()[i1:]),int(2.0))].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 308}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 1], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 4, 0], [2, 0, 1, 1, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 3, 8, 7, 7, 9, 8, 5, 0, 8, 8, 5, 9, 9, 2, 2], [1, 1, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 2, 2, 3, 3, 2, 2, 3, 1, 0, 2, 2, 1, 0, 2, 2, 2, 0, 2, 0, 2, 3, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 2, 1, 0, 2, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [1, 3, 4, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 0, 0, 1, 0, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [0, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 16, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 2, 4, 2, 1, 1, 1, 0, 1, 16, 16, 12, 0, 55, 19, 9, 8, 11, 6, 1, 1, 8, 1, 1, 1, 1, 1, 0, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.lstrip()[max(len(in1), int(9.0)):]:{:\\nif in1.startswith(\"\"R\"\"):{:\\nres0 = ( int(7.0) != mod(( saveOrd(in0) + min(( divInt(len(s0),int(5.0)) + i1 ), divInt(divInt(int(7.0),i1),( ( divInt(i2,( i0 - divInt(min(i1, mod(max(int(3.0), i2),int(8.0))),int(7.0)) )) - int(7.0) ) + i1 ))) ),divInt(int(9.0),min(int(8.0), max(i2, ( ( mod(int(5.0),int(0.0)) - divInt(i0,i0) ) - int(8.0) ))))) or divInt(int(8.0),i2) \\le ( i2 - int(59.0) ) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 250}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 16, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in2[i1:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 0, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 16, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1[len(in0.capitalize()):divInt(int(8.0),i0)] not in saveChr(divInt(i2,int(3.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 173}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 3, 1, 3, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 2, 1, 0, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 1, 1, 0, 1, 4], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [14], [], [], [20]], "fitness": 17, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[int(0.0):] != in0\\ni0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 2, 3, 0, 2, 1, 2, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 3, 2, 3, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 0, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [3, 0, 0], [2, 2, 0, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[i0:] != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 4, 2, 4, 2, 0, 3, 4, 0, 0, 1, 0], [2, 2, 3, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize() != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 0, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [3, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[i1:] != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 0, 4, 2, 4, 2, 0, 3, 4, 0, 0, 1, 0], [2, 2, 3, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1 != in0.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 8, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 4, 4, 4, 3, 4, 0, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 2, 1, 0, 0], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = len(in1[i0:]) != int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 244}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 0, 0, 2, 0, 0, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 7, 1, 13, 4, 1, 2, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[( len(in1) - i1 ):]:{:\\nres0 = ( ( i1 != divInt(i1,i2) or True ) and in1[int(0.0):] != in0 )\\ni1 = ( divInt(int(7.0),i2) + i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 3, 1, 1, 2, 0, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [3], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[i0:] != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 4, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 1, 1, 7, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = (in1 + in0) != \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 5, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0], [0, 1, 1], [3, 3, 1, 1, 3, 1, 2, 1, 2, 1, 3, 0, 2, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 2, 0, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 1, 1, 7, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = (in1 + in0) not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 3, 0, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [3, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 0, 4, 0, 0, 7, 1, 1, 15, 2, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[max(len(in1), abs(i1)):]:{:\\nres0 = in1[i2:] != (in0 + \"\"R\"\"[:saveOrd((s0.capitalize() + in1).rstrip()[i1:int(0.0)])])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 1, 1, 2, 0, 1, 2, 3, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [1, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [3], [17], [], [], [20]], "fitness": 18, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[int(6.0):] != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 260}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 6, 5, 2, 8, 1, 2, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 1, 3, 1, 3, 2, 3, 1, 0, 3, 0, 0, 0, 2, 3, 3, 0, 2, 0, 2, 1, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 4, 1, 0, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 1, 5, 4, 1], [1], [0], [2, 2, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 18, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 1, 5, 0, 1, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1[int(4.0):len(in1)]):][int(6.0):]:{:\\nres0 = saveChr(abs(divInt(min(int(5.0), i0),abs(i2)))).capitalize() not in s1[i2:i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 276}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [2, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0], [1, 5], [3, 2, 1, 1], [0, 0], [1, 0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 4, 0, 0, 4, 1, 2, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = ( not False and True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = min(i1, int(9.0))\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 5, 7, 8, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 1, 1, 2, 3, 1, 2, 2, 0, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 1, 3, 3, 4, 1], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = \"\"R\"\".startswith(s1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 3, 1, 0, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 2, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 4, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 10, 2, 3, 0, 2, 4, 0, 1, 7, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = mod(len(in1.capitalize()[int(0.0):i0]),mod(len(saveChr(int(7.0))),int(5.0))) != int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 8, 2, 6, 1, 7, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1], [0, 1, 1], [3, 1, 0, 1, 2, 1, 0, 2, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 3, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 1, 1, 0, 1, 2], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 1, 0, 0, 4, 1, 1, 7, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[int(0.0):i0][int(0.0):] in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 6, 5, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = len(in1[i1:]) != int(76.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 1, 1, 3, 0, 3, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 3, 0, 2, 1, 1, 0, 3, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 1, 3], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 5, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in2 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 1, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 5, 1, 2, 1, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in2[( i1 - i1 ):] != s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 6, 7, 2, 1, 7, 7, 9, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 1, 2, 2, 0, 2, 1, 1, 3, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 2, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 1, 2, 0, 2, 1, 4, 0, 1, 2, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 6, 1, 32, 12, 5, 6, 6, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 != s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = min(( int(2.0) + int(7.0) ), divInt(divInt(i2,divInt(int(6.0),int(7.0))),abs(( divInt(( int(2.0) + i1 ),( ( ( i0 * divInt(min(int(1.0), int(7.0)),i1) ) - divInt(abs(int(7.0)),i2) ) + int(9.0) )) * int(7.0) ))))\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 1, 1, 3, 2, 0, 2, 1, 1, 3, 0, 3, 2, 2, 1, 2, 3, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [1, 5, 4, 4, 1, 0, 5], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [0], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = len(in1[int(0.0):]) != int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 257}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 2, 4], [1], [0], [2, 0, 0, 2, 3, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 1, 6, 0, 2, 0, 0, 6, 0, 1, 11, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = (in1 + s0)[int(0.0):] not in s2[int(2.0):len(saveChr(i2))].capitalize()\\ni2 = int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 2, 2, 1, 3, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 1, 2, 0, 2, 0, 2, 1, 1, 2, 1, 1, 2, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 4, 4, 2, 2, 0, 1], [0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0], [5, 5, 4, 0, 3, 0, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 4, 0, 0, 1, 0], [3, 1, 3], [3, 0, 0], [2, 2, 0, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 6, 0, 34, 11, 7, 5, 6, 8, 0, 1, 15, 2, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = s0[max(abs(saveOrd(in0)), ( divInt(int(2.0),saveOrd(s0[int(7.0):][:int(0.0)][abs(i0):( mod(divInt(int(2.0),i2),mod(int(5.0),( i1 + ( i0 - divInt(int(5.0),int(7.0)) ) ))) - ( int(7.0) * int(9.0) ) )])) - divInt(abs(int(8.0)),i1) )):] != (saveChr(i2) + in1).lstrip(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 0, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 8, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1.capitalize()[len(in0):].startswith(s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 2, 6, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 0, 1, 0, 2, 0, 0, 2], [0, 1, 1], [3, 2, 2, 1, 1, 2, 3, 1, 0, 2, 3, 0, 0, 2, 3, 1, 0, 2, 1, 2, 1, 2, 3, 2, 0, 0, 1, 3, 1, 0, 1, 1, 0, 0, 2, 1, 0, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 0, 0, 4, 2, 1, 2, 1], [2, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0, 1], [0, 5, 4, 4, 0, 0, 4, 1], [1], [0], [2, 3, 0, 4, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3, 1], [1, 0], [2, 1, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 7, 0, 30, 9, 6, 3, 6, 5, 1, 0, 15, 3, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (s0 + in2.capitalize())[len(in1):] not in in1[mod(( int(9.0) * int(7.0) ),mod(len((\"\"R\"\" + s0.lstrip()).rstrip()),int(5.0))):i0][( abs(i2) * i1 ):][:divInt(min(int(2.0), i0),divInt(int(6.0),mod(int(1.0),( min(divInt(i0,i1), int(0.0)) + min(int(7.0), i0) ))))]\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 2, 3, 0, 2, 1, 2, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 3, 2, 3, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 0, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [3, 0, 0], [2, 2, 0, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 19, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 1, 11, 3, 2, 2, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = i0 != ( len(in1[i2:]) + mod(int(2.0),( int(7.0) + int(0.0) )) )\\ni1 = int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 6, 4, 7, 6, 1, 7, 5, 9, 8, 7, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 2, 2, 2, 0, 0], [0, 1, 1], [2, 3, 0, 2, 1, 3, 0, 1, 2, 1, 3, 3, 3, 2, 2, 1, 0, 2, 3, 2, 0, 0, 3, 2, 2, 0, 2, 3, 1, 1, 1, 1, 0, 0, 0, 1, 3, 1, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 0, 0, 1, 2, 1, 3, 0, 2, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 9, 0, 36, 10, 8, 1, 9, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i0):]:{:\\nres0 = in1[divInt(int(8.0),len(in1)):i2][int(6.0):( int(4.0) + abs(min(min(divInt(divInt(int(7.0),i2),divInt(min(divInt(i0,i0), max(mod(divInt(i2,mod(abs(int(6.0)),int(1.0))),int(7.0)), int(5.0))),i2)), i2), i0)) )] in saveChr(int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [0, 2, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 0, 5, 4, 2, 1, 7, 8, 9, 2, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 2, 0, 2, 1, 1, 1, 2, 1, 1, 1, 2], [0, 1, 1], [3, 1, 3, 1, 2, 2, 0, 3, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 3, 0, 2, 1, 2, 1, 0, 0, 3, 0, 0, 1, 1, 0, 2, 2, 2, 3, 1, 3, 0, 3, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 1, 1, 2, 1, 3, 0, 3], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 1, 0, 2, 1, 4, 3, 0, 3], [0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 1, 4, 2], [1], [0], [2, 0, 0, 1, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 2, 2, 1, 1, 4, 0, 2, 0, 0, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( \"\"R\"\" not in in1 or int(6.0) != len(s0) )\\ni2 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 2, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[int(0.0):] != s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 1, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 1, 2, 0, 2, 0, 0, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 3, 1, 0, 2, 1, 1, 0, 6, 6, 10, 0, 34, 11, 7, 4, 7, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[mod(len(in1),int(0.0)):]:{:\\nres0 = ( True or divInt(i2,( i2 + i2 )) != divInt(int(7.0),max(i0, abs(divInt(divInt(int(5.0),i1),( min(( i2 + divInt(len(in0),( min(i1, mod(max(int(7.0), i2),int(6.0))) * int(1.0) )) ), i0) - i0 ))))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 3, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 1, 3, 1, 0, 1, 1, 0, 0, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1, 3, 1], [0, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 3, 4], [1], [0], [2, 0, 0, 3, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 7, 0, 32, 9, 8, 5, 4, 7, 1, 1, 15, 3, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = (in1 + s0) not in saveChr(len(in0[i0:int(8.0)]))[i2:mod(( int(7.0) + ( int(3.0) + saveOrd(saveChr(i2)) ) ),min(divInt(divInt(int(7.0),i0),divInt(len((\"\"R\"\" + in1.rstrip())),( i1 * ( min(( max(i2, int(6.0)) - abs(int(1.0)) ), i0) + int(7.0) ) ))), int(7.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 5, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 3, 1, 2, 3, 3, 3, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 1, 1, 1], [1, 0, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0], [4, 5, 4, 5, 4, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 2, 0, 4, 3, 1, 2, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 12, 2, 6, 1, 1, 6, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in2.capitalize() not in in1[len(saveChr(( abs(int(0.0)) - divInt(min(len(s0[abs(int(7.0)):]), int(5.0)),i0) ))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 1, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 2, 2, 1, 2, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 1, 1, 2, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 4, 0, 2, 0, 1], [1, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0], [5, 5, 4, 4, 3, 0, 2, 5], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 2, 0, 4, 3, 4, 0, 0, 1, 0], [1, 1, 3], [3, 4, 0], [2, 2, 1, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 1, 0, 12, 3, 4, 2, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != saveChr(abs(saveOrd(s0[:( divInt(int(2.0),( int(7.0) - int(0.0) )) - int(1.0) )][:i0])))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 4, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 1, 4, 0, 2, 0, 0, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = int(6.0) != int(2.0)\\ni2 = len(in1.capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 0, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 0, 2, 1, 3, 1, 1, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 12, 3, 2, 0, 3, 5, 0, 1, 11, 2, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2.rstrip() != in0[:divInt(mod(int(6.0),i1),i2)][divInt(int(7.0),len(saveChr(int(5.0)))):][int(0.0):][i1:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 3, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 10, 1, 3, 0, 1, 4, 0, 1, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = len(in1.capitalize()[len(saveChr(int(0.0))[i0:mod(i2,int(7.0))]):int(5.0)]) != int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 237}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 8, 1, 4, 0, 1, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[abs(len(in1)):]:{:\\nres0 = saveChr(abs(mod(i0,min(i2, int(7.0))))) not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [0, 1, 1], [2, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 1, 0], [0, 0], [1, 5], [3, 2, 1, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 1, 4, 1, 0, 3, 1, 1, 0, 2, 2, 6, 1, 13, 3, 3, 2, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = ( not min(i0, int(9.0)) != i1 or False )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = mod(i2,( ( int(7.0) + len(in1[i1:]) ) + i2 ))\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 1, 2, 0, 1, 1, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [3], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 8, 1, 3, 0, 1, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = s0[len(in0):] != saveChr(abs(int(6.0)))[:int(1.0)][divInt(i0,int(1.0)):].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 8, 1, 8, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [1, 1, 1], [3, 1, 0, 3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 1, 0, 3, 2, 4, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 3, 4, 0, 0, 2, 1, 2, 1, 4, 3, 4, 4, 0, 1, 0], [2, 1, 2], [1, 0], [2, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 4, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len((s2.capitalize() + in1)):]:{:\\nres0 = int(6.0) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 8, 2, 6, 1, 7, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 2, 0, 0, 3, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 3, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 1, 1, 0, 1, 2], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 6, 0, 13, 2, 3, 0, 2, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1[i0:]) != int(0.0) or True ) and in0 != getCharFromString(s0[:mod(i1,i1)], len(saveChr(mod(int(0.0),i0))))[i1:i1] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 1, 4, 7, 6, 1, 7, 7, 9, 8, 5, 8, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 2, 3, 2, 0, 1, 2, 1, 3, 3, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 3, 0, 1, 3, 1, 0, 1, 1, 0, 0, 3, 3, 3, 1, 3, 0, 2, 2, 2, 1, 2, 2, 1, 0, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 0, 3, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 4, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 7, 0, 33, 8, 10, 4, 4, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(i0, len(in1)):]:{:\\nres0 = in2[( abs(mod(i2,int(8.0))) + ( int(1.0) + min(len(in1), min(divInt(divInt(int(4.0),i2),divInt(max(( i0 * ( abs(int(7.0)) - max(i0, int(6.0)) ) ), min(int(1.0), i2)),int(7.0))), int(7.0))) ) ):i1] in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 0, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 1, 0, 2, 2, 1, 3, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 4, 2, 2, 4, 1, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 10, 3, 2, 3, 0, 4, 1, 1, 9, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = saveChr(( i1 * int(0.0) ))[:i2][( ( int(6.0) + len(\"\"R\"\") ) * int(5.0) ):].capitalize() != in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 2, 2, 0, 3, 0, 1, 2, 1, 2, 1, 3], [2, 2, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 20, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 10, 0, 50, 16, 12, 9, 7, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = abs(mod(int(8.0),abs(( i0 * min(( int(7.0) * len(in1[i0:]) ), mod(( divInt(int(5.0),i2) - ( min(( i1 * divInt(max(( abs(i1) + divInt(max(int(7.0), i2),int(6.0)) ), int(1.0)),i1) ), i2) * divInt(int(7.0),abs(int(7.0))) ) ),max(i0, ( ( ( int(9.0) - int(8.0) ) - mod(int(5.0),i0) ) * int(0.0) )))) )))) != len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 265}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 0, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 2, 2, 2, 2, 1, 2, 1, 3, 0, 0, 2, 1, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 3, 3, 2, 0, 1, 1, 2, 3, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 0, 1, 3, 1, 3, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [3, 4, 3, 0, 3, 0, 2, 2, 1], [0, 0, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 20, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 0, 17, 6, 3, 0, 6, 7, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[saveOrd(s0):] == getCharFromString(s0, i0)[mod(divInt(divInt(mod(int(0.0),divInt(int(7.0),len(in1))),i2),i2),divInt(int(5.0),int(8.0))):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 265}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 1, 1, 2, 0, 0], [0, 1, 1], [3, 1, 3, 1, 2, 2, 0, 0, 0, 2, 0, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 0, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 20, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 3, 0, 2, 0, 0, 5, 1, 1, 8, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize()[len(in1[int(6.0):]):]:{:\\nres0 = in1 not in in0\\ni2 = len(\"\"R\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 303}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 2, 2, 1, 2, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 1, 1, 2, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 4, 0, 2, 0, 1], [0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0], [5, 5, 4, 4, 5, 0, 4, 5], [1], [0], [2, 2, 0, 2, 0, 0, 4, 2, 2, 0, 4, 3, 4, 0, 0, 1, 0], [3, 1, 3], [3, 0, 0], [2, 2, 1, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 20, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 17, 17, 8, 0, 49, 17, 8, 9, 8, 5, 0, 1, 11, 2, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1[:len(in1)]):][abs(abs(( divInt(int(2.0),( int(7.0) + int(0.0) )) - int(2.0) ))):]:{:\\nres0 = i0 != ( divInt(divInt(int(5.0),i2),( saveOrd(in2[( i1 - mod(i0,( int(5.0) * int(7.0) )) ):][:divInt(int(7.0),int(9.0))].lstrip(saveChr(mod(min(int(8.0), i1),i2)))) - ( int(5.0) * abs(int(0.0)) ) )) - min(i1, ( ( mod(int(4.0),int(8.0)) - divInt(int(59.0),i2) ) * int(9.0) )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [0, 1, 1], [2, 0, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 20, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 6, 1, 32, 10, 8, 4, 6, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1[mod(i0,abs(( int(0.0) + int(7.0) ))):]) != divInt(int(5.0),min(i1, divInt(( ( int(7.0) + i2 ) - divInt(len(in0),int(7.0)) ),i0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = max(max(divInt(int(1.0),i2), divInt(len(s0),int(7.0))), ( int(7.0) - int(9.0) ))\\n", "other_info": {}, "test_fitness": 247}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 1, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 2, 0, 0, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 3, 0, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 20, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 3, 1, 0, 2, 1, 1, 0, 6, 6, 10, 0, 34, 11, 7, 4, 7, 5, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[divInt(len((in1 + in0)),divInt(int(0.0),i1)):]:{:\\nres0 = ( True or ( i2 + i2 ) != divInt(int(7.0),max(i0, abs(divInt(divInt(int(5.0),i1),( min(( i2 + divInt(len(in0),( min(i1, mod(max(int(7.0), i2),int(6.0))) * int(1.0) )) ), i0) - i0 ))))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 227}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 0, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 2, 0, 5, 0, 2, 0, 0, 6, 0, 1, 10, 3, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = ( ( len(s2[i1:]) != int(67.0) or True ) and in0.capitalize() not in getCharFromString(s0.rstrip(), i2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 6, 5, 2, 8, 1, 2, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 1, 0, 0, 3, 0, 0, 0, 2, 3, 3, 0, 2, 0, 2, 1, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 2, 4, 1, 0, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 5, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 5, 0, 13, 2, 3, 0, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = ( ( len(in1[divInt(int(3.0),int(6.0)):]) != mod(int(5.0),i1) or True ) and in0 not in saveChr(i0)[saveOrd(in2[i1:i1]):i2] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 1], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 1, 0, 0, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 0, 12, 1, 4, 0, 1, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in2[int(0.0):])]:{:\\nres0 = in0 not in getCharFromString(s0[i0:abs(mod(i2,int(7.0)))], i2)[i0:saveOrd(saveChr(i1))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 8, 2, 6, 6, 1, 1, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 1, 2, 3, 0, 2, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 4, 0, 4, 2, 4, 3, 4, 0, 0, 1, 0], [1, 0, 3, 0], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = ( ( len(in1) \\l i1 or True ) and in0 not in s0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 6, 5, 2, 8, 1, 2, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 3, 1, 1, 2, 3, 1, 0, 3, 0, 0, 0, 2, 3, 3, 0, 2, 0, 2, 1, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 4, 1, 0, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 3, 3, 5, 4, 1], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 34, 8, 9, 3, 5, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in0[len(in0[:abs(int(3.0))].capitalize()[int(6.0):divInt(min(int(5.0), i1),abs(i1))][i1:i1]):] not in saveChr(mod(saveOrd((\"\"R\"\" + in2.rstrip())),max(i2, ( i2 + mod(int(2.0),divInt(min(max(divInt(int(8.0),( ( int(1.0) - i1 ) + int(2.0) )), int(9.0)), i2),i0)) ))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 5, 7, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 3, 2, 1, 2, 1, 2, 1, 1, 1, 0, 2, 2, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 1, 1, 2, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 4, 2, 2, 0, 1], [0, 1, 1, 1, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 1, 1, 3, 4, 0, 0, 1, 0], [2, 1, 3], [3, 0, 0], [2, 0, 1, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 4, 0, 29, 11, 3, 5, 6, 5, 1, 1, 10, 0, 0, 5, 1, 0, 1, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[( len(in0) + divInt(int(2.0),( int(7.0) - mod(int(0.0),int(2.0)) )) ):int(5.0)] != \"\"u\"\"[i0:][:divInt(divInt(int(7.0),int(7.0)),i2)][:( abs(( i1 - divInt(i0,( int(7.0) - int(9.0) )) )) - divInt(int(8.0),int(5.0)) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 2, 1, 0, 0, 3, 1, 2, 2, 1, 0, 1, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 2, 3, 2, 1, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 21, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 14, 14, 13, 1, 52, 15, 11, 8, 7, 6, 1, 1, 10, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1[( int(0.0) - i1 ):]) != i2 or True ) and in0 not in \"\"R\"\"[min(int(7.0), divInt(( int(5.0) + i1 ),int(7.0))):mod(divInt(i0,i1),divInt(abs(( i2 * ( len(s0[mod(abs(i1),( max(int(6.0), i2) - int(1.0) )):int(7.0)]) + min(i0, divInt(int(7.0),max(int(9.0), abs(i0)))) ) )),mod(( ( int(8.0) * int(5.0) ) - ( int(0.0) - i2 ) ),int(4.0))))] )\\ni2 = max(int(8.0), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 4, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 3, 5, 7, 7, 1, 7, 7, 2, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 2, 1, 1, 3, 0, 2, 2, 2, 1, 2, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 0, 1, 2, 1, 3, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 3, 1, 0, 3, 1, 1, 2, 1, 0, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0], [0, 5, 3, 4, 2, 5, 4, 3], [1], [0], [2, 0, 0, 4, 0, 0, 4, 0, 4, 0, 4, 0, 1, 2, 0, 1, 0], [3, 1, 3, 0], [3, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 23, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 12, 1, 55, 18, 12, 11, 7, 8, 0, 1, 12, 4, 2, 1, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nres0 = in1.lstrip(s2) not in saveChr(len(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = ( i2 + max(( i2 + divInt(int(9.0),int(3.0)) ), min(i0, ( ( mod(int(5.0),( ( len(in1.lstrip()) * max(i0, ( max(( int(7.0) - i2 ), divInt(abs(int(7.0)),i0)) + int(1.0) )) ) * int(7.0) )) - i2 ) - max(mod(int(7.0),min(( max(i0, ( ( mod(int(2.0),int(7.0)) * divInt(int(5.0),i0) ) + i1 )) + i2 ), int(0.0))), mod(int(4.0),saveOrd(getCharFromString(in0, int(8.0))))) ))) )\\n", "other_info": {}, "test_fitness": 235}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 1, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 25, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nres0 = s1.capitalize() != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 263}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 0, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 25, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 8, 2, 2, 0, 2, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1[len(in0.capitalize()):divInt(int(8.0),int(3.0))] not in saveChr(divInt(i0,int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 268}, {"genotype": [[0], [0, 0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 2, 0, 2, 0, 0], [0, 1, 1], [3, 1, 0, 2, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 4, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0], [1, 5, 3, 4, 3, 2, 4, 0], [1], [0], [2, 0, 2, 4, 0, 4, 0, 2, 3, 0, 1, 3, 4, 4, 0, 4, 0], [2, 2, 3, 3, 2], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 26, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 1, 9, 2, 2, 1, 1, 8, 1, 1, 17, 5, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in0.capitalize()[int(4.0):]):]:{:\\nres0 = in1.capitalize() not in (in0 + \"\"R\"\")[i1:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = ( abs(divInt(i2,int(7.0))) + i0 )\\ns2 = (in1.lstrip().rstrip() + s0.capitalize())\\n", "other_info": {}, "test_fitness": 376}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 2, 3, 1, 2, 1, 3, 3, 1, 2, 2, 2, 1, 0, 2, 0, 1, 0, 2, 0, 2, 0, 1, 2, 1, 1, 2, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 4, 4, 2, 2, 0, 1], [0, 2, 0, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 1, 1, 0, 1, 0], [5, 5, 4, 4, 3, 5, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 1, 2, 2, 0, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [3, 0, 0], [2, 2, 0, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 5, 0, 26, 8, 7, 4, 4, 6, 1, 1, 10, 0, 0, 4, 1, 0, 1, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[min(abs(saveOrd(in0)), ( saveOrd(\"\"u\"\") + int(5.0) )):] != in2[:divInt(int(7.0),abs(abs(int(0.0))))][( divInt(divInt(int(2.0),i0),mod(i2,int(5.0))) * i1 ):( i0 + ( i1 * int(5.0) ) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 275}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 5, 7, 7, 1, 9, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 0, 2, 3, 3, 1, 0, 1, 3, 2, 0, 1, 2, 2, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 3, 1, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [2, 3, 4, 0, 3, 2, 1, 0, 1, 0, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 2, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [18], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 11, 0, 52, 16, 11, 10, 6, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in0)):]:{:\\nres0 = divInt(i0,divInt(saveOrd(in1.rstrip()[min(int(0.0), i1):]),int(5.0))) != len(in0[( i1 + int(5.0) ):( ( i0 + mod(abs(( i1 * ( max(divInt(int(7.0),i2), ( min(int(7.0), i1) - int(1.0) )) + int(9.0) ) )),max(int(7.0), divInt(int(9.0),min(divInt(saveOrd(s0[i2:( ( ( int(8.0) * int(5.0) ) - ( int(0.0) - i0 ) ) * int(4.0) )]),i0), i2)))) ) + int(8.0) )])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 314}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 2, 3, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 0, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 3, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 4, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 6, 1, 1, 10, 2, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[saveOrd(in0):]:{:\\nres0 = in1.capitalize()[len(getCharFromString(s1, len(\"\"R\"\"))):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 307}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1, 1, 1], [1, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 1, 8, 1, 3, 1, 1, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = in1 != in1[:len(in0)]\\ni0 += len(getCharFromString(saveChr(i1), abs(mod(int(7.0),int(5.0)))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [1, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 4, 1, 6, 0, 3, 0, 0, 7, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(s0):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0, i2)[i2:len(in1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i0\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1)):{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 1, 0, 10, 2, 3, 1, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nres0 = in1[len(in0):] not in in1[( int(0.0) + abs(mod(i0,int(1.0))) ):int(5.0)].capitalize()[int(7.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 0, 2, 1, 1, 3, 3, 0, 0, 2, 2, 1, 2, 2, 3, 2, 0, 2, 3, 3, 2, 0, 2, 3, 3, 0, 3, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 2, 1, 1, 0, 1, 4, 2], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 4, 1, 4, 0, 1, 0], [0, 1, 3], [0, 0], [1, 2, 2, 1, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 6, 1, 3, 0, 1, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] not in in0[mod(int(0.0),abs(i0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 220}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2, 1], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [0, 0, 0], [0, 1, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 7, 5, 7, 7, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 1, 0, 2, 4, 4], [1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 2], [0, 1, 1], [1, 3, 1, 1, 2, 2, 3, 2, 1, 1, 3, 2, 2, 2, 2, 1, 3, 2, 3, 3, 0, 1, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 3, 2, 0, 0, 0, 2, 3, 0, 1, 2, 3, 0, 0, 3, 2, 3, 2, 2, 0, 3, 2, 2, 0, 3, 2, 1, 0, 1, 1, 1, 3, 2, 1, 2, 0, 1, 2, 0, 1, 3, 1, 0, 1, 3], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [2, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2, 0, 3, 0, 0, 0, 3, 1, 3, 1, 4], [0, 1, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0], [2, 5, 3, 4, 3, 0, 4, 0, 3, 2], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [1, 1, 0, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 5, 5, 1, 4, 1, 4, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 24, 24, 19, 2, 88, 27, 21, 16, 12, 10, 1, 1, 17, 4, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[int(8.0):]:{:\\nres0 = ( abs(int(7.0)) \\l int(5.0) or divInt(( len(in0) + ( int(7.0) - int(7.0) ) ),abs(divInt(( mod(( int(5.0) * abs(( len(in1[len(in0):]) - i1 )) ),int(7.0)) + max(divInt(int(7.0),i2), ( abs(int(9.0)) * i2 )) ),int(8.0)))) \\l int(5.0) )\\ni0 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = in1\\ni2 -= max(divInt(int(0.0),saveOrd(saveChr(divInt(abs(i0),( ( ( int(4.0) - min(mod(i0,i0), i0) ) + divInt(len(s0[:i0]),int(8.0)) ) + ( min(i2, i0) + min(( min(( ( i0 - len(saveChr(( mod(i2,max(divInt(int(59.0),i0), int(9.0))) - int(2.0) ))) ) - int(2.0) ), len((getCharFromString(getCharFromString(in0, divInt(int(1.0),( i2 + int(0.0) ))), divInt(i0,int(2.0))) + \"\"R\"\"))) - max(int(4.0), i2) ), int(4.0)) ) ))))), saveOrd(s2))\\n", "other_info": {}, "test_fitness": 250}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 1, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 1, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 2, 0, 0], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 1, 0, 8, 1, 2, 1, 0, 5, 1, 1, 11, 1, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(s1):]:{:\\nres0 = in1[len(in0):] != \"\"R\"\".capitalize()[i0:int(6.0)][int(1.0):][( int(1.0) + int(2.0) ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 2, 7, 7, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 3, 3, 3, 3, 1, 2, 2, 0, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 0, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 7, 0, 34, 8, 11, 2, 6, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(s0):]:{:\\nres0 = in1[len(in0):] not in in0[divInt(abs(len(saveChr(max(saveOrd((\"\"R\"\" + in1.rstrip())), int(0.0))))),( mod(i1,int(4.0)) + i0 )):mod(max(int(5.0), i0),abs(i1))].capitalize()[divInt(int(2.0),int(7.0)):max(mod(abs(int(7.0)),divInt(max(int(7.0), i2),( int(7.0) * i2 ))), i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [3, 2, 3, 0], [1, 0], [1, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 7, 1, 4, 1, 0, 5, 1, 1, 9, 1, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] != \"\"R\"\"[:abs(( i1 + abs(i2) ))].rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 2, 1, 2, 1, 2, 2, 0, 1, 2, 1, 1, 1], [0, 1, 1], [3, 2, 2, 2, 0, 2, 0, 1, 2, 3, 3, 3, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 0, 2, 3, 0, 2, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [5, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 3, 3], [1, 0], [2, 0, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 0, 38, 13, 8, 5, 8, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in0):]:{:\\nres0 = saveChr(divInt(divInt(( i2 * mod(i2,int(17.0)) ),divInt(max(abs(min(i2, divInt(( i2 + i1 ),( len(in1) * divInt(i2,( i1 - mod(min(i2, divInt(max(int(5.0), int(7.0)),int(7.0))),int(1.0)) )) )))), i2),i0)),( int(7.0) + abs(int(7.0)) ))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 33, 9, 8, 4, 5, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i2,int(7.0))))[mod(int(5.0),min(i0, ( divInt(( int(7.0) + i1 ),divInt(len((\"\"R\"\" + in1.rstrip()).capitalize()),min(i1, ( max(( int(2.0) + i2 ), divInt(abs(int(1.0)),i1)) * int(7.0) )))) - int(7.0) ))):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 4, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 0, 1, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 1, 0, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s2[( int(0.0) + i0 ):i2].capitalize()[i2:int(1.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 292}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 5, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 9, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in2[len(in0):] not in saveChr(i1).capitalize()[int(0.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 292}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 7, 0, 1, 10, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = (in1 + in0) in in1[len(in1[i1:int(0.0)]):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 292}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 10, 2, 2, 1, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s2[( int(0.0) + i0 ):mod(i2,int(1.0))].capitalize()[int(5.0):int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 292}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 3, 4, 1, 2, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = len(in1[mod(int(0.0),int(7.0)):]) != mod(i0,abs(( int(5.0) + min(i2, i2) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 1, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 1, 1, 0], [3, 1, 3, 1], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[saveOrd(in1):]:{:\\nres0 = in1.rstrip() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 305}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [4, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [0], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 12, 2, 5, 1, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = len(in1[abs(i0):]) != min(mod(int(0.0),int(7.0)), ( int(5.0) + len(in0) ))\\ni1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 2, 3, 0, 2, 1, 2, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 3, 2, 3, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 3, 2, 2, 0, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [3, 0, 0], [2, 2, 0, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 30, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 1, 33, 11, 6, 4, 7, 7, 1, 1, 15, 2, 0, 4, 1, 0, 1, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[saveOrd(in1):]:{:\\nres0 = in1[i0:] != (in0[:( len(\"\"u\"\") + i2 )][mod(int(2.0),( int(7.0) + int(0.0) )):int(2.0)] + (saveChr(i1) + s0).capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = mod(divInt(divInt(int(5.0),i1),( abs(( min(divInt(i2,divInt(int(5.0),int(7.0))), mod(len(in1),int(7.0))) - i1 )) - abs(int(9.0)) )),i2)\\n", "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 8, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2], [0, 1, 1], [3, 0, 0, 3, 1, 2, 1, 1, 2, 2, 0, 0, 3, 2, 3, 1, 0, 2, 0, 2, 0, 1, 3, 0, 3, 1, 2, 3, 0, 0, 1, 2, 0, 2, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 4, 4, 1, 2, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [3, 5, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [3, 1, 3, 1], [0, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 7, 0, 22, 6, 4, 1, 5, 7, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[i1:].startswith(in0)\\nin1 = in1[i0:abs(int(6.0))].lstrip()[mod(int(1.0),int(8.0)):mod(( i1 * i2 ),abs(mod(min(int(2.0), i1),divInt(i2,mod(i1,int(8.0))))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 0, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 0, 1, 1, 0, 0, 2], [0, 1, 1], [3, 1, 2, 1, 1, 2, 3, 1, 2, 1, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0, 1, 1, 3, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 1, 4, 1, 2, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0], [5, 5, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 2, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [0, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 7, 7, 4, 0, 17, 4, 3, 1, 3, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):int(30.0)]:{:\\nres0 = ( ( mod(int(5.0),int(2.0)) != divInt(len(in1[int(8.0):]),( int(1.0) + i1 )) or True ) and in0 not in in1[i0:i1].capitalize()[divInt(saveOrd(saveChr(int(7.0))),i1):] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 357}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 6, 7, 2, 1, 7, 7, 9, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 1, 2, 2, 0, 2, 1, 1, 3, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [4, 0, 2, 0, 2, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 1, 2, 0, 2, 1, 4, 0, 1, 2, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = in1 != s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 9, 3, 2, 1, 2, 5, 1, 1, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[mod(len(in1),mod(int(2.0),i0)):]:{:\\nres0 = in1.capitalize()[( len(in0[int(1.0):]) + int(5.0) ):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 253}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 3, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 1, 3, 1, 0, 1, 1, 0, 0, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 4, 0, 3, 0, 1, 2, 1, 3, 1], [0, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 3, 5, 4, 5, 3, 4], [1], [0], [3, 4, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 1, 34, 9, 8, 5, 4, 5, 0, 1, 10, 3, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (saveChr(min(min(i0, int(8.0)), i2)) + in0):{:\\nres0 = in2[mod(( int(7.0) + ( int(3.0) + saveOrd(in1) ) ),i2):] not in saveChr(min(divInt(divInt(int(7.0),i0),divInt(len(in2[( i1 * ( min(( max(i2, int(6.0)) - abs(int(1.0)) ), i0) + int(7.0) ) ):].rstrip()),int(7.0))), i2))\\ni0 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 314}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 8, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 2, 2, 1, 3, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 1, 2, 0, 2, 0, 2, 1, 1, 2, 1, 1, 2, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 4, 1, 2, 2, 0, 1], [0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 0, 0, 0, 1, 0], [2, 1, 3], [3, 0, 0], [2, 2, 0, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 4, 0, 29, 10, 5, 7, 3, 8, 0, 1, 14, 1, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[saveOrd(in0):] != s0[abs(saveOrd((in1 + in2).capitalize())):][:divInt(( int(2.0) + max(int(7.0), int(0.0)) ),int(8.0))][i1:( mod(( int(5.0) - i2 ),( int(5.0) - ( i1 * ( i0 - divInt(int(7.0),int(7.0)) ) ) )) * ( int(9.0) - int(8.0) ) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 6, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 1, 2, 0, 0, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3, 1], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 2, 1, 0, 6, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[saveOrd(in0):] not in in0.capitalize().capitalize()[:( int(9.0) + int(6.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 2, 7, 9, 2, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 1, 2, 2, 0, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 4, 0, 22, 6, 5, 0, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):].endswith(in0[divInt(int(0.0),int(1.0)):mod(abs(int(5.0)),mod(divInt(i1,int(2.0)),i0))].capitalize()[mod(len(saveChr(int(7.0))),i0):max(i1, divInt(int(9.0),int(2.0)))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 268}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 1, 0, 4, 8, 5, 0, 9, 2, 2], [0, 0, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 2, 2, 2, 2, 1, 2, 1, 3, 0, 0, 2, 1, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [3, 4, 3, 0, 3, 0, 2, 2, 1], [0, 2, 0, 0, 2, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 1, 0, 0, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 4, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 3, 0, 1, 1, 0, 5, 0, 1, 5, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\ni2 = i2\\ni1 += int(6.0)\\nin1 = in0.rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 0, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 4, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 0, 2, 0, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 2, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [3, 5, 4, 4, 2, 4, 4, 1], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 1, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 2, 1, 6, 1, 2, 3, 2, 1, 0, 6, 6, 0, 0, 9, 1, 2, 0, 1, 6, 1, 1, 10, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in \"\"R\"\":{:\\nres0 = in2 != in1\\nb2 = ( len(in1[min(int(0.0), int(2.0)):]) != int(5.0) or ( s2.endswith(in1[:mod(int(4.0),int(8.0))].capitalize()[int(1.0):]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 0, 1, 2, 1, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 2, 1, 0, 1, 3, 0, 2, 2, 2, 1, 3, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 2, 3, 1, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 0], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 2, 2, 1, 1, 0, 1, 4, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 0, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 2, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 10, 3, 3, 1, 2, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(s0):] not in s2[abs(mod(int(0.0),abs(mod(( int(7.0) + i0 ),int(5.0))))):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 2, 2, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [3, 5, 4, 5, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 5, 0, 19, 6, 3, 2, 4, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1[len(in2):i0]):][mod(divInt(( i2 + int(0.0) ),divInt(int(7.0),int(5.0))),i2):]:{:\\nres0 = saveChr(i0)[( mod(int(8.0),i1) * int(2.0) ):len(in0)] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 1, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 2, 2, 1, 1, 2, 2, 0, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 1, 1, 0], [2, 1, 3, 1], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 0, 17, 6, 3, 1, 5, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[abs(len(in1)):( int(0.0) + divInt(mod(int(6.0),int(1.0)),mod(divInt(i1,int(2.0)),i2)) )]:{:\\nres0 = in1[mod(abs(int(7.0)),i0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 6, 3, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 2, 1, 2, 0, 1, 2, 1, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [1, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 2, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 11, 3, 2, 2, 1, 5, 0, 1, 9, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nb1 = in1[len(in0):] not in getCharFromString(saveChr(i0)[mod(int(6.0),( i2 - int(6.0) )):], ( int(3.0) + i1 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0, 2, 1, 2], [0, 1, 1], [3, 3, 2, 0, 0, 2, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 3, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 14, 1, 38, 10, 8, 4, 6, 5, 1, 1, 14, 4, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), mod(i1,i2)):mod(i2,i2)]:{:\\nres0 = (in1 + saveChr(i1)[int(5.0):].capitalize()) not in s0[abs(i2):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = ( divInt(int(7.0),i0) + divInt(min(divInt(i0,( len((\"\"R\"\" + saveChr(( min(i0, divInt(max(int(5.0), i2),int(7.0))) + int(6.0) ))).rstrip()) * i1 )), i2),( int(1.0) - abs(int(7.0)) )) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 1, 1, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nin1 = in0[len(in1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 1, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 0, 0, 5, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = ( ( int(7.0) != int(7.0) or True ) and s1[int(5.0):] not in in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 1, 0, 0, 2, 0, 1, 1, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [4, 4, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 1, 4, 1, 1, 0, 1, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(len(saveChr(int(6757.0)).rstrip()),i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 2, 5, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 3, 0, 1, 0, 0, 1, 2, 3, 3, 2, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 2, 3, 3, 4, 2, 4, 4, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 1, 0], [1], [0], [2, 0, 4, 1, 0, 4, 2, 4, 2, 2, 4, 3, 4, 2, 1, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 1, 2, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 5, 0, 2, 0, 0, 3, 1, 1, 5, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[abs(int(7.0)):]:{:\\nb1 = getCharFromString(\"\"R\"\", abs(i2)) not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 6, 3, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 2, 1, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 1, 3, 0, 0], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 4, 2, 4, 3, 0, 0, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 2, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 0, 2, 0, 0, 5, 0, 1, 9, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[saveOrd(in1):]:{:\\nres0 = s1[len(in0):] not in getCharFromString(saveChr(i0)[i2:], int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 0, 2, 2, 0, 1, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\ni2 = saveOrd(in1[int(0.0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 2, 2, 2, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni2 = len(in1.capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 1, 1, 0, 2, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [4, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 5, 4, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0.capitalize():{:\\nres0 = in1 not in in1[saveOrd(in2):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 2, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 0, 13, 4, 2, 2, 2, 6, 0, 1, 10, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ns0 = in0[len(in1[( int(0.0) + i2 ):mod(int(1.0),( int(5.0) - int(7.0) ))].rstrip()[mod(i2,i2):].capitalize()):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 2, 2, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 1, 0, 10, 3, 2, 1, 2, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[mod(len(in1),mod(int(0.0),i0)):]:{:\\nres0 = in1[:( len(\"\"R\"\") + int(1.0) )][int(5.0):].capitalize()[int(7.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 2, 0, 3, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[:len(in0)] not in in0[mod(mod(i0,abs(i2)),int(0.0)):( int(7.0) + i2 )].capitalize()[i0:i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 2, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 2, 3, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[saveOrd(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 8, 1, 8, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [1, 1, 1], [3, 1, 0, 3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 1, 0, 3, 2, 4, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 4, 0, 0, 0, 0, 2, 1, 2, 1, 4, 3, 4, 4, 0, 1, 0], [2, 1, 2], [1, 0], [2, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 4, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2.capitalize() not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 1, 2, 2, 0, 0, 1, 1, 0, 2, 0], [0, 1, 1], [3, 3, 0, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 0, 2, 2, 1, 0, 0, 2, 0, 2, 0, 3, 2, 3, 0, 1, 0, 0, 1, 0, 1, 2, 3, 1, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 0, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 2, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3, 0, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 19, 19, 22, 0, 76, 22, 14, 9, 13, 5, 1, 1, 15, 5, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in saveChr(len(in2))[len(in1[i0:mod(i0,divInt(i2,int(8.0)))][( int(7.0) + abs(i0) ):]):]:{:\\nres0 = ( ( min(divInt(divInt(int(5.0),i1),divInt(len(saveChr(( i2 + ( min(divInt(max(i1, ( abs(int(7.0)) * i2 )),int(6.0)), int(1.0)) - i0 ) ))),i0)), mod(int(7.0),max(int(7.0), max(i0, divInt(( ( int(9.0) + int(8.0) ) * ( int(5.0) - i0 ) ),int(0.0)))))) != min(divInt(i1,divInt(mod(int(4.0),i2),i2)), ( i0 - divInt(i0,min(( max(i1, int(8.0)) * i1 ), i0)) )) or True ) and in1[int(59.0):i2].rstrip() not in getCharFromString((\"\"R\"\" + getCharFromString(in0, int(9.0))), divInt(min(int(2.0), int(2.0)),i0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2, 0], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 1, 1], [0, 3, 1, 0, 3, 2, 3, 2, 1, 1, 1, 0, 2, 2, 2, 1, 1, 1, 3, 3, 0, 1, 3, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 3, 2, 0, 0, 0, 2, 3, 0, 1, 2, 3, 0], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 1, 0, 3, 2], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [1, 1, 0, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 5, 5, 1, 4, 1, 4, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 1, 11, 2, 3, 1, 1, 7, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i2:]:{:\\nin1 = in1\\ni2 = abs(int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = s0[i2:]\\nres0 = s1 not in saveChr(len(saveChr(divInt(abs(( int(7.0) + int(5.0) )),int(7.0)))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 2, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 1, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 2, 2, 0, 0, 0, 2, 0, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 0, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 1, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = len(saveChr(i2)[len(s0):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 3, 6, 1, 1, 4, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 2, 1, 1, 1, 2, 1, 1, 2, 2, 3, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [3, 5, 4, 1, 1, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 1, 2, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 5, 0, 31, 9, 6, 2, 7, 7, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = s1[mod(int(0.0),int(2.0)):] not in s1[int(3.0):].capitalize()[mod(int(6.0),int(1.0)):][:( mod(min(int(1.0), i1),divInt(abs(int(4.0)),i0)) + mod(i1,divInt(int(7.0),int(9.0))) )]\\nin1 = saveChr(min(( max(int(8.0), mod(saveOrd((\"\"R\"\" + in1.rstrip())),i1)) * i2 ), int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 0, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 5, 0, 1, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(in0.capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 2, 0, 0, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 3, 0, 0, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s0.capitalize()[min(len(in2[i1:]), i1):] != in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 1, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = s1[len(in0):] not in s0[mod(int(0.0),mod(( int(7.0) + i1 ),i2)):int(5.0)].capitalize()[abs(i2):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 3, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 4, 0, 2, 0, 2, 4, 0, 4, 0, 1, 1, 0], [2, 2, 3, 3], [5, 0], [1, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in2 not in in2\\ni0 = len(in1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 1, 3, 1, 1, 1, 3, 0, 3, 2, 2, 1, 1, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 2, 2, 3], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 2, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 6, 0, 38, 9, 11, 2, 7, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = saveChr(len(in1))[mod(int(8.0),max(int(7.0), min(int(5.0), int(7.0)))):] not in in0[int(6.0):len(s0[i1:min(mod(divInt(int(1.0),int(7.0)),divInt(max(divInt(i2,divInt(abs(( max(i0, ( abs(int(7.0)) + i1 )) + int(9.0) )),int(8.0))), i1),i2)), mod(int(5.0),abs(int(0.0))))])]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 9, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 3, 2, 0, 0, 3, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 0, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 2, 0, 1, 2, 1, 4], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nres0 = in1[i1:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [3, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 7, 0, 4, 0, 0, 7, 1, 1, 15, 2, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(in1):] != \"\"R\"\"[abs(int(0.0)):i1][:saveOrd((s0.capitalize() + in1).rstrip()[:i2])]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 1, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 2, 0, 0, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 2, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 3, 1, 0, 2, 1, 1, 0, 6, 6, 10, 0, 34, 11, 7, 4, 7, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in s2[mod(len(in1),divInt(int(0.0),i2)):]:{:\\nres0 = ( True or ( i2 + i2 ) != divInt(int(7.0),max(i0, abs(divInt(divInt(int(5.0),i1),( min(( i2 + divInt(len(in0),( min(i1, mod(max(int(7.0), i2),int(6.0))) * int(1.0) )) ), i0) - i0 ))))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 3, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 0, 4, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 0, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 1, 33, 8, 10, 6, 2, 8, 1, 1, 16, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nb1 = in1[min(min(saveOrd(in0), i0), len(s0)):] != (in1.rstrip() + in2).capitalize()[i2:int(0.0)].capitalize()[:mod(int(9.0),min(i1, int(8.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = ( ( int(6.0) + i1 ) + mod(max(( i2 * ( abs(( max(i1, ( saveOrd(\"\"R\"\") - int(6.0) )) + i2 )) * int(1.0) ) ), int(7.0)),i0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 12, 2, 3, 0, 2, 4, 0, 1, 11, 4, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(saveChr(len(in1))[mod(int(0.0),i0):].capitalize()):]:{:\\nres0 = in1[:mod(i2,int(7.0))].rstrip()[int(5.0):int(7.0)] not in saveChr(abs(i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1, 1, 2, 0], [1, 1, 1], [3, 3, 2, 0, 0, 0, 3, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 2, 2, 3, 0, 2, 0, 1, 0, 1, 3, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 1, 1, 0, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 2, 3, 2, 1, 0, 1, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 1, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 15, 1, 48, 15, 9, 9, 7, 5, 2, 1, 10, 0, 0, 4, 2, 1, 0, 0, 1], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(\"\"R\"\"):divInt(i0,i2)] != \"\";\"\"[i0:min(int(0.0), divInt(( int(7.0) - i0 ),i1))]\\ni2 += divInt(divInt(i1,i2),divInt(abs(( i0 * ( ( ( len(in0[i0:divInt(i0,int(5.0))]) - i1 ) + int(7.0) ) * abs(max(i1, mod(int(6.0),min(int(1.0), max(i2, ( ( ( int(7.0) - int(7.0) ) - int(9.0) ) * int(8.0) )))))) ) )),i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1, 2], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 4, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1[len(in2):] not in in1[len(in1):i0]\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 0, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[:len(s0)]:{:\\nres0 = in1[int(8.0):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 0, 1, 0, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 0, 1, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [1], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 5, 1, 6, 0, 1, 0, 0, 4, 0, 1, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[i0:]:{:\\nres0 = in1 not in in1[len(getCharFromString(saveChr(i1)[int(9.0):], i2)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 6, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 3, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 3, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 0, 8, 8, 11, 0, 38, 9, 10, 3, 6, 4, 1, 0, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(s2[len(in2):])) != int(0.0):{:\\nres0 = ( i0 \\l mod(min(i2, i0),int(7.0)) or ( in1.capitalize()[len(in1[i1:i1]):mod(( int(6.0) + i2 ),divInt(min(divInt(i1,divInt(max(( abs(i2) + ( max(int(7.0), i0) * int(6.0) ) ), int(1.0)),i0)), i0),divInt(int(7.0),abs(int(7.0)))))] not in \"\"R\"\" and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 4, 2, 1, 3, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(int(8.0), i0):]:{:\\nres0 = in1 not in in1[mod(i2,divInt(( int(7.0) + divInt(int(5.0),len(s0)) ),i2)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 1, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 1, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 1, 1, 5, 0, 2, 5], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 3, 0, 0, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 0, 0, 1, 2, 4, 2, 1, 1, 1, 0, 0, 3, 3, 5, 1, 10, 1, 2, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(i0):]:{:\\nres0 = s1 != s1[i1:]\\nloopBreak% = 0\\nwhile ( int(0.0) != len(in2) or mod(i2,int(7.0)) \\l i0 ):{:\\ni1 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 0, 2, 2, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 1, 3, 2, 3, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 2, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 3, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 1, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[abs(len(in0)):]:{:\\nb2 = in1[( int(0.0) + i0 ):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i1:]:{:\\ni2 = len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1, 0], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 1, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 2, 2, 0, 0, 0, 2, 0, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 0, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 6, 1, 1, 4, 2, 1, 0, 1, 1, 3, 0, 9, 2, 3, 0, 2, 4, 0, 0, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( ( len(s2.capitalize()[len(in2[abs(int(6.0)):]):]) != mod(divInt(i0,i2),i2) or True ) and in1 not in in1 ):{:\\nres0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 4, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [0, 3, 1, 1, 1, 2, 1, 1, 2, 2, 3, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 1, 2, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 1, 4, 4, 2, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 1, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 5, 0, 1, 0, 0, 7, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s1[i1:]:{:\\nres0 = in1 != in1[len(s2):]\\nin1 = in1[int(0.0):int(2.0)].capitalize()[:int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 1, 2, 1, 0, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [1, 0, 4, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\":{:\\nres0 = in2 not in in1[len(in1):].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 8, 1, 3, 0, 1, 4, 0, 0, 8, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(s0):] not in in1[len(in1[i1:]):int(07.0)][abs(mod(i1,int(5.0))):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 1, 1], [0, 2, 0, 0, 0], [0, 2], [0, 1, 0, 0], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 0, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [1, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 3, 3, 0, 1, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 3, 2, 0, 0, 0, 2, 3, 0, 1, 2, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2, 0], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 0, 3, 2], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [1, 1, 0, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 3, 0, 0, 3, 0, 4, 0, 1, 3, 1, 1, 0, 1, 1, 2, 1, 4, 0, 2, 1, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[abs(len(in2)):] not in in1[int(8.0):]\\nloopBreak% = 0\\nfor in1 in in0:{:\\ni2 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( res0 or True )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 0, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 1, 0, 1, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 4, 1, 4, 2, 4, 3, 4, 0, 0, 1, 4], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 3, 0, 0, 0, 0, 3, 1, 1, 5, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[i0:]:{:\\nres0 = s0 not in in1[int(0.0):]\\ni2 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 2, 3, 0, 2, 1, 1, 3, 3, 0, 0, 2, 2, 1, 2, 2, 3, 2, 0, 2, 3, 3, 2, 0, 2, 3, 3, 0, 3, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 2, 2, 1, 1, 0, 1, 4, 2], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 0, 2, 0, 4, 4, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 13, 3, 5, 1, 2, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), mod(divInt(abs(i0),( int(6.0) + int(7.0) )),abs(abs(i0)))):]:{:\\nin1 = in0[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 7, 1, 2, 1, 0, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\nres0 = in1[:len(in0)] != s0[( i1 - i1 ):i1][i2:].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 4, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 11, 2, 5, 2, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 = saveOrd(s0[abs(i1):])\\ni2 += min(mod(int(0.0),int(7.0)), ( int(5.0) + len(in0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 1, 1, 2, 0, 0], [0, 1, 1], [1, 0, 3, 2, 2, 2, 0, 1, 2, 1, 1, 0, 3, 2, 2, 2, 0, 2, 3, 2, 3, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[int(8.0):]:{:\\nres0 = in1 not in in1[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 2, 2, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [5, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 5, 0, 19, 5, 5, 2, 3, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = s2[len(in0):] not in saveChr(i0)[mod(divInt(min(i1, int(0.0)),( int(7.0) + min(i2, i0) )),divInt(( int(5.0) * i1 ),int(8.0))):len(s0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 2, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 3, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 4, 1, 7, 0, 3, 0, 0, 7, 1, 1, 16, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(s2):]:{:\\nres0 = in0[i0:] != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = len(((s0.rstrip() + in1).capitalize()[int(0.0):i1].capitalize()[:abs(i0)] + \"\"R\"\"))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 8, 2, 6, 6, 1, 1, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 1, 2, 3, 0, 2, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 4, 0, 4, 2, 4, 3, 4, 0, 0, 1, 0], [1, 0, 3, 0], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nb0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 3], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 0, 2, 3, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 11, 0, 52, 15, 13, 7, 8, 6, 1, 1, 15, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s1[len(saveChr(abs(mod(i0,divInt(i0,int(8.0)))))):( int(7.0) + min(i2, len(saveChr(divInt(divInt(int(5.0),i0),divInt(min(( i1 + ( max(divInt(abs(i2),( max(int(7.0), i1) * int(6.0) )), int(1.0)) - i2 ) ), i0),mod(int(7.0),min(int(7.0), abs(i0)))))))) )][divInt(( ( int(9.0) + int(8.0) ) * ( int(5.0) - i1 ) ),int(0.0)):] not in in0[int(4.0):len((\"\"R\"\" + saveChr(saveOrd(s0))).rstrip())]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 7, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 0, 0, 2, 1, 2, 1, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 2, 3, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [5, 2, 5, 4, 3, 1, 5], [1], [0], [2, 0, 0, 2, 2, 0, 2, 2, 0, 1, 4, 3, 4, 0, 0, 1, 0], [3, 1, 3], [3, 0, 0], [2, 2, 0, 1, 2, 0], [0], [17], [16], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 11, 2, 3, 1, 1, 5, 1, 1, 10, 0, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s2[len(in2):]:{:\\nres0 = in1[len(in0[abs(i0):][:i2]):( int(2.0) + divInt(int(7.0),int(0.0)) )][i2:] != \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [2, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 3, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 3, 0, 1, 2, 1, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 1, 0, 4, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 0, 0, 2, 1, 0, 5, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"R\"\"[max(len(s1), abs(i1)):] not in in2.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 3, 7, 7, 9, 8, 3, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 2, 2, 2], [0, 1, 1], [3, 3, 2, 3, 1, 0, 0, 1, 2, 2, 1, 0, 2, 2, 2, 0, 1, 2, 3, 2, 0, 0, 3, 2, 3, 0, 2, 2, 2, 0, 1, 1, 3, 0, 1, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1, 3, 3, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 0, 2, 0, 2, 1, 0, 1, 4, 2], [2, 0, 2, 1, 0, 2, 2, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 11, 0, 53, 15, 11, 8, 7, 5, 0, 1, 11, 2, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[max(( min(int(0.0), i1) * i2 ), int(7.0)):divInt(( int(5.0) + i1 ),mod(divInt(divInt(i0,int(7.0)),( abs(( i1 * i2 )) - min(divInt(abs(i1),( divInt(mod(i2,int(6.0)),int(3.0)) + max(i0, int(7.0)) )), int(7.0)) )),min(int(9.0), max(i2, ( ( int(8.0) * int(3.0) ) * int(0.0) )))))][( int(4.0) - i2 ):] != in0[:int(8.0)].capitalize()[int(59.0):saveOrd(saveChr(abs(int(9.0))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 8, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 3, 0, 1, 0, 0, 0, 2, 2, 2, 1, 0, 1, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 2, 4, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 4, 4, 3, 4, 4, 0, 1, 0], [2, 1, 2, 1, 1], [1, 5], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 6, 0, 17, 5, 2, 3, 2, 3, 0, 0, 10, 2, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in0[divInt(len(saveChr(i0)[int(0.0):].capitalize()[:i2]),i1):i0][( ( divInt(int(0.0),i1) + int(8.0) ) + ( int(2.0) - i2 ) ):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 11, 0, 49, 15, 11, 7, 8, 7, 1, 1, 15, 4, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nres0 = s1[len(in0):] not in getCharFromString(saveChr(abs(mod(i0,divInt(i0,int(8.0))))), ( int(7.0) + min(i2, len(s0[divInt(divInt(int(5.0),i0),divInt(min(( i1 + ( max(divInt(abs(i2),( max(int(7.0), i1) * int(6.0) )), int(1.0)) - i2 ) ), i0),mod(int(7.0),saveOrd((\"\"R\"\" + getCharFromString(in1, int(7.0))).rstrip())))):max(i0, divInt(( ( int(9.0) + int(8.0) ) * ( int(5.0) - i1 ) ),int(0.0)))])) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1[mod(i1,int(6.0)):] != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 7, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 3, 3, 1, 2, 0, 0, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 2, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1, 1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 12, 2, 4, 1, 1, 6, 2, 1, 16, 3, 1, 5, 2, 1, 0, 0, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0[:( int(0.0) + int(6.0) )].capitalize()[abs(len((\"\"R\"\" + in0.rstrip()).capitalize())):int(7.0)]):divInt(i1,i2)][int(2.0):] not in \"\";\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 1], [2, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 7, 5, 2, 0, 1, 4, 2, 9, 8, 5, 7, 4, 8, 5, 6, 9, 2, 6, 6], [2, 2, 0, 0, 1, 2, 1, 2, 2, 1, 0, 2, 0, 2], [1, 1, 1], [3, 0, 2, 1, 2, 2, 2, 0, 2, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 1, 0, 0, 3, 2, 3, 0, 2, 3, 3, 0, 3, 0, 1, 0, 2, 1, 0, 1, 1, 0, 3, 1, 2, 1, 1, 2, 1, 3, 1, 3, 3, 0, 3, 0, 2, 1, 2, 1, 3, 1, 2, 2, 1, 1, 0, 1, 3, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [3, 1, 2, 0, 1, 3, 2, 2, 3, 2, 4, 1, 2, 0, 0, 2], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [0, 1, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [3, 0], [2, 2, 0, 0, 1], [1], [17], [20], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 13, 1, 39, 12, 8, 6, 7, 7, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1):]:{:\\nres0 = in1.capitalize() not in in0\\ni2 += i2\\ns1 = saveChr(mod(int(5.0),divInt(divInt(divInt(i0,mod(divInt(max(i0, i1),( ( int(7.0) + i2 ) * ( abs(int(5.0)) - i1 ) )),i2)),min(( max(i2, ( len(in1[abs(i1):abs(i0)]) + int(2.0) )) - i2 ), mod(int(0.0),i0))),int(1.0))))[int(4.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 0, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 1, 1, 0, 1, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[divInt(len(in1),i0):]:{:\\nres0 = in1[int(8.0):i2] not in in0.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 3, 2, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 1, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(in2[len(in0):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 1, 0], [0, 1, 1], [3, 1, 2, 1, 3, 2, 3, 1, 1, 1, 1, 0, 3, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 3, 3, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 2, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 2, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 1, 0, 12, 2, 3, 0, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nb1 = in1.capitalize()[int(0.0):] not in in0[mod(int(7.0),len(s0[mod(max(int(5.0), int(7.0)),int(6.0)):int(1.0)])):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 4, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 2, 2, 2, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 2, 3, 0, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 4, 2, 0, 2, 0, 4, 4, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [20], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 16, 16, 13, 0, 56, 18, 10, 10, 8, 6, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nb1 = ( ( len(getCharFromString(in1, i0)) != int(0.0) or True ) and saveChr(abs(mod(i2,int(7.0)))) == in0[mod(int(5.0),min(i2, ( divInt(( int(4.0) + i0 ),( len(s0[min(i1, ( max(( int(2.0) + divInt(( divInt(int(1.0),i2) * int(7.0) ),int(7.0)) ), i1) - divInt(( int(9.0) + abs(int(8.0)) ),max(i2, ( ( mod(int(5.0),int(0.0)) * divInt(int(4.0),i0) ) - int(8.0) ))) )):i0]) - i0 )) * ( min(i1, int(59.0)) + i0 ) ))):] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 1, 2, 2, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 51, 15, 11, 7, 8, 4, 1, 1, 10, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nb2 = in1[len(saveChr(abs(mod(i0,mod(i0,int(8.0)))))):( int(7.0) + min(i2, len(saveChr(divInt(divInt(int(5.0),i0),divInt(min(( i1 + ( max(divInt(abs(i2),( max(int(7.0), i1) * int(6.0) )), int(1.0)) - i2 ) ), i0),mod(int(7.0),abs(int(7.0)))))))) )][min(i0, divInt(( ( int(9.0) + int(8.0) ) * ( int(5.0) - i2 ) ),int(0.0))):] not in in1[i0:int(4.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 0, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 0, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 4, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 7, 1, 3, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[max(abs(mod(i0,i2)), i2):] == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [0, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[i1:]:{:\\nb1 = in1.startswith(in1[len(in0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2, 0], [0], [0, 0, 0, 0], [], [], [0, 2, 3], [0, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [1, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 1, 1, 3, 2, 2, 2, 2, 1, 1, 2, 3, 3, 0, 1, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 3, 2, 0, 0, 0, 2, 3, 0, 1, 2, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 0, 3, 2], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [1, 1, 0, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 5, 5, 1, 4, 1, 4, 0, 0, 3, 2, 4, 2, 0, 2, 1, 0, 0, 9, 9, 6, 1, 31, 9, 8, 6, 4, 7, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nb0 = int(8.0) \\l i2\\ni2 += abs(divInt(i2,( int(7.0) + int(5.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = in0[abs(( divInt(( mod(int(7.0),int(7.0)) * ( len(s0) - len(in1) ) ),i0) + int(4.0) )):]\\nb2 = ( max(( int(7.0) * i0 ), divInt(abs(int(7.0)),i2)) \\l int(9.0) or res0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [1, 5, 4, 2, 3, 4, 4, 1], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 5, 1, 7, 0, 3, 0, 0, 6, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(getCharFromString(in1[len(s2):], i0)):]:{:\\nres0 = saveChr(i2)[len(in0):i2] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 0, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 4, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 5, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in saveChr(int(0.0)).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [1, 1, 2], [0], [0, 0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 2, 1, 2, 1, 2, 0, 0], [1, 1, 1], [0, 3, 2, 0, 0, 1, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 0, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 2, 1, 2, 0, 1, 1, 0, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in2[i2:] not in in2:{:\\ni2 -= len(in1)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 4, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 3, 3, 2, 1, 6, 0, 2, 0, 0, 7, 0, 0, 10, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1.capitalize():{:\\nres0 = ( int(6.0) != int(2.0) or ( in1.endswith(in0) and True ) )\\ni2 = len(saveChr(i2))\\n:}else:{:\\ns2 = in1[int(1.0):]\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 6, 6, 1, 4, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 1, 1, 0, 1, 2, 1, 1, 2, 2, 3, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 2, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 5, 4, 5, 1, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 1, 1, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 5, 0, 1, 0, 0, 7, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in2[:int(0.0)] not in s1\\nin1 = in1[int(2.0):i1].capitalize()[:int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 6, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 3, 2, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 12, 2, 5, 0, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[abs(min(abs(int(8.0)), i1)):]:{:\\nres0 = in1 not in in1[mod(min(divInt(i2,int(6.0)), len(in0)),i2):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 1, 5, 6, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 1, 2, 2, 3, 1, 3, 0, 0, 3, 0, 3, 1, 3, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 1, 0, 2, 4, 0, 1], [2, 2, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 2, 4, 0, 1, 3, 4, 4, 0, 4, 0], [2, 2, 1, 2, 1], [4, 0], [0, 2, 0, 0, 2], [0], [21], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 5, 0, 26, 8, 7, 5, 3, 5, 0, 0, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2[len(in2):( ( int(6.0) * int(7.0) ) * ( mod(len(in1[int(1.0):]),max(i1, i2)) - max(i2, min(int(5.0), abs(mod(saveOrd(in1),divInt(i0,( i1 * ( int(6.0) + int(5.0) ) )))))) ) )] not in in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 1, 1, 3, 0, 3, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 3, 0, 2, 1, 1, 0, 3, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 1, 3], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 1, 9, 2, 3, 0, 2, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nb0 = in1 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = max(abs(mod(i2,divInt(i2,int(8.0)))), int(7.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 2], [0, 1, 1], [2, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 2, 1, 0, 2, 2, 1, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s2[:mod(len(in2),mod(int(1.0),i0))] not in \"\"R\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 1, 0, 2, 0, 0, 1, 2, 0, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3], [1, 0], [2, 1, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 3, 3, 3, 0, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = in1[:len(in0)] not in s0[( int(3.0) + int(7.0) ):( abs(int(5.0)) * i1 )].capitalize()[( i2 * i2 ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 2, 4, 2, 1, 2, 4, 0, 4, 0, 1, 1, 0], [2, 2, 3, 3], [5, 0], [2, 1, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 9, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 3, 2, 1, 2, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 1, 1, 2, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 4, 0, 2, 0, 1], [0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0], [5, 5, 4, 4, 3, 0, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 2, 0, 4, 3, 4, 0, 0, 1, 0], [3, 1, 3], [3, 0, 0], [2, 2, 1, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nin1 = in0[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 0, 3, 5, 4, 2], [0], [0], [2, 0, 0, 0, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 8, 3, 2, 1, 2, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s2[abs(mod(len(in2),divInt(i0,( i2 + int(8.0) )))):] not in in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 3, 1, 3, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 2, 1, 0, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 1, 1, 0, 1, 4], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [14], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 2, 2, 2, 0, 1, 1, 0, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [2, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [1, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 0, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 3, 1, 0, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s1[len(\"\"R\"\"):] not in in2[len(in2):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 6, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 2, 1, 0, 1, 2, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 1, 2, 2, 1, 1, 3, 1, 0, 1, 1, 3, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 2, 2, 1, 0, 0, 1, 4, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 2, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 6, 0, 33, 10, 8, 4, 6, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[min(divInt(int(0.0),abs(mod(( int(7.0) + i2 ),int(5.0)))), divInt(i2,abs(( divInt(int(2.0),i2) + ( abs(mod(i0,divInt(max(min(int(6.0), i1), ( min(int(1.0), i2) * int(7.0) )),int(7.0)))) - int(9.0) ) )))):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 2, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 2, 1, 0, 1, 2, 0, 2, 1, 2, 1, 0, 2, 3, 2, 2, 2, 2, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 2, 1, 0, 1, 4], [0, 0, 1, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 1, 4, 3, 0, 4, 2], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 0, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s1):]:{:\\nb2 = in1[max(i0, int(0.0)):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 4, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 0, 3, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 2, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 5, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1\\ni0 = int(0.0)\\nin1 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 0, 2], [0], [0, 0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0], [3, 5], [3, 3, 1, 3, 2], [1, 1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 2, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [1, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 2, 4, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 1, 4, 1, 2, 3], [1], [0], [2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3, 3], [1, 3], [2, 2, 0, 1, 2], [0], [11], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 2, 3, 9, 3, 1, 5, 3, 1, 0, 7, 7, 1, 0, 10, 0, 2, 0, 0, 7, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(int(6.0), int(2.0)):]:{:\\nb0 = in1 != in1[len(s1):]\\nb2 = ( i2 != int(2.0) or ( True or ( int(2.0) \\l int(2.0) and not int(5.0) \\l int(7.0) ) ) )\\ns1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 3, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 2, 2, 2, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 0, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 5], [1], [0], [1, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 7, 7, 10, 0, 34, 10, 7, 5, 5, 5, 1, 0, 11, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif \"\"R\"\" not in in2:{:\\nb0 = ( i0 != min(mod(mod(( mod(len(in2),int(1.0)) + int(7.0) ),int(3.0)),len(in1.capitalize()[i2:])), i0) or ( in1[divInt(divInt(int(2.0),i1),( min(i1, i2) + ( len(in0[( min(i1, ( max(int(6.0), i2) * int(1.0) )) - int(7.0) ):]) + i0 ) )):].endswith(saveChr(i0)) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 11, 2, 3, 0, 2, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s2[len(in0):] not in \"\"R\"\"[mod(int(0.0),i1):len(saveChr(i2))].capitalize()[int(7.0):mod(int(2.0),i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 0, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [3, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s0[len(in1):]:{:\\nres0 = in1[i1:] != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [3, 0, 0, 3, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 5, 1, 1, 10, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\nres0 = (in1 + \"\"R\"\") == saveChr(len(s0[int(8.0):]))[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 8, 1, 8, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 2, 1, 2, 1, 4, 3, 4, 4, 0, 1, 0], [2, 1, 2], [1, 0], [2, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 3, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(s0[len(in2):])\\ni2 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 3, 0, 0, 2, 0, 0, 1, 3, 0, 3, 1, 2, 1, 1, 2, 3, 1, 0, 2, 3, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 3, 3, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 0, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 3, 2, 5, 0, 3, 1, 0, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in1[max(len(in2), int(4.0)):] not in in1:{:\\ni0 = len(s1)\\n:}else:{:\\ni2 -= i2\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [2, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 1, 5, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nb2 = i0 != len(in1[int(0.0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2, 0], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 0, 0, 2, 0], [0, 0], [1, 5], [2, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [1, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 3, 3, 0, 1, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 3, 2, 0, 0, 0, 2, 3, 0, 1, 2, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2, 0], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 0, 3, 2], [1], [0], [2, 0, 0, 1, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [1, 1, 0, 0], [1, 0], [1, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 1, 3, 0, 0, 2, 0, 3, 0, 1, 2, 0, 0, 0, 1, 1, 1, 1, 3, 0, 2, 1, 0, 6, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:abs(len(in1))]:{:\\nloopBreak% = 0\\nwhile \"\"R\"\" not in in1:{:\\nres0 = not b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(8.0)\\nin0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 0, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 2, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0[len(s0):]:{:\\nin1 = in0[min(i1, int(6.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 7, 1, 7, 0, 9, 8, 7, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 0, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 2, 1, 0, 1, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 2, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 0], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 2, 1, 4, 0, 1, 4, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 2, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 0, 0, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 3, 3, 1, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s0[len(in2):]) != mod(int(0.0),abs(mod(( int(7.0) + i0 ),int(5.0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 0, 3, 1, 1, 2, 3, 1, 2, 2, 0, 1, 0, 1, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 1, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1):]:{:\\nres0 = in1.capitalize() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 12, 2, 5, 0, 2, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s0[abs(len(in1)):]:{:\\nres0 = abs(mod(i0,min(i2, int(8.0)))) != divInt(int(7.0),len(in1[i2:]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0], [5, 5, 2, 4, 3, 5, 4, 2], [1], [0], [2, 4, 0, 2, 0, 0, 4, 4, 2, 0, 2, 3, 4, 4, 0, 1, 0], [1, 1, 3, 3, 3], [1, 0, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 12, 2, 5, 0, 2, 5, 0, 1, 10, 3, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in saveChr(len(in2))[len(s2[abs(mod(i0,min(i2, int(8.0)))):]):]:{:\\nres0 = in1 == saveChr(divInt(int(7.0),len(in0[i2:].rstrip())))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 3, 1, 2, 3, 1, 2, 1, 0, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 5, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 4, 4, 2, 0, 13, 3, 4, 1, 2, 7, 1, 0, 15, 3, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2[len(in2):] not in in1[len(in2):]:{:\\nres0 = ( divInt(abs(int(0.0)),mod(len(in0.capitalize()[int(6.0):( int(5.0) + i1 )]),int(2.0))) != i2 or ( in0.endswith((\"\"R\"\" + in1.rstrip()).capitalize()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 3, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 12, 0, 49, 15, 10, 8, 7, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nres0 = len(getCharFromString(in1, ( int(0.0) + divInt(( i2 + abs(i2) ),int(7.0)) ))[:min(i2, i1)]) != divInt(divInt(int(5.0),i1),divInt(len(\"\"R\"\"[( i2 * ( min(divInt(max(i1, ( abs(int(7.0)) - i2 )),int(6.0)), int(1.0)) + i0 ) ):i0]),divInt(int(7.0),max(int(7.0), saveOrd(in0[i2:mod(( ( int(9.0) * int(8.0) ) - ( int(5.0) - i2 ) ),int(0.0))])))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nb1 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 0, 2, 1, 1, 3, 3, 0, 0, 2, 2, 1, 2, 2, 3, 2, 0, 2, 3, 3, 2, 0, 2, 3, 3, 0, 3, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 2, 1, 1, 0, 1, 4, 2], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 4, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 6, 1, 3, 0, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\ni0 = len(in1[:mod(int(07.0),abs(i0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 8, 1, 3, 0, 1, 4, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(abs(i0), i2):]:{:\\nin1 = in1\\ni2 = abs(mod(i0,int(0.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 1, 1, 2, 0, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 2, 0, 16, 4, 4, 1, 3, 5, 1, 0, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = in2[len(in2):] not in in1[len(in1[:divInt(int(0.0),int(6.0))].capitalize()[mod(abs(int(5.0)),int(2.0)):mod(i1,int(7.0))][i0:( len((\"\"R\"\" + in0.rstrip()).capitalize()) + int(1.0) )]):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 1, 1, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\" not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [5, 3, 4, 4, 3, 0, 3, 5], [1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 4, 0, 8, 0, 3, 0, 0, 8, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in0[len(in1):]:{:\\nb2 = in1[len(getCharFromString(in0, i1)[i2:len(s0)]):i2][i0:] not in saveChr(int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = (\"\"R\"\" + in2.rstrip())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in2[len(in2):] != in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2, 1], [0], [0, 0, 0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [1, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 0, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 0, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 5, 5, 1, 4, 1, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 2, 4, 0, 3, 2, 0, 7, 1, 1, 7, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nb1 = \"\"R\"\" != in1\\ni0 += len(in0)\\ns0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += abs(int(09.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 0, 3, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 8, 2, 3, 0, 2, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):len(in1[mod(int(0.0),abs(mod(i1,i2))):])]:{:\\nres0 = in0 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0, 2, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 0, 3, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1, 4, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 2, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 12, 12, 12, 0, 49, 14, 11, 6, 8, 6, 1, 0, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2[len(in1):]):][mod(int(0.0),abs(mod(i1,i2))):] not in in1:{:\\nres0 = ( min(int(7.0), abs(i2)) != i2 or ( in0[( divInt(int(2.0),i1) + divInt(min(divInt(i2,( max(( abs(i1) + divInt(max(int(7.0), i2),int(6.0)) ), int(1.0)) * i0 )), i0),( int(7.0) - saveOrd(saveChr(int(7.0))) )) ):max(i2, mod(divInt(( int(9.0) + int(8.0) ),( int(5.0) * i1 )),int(0.0)))].capitalize().endswith((\"\"R\"\" + in2.rstrip())) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 3, 1, 3, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 3, 4, 0, 0, 1, 0], [2, 2, 3, 3], [1, 0], [0, 0, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):int(0.0)]:{:\\nb2 = in1.startswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 3, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 1, 3, 1, 0, 1, 1, 0, 0, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1, 3, 1], [0, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 0, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s0[len(s0):] not in saveChr(i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 6, 3, 7, 7, 9, 8, 3, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 2, 2, 2], [0, 1, 1], [3, 3, 2, 3, 1, 0, 0, 1, 2, 2, 1, 0, 2, 2, 2, 0, 1, 2, 3, 2, 0, 0, 3, 2, 3, 0, 2, 3, 1, 0, 1, 0, 3, 0, 0, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 0, 2, 0, 2, 3, 2, 1, 4], [0, 0, 2, 1, 0, 2, 2, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 1, 0, 5, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nin1 = in0.capitalize()[max(( min(int(0.0), i1) + i2 ), int(6.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 0, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0[len(in1):]:{:\\nres0 = in1.capitalize() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 1, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 8, 3, 1, 1, 2, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[divInt(mod(int(0.0),int(7.0)),( i0 + int(5.0) )):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 2, 4, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in1.capitalize()[int(9.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 3, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 1, 1, 3, 0, 3, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 3, 0, 2, 1, 1, 0, 3, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 1, 3], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 3, 3, 2, 0, 10, 2, 3, 0, 2, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s1[len(in2):] not in in1:{:\\nres0 = ( max(abs(mod(i0,divInt(i2,int(8.0)))), int(7.0)) != int(5.0) or ( in1.endswith(s1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 3, 1, 2, 2, 1, 0, 1, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 9, 2, 32, 11, 7, 6, 6, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni1 = len(in1[( int(0.0) - i2 ):])\\ni1 += divInt(min(int(7.0), ( mod(int(5.0),i0) * int(7.0) )),divInt(divInt(i1,i2),( abs(( i1 - mod(len(in0),( abs(i2) + divInt(max(int(6.0), i0),int(1.0)) )) )) * int(7.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 3, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 5, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 3, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 1, 1, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in2[len(in0):] == saveChr(( int(0.0) + i0 ))[mod(i2,int(1.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 2, 0, 2, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 0, 0, 1, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [0], [0], [0, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 5, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0 not in in2\\ni1 = abs(len(in1))\\nin1 = in0[i0:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 2, 4, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 2, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 3, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s2[len(in0):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 33, 11, 6, 4, 7, 7, 1, 1, 15, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s1[mod(mod(int(0.0),i0),( i2 + int(7.0) )):divInt(int(5.0),len(in0))] not in getCharFromString(s0[:i2], i2)[divInt(divInt(int(7.0),i1),( abs(( i2 + divInt(saveOrd((\"\"R\"\" + saveChr(( len(in1) * i1 )))[:mod(abs(int(6.0)),i2)]),int(1.0)) )) - int(7.0) )):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 0, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 0, 3, 2, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 1, 2, 0, 2, 0, 2, 3, 2, 3, 0, 3, 2, 2, 0, 1, 3, 0, 0, 2, 1, 3, 1, 3, 0, 0, 3, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 3, 3, 0, 3, 1, 1, 1, 1, 3, 0], [0, 2, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 0, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s0[i0:] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 2, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nres0 = in1[len(s2):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 0, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 7, 1, 3, 0, 1, 5, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = in2[max(mod(len(in2),int(0.0)), i0):] != in1.capitalize()\\ni2 = abs(i1)\\nin1 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 3, 1, 2, 3, 1, 2, 2, 1, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 1, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nb1 = in1.capitalize() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 2, 0, 2, 1, 2, 3, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 1, 3, 4, 4], [1], [0], [1, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in \"\"R\"\":{:\\nres0 = len(in2) != len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 3, 0, 2, 0, 3, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 1, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 4, 2, 4, 1, 4, 1, 1, 0, 0, 1, 0], [1, 0, 3, 2], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = s1 not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 2, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 0, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 0, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 2, 3, 0, 2, 7, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(s0):]:{:\\nin1 = s1[abs(abs(mod(i0,divInt(i1,i2)))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 3, 1, 1, 1, 3, 2, 0, 2, 1, 1, 0, 2, 3, 2, 1, 1, 3, 2, 3, 3, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 1, 0, 3, 0, 1, 2, 1, 2, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 2, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 6, 0, 40, 9, 12, 3, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize()[abs(mod(int(0.0),max(mod(min(int(7.0), int(5.0)),int(7.0)), len(in0[( i0 + divInt(int(6.0),int(1.0)) ):i2])))):divInt(min(mod(int(7.0),int(7.0)), max(( abs(max(( abs(int(9.0)) + i0 ), int(8.0))) * int(5.0) ), i1)),i1)] not in s0[divInt(int(0.0),abs(int(4.0))):len(saveChr(i2))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 1, 2, 2], [0, 1, 1], [3, 3, 2, 1, 1, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 16, 16, 13, 1, 50, 14, 9, 6, 8, 7, 1, 0, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[abs(len(in1)):mod(int(7.0),int(7.0))] not in in1[i0:]:{:\\nres0 = ( i2 != int(5.0) or ( in1.endswith(in0[mod(int(7.0),abs(i2)):i1].capitalize()[( divInt(int(6.0),i1) + divInt(min(divInt(i2,( len(saveChr(( min(i1, divInt(max(int(1.0), i2),int(7.0))) + int(7.0) ))) * i0 )), i0),( int(9.0) - abs(int(8.0)) )) ):max(i1, mod(divInt(( int(5.0) + int(0.0) ),( int(4.0) * i2 )),int(8.0)))]) and True ) )\\ni2 = int(59.0)\\n:}else:{:\\ns0 = (\"\"R\"\" + in1.rstrip())\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 0, 2, 1, 2, 3, 3, 0, 0, 2, 2, 1, 2, 2, 3, 2, 0, 2, 3, 3, 2, 0, 2, 3, 3, 0, 3, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 2, 1, 1, 0, 1, 4, 2], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 0, 2, 0, 4, 4, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nin1 = in1[:len(in0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1], [5, 5, 4, 0, 3, 3, 4, 1], [1], [0], [2, 0, 0, 0, 3, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [5], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 2, 0, 1, 7, 1, 1, 11, 2, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = s0 not in (in0 + \"\"F\"\".capitalize()[len(in0):])\\nin1 = saveChr(mod(int(0.0),int(6.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 0, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 3, 2, 0, 2, 2, 1, 2, 1, 1, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 3, 0, 1, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 0], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 12, 4, 3, 1, 3, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in saveChr(abs(len(in2))):{:\\nres0 = in1 not in in1[abs(mod(i0,( divInt(int(8.0),divInt(int(7.0),int(5.0))) + i2 ))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 2, 5, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 3, 0, 2, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 3, 3, 4, 2, 4, 4, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 4, 4, 4, 2, 1, 4, 5], [1], [0], [2, 0, 0, 2, 2, 0, 2, 0, 2, 2, 4, 3, 4, 4, 0, 1, 0, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 10, 1, 30, 9, 7, 6, 3, 8, 1, 1, 18, 3, 1, 6, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in1[len(in1):]:{:\\nres0 = in1[int(7.0):abs(i2)][mod(i2,i1):] not in s2[int(2.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = ( int(5.0) + len(getCharFromString((saveChr(i1) + s1.rstrip()), i2)[:( divInt(int(2.0),i1) + ( len(\"\"R\"\") - ( i2 * ( saveOrd(in1) + ( abs(i0) * divInt(saveOrd(in2),int(2.0)) ) ) ) ) )][i0:]) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 1, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 4, 0, 0, 0, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 5, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s1.capitalize():{:\\nres0 = in1 != in1.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in1):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 3, 5, 7, 2, 1, 7, 7, 9, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 3, 0, 1, 2, 1, 1, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 0, 4, 1, 4, 0, 1, 2, 0, 1, 0], [3, 1, 3], [3, 1], [2, 2, 2, 2, 1], [0], [21], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 8, 2, 3, 1, 1, 6, 0, 1, 9, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[len(in0):] not in s0.lstrip(saveChr(( int(2.0) + divInt(abs(i2),int(3.0)) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 4, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 3, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 2, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 0, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 5, 0, 1, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 2, 1, 2, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):len(in0[i1:])]:{:\\nin0 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 3, 1, 7, 0, 9, 8, 7, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 1, 1, 0, 1, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 2, 2, 2, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 2, 1, 1, 0, 1, 4, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 2, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 0, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 9, 0, 49, 15, 9, 8, 7, 6, 0, 1, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):len(in1[mod(int(0.0),abs(mod(int(7.0),int(5.0)))):])]:{:\\nb0 = in0.startswith(s0[:i0][int(2.0):abs(i0)][( i2 + mod(int(3.0),i0) ):( abs(divInt(i1,( max(max(int(1.0), ( divInt(( int(7.0) + i2 ),int(0.0)) * int(9.0) )), int(8.0)) - i1 ))) + divInt(int(7.0),min(int(0.0), max(i2, divInt(( ( int(4.0) * int(8.0) ) - ( int(59.0) - i0 ) ),int(9.0))))) )])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0, 2, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 3, 3, 0, 3, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 3, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 0, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 9, 0, 5, 1, 0, 4, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), abs(min(i1, len(in1.capitalize()[i2:])))):]:{:\\ni2 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [4, 0, 0], [0, 0, 1, 0, 1, 0], [0, 0], [1, 5], [3, 2, 1, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 0, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 4, 1, 0, 3, 1, 1, 0, 3, 3, 5, 1, 12, 2, 3, 1, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( not min(min(i0, int(9.0)), i1) \\le mod(i2,int(0.0)) or False )\\ni2 = ( int(5.0) + len(s2[:i1]) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 2, 2, 3, 2, 2, 2, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 13, 0, 51, 17, 9, 7, 10, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2.capitalize()[len(in1[mod(divInt(len(in1),( divInt(divInt(i1,i2),int(0.0)) + abs(i2) )),i1):]):]:{:\\nres0 = \"\"R\"\"[divInt(( int(7.0) + i1 ),( min(divInt(i2,( len(in0[mod(min(i1, divInt(max(int(5.0), i2),int(7.0))),int(6.0)):i0]) * i0 )), ( int(1.0) - abs(int(7.0)) )) + max(i2, ( ( divInt(int(7.0),int(9.0)) * divInt(int(8.0),i2) ) - int(5.0) )) )):int(0.0)] not in saveChr(i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 1], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 1, 3, 0, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 11, 1, 5, 0, 1, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = in1[len(in0):] not in getCharFromString(s0[int(0.0):i0], abs(mod(i2,int(7.0))))[saveOrd(saveChr(i2)):len((\"\"R\"\" + in1.rstrip()))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 2, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(\"\"R\"\"), int(7.0)):]:{:\\nres0 = in1[int(7.0):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 0, 2, 1, 1, 3, 3, 0, 0, 2, 2, 1, 2, 2, 3, 2, 0, 2, 3, 3, 2, 0, 2, 3, 3, 0, 3, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 2, 1, 1, 0, 1, 4, 2], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 4, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in s2[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 8, 5, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 0, 2, 0, 2, 2, 3, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 1, 2, 3, 2, 2, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 2, 4, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 2, 3], [1], [0], [2, 0, 0, 2, 0, 3, 4, 0, 4, 2, 4, 3, 0, 0, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 10, 0, 34, 11, 7, 7, 4, 8, 0, 1, 15, 3, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[saveOrd(in1):]:{:\\nres0 = in1[abs(saveOrd((getCharFromString(in0, i0) + saveChr(i2)))):] not in (s0 + s2).rstrip()[:( i2 + ( mod(min(int(1.0), i0),i1) + ( ( int(7.0) * i2 ) - mod(len(in0),( int(8.0) + ( min(divInt(( i1 * divInt(max(int(5.0), i2),int(6.0)) ),int(1.0)), i0) - i0 ) )) ) ) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 322}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 3, 5, 7, 7, 1, 7, 7, 2, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 1, 1, 3, 0, 2, 2, 2, 1, 2, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 4, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0, 1], [0, 5, 3, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 1, 4, 0, 4, 0, 4, 0, 1, 2, 0, 1, 0], [3, 1, 3], [3, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 5, 1, 1, 9, 2, 1, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nb2 = in1[len(\"\"R\"\"):] not in in0.lstrip(saveChr(int(9.0)))\\ni2 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 9, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 3, 0, 3, 0, 3, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 3, 0, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = in0[len(in2):] not in \"\"R\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 1, 1, 3, 0, 3, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 3, 0, 2, 1, 1, 0, 3, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 1, 3], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 4, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in1[len(in1):]:{:\\nres0 = in1 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 2, 1, 2, 1, 2, 0, 0, 2, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 3, 0, 0, 2, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 8, 1, 13, 1, 4, 0, 1, 4, 0, 1, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), abs(i1)):]:{:\\nb0 = in1.capitalize()[:i2] not in saveChr(mod(i0,i2))[i1:int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = min(i1, i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 0, 2, 1, 0, 3, 3, 0, 0, 2, 2, 1, 2, 2, 3, 2, 0, 2, 3, 3, 2, 0, 2, 3, 3, 0, 3, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 2, 2, 1, 1, 0, 1, 4, 2], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 0, 2, 0, 4, 4, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 4, 0, 12, 2, 5, 0, 2, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1[len(in1):] not in in0[mod(i0,max(i0, divInt(int(0.0),i2))):abs(abs(i0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 1, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 2, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 1, 0, 8, 1, 2, 0, 1, 5, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(min(i1, int(6.0)), int(7.0)):]:{:\\nres0 = s1 not in in1[:mod(int(9.0),int(2.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = \"\"R\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 11, 2, 3, 1, 1, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[:len(in1)]):][( int(0.0) + i0 ):]:{:\\nres0 = \"\"R\"\" not in in0[max(i2, int(5.0)):mod(int(2.0),i2)].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 8, 1, 8, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 1, 0, 3, 2, 4, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 1, 2, 1, 4, 3, 4, 4, 0, 1, 0], [2, 1, 2], [1, 0], [2, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 2, 2, 3, 1, 6, 0, 2, 0, 0, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1:{:\\nres0 = ( int(6.0) != i1 or ( in1.endswith(in0) and True ) )\\n:}else:{:\\ni2 = max(i1, int(8.0))\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 2, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 1, 1, 2, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 12, 3, 3, 2, 1, 5, 1, 1, 9, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):len(in1[i1:])]:{:\\nres0 = in0.startswith(\"\"R\"\"[:mod(int(6.0),( int(7.0) + int(9.0) ))][:( int(2.0) + abs(i2) )])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 2, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 0, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 5, 5, 12, 0, 34, 12, 5, 4, 8, 6, 0, 0, 11, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( mod(int(0.0),i0) != mod(i1,int(7.0)) or ( in0.endswith(s0[( mod(i2,i0) + i1 ):divInt(mod(int(2.0),i2),( abs(( i1 + divInt(min(( i2 * i0 ), divInt(len(saveChr(int(7.0))),i0)),int(6.0)) )) - divInt(i2,i0) ))].capitalize()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 2, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 2, 1, 0, 1, 2, 0, 2, 1, 2, 1, 0, 2, 3, 2, 2, 2, 2, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 2, 1, 0, 1, 4], [0, 0, 1, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 0, 5, 0, 4, 2], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 0, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 1, 10, 2, 3, 1, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = s0[max(i0, int(0.0)):] not in in2\\ni2 = abs(mod(( int(7.0) + i2 ),int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 2, 1, 0, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2], [0, 1, 1], [3, 1, 0, 2, 1, 2, 2, 1, 2, 1, 1, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 1, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [0, 0, 0, 2, 0, 2, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [1, 1, 3], [2, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 1, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 4, 0, 2, 0, 0, 3, 0, 1, 5, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1[int(7.0):].capitalize())):]:{:\\ni0 = int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 0, 0, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in0):]:{:\\nb1 = in1[len(\"\"R\"\"):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 1, 1, 2, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 2, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 7, 5, 2, 0, 1, 4, 2, 9, 8, 5, 7, 4, 8, 5, 6, 9, 2, 6, 6], [2, 2, 0, 0, 1, 2, 1, 2, 2, 1, 0, 2, 0, 2], [1, 1, 1], [3, 0, 2, 1, 2, 2, 2, 0, 2, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 1, 0, 0, 3, 2, 3, 0, 2, 3, 3, 0, 3, 0, 1, 0, 2, 1, 0, 1, 1, 0, 3, 1, 2, 1, 1, 2, 1, 3, 1, 3, 3, 0, 3, 0, 2, 1, 2, 1, 3, 1, 2, 2, 1, 1, 0, 1, 3, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [3, 1, 2, 0, 1, 3, 2, 2, 3, 2, 4, 1, 2, 0, 0, 2], [1, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 5, 1, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [3, 0], [0, 2, 0, 0, 1], [1], [17], [20], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s0[len(in2):i2] not in in1.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 0, 2, 2, 0, 1, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = len(s0[saveOrd(s0):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 6, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 2, 1, 0, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 1, 2, 2, 1, 1, 3, 1, 0, 1, 1, 3, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 2, 2, 1, 0, 0, 1, 4, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 2, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 12, 3, 4, 1, 2, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\ni1 = min(mod(int(0.0),abs(mod(( int(7.0) + i2 ),int(5.0)))), abs(i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 1, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 5, 4, 3, 5, 5, 2, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 3, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 3, 0, 0, 9, 1, 1, 15, 3, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = in1[len(in0):i0] not in getCharFromString(in2, i2)[saveOrd(in2):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = (\"\"R\"\" + in0.lstrip()).rstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 4, 6, 6, 1, 2, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 2, 1, 0, 0, 3, 1, 2, 1, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 2, 2, 0, 1, 2, 3, 4, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 6, 1, 1, 0, 1, 4, 1, 1, 8, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i2:]:{:\\nres0 = in1 not in in1[len(\"\"R\"\"[mod(int(1.0),i2):i2].capitalize()):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 8, 1, 8, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 1, 0, 3, 2, 4, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 2], [1, 0], [2, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2[saveOrd(in2):] not in in1[int(6.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 0, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 1, 0, 3, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[abs(int(2.0)):i0].capitalize()[divInt(i1,int(0.0)):mod(( i2 + i0 ),int(2.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 3, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 0, 2, 1, 1, 3, 3, 0, 0, 2, 2, 1, 2, 2, 3, 2, 0, 2, 3, 3, 2, 0, 2, 3, 3, 0, 3, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 2, 2, 1, 1, 0, 1, 4, 2], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 3, 3, 1, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 4, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 3, 3, 3, 1, 12, 2, 5, 0, 2, 4, 1, 0, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif \"\"R\"\" not in s0:{:\\nres0 = ( abs(len(in2)) != mod(int(0.0),abs(i0)) or ( in1[divInt(int(7.0),int(5.0)):].endswith(in0) and True ) )\\n:}else:{:\\ni0 = abs(abs(i2))\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [0, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 2, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i2:]:{:\\nres0 = in1 not in in1[int(0.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 1, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 4, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 3, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 3, 3, 4, 2, 10, 2, 3, 2, 1, 3, 0, 0, 5, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0.rstrip() not in in2:{:\\ni0 = min(len(in1[:( int(0.0) + i2 )]), mod(i2,abs(int(1.0))))\\n:}else:{:\\ni2 -= int(5.0)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 2, 2, 0, 1], [0, 1, 1], [3, 3, 1, 0, 3, 1, 0, 3, 3, 0, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 2, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nb0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 7, 5, 2, 0, 1, 4, 2, 9, 8, 5, 7, 4, 8, 5, 6, 9, 2, 6, 6], [1, 2, 0, 0, 1, 2, 1, 2, 2, 1, 0, 2, 0, 2], [1, 1, 1], [3, 2, 2, 1, 2, 2, 2, 0, 2, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 1, 0, 0, 3, 2, 3, 0, 2, 3, 3, 0, 3, 0, 1, 0, 2, 1, 0, 1, 1, 0, 3, 1, 2, 1, 1, 2, 1, 3, 1, 3, 3, 0, 3, 0, 2, 1, 2, 1, 3, 1, 2, 2, 1, 1, 0, 1, 3, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [3, 1, 2, 0, 1, 3, 2, 2, 3, 2, 4, 1, 2, 0, 0, 2], [1, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [1, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [3, 0], [2, 2, 0, 0, 1], [1], [17], [20], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 7, 7, 12, 0, 40, 13, 8, 6, 7, 6, 1, 1, 10, 2, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"u\"\":{:\\nloopBreak% = 0\\nwhile in2 not in in1:{:\\nres0 = ( len(in1.capitalize()) != mod(divInt(int(5.0),divInt(divInt(mod(i1,divInt(( max(i2, i0) - ( ( int(7.0) + i0 ) * ( abs(int(5.0)) - i1 ) ) ),i2)),min(( max(i1, mod(len(in0),abs(i2))) + abs(i2) ), int(2.0))),i1)),( int(0.0) - i0 )) or ( saveChr(int(1.0))[int(4.0):].endswith(s1[i2:]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 0, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 2, 1, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 1, 8, 2, 2, 1, 1, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(int(0.0)):]:{:\\nb0 = in1 not in getCharFromString(in0, ( int(7.0) * i0 ))\\ni2 = divInt(len(in0),int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 7, 5, 2, 0, 1, 4, 2, 9, 8, 5, 7, 4, 8, 5, 6, 9, 2, 6, 6], [2, 2, 0, 0, 1, 2, 1, 2, 2, 1, 0, 2, 0, 2], [1, 1, 1], [3, 0, 2, 1, 2, 2, 2, 0, 2, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 1, 0, 0, 3, 2, 3, 0, 2, 3, 3, 0, 3, 0, 1, 0, 2, 1, 0, 1, 1, 0, 3, 1, 2, 1, 1, 2, 1, 3, 1, 3, 3, 0, 3, 0, 2, 1, 2, 1, 3, 1, 2, 2, 1, 1, 0, 1, 3, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [3, 1, 2, 0, 1, 3, 2, 2, 3, 2, 4, 1, 2, 0, 0, 2], [1, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 2, 3, 1, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [3, 0], [2, 2, 0, 0, 1], [1], [17], [20], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s2.capitalize() not in in0\\ni2 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 1, 0, 4], [1], [0], [2, 4, 0, 2, 0, 2, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [18], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 8, 0, 38, 11, 8, 5, 6, 5, 0, 1, 11, 2, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize()[abs(len(s1[int(0.0):])):]:{:\\nres0 = in1[int(7.0):mod(mod(i0,int(5.0)),( int(7.0) + abs(i2) ))][i0:] not in s1[:divInt(divInt(int(4.0),i1),divInt(min(( i1 + ( max(( saveOrd(saveChr(i2)) * ( max(int(4.0), i1) - int(7.0) ) ), int(7.0)) + int(9.0) ) ), i2),divInt(int(8.0),abs(int(5.0)))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 3, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 0, 2, 1, 2, 3, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 8, 9, 5, 3, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = \"\"R\"\"[len(in1):] not in getCharFromString(in0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(i0, ( i1 + divInt(int(5.0),( len(saveChr(min(divInt(i2,max(abs(( int(3.0) * i1 )), ( max(int(7.0), i2) * int(1.0) ))), int(7.0)))) + i0 )) )) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 2, 4], [1], [0], [2, 1, 0, 2, 0, 2, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 0, 2, 0, 0, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[int(0.0):] not in in1[int(2.0):len(s0[:i2].capitalize())]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 1, 0, 0], [0, 2], [2, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nin1 = in0[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 1], [2, 1, 1, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4, 2, 3, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 3, 0, 0, 10, 1, 1, 15, 3, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nb2 = in1[len(in0):i0] not in getCharFromString(s0, i2)[len(in1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = saveChr(i2)\\nin0 = (\"\"R\"\" + s1.rstrip())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 4, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 1, 1, 2, 1, 2, 1, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 1, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 11, 1, 40, 11, 9, 6, 5, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in2):]:{:\\nloopBreak% = 0\\nwhile in1[len(in0):] not in s0[mod(int(4.0),i0):( i0 * abs(( int(4.0) - min(i2, int(5.0)) )) )].capitalize()[mod(( int(7.0) * i1 ),divInt(len(saveChr(( i1 - ( min(divInt(max(i2, ( abs(int(6.0)) + i1 )),int(1.0)), int(7.0)) * i2 ) ))),i1)):divInt(int(7.0),max(int(9.0), int(8.0)))]:{:\\ni0 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2, 1], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 3, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 12, 0, 34, 8, 8, 4, 4, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nin2 = (\"\"R\"\" + getCharFromString(in0[max(( int(0.0) + i2 ), abs(i2)):i2], i1)[int(9.0):min(i1, i2)])[mod(( int(5.0) + i1 ),mod(len(saveChr(divInt(i2,divInt(min(( max(i0, ( abs(int(7.0)) - i0 )) * int(6.0) ), int(1.0)),i2)))),i1)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 2, 0, 1, 0, 3, 0, 1, 0, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 4, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 2, 4, 2, 0, 2, 4, 0, 4, 0, 1, 1, 0], [2, 2, 3, 3], [5, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 4, 0, 8, 1, 1, 0, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[i0:]:{:\\nres0 = ( ( mod(i2,int(3.0)) != i1 or True ) and in1 != in1[min(i0, int(9.0)):] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 6, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 2, 1, 0, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 1, 2, 2, 1, 1, 3, 1, 0, 1, 1, 3, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 2, 2, 1, 0, 0, 1, 4, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 2, 2, 0, 4, 2, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 12, 3, 4, 1, 2, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[:len(in2)]:{:\\nres0 = in1[min(mod(int(0.0),abs(mod(( int(7.0) + i0 ),int(5.0)))), abs(i2)):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 3, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 = len(in1[abs(i1):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 3, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 3, 1, 2, 0, 1, 2, 2, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s1[min(len(in1), i0):]:{:\\nres0 = abs(int(6.0)) != mod(i2,int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 4, 7, 6, 1, 7, 1, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 1, 0, 0, 0, 1, 2, 0, 1, 1, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 0, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 1, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [3, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 12, 12, 17, 1, 50, 13, 9, 6, 7, 5, 0, 0, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[max(max(max(int(6.0), i1), mod(i2,i2)), i2):] not in in2:{:\\nres0 = ( int(7.0) != min(i1, i2) or ( in1[mod(( int(4.0) + i1 ),divInt(i1,divInt(i0,( len(in1[( min(i0, ( max(int(7.0), i0) + int(6.0) )) * int(1.0) ):i1][int(7.0):]) - divInt(int(1.0),abs(i2)) )))):].endswith(in0[:max(i0, ( divInt(mod(int(9.0),int(8.0)),( int(5.0) + i1 )) * int(0.0) ))]) and True ) )\\ni1 = i0\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 5, 4, 2], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 8, 2, 3, 0, 2, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):abs(mod(i0,divInt(i2,int(8.0))))] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 8, 2, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 1, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 3, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 1, 0, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 4, 2, 1, 3, 2, 0, 2, 2, 0, 0], [1, 3, 3, 3], [0, 0], [2, 2, 2, 1, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 0, 3, 0, 0, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[max(len(in1), len(in1[int(1.0):])):]:{:\\nres0 = s1 not in saveChr(i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\ni1 = len(in1.capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 0, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 0, 1, 1, 0, 0, 2], [0, 1, 1], [3, 1, 2, 1, 1, 2, 3, 1, 2, 1, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0, 1, 1, 3, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 1, 4, 1, 2, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0], [5, 5, 3, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 2, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in0):]:{:\\nb0 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 3, 2, 0, 0, 3, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 2, 0, 1, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nb1 = in1[int(0.0):mod(int(7.0),len(in0))] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 4, 0, 2, 1, 0, 4, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\ni0 = len(in1.capitalize()[:i2])\\ni0 += int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [2, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 0, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [1, 1, 1], [3, 1, 2, 1, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 3, 3, 0, 4, 3], [1], [0], [2, 0, 0, 3, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 1, 1, 0, 8, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin0 = (in0 + s0)\\nin1 = in0[int(3.0):].capitalize()[( int(7.0) * i0 ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 5, 7, 7, 7, 9, 8, 9, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 3, 3, 1, 2, 1, 2, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 1, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 4, 2, 2, 0, 1], [0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [5, 1, 4, 4, 3, 0, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 4, 0, 0, 1, 0], [3, 1, 3], [3, 0, 0], [2, 2, 0, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 5, 0, 30, 11, 4, 5, 6, 8, 0, 1, 15, 2, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s1[len(in1):]:{:\\nres0 = in1[mod(len(in0),abs(int(2.0))):] != s0[mod(int(7.0),( int(0.0) + int(2.0) )):][:int(5.0)][i0:mod(( divInt(int(7.0),i2) - ( saveOrd((saveChr(( i1 - divInt(i0,( int(7.0) * int(7.0) )) )) + in1).lstrip(in2)) - divInt(int(9.0),int(8.0)) ) ),i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 2, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 3, 1, 1, 2, 1, 1, 2, 2, 0, 0, 3, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 1, 4, 1, 2, 1, 2, 1], [1, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [4, 5, 4, 4, 5, 4, 4, 1], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [14], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 0, 3, 0, 0, 5, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in getCharFromString(in2, len(in1[abs(abs(int(0.0))):]))[int(9.0):]:{:\\nin1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 2, 0, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 4, 4, 0, 2, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 4, 2, 1, 3, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in \"\"R\"\":{:\\nres0 = mod(len(in2),mod(( i0 + divInt(len(in1),int(0.0)) ),int(1.0))) != int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 40, 11, 10, 4, 7, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in2[mod(int(0.0),abs(mod(i0,int(7.0)))):])]:{:\\nb2 = in0 not in s0[( int(5.0) - min(i2, int(7.0)) ):divInt(divInt(int(6.0),i2),divInt(len(saveChr(( i0 + ( min(divInt(max(i1, ( abs(int(1.0)) * i2 )),int(7.0)), int(7.0)) - i1 ) ))),i2))].capitalize()[mod(int(9.0),max(int(8.0), len((\"\"R\"\" + in1.rstrip())))):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2, 0], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 1, 1], [0, 3, 1, 0, 3, 2, 0, 2, 1, 1, 3, 2, 2, 2, 2, 1, 1, 2, 3, 3, 0, 1, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 3, 2, 0, 0, 0, 2, 3, 0, 1, 2, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4, 0, 3, 2], [1], [0], [2, 2, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [1, 1, 0, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 4, 0, 1, 6, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i2:][abs(int(8.0)):]:{:\\nres0 = in1[:i2] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 6, 0, 2, 7, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 3, 3, 2, 2, 1, 2, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 1, 2, 2, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 4, 2, 2, 0, 1], [0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 1, 0, 1, 0], [5, 4, 4, 3, 3, 0, 4, 5, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 0, 0, 0, 1, 0], [2, 1, 3], [3, 0, 0], [2, 2, 0, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 10, 10, 7, 0, 34, 12, 5, 5, 7, 8, 0, 1, 15, 2, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in1[len(in1):]:{:\\nb0 = ( ( int(2.0) != len(in0[abs(( mod(int(6.0),( int(0.0) + int(2.0) )) - int(7.0) )):]) or True ) or in0 != saveChr(i0).capitalize()[mod(divInt(i2,int(5.0)),i1):][:mod(saveOrd((s0 + in1)),( i0 - ( i1 * mod(int(7.0),int(7.0)) ) ))][( int(9.0) - divInt(mod(saveOrd(in2),int(8.0)),i2) ):i1] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 8, 2, 6, 1, 7, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1, 0, 1, 1, 1, 0, 0, 1], [0, 1, 1], [3, 3, 0, 3, 2, 1, 0, 1, 0, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 3, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 1, 1, 0, 1, 2], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 3, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = len(s0[len(in0):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 2, 5, 1, 4, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 1, 1, 1, 2, 1, 1, 2, 2, 3, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 2, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [3, 5, 4, 4, 1, 4, 4, 1], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 1, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\nin1 = s1[len(in1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 0, 0], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 1, 1, 3, 2, 2, 2, 2, 1, 1, 2, 3, 3, 0, 1, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 3, 2, 0, 0, 0, 2, 3, 0, 1, 2, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 0, 3, 2], [1], [0], [0, 1, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [1, 1, 0, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 3, 0, 0, 3, 1, 4, 1, 1, 2, 1, 0, 0, 3, 3, 3, 1, 10, 2, 3, 1, 1, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = abs(len(in1[int(8.0):]))\\nb2 = ( i2 \\l abs(divInt(i2,( int(7.0) + int(5.0) ))) or res0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [1, 2, 3, 0], [1, 0], [2, 0, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( mod(saveOrd(s1[len(in2):]),int(0.0)) != i1 or True ) and in1[abs(i2):int(9.0)] not in in1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 1, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 2], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 3], [1, 0, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 0, 3, 0, 0, 8, 1, 1, 15, 4, 3, 3, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):].endswith(saveChr(int(0.0)).rstrip()[i0:len(s0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = (\"\"R\"\" + s2.lstrip()).lstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 3, 2, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nin1 = in0[abs(mod(int(0.0),i0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 1, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [21], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 10, 3, 2, 1, 2, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nres0 = len(in1[mod(int(0.0),divInt(( int(7.0) + i1 ),i2)):]) != int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 1, 2, 3, 0, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 5, 5, 3, 3, 4, 1], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 0, 17, 4, 5, 0, 4, 8, 1, 1, 15, 4, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in2):len(in2)]:{:\\nres0 = in0 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = getCharFromString(saveChr(divInt(int(0.0),int(8.0)))[mod(abs(int(5.0)),mod(len((\"\"R\"\" + saveChr(i1)).rstrip()),int(2.0))):i0], divInt(len(s1),int(7.0)))[i0:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 5, 0, 19, 7, 3, 4, 3, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):i0][mod(( ( i2 + int(0.0) ) * divInt(int(7.0),( i2 * i0 )) ),divInt(( int(5.0) + i1 ),int(8.0))):] not in saveChr(len(s0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [1, 1, 1], [3, 0, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 0], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 1, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nin1 = in0[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 0, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 4, 0, 0, 7, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( len(in2[len(in2):]) != i1 or True ) and in1[int(67.0):] not in in1.rstrip() )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 2, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 1, 0], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 8, 1, 2, 0, 1, 5, 0, 1, 11, 2, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s2[len(in0):]:{:\\nres0 = in1[len(in0):] != saveChr(i0).capitalize()[:int(8.0)][:int(1.0)][divInt(i2,int(1.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 0, 3, 1, 2, 1, 0, 2, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 5, 1, 2, 1, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\ni1 = len(in1[( int(0.0) + int(6.0) ):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 3, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 3, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 4, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 3, 0, 0, 5, 0, 1, 10, 3, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString(in1[len(in1):], i0)):]:{:\\nres0 = saveChr(i2)[abs(i1):i0] not in in0.rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 3, 0, 2, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 6, 6, 1, 0, 8, 0, 2, 0, 0, 6, 1, 0, 15, 3, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in2[len(in2):] not in in1[int(97.0):]:{:\\nres0 = ( int(5.0) != min(i0, int(7.0)) or ( (in1 + in0.capitalize()[int(6.0):]).endswith(getCharFromString((\"\"R\"\" + s0.rstrip()), int(1.0))) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 4, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 1, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 4, 2, 0, 2, 4, 0, 4, 0, 1, 1, 0], [2, 2, 3, 3], [5, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 5, 0, 1, 9, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in1[len(in1):]:{:\\nres0 = in1[i0:] != in0[:int(0.0)].capitalize().capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 3, 7, 7, 9, 8, 3, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 1, 2, 2], [0, 1, 1], [3, 3, 2, 3, 1, 0, 0, 1, 2, 2, 1, 1, 2, 0, 2, 0, 1, 2, 3, 2, 0, 0, 3, 2, 3, 2, 2, 3, 1, 0, 1, 0, 3, 0, 1, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 0, 2, 0, 2, 1, 0, 1, 4], [0, 0, 2, 1, 0, 2, 2, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 11, 0, 48, 13, 10, 7, 6, 3, 0, 0, 10, 2, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2.capitalize()[max(( min(int(0.0), i1) + i2 ), int(7.0)):divInt(( int(5.0) + int(7.0) ),mod(i1,divInt(i0,int(6.0))))][( abs(( i1 * i2 )) - min(( abs(divInt(( max(int(3.0), i1) + int(7.0) ),i2)) * min(i0, int(7.0)) ), int(9.0)) ):]):] not in saveChr(max(int(8.0), saveOrd(in1[:i1])))[divInt(divInt(int(3.0),int(0.0)),int(4.0)):( int(8.0) * i2 )]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 1, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 1, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 0, 34, 9, 7, 4, 5, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = \"\"R\"\"[len(in1):i0] not in getCharFromString(s0[int(0.0):abs(mod(i2,i2))], mod(int(7.0),min(i0, ( divInt(( int(5.0) + i1 ),divInt(len(saveChr(( i1 + ( min(divInt(int(7.0),i1), int(2.0)) * max(int(1.0), i2) ) ))),int(7.0))) - int(7.0) ))))[i0:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 0, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nin1 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 4, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 0, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 3, 0, 0, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 1, 5, 1, 1, 1, 0, 6, 0, 1, 8, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[( len(in1) + i0 ):]:{:\\nres0 = in1[int(64.0):] not in (in0 + s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [3, 0, 0, 1, 4, 3, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 5, 1, 7, 1, 2, 0, 1, 6, 2, 1, 15, 4, 1, 1, 2, 2, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in (in2 + in1):{:\\nres0 = \"\"R\"\" not in getCharFromString((saveChr(mod(len(in1),i2))[i2:] + in0), len((\"\"R\"\" + getCharFromString(s0, i2)).rstrip()))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2, 0], [0], [0, 0, 0], [], [], [1, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1, 1], [1, 0], [0, 0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 4, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 3, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 2, 0, 2, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 5, 5, 1, 4, 1, 3, 0, 0, 2, 1, 6, 1, 1, 4, 2, 2, 0, 9, 9, 11, 1, 39, 10, 10, 4, 6, 7, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(max(divInt(int(0.0),i2), i2), abs(int(7.0))):]:{:\\nb1 = ( ( mod(int(4.0),min(i2, i2)) != ( divInt(int(7.0),i1) + divInt(abs(divInt(i2,( min(( max(i1, divInt(abs(int(6.0)),i2)) + int(1.0) ), int(7.0)) * i0 ))),i0) ) or True ) and s2 not in in1 )\\ni0 = ( int(7.0) - max(int(9.0), len(in0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = in1\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 2, 2, 4, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 5, 5, 1, 0, 8, 0, 2, 0, 0, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1.capitalize()[int(5.0):int(2.0)][len(in1):])]:{:\\nres0 = ( ( i2 != int(1.0) or True ) and saveChr(int(2.0)) not in in0[:int(2.0)] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 2, 0, 7, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 1, 3, 0, 2, 1, 2, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 3, 2, 3, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [5, 0, 4, 4, 3, 1, 5], [1], [0], [2, 0, 0, 2, 4, 0, 2, 2, 1, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [3, 0, 0], [2, 2, 0, 1, 2, 0], [0], [17], [20], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0[len(in1):]:{:\\nin1 = in0.capitalize()[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 1, 1, 3, 0, 3, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 3, 0, 2, 1, 1, 0, 3, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 1, 3], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 0, 0, 4], [1], [0], [4, 2, 4, 0, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 1, 13, 2, 5, 0, 2, 2, 0, 1, 4, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in saveChr(len(saveChr(max(abs(mod(i0,divInt(i2,int(8.0)))), int(7.0)))[int(5.0):])):{:\\ni2 = min(i0, len(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0, 0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 4, 3, 2, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 3, 0, 4, 3, 1, 4, 1, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 7, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[:len(s1)]:{:\\nb0 = in1.endswith(in0)\\ni2 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 0, 2, 0, 0, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1):]:{:\\ni1 = len(in1[int(0.0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 2, 0, 12, 2, 3, 1, 1, 5, 0, 1, 11, 2, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in0[len(in1):]:{:\\nres0 = in1[len(in0):] != saveChr(i0).capitalize()[int(6.0):int(1.0)][:( int(1.0) + int(2.0) )][mod(int(5.0),abs(i2)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 2, 5, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 3, 0, 2, 0, 0, 1, 2, 3, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 3, 3, 4, 2, 4, 4, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 2, 4, 3, 0, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 1, 2, 2], [0], [14], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(int(1.0), len(in1)):]:{:\\nb1 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 3, 3, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 2, 1, 1], [0], [16], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 5, 1, 3, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\ni0 = len(in1[:mod(int(0.0),len(in0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [2, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 1, 0, 2], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 0, 2, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 1, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 4, 4, 4, 5, 0, 2, 5], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 0, 0, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 0, 8, 8, 11, 1, 34, 9, 7, 5, 4, 6, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nres0 = in1[i0:] not in in2\\nloopBreak% = 0\\nwhile not i1 != int(4.0):{:\\ni2 = len(getCharFromString(saveChr(( i0 + int(7.0) )), i1)[mod(abs(i2),( mod(( int(5.0) + i1 ),divInt(min(( i2 * ( len(s0) - max(int(2.0), i1) ) ), divInt(max(int(6.0), i0),int(1.0))),int(7.0))) + int(7.0) )):i2])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 1, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s1[len(s2):]:{:\\nin1 = in0[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 3, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 10, 0, 34, 10, 8, 4, 6, 6, 1, 1, 15, 4, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len((in1[i0:] + in1)):]:{:\\nres0 = saveChr(len(saveChr(mod(i2,divInt(i2,int(8.0)))))) in in0[( int(7.0) + abs(i0) ):min(divInt(divInt(int(5.0),i1),divInt(len((\"\"R\"\" + s0.capitalize()).rstrip()),( i2 + ( min(divInt(max(i1, ( abs(int(7.0)) * i2 )),int(6.0)), int(1.0)) - i0 ) ))), i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 4, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 2, 2, 1, 0, 5, 0, 2, 0, 0, 5, 0, 0, 8, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in getCharFromString(in1, int(6.0)):{:\\nb0 = ( int(2.0) != len(in1) or ( in0.endswith(saveChr(i2)) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 2, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 2, 1, 0, 1, 2, 0, 2, 1, 2, 1, 0, 2, 3, 2, 2, 2, 2, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 2, 1, 0, 1, 4], [0, 0, 1, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [2, 5, 4, 5, 3, 0, 4, 2], [1], [0], [2, 0, 2, 3, 0, 0, 2, 2, 2, 0, 4, 3, 1, 0, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 18, 18, 9, 0, 50, 16, 8, 8, 8, 7, 1, 1, 15, 1, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len((in1 + in2)[max(i0, int(0.0)):]):]:{:\\nres0 = in0[:abs(mod(( int(7.0) + i2 ),int(5.0)))][( i2 + mod(int(2.0),( int(6.0) - i0 )) ):divInt(min(divInt(( mod(( len(getCharFromString((\"\"R\"\" + s0), int(1.0))) - i1 ),divInt(abs(int(7.0)),i2)) + int(2.0) ),int(9.0)), int(8.0)),i1)][mod(int(5.0),max(int(0.0), min(i2, ( ( ( int(4.0) - int(8.0) ) - divInt(int(59.0),i0) ) - int(9.0) )))):int(2.0)] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 1, 1, 3, 0, 3, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 3, 0, 2, 1, 1, 0, 3, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 1, 3], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 0, 2, 0, 0, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 0, 1], [0], [2, 0, 1, 1, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0, 3, 3, 1, 1, 3], [17], [3, 8], [], [20, 6, 10]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 4, 6, 1, 5, 0, 0, 1, 6, 1, 2, 0, 3], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(\"\"R\"\"):]:{:\\nin1 = \"\";#di\"\\\\\"\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = len(in1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 4, 0, 2, 1, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\ni0 = i1\\ni1 += len(in1[int(0.0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 2, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [2, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 2, 0, 0, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nb2 = in1[saveOrd(in0):] not in getCharFromString(in0, int(0.0))[:int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 5, 0, 4, 5], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [1, 1, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 9, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[:len(in1)]:{:\\nres0 = in1[:len(in0)].endswith(saveChr(i2).capitalize()[int(0.0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [2, 7, 3, 3, 7, 1, 7, 7, 9, 8, 5, 0, 9, 8, 5, 9, 9, 2, 2, 9, 8], [0, 2, 2, 0, 1, 1, 1, 2, 0, 0, 2, 0, 2, 1, 2, 0, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 3, 2, 2, 0, 2, 1, 2, 2, 3, 3, 2, 1, 0, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 0, 2, 1, 0, 1, 2, 3, 3, 3, 3, 1, 2, 3, 2, 2, 1, 1, 2, 1, 0, 3, 0, 3, 2, 2, 3, 0, 1, 2, 1, 1, 0, 3, 3, 0, 0, 0], [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 1, 0, 2, 4, 1, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nin1 = in0[len(\"\"R\"\"):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [0, 0, 1, 2, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 0, 3, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 3, 3, 4, 0, 13, 1, 5, 0, 1, 6, 1, 1, 11, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile ( ( abs(int(0.0)) != i0 or \"\"R\"\"[abs(min(i2, int(7.0))):] not in in1 ) and in0.endswith(s0[divInt(int(5.0),len(saveChr(i2))):i0].capitalize()) ):{:\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 6, 5, 2, 8, 1, 2, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2, 1, 2], [0, 1, 1], [3, 3, 3, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 3, 3, 0, 2, 0, 2, 1, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 4, 1, 0, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 5, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 10, 10, 13, 0, 45, 11, 11, 3, 8, 6, 1, 0, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( abs(int(3.0)) != i1 or ( getCharFromString(in0[divInt(min(int(6.0), i0),abs(int(5.0))):i1], i1)[mod(saveOrd(saveChr(max(i2, ( i2 + mod(int(2.0),divInt(min(max(divInt(int(8.0),( ( int(1.0) - i1 ) + int(2.0) )), int(9.0)), i2),i0)) )))),divInt(mod(abs(int(9.0)),max(i0, i2)),divInt(i1,i2))):int(8.0)].endswith((\"\"R\"\" + in2.rstrip())) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 3, 2, 0, 2, 0, 1, 1, 1, 3, 0, 3, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 3, 0, 2, 1, 1, 0, 3, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 1, 3], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[int(8.0):]:{:\\nres0 = in1 != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 2, 3, 1, 0, 0, 2, 1, 2, 0, 3, 0, 2, 2, 2, 1, 3, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1[i0:])]:{:\\nres0 = int(9.0) != abs(mod(i2,int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 1, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 4, 2, 2, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 1, 10, 10, 10, 1, 38, 9, 10, 3, 6, 4, 1, 0, 11, 2, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(s2[len(s1):]) != len(in1[:int(0.0)][i0:].rstrip()[mod(min(int(7.0), int(5.0)),int(7.0)):]):{:\\nres0 = ( len(\"\"R\"\") \\l i2 or ( in1 not in saveChr(i0) and True ) )\\n:}else:{:\\ni1 = mod(( int(6.0) + i1 ),divInt(min(divInt(i2,divInt(max(( abs(i1) + ( max(int(1.0), i2) * int(7.0) ) ), int(7.0)),i0)), i0),divInt(int(9.0),abs(int(8.0)))))\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in0[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 1, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 0, 3, 2, 0, 2, 3, 2, 1, 1, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 4, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 2, 4], [1], [0], [3, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 1, 7, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\nres0 = in1[len(in0):] not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [0, 1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [1, 1, 1], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 0, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 4, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 5, 1, 1, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(s0[int(0.0):])\\ni2 -= ( int(7.0) + i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 1, 2, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 0, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 6, 0, 1, 7, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(s1):]:{:\\nloopBreak% = 0\\nwhile s2 not in in0:{:\\ni1 = len(s0.capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 8, 8, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 0, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 10, 1, 3, 0, 1, 5, 0, 1, 8, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = i2 != len(in1[int(0.0):i2][mod(len(in0[:int(7.0)]),int(8.0)):int(8.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 3, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 0, 2, 3, 0, 1, 2, 1, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 2], [1, 0], [1, 2, 2, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[:len(in1)]:{:\\nin1 = in0[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 0, 2], [0], [0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 2, 2, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [1, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 1, 1, 4, 1, 2, 3], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 4, 0, 4, 1, 0], [2, 1, 3, 0], [1, 3], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in0 != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [4, 0, 0], [0, 2, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [0, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 3, 5, 7, 9, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 2, 0, 2, 1, 1, 1, 2, 1, 1], [0, 1, 1], [3, 1, 0, 1, 2, 2, 0, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 0, 3, 0, 3, 0, 3, 0, 2, 2, 2, 3, 1, 3, 0, 3, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 1, 1, 2, 1, 3, 0, 3], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 1, 0, 2, 1, 4, 3, 0, 3], [0, 0, 0, 1, 0, 2, 1, 0, 2, 1, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 2, 1, 4, 2], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\ni2 = int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2, 1], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 2, 0, 0, 2, 0, 2, 0, 0], [0, 1, 1], [3, 1, 0, 0, 3, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 4, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0], [1, 5, 4, 4, 3, 2, 4], [1], [0], [1, 0, 0, 2, 0, 4, 0, 2, 3, 0, 1, 3, 4, 4, 0, 4, 0], [2, 2, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 5, 5, 1, 4, 1, 4, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 2, 3, 0, 1, 1, 0, 6, 1, 1, 7, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in \"\"R\"\":{:\\nres0 = in2 not in in1\\ni2 = len(in1[int(7.0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = s2.capitalize()\\ni0 += i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 6, 3, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 2, 1, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 1, 4, 2, 4, 3, 4, 0, 0, 1, 0], [0, 3, 3, 2], [1, 0], [2, 2, 2, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1[saveOrd(in2):] not in in0[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 1, 2, 2, 0, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 1, 1, 0, 1], [5, 5, 4, 0, 3, 3, 4, 1], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = \"\"R\"\" not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [1, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 1, 0, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 3, 2, 5, 1, 2, 1, 1, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s2[len(in2):] not in in1:{:\\ni0 = len(in1)\\n:}else:{:\\ni2 += divInt(int(8.0),i2)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [3, 2, 3, 0], [1, 0], [1, 0, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[:i1]:{:\\nres0 = in1 != in1[len(s2):len(s0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 0, 2, 3, 2, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 5, 1, 6, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in0):i0].startswith(in1[max(i0, i2):]):{:\\ni0 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [2, 0, 0], [0, 0, 1, 2, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 9, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 1, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 2, 0, 1, 0, 1, 3, 0, 0, 3, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4, 1], [1], [0], [4, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 5, 2, 1, 0, 2, 3, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\ni0 = divInt(len(in1),divInt(int(0.0),i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [2], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in2[len(in2):]) != i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 1, 0, 0], [0, 2], [2, 1, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 7, 5, 2, 0, 1, 4, 2, 9, 8, 5, 7, 4, 8, 5, 6, 9, 2, 6, 6], [2, 2, 0, 0, 1, 2, 1, 2, 2, 1, 0, 2, 0, 2], [1, 1, 1], [3, 0, 2, 1, 2, 2, 2, 0, 2, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 1, 0, 0, 3, 2, 3, 0, 2, 3, 3, 0, 3, 0, 1, 0, 2, 1, 0, 1, 1, 0, 3, 1, 2, 1, 1, 2, 1, 3, 1, 3, 3, 0, 3, 0, 2, 1, 2, 1, 3, 1, 2, 2, 1, 1, 0, 1, 3, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [3, 1, 2, 0, 1, 3, 2, 2, 3, 2, 4, 1, 2, 0, 0, 2], [1, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [5, 5, 4, 0, 3, 1, 4], [1], [0], [4, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3, 1], [3, 0], [2, 2, 0, 0, 1], [1], [17], [20], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 12, 1, 34, 11, 8, 6, 6, 6, 0, 0, 5, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(len(in2))\\ni2 -= i2\\nin1 = s0\\nin0 = saveChr(mod(int(5.0),divInt(divInt(divInt(i0,mod(divInt(max(i0, i1),( ( int(7.0) + i2 ) * ( abs(int(5.0)) - i1 ) )),i2)),min(( max(i2, ( len(s1) + abs(i1) )) - abs(i0) ), int(2.0))),i2)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 0, 3, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 1, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[len(in1):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0, 2, 2, 2], [0, 1, 1], [3, 3, 3, 2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 3, 1, 0, 0, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 1, 1, 4, 3, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 13, 1, 52, 17, 12, 7, 10, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 = len(s2[:abs(divInt(divInt(( i2 + int(8.0) ),divInt(divInt(min(i2, len(in0)),divInt(( i0 - i1 ),( min(divInt(i2,( max(mod(max(i2, divInt(max(int(7.0), i2),saveOrd(saveChr(int(5.0))))),i0), i0) * i2 )), int(7.0)) - len(saveChr(int(6.0))) ))),max(i2, ( ( ( int(1.0) + int(7.0) ) * mod(int(7.0),i2) ) - int(9.0) )))),mod(int(8.0),int(5.0))))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 4, 2, 0, 3, 4, 0, 0, 1, 0], [2, 2, 3, 3], [1, 0], [2, 0, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 7, 0, 3, 0, 0, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[int(0.0):len(s0)] != s0[int(4.0):i0].capitalize()[:abs(i0)].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 3, 7, 7, 9, 8, 3, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 2, 2, 2], [0, 1, 1], [1, 3, 2, 3, 1, 0, 0, 1, 2, 2, 1, 0, 2, 2, 2, 0, 1, 2, 2, 2, 0, 0, 3, 0, 3, 0, 2, 3, 1, 0, 1, 0, 3, 0, 1, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 0, 2, 0, 0, 1, 0, 1, 4], [0, 0, 2, 1, 0, 2, 2, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 12, 0, 45, 12, 8, 5, 7, 4, 0, 0, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[int(0.0):] not in in2:{:\\nres0 = ( len(in1[( abs(int(7.0)) + i1 ):]) != i2 or ( saveChr(int(5.0))[divInt(( int(7.0) + i1 ),mod(divInt(divInt(i0,int(6.0)),( ( divInt(i1,i2) * min(i1, abs(i2)) ) - ( min(int(3.0), i0) + int(7.0) ) )),i2)):min(i2, int(7.0))].capitalize().endswith(in1[int(9.0):max(int(8.0), min(i2, divInt(mod(int(3.0),int(0.0)),int(4.0))))]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2, 0], [0], [0, 0, 0, 0], [], [], [2, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 1, 1], [3, 3, 1, 2, 3, 2, 0, 2, 1, 1, 3, 2, 2, 2, 2, 1, 1, 2, 3, 3, 0, 1, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 3, 2, 0, 0, 0, 2, 3, 0, 1, 2, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 4, 2, 2, 3, 3, 1, 2, 1, 4, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 0, 3, 2], [1], [0], [2, 1, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [1, 1, 0, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 5, 1, 31, 10, 8, 6, 4, 7, 1, 1, 10, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[abs(saveOrd(in2)):]:{:\\nb2 = in1[int(8.0):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = divInt(abs(( i2 + ( int(7.0) + int(5.0) ) )),abs(divInt(( mod(( int(7.0) * int(7.0) ),( len(in0) - len(saveChr(i2)) )) + int(4.0) ),max(divInt(int(7.0),i0), ( abs(int(7.0)) * i0 )))))\\ns0 = in1[:int(9.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 6, 3, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 0, 2, 0, 1, 2, 1, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 4, 2, 0, 0, 0, 3, 4, 0, 0, 1, 0], [0, 3, 3, 2], [1, 0], [2, 0, 2, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 0, 2, 0, 0, 7, 0, 1, 9, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in (in2 + in1):{:\\nin1 = in0[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(getCharFromString(in1[i2:i1], i0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 1, 0, 0], [2, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 1, 0], [0, 0], [1, 5], [3, 2, 1, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 2, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 2, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 2, 5, 2, 0, 3, 1, 1, 0, 7, 7, 11, 1, 33, 10, 6, 5, 5, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( not len(s2[divInt(i0,int(9.0)):]) != i1 or False ):{:\\nres0 = ( i0 + int(7.0) ) \\l ( int(5.0) + min(i2, i1) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = divInt(divInt(int(7.0),i1),divInt(len(in2),( i2 * ( min(divInt(len(in1[i0:]),( min(int(6.0), i0) - int(1.0) )), int(7.0)) + i1 ) )))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 3, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 0, 0, 3, 0, 1, 2, 1, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 11, 0, 49, 15, 11, 7, 8, 6, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in s0[len(in1):]:{:\\nres0 = in1[max(min(mod(i0,divInt(i2,int(8.0))), ( int(7.0) + min(i2, len(in0)) )), divInt(divInt(int(5.0),i0),divInt(min(( i1 + ( max(divInt(abs(i2),( max(int(7.0), i1) * int(3.0) )), int(1.0)) - i2 ) ), i0),mod(int(7.0),saveOrd(saveChr(int(7.0))))))):] not in saveChr(saveOrd(s0[i0:divInt(( ( int(9.0) + int(8.0) ) * ( int(5.0) - i2 ) ),int(0.0))]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 2, 6, 1, 7, 7, 9, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 2, 1, 0, 1, 3, 2, 2, 1, 2, 1, 0, 2, 3, 2, 2, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 1, 1, 0, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 2], [1], [0], [2, 4, 0, 2, 0, 0, 2, 2, 2, 0, 0, 3, 1, 0, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 8, 0, 49, 15, 10, 9, 6, 8, 1, 1, 15, 1, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1[:len(in1)]))[i0:]:{:\\nres0 = in0[:int(5.0)][abs(mod(( int(7.0) + i2 ),int(5.0))):min(( mod(int(2.0),( int(6.0) + i2 )) * divInt(len(s0),( ( mod(max(max(int(1.0), i0), ( min(int(7.0), i1) - int(7.0) )),int(9.0)) + int(7.0) ) * i2 )) ), mod(int(5.0),max(int(0.0), saveOrd((\"\"R\"\" + in1)))))][i1:divInt(( ( int(4.0) - int(8.0) ) - ( int(59.0) * i2 ) ),int(9.0))] not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [2, 3, 0, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in2[mod(len(in2),i1):] not in in1[int(0.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 1, 1, 3, 0, 3, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 3, 0, 2, 1, 1, 0, 3, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 1, 3], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 0, 0, 4], [1], [0], [2, 4, 0, 0, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 9, 2, 3, 0, 2, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in saveChr(len(in2))[max(abs(mod(i0,divInt(i1,int(8.0)))), int(7.0)):]:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 5], [1], [0], [2, 0, 0, 2, 1, 0, 0, 2, 1, 2, 4, 2, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 3, 1, 0, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = in2[len(in2):] != \"\"R\"\"[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 2, 0], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 7, 0, 4, 0, 0, 5, 1, 1, 11, 2, 0, 4, 1, 0, 0, 0, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = s1[len(in0):] != \"\";\"\"[i0:int(2.0)][:abs(saveOrd(saveChr(i2).capitalize()))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 3, 0, 2, 1, 1, 3, 3, 0, 0, 2, 2, 1, 2, 2, 3, 2, 0, 2, 3, 3, 2, 0, 2, 3, 3, 0, 3, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 2, 0, 2, 2, 1, 1, 0, 1, 4, 2], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 0, 2, 0, 4, 4, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 6, 0, 4, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(\"\"R\"\"):]:{:\\nres0 = in1[abs(min(int(07.0), abs(i0))):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 8, 1, 8, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 1, 0, 3, 2, 4, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 2], [1, 0], [2, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nb1 = in1[int(6.0):] not in in0\\ni1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 4, 7, 6, 7, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 1, 3, 0, 1, 2, 1, 1, 1, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 3, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2, 2], [2, 1, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 40, 10, 11, 6, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(s1[mod(int(4.0),i0):])]:{:\\nres0 = in0.startswith(s0[( i1 * abs(( int(7.0) - min(i2, int(4.0)) )) ):mod(int(7.0),int(6.0))].capitalize()[int(7.0):( len(saveChr(divInt(i1,( min(( max(i1, divInt(abs(int(7.0)),i2)) * int(7.0) ), max(i1, i2)) * ( int(9.0) + abs(int(8.0)) ) )))) * abs(i0) )])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 1, 1, 2, 2, 0, 1, 2, 3, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 4, 1, 1, 0, 1, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni2 = mod(int(01.0),int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 1, 1, 1, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 4, 0, 9, 2, 2, 0, 2, 4, 1, 1, 8, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in saveChr(len(in2))[i2:]:{:\\nres0 = in1[len(in1):] not in \"\"R\"\"[int(6.0):mod(divInt(i1,i2),i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 1, 1, 9, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = s1[len(in0):] != \"\"R\"\"[:i1][:i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(s0[int(0.0):])]:{:\\ni0 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 8, 2, 6, 1, 7, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 2, 1, 0, 1, 0, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 3, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 2, 3, 0, 3, 1, 1, 0, 1, 2], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(abs(i0), int(0.0)):]:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 1, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 4, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 2, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 1, 1, 1, 2, 3, 1, 2, 2, 0, 1, 0, 1, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 1, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\ni1 = len(in1[int(0.0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 0, 1, 0, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 2, 0, 0, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nb0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [0, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 8, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 4, 0, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 4, 0, 12, 3, 3, 1, 2, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in1[len(s0):]:{:\\nb0 = ( ( i0 != len(s1[mod(i0,divInt(i2,int(8.0))):]) and True ) and in0 not in saveChr(( int(8.0) * abs(i0) )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 0, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 5, 1, 2, 0, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\ni0 = len(in1[:mod(int(8.0),i2)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 0, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nb0 = \"\"R\"\" != in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 4, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 2, 0, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 2, 2, 3, 1, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 0, 0, 2, 2, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 5, 4, 4, 5, 4, 3, 5], [1], [0], [2, 4, 4, 0, 4, 3, 2, 2, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2, 1], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 15, 1, 52, 18, 8, 7, 11, 7, 1, 1, 15, 5, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in saveChr(max(i0, len(in2))).capitalize()[int(1.0):]:{:\\nin1 = (in1[i2:][divInt(i2,int(4.0)):] + in2).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = mod(int(5.0),( i1 + i2 ))\\nin1 = (\"\"R\"\" + saveChr(divInt(divInt(int(7.0),i1),divInt(abs(( i2 + ( min(divInt(len(in0),( mod(min(int(6.0), i0),divInt(int(1.0),i0)) * i2 )), ( int(7.0) + max(int(7.0), abs(i0)) )) + ( ( divInt(int(9.0),int(8.0)) * divInt(int(5.0),i2) ) * int(0.0) ) ) )),mod(i0,i0))))).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 2], [0, 1, 1], [3, 3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 8, 1, 4, 1, 0, 4, 1, 1, 7, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(\"\"R\"\"):]:{:\\nres0 = in1[len(in1):] not in saveChr(abs(( i0 + min(i2, int(8.0)) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [2, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 2, 8, 1, 2, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 2, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 0, 0, 3, 1, 2, 1, 1, 2, 2, 0, 0, 3, 2, 3, 1, 0, 2, 0, 2, 0, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 2, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 5, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 3, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 7, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in2):]:{:\\nin1 = in0[i1:]\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 8, 1, 8, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [1, 1, 1], [3, 1, 0, 3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 1, 0, 3, 2, 4, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 4, 0, 0, 2, 1, 2, 1, 4, 3, 4, 4, 0, 1, 0], [2, 1, 2], [1, 0], [1, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(\"\"R\"\")]:{:\\nres0 = in1.capitalize() not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 0, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 3, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in0[len(in0):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,i2)].capitalize()[( int(8.0) + abs(i0) ):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1, 2], [0, 1, 1], [3, 1, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 14, 14, 13, 1, 51, 16, 9, 7, 9, 5, 0, 0, 8, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[min(int(8.0), i0):] not in in2:{:\\nres0 = ( mod(i2,divInt(( int(7.0) + divInt(int(5.0),len(in1)) ),i2)) != min(divInt(divInt(int(7.0),i0),( min(( i1 + divInt(len(in1),( min(i2, mod(max(int(6.0), i1),int(1.0))) * int(7.0) )) ), i2) - i0 )), divInt(int(7.0),abs(int(9.0)))) or ( s0.endswith(saveChr(max(i0, ( ( ( int(8.0) + int(5.0) ) * divInt(int(0.0),i1) ) - int(4.0) )))[i1:]) and True ) )\\n:}else:{:\\ni2 = int(8.0)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 2, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 4, 0, 2, 0, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 13, 3, 4, 1, 2, 5, 0, 1, 11, 4, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2.capitalize()[len(saveChr(len(in1))[mod(i0,mod(( len(in1[int(0.0):]) - int(7.0) ),int(5.0))):]):]:{:\\nb0 = in0.rstrip() not in saveChr(min(i1, i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 1, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 2], [0, 1, 1], [3, 0, 3, 2, 0, 2, 0, 1, 2, 1, 1, 0, 3, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 0, 0, 2, 0, 2, 2, 1, 2, 0, 2, 1, 0, 2, 1, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1, 4, 3], [0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 1, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 0, 3, 3, 4, 0, 12, 3, 2, 2, 1, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2[len(in2):] != in1[:i0]:{:\\nres0 = ( saveOrd(s1) != mod(i2,( i2 + int(8.0) )) or ( ( int(7.0) + int(5.0) ) \\l i0 and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 0, 1, 2, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 3, 0, 2, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [1, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[:int(67.0)]:{:\\nb0 = len(in1) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 1, 2, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [2, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 1, 0, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nres0 = len(in1) != len(in1[( int(4.0) * i0 ):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 2, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 12, 3, 2, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):mod(int(0.0),i1)] not in s0[i2:mod(int(7.0),( int(2.0) + i2 ))].capitalize()[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 2, 1, 2, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 1, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [8], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = len(in1) != len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1:{:\\nres0 = ( int(8.0) != i0 or ( in1.endswith(s0) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 3, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[int(0.0):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 3, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 3, 1, 1, 2, 1, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 4], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s0[len(in1):]:{:\\nres0 = in1.capitalize() == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2, 1], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [0, 0, 0], [0, 1, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [0, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 1, 1], [1, 3, 1, 1, 2, 2, 3, 2, 1, 1, 3, 3, 2, 1, 2, 1, 1, 2, 3, 1, 0, 1, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 3, 2, 0, 0, 0, 2, 3, 0, 1, 2, 3, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2, 0], [0, 1, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4, 0, 3, 2], [1], [0], [2, 2, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [1, 1, 0, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 5, 5, 1, 4, 1, 4, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 13, 13, 5, 2, 31, 8, 7, 5, 4, 6, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(8.0):][abs(int(7.0)):]:{:\\nres0 = ( int(5.0) \\l mod(( len(s2[:mod(int(7.0),int(7.0))]) + abs(abs(mod(int(4.0),( int(7.0) - int(7.0) )))) ),divInt(len(in1),int(9.0))) and i1 \\l int(8.0) )\\ni2 = len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = saveChr(( int(5.0) * i2 ))\\ni0 -= ( max(int(0.0), i0) + int(4.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 6, 3, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 2, 1, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 4, 2, 4, 2, 4, 0, 4, 1, 0], [0, 3, 3, 2], [1, 0], [2, 2, 2, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\ni0 = len(in1[i2:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 0, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 0, 3, 5, 4, 2], [1], [0], [1, 0, 4, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 1, 1, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\":{:\\nres0 = in2 not in saveChr(len(in1[len(s0):]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 4, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in1[max(int(0.0), int(9.0)):] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 6, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 2, 1, 3, 2, 2, 1, 0, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 1, 2, 2, 1, 1, 3, 1, 0, 1, 1, 3, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 2, 2, 2, 1, 0, 0, 1, 4, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 2, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 3, 3, 1, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[max(i0, mod(int(0.0),min(mod(( int(7.0) + i2 ),int(5.0)), abs(i2)))):] not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 2, 2, 0, 2, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in0[i1:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 4, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 0, 0, 3, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 3, 3, 3, 1, 8, 0, 3, 0, 0, 6, 0, 0, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1:{:\\nres0 = ( len(s0) != int(0.0) or ( in0.endswith(s0[int(7.0):i0].capitalize()[i2:]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = abs(int(4.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[int(8.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 0, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s0[len(in2):] not in in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [2, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\":{:\\nres0 = in2 == in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 7, 5, 2, 0, 1, 4, 2, 9, 8, 5, 7, 4, 8, 5, 6, 9, 2, 6, 6], [2, 2, 0, 0, 0, 2, 1, 2, 2, 0, 0, 2, 0, 2], [1, 1, 1], [3, 3, 2, 1, 1, 2, 2, 0, 1, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 0, 3, 2, 3, 0, 2, 3, 0, 0, 3, 0, 1, 0, 2, 1, 3, 1, 1, 0, 3, 1, 2, 1, 1, 2, 1, 3, 1, 3, 3, 0, 3, 0, 2, 1, 2, 1, 3, 1, 2, 2, 1, 1, 0, 1, 3, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 1, 2, 0, 0, 2], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [3, 0], [2, 2, 0, 0, 1], [1], [17], [20], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 4, 0, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in \"\"u\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [1, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 4, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:int(6.0)]:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 8, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 0, 1, 2, 1, 2, 0, 1, 2], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 2, 2, 0, 0, 0, 2, 2, 1, 2, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in0[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 8, 2, 6, 1, 7, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 2, 0, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 3, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 1, 1, 0, 1, 2], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 3, 1, 0, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(\"\"R\"\"):] not in in2[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in2):]:{:\\nres0 = in1[len(in0):] != s0[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 0, 0, 0, 2, 1, 2, 0, 0], [1, 1, 1], [3, 3, 2, 0, 0, 0, 3, 3, 2, 3, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [4, 0, 0, 0, 0, 1, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 2], [17], [], [], [20, 13]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 5, 0, 1, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nb2 = in1 in in1\\ni1 -= len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 0, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 1, 1, 2, 0, 1, 1, 0, 0, 2], [0, 1, 1], [3, 3, 2, 0, 1, 2, 3, 1, 2, 1, 2, 3, 0, 2, 3, 1, 0, 2, 0, 2, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0, 1, 1, 3, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 1, 4, 1, 2, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0], [5, 5, 4, 4, 3, 4, 4, 1], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 2, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 0, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 6, 5, 2, 8, 1, 2, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 2, 2, 1, 1, 2, 1, 1, 0, 0, 0, 0, 0, 2, 3, 3, 0, 2, 0, 2, 1, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 4, 1, 0, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 2, 4, 1], [1], [0], [0, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 1, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 4, 2, 4, 1, 4, 0, 0, 1, 0], [2, 2, 3, 2], [1, 0], [2, 2, 2, 0, 1], [0], [13], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] != s2[int(0.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 0, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 1, 1, 2, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 0, 2, 0, 0, 6, 0, 1, 9, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):i1] != s0[:int(6.0)][:int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 5, 1, 2, 1, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni1 = len(in1[( int(0.0) + i2 ):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 2, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 0, 1, 3, 2, 2, 1, 0, 1, 2, 0, 2, 1, 2, 1, 0, 2, 3, 2, 2, 2, 2, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 2, 1, 0, 1, 4], [0, 0, 1, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 2], [1], [0], [2, 0, 4, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 0, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 7, 2, 17, 5, 2, 4, 2, 3, 0, 1, 5, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\ni2 = len(getCharFromString(in1[i2:], int(0.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += max(mod(( int(7.0) + i1 ),int(5.0)), ( i2 - mod(int(2.0),( int(6.0) - i1 )) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 0, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nres0 = in1.capitalize() not in in0\\ni0 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 6, 3, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 1, 0, 1, 1, 2, 0, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nin1 = in0[int(7.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 3, 0, 2, 0, 3, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 4, 2, 4, 1, 4, 1, 1, 0, 0, 1, 0], [1, 0, 3, 2], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1):]:{:\\nres0 = in1 == s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 0, 2, 1, 0, 3, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 2, 2, 3, 0, 4], [1], [0], [2, 4, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 5, 2, 8, 2, 1, 1, 2, 2, 0, 1, 4, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2.capitalize()[divInt(i0,divInt(int(0.0),i2)):]:{:\\ni2 = len(saveChr(i0))\\ni1 += int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [6, 7, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 9, 8], [0, 2, 2, 0, 1, 1, 1, 2, 0, 0, 2, 0, 2, 1, 2, 0, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 3, 2, 1, 0, 2, 1, 2, 2, 3, 3, 2, 1, 0, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 3, 3, 1, 1, 2, 3, 0, 2, 1, 1, 2, 1, 0, 3, 0, 3, 2, 2, 3, 0, 1, 2, 1, 1, 0, 3, 3, 0, 0, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0], [1, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 1, 2, 2, 4, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), i0):]:{:\\nin1 = in0[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 1, 1, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 3, 2, 1, 1, 2, 1, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 2, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 1, 0, 2, 0, 4, 2, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(s2):]:{:\\nin1 = in0.capitalize()[len(\"\"R\"\"):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 4, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 2, 2, 3, 0, 9, 2, 2, 0, 2, 5, 0, 0, 10, 3, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0.capitalize() not in in2:{:\\nres0 = ( len(in1[len(in2):]) != mod(int(0.0),i0) or ( saveChr(mod(i2,int(7.0)))[i2:].endswith(in0.rstrip()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 1, 1, 3, 0, 3, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 3, 0, 2, 1, 1, 0, 3, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 1, 3], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1.startswith(s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in0):]:{:\\nin1 = in0[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 1, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 0, 1], [0, 1, 1], [3, 1, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 3, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 0, 1, 2, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 1, 0, 0, 1, 2, 4, 4, 4, 3, 4, 0, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 0, 3, 3, 3, 0, 8, 1, 1, 0, 1, 2, 1, 0, 5, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2[len(\"\"R\"\"):][int(0.0):] not in in2:{:\\nb0 = ( i0 != int(7.0) or ( i2 \\l divInt(i2,int(5.0)) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 8, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 1, 1, 2, 1, 2, 1, 0, 0, 1, 2, 2, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 3, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 2, 2, 0, 4, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 15, 0, 55, 17, 11, 7, 10, 3, 1, 1, 8, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(saveChr(len(\"\"R\"\"))):mod(i0,divInt(i1,i2))][( int(8.0) * min(i1, divInt(divInt(divInt(int(8.0),i1),( len(saveChr(( i2 + divInt(min(( int(8.0) * i1 ), mod(max(int(6.0), i2),int(6.0))),int(1.0)) ))) - i1 )),i0)) ):divInt(abs(max(abs(max(i0, ( ( ( int(7.0) + int(7.0) ) * divInt(int(9.0),i1) ) - int(8.0) ))), mod(int(5.0),i2))),i2)]):]:{:\\nres0 = i0 != int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 4, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 2, 1], [0, 1, 1], [3, 1, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 14, 1, 53, 16, 9, 7, 9, 6, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[int(8.0):i0] not in (saveChr(mod(i2,divInt(( int(7.0) + divInt(int(5.0),len(s0[i2:min(divInt(divInt(int(7.0),i0),( min(( i1 + divInt(len(saveChr(( min(i2, mod(max(int(6.0), i1),int(1.0))) * int(7.0) ))),i2) ), i0) - divInt(int(7.0),abs(int(9.0))) )), max(i0, ( ( ( int(8.0) + int(5.0) ) * divInt(int(0.0),i2) ) - int(4.0) )))])) ),i2)))[i2:int(8.0)] + (\"\"R\"\" + s0.rstrip()))\\ni1 = int(59.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 8, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0, 1, 0, 0, 2, 2], [0, 1, 1], [3, 3, 0, 2, 2, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 3, 0, 1, 0, 0, 0, 2, 0, 2, 2, 1, 0, 1, 2, 3, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [3, 4, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 2, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0], [0, 3, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 18, 18, 16, 0, 68, 27, 8, 14, 13, 7, 1, 1, 14, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1):]:{:\\nres0 = in1[saveOrd(s0):] not in s0[i0:divInt(divInt(( divInt(int(0.0),( int(7.0) + len(in1) )) * i2 ),i2),mod(( int(5.0) * i2 ),int(8.0)))][i1:( divInt(( mod(mod(( ( ( min(divInt(i2,int(2.0)), int(1.0)) + mod(i1,( int(7.0) - len(getCharFromString((\"\"R\"\" + saveChr(int(7.0))), min(i2, ( divInt(divInt(int(2.0),int(3.0)),( i0 * i0 )) - int(5.0) )))) )) ) - abs(i0) ) * int(0.0) ),i1),i0) * i0 ),mod(i2,( ( int(8.0) + i2 ) - int(8.0) ))) - divInt(abs(int(59.0)),( int(9.0) - int(2.0) )) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 323}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 0, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 2, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 4, 1, 1, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(s2):]:{:\\nres0 = in1.capitalize() not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 6, 7, 2, 1, 7, 7, 9, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 1, 2, 2, 0, 2, 1, 1, 3, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 2, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 1, 2, 0, 2, 1, 4, 0, 1, 2, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 10, 10, 8, 1, 34, 12, 5, 6, 6, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( min(( int(2.0) + int(7.0) ), divInt(divInt(i1,divInt(int(6.0),int(7.0))),abs(( divInt(( int(2.0) + i2 ),( ( ( i1 * divInt(min(int(1.0), int(7.0)),i0) ) - divInt(abs(int(7.0)),i1) ) + int(9.0) )) * int(7.0) )))) != i2 or True ) and in1 == s0 )\\ni1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 0, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 4, 2, 0, 2, 4, 3, 4, 4, 0, 1, 0], [3, 2, 2, 0, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 13, 2, 5, 1, 1, 7, 1, 1, 17, 5, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2.rstrip()[len(in1[len(in1):]):]:{:\\nb2 = s0[abs(mod(i1,saveOrd((getCharFromString(saveChr(i2), int(7.0)) + s0).capitalize()[( int(9.0) + len(\"\"R\"\") ):i1]))):int(8.0)].capitalize() != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 2, 1, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = s0[( int(0.0) + int(7.0) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 3, 0, 2, 0, 3, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 4, 2, 4, 1, 4, 1, 1, 0, 0, 1, 0], [1, 0, 3, 2], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 3, 0, 3, 0, 0, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2[len(in2):] not in saveChr(len(in1))\\ni0 = saveOrd(in1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [1, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 0, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 2, 2, 6, 1, 13, 2, 4, 0, 2, 5, 1, 0, 9, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s1[abs(len(in2)):] not in in1[mod(i0,len(in0)):]:{:\\nres0 = ( i2 != i2 or ( \"\"R\"\"[int(0.0):].endswith(in0) and True ) )\\n:}\\ni0 = divInt(int(7.0),min(i1, i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 3, 3, 0, 2, 0, 3, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 4, 2, 4, 1, 4, 1, 1, 0, 0, 1, 0], [1, 0, 3, 2], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 2, 1, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[( len(in1) + len(in1) ):]:{:\\nres0 = s1 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 6, 5, 2, 8, 1, 2, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 0, 2, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 1, 1, 3, 1, 1, 3, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 1, 2, 4, 1, 2, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [5, 1, 5, 3, 3, 4, 4, 1], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s1:{:\\nb0 = in2 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 1, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 2, 2, 3, 2, 1, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 1, 1, 2, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 4, 0, 2, 0, 1], [1, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0], [5, 5, 4, 4, 3, 4, 4, 5], [1], [0], [2, 2, 0, 2, 0, 0, 4, 2, 4, 0, 4, 3, 4, 0, 0, 1, 0], [3, 1, 3, 3], [2, 0, 0], [2, 2, 1, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 12, 3, 5, 2, 1, 7, 1, 1, 16, 4, 3, 4, 1, 0, 1, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1[:len(in1)]):][abs(saveOrd(saveChr(( divInt(saveOrd(in0),( int(2.0) - int(7.0) )) - i0 ))[:i2].strip())):]:{:\\nb1 = (in1.lstrip() + in1).lstrip() != \"\"u\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 3, 0, 0, 2, 3, 1, 2, 2, 0, 1, 0, 1, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 4, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 1, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 14, 3, 4, 0, 3, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in1[len(in1):]:{:\\nres0 = in1[len(in0):] not in in0[abs(i1):i0].capitalize()[mod(len(saveChr(int(0.0))),mod(mod(i0,int(6.0)),i1)):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 3, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 8, 7, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 1, 2, 2, 0, 2, 2, 2, 0, 2], [0, 1, 1], [3, 3, 2, 2, 0, 2, 0, 0, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 1, 2, 0, 2, 3, 2, 3, 0, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 0, 1, 2, 2, 0, 1, 3, 0, 2, 0, 3, 1, 1, 3, 0, 0, 3, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [3, 3, 2, 0, 1, 0, 1, 2, 1, 1, 4, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 0, 2, 0, 1, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 20, 1, 62, 19, 12, 8, 11, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\nres0 = in1[len(saveChr(mod(divInt(i0,( i1 + i2 )),divInt(int(8.0),abs(i0))))):] not in s1[i1:divInt(divInt(int(7.0),i2),( int(5.0) + ( i1 * divInt(min(( max(i2, mod(min(divInt(i0,int(7.0)), int(6.0)),i1)) - i2 ), ( int(1.0) + max(int(7.0), abs(i1)) )),divInt(( divInt(i2,int(8.0)) * mod(( i2 - int(7.0) ),max(i0, ( i2 - max(int(8.0), int(5.0)) ))) ),saveOrd(s0[i2:i2]))) ) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = max(i2, int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0, 0, 2], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 2, 0, 3, 0, 2, 2, 1, 2, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 2, 0, 3, 0, 2, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 3, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 11, 3, 3, 1, 2, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1[i0:])]:{:\\nres0 = in0 not in saveChr(mod(abs(mod(i2,int(0.0))),( int(7.0) + i2 )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 0, 2, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(i1):]:{:\\ni2 = len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 2, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [2, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 0, 3, 0, 1, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 1, 1, 7, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1 not in (in2 + \"\"R\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 6, 5, 2, 8, 1, 2, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 3, 1, 1, 2, 3, 1, 0, 3, 0, 0, 0, 2, 3, 3, 0, 2, 0, 2, 1, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 4, 1, 0, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 5, 4, 1], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nb1 = in1.capitalize() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 2, 4, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1, 1], [1, 0], [2, 2, 0, 0, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 9, 0, 33, 8, 7, 2, 6, 4, 1, 1, 14, 5, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = getCharFromString(saveChr(len(in1.rstrip()))[i1:int(0.0)], int(6.0))[mod(abs(int(5.0)),mod(( i0 + i1 ),i1)):mod(min(int(2.0), i2),divInt(i2,mod(int(8.0),int(1.0))))][max(divInt(saveOrd(saveChr(int(8.0))),( max(i1, i2) * int(7.0) )), int(9.0)):] not in (\"\"R\"\" + saveChr(i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 0, 0, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 4, 0, 4, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 1, 9, 3, 2, 1, 2, 4, 1, 1, 7, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in \"\"R\"\":{:\\nres0 = in2 not in in1\\ni0 = divInt(len(in1.capitalize()[mod(i0,i0):]),( len(saveChr(int(0.0))) + int(3.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1, 1], [1, 0], [0, 1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 2, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 0, 1, 2, 0, 0, 2, 2, 2], [1, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 3, 3, 0, 0, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 3, 3, 0, 0, 3, 1, 0, 0, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 0], [1], [0], [2, 0, 0, 0, 0, 1, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 0, 0, 1, 1, 6, 1, 1, 4, 2, 2, 0, 2, 2, 3, 1, 8, 2, 2, 2, 1, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile ( ( len(in1) != divInt(int(1.0),i0) or True ) and s0 not in \"\"R\"\" ):{:\\nres0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += ( i2 - int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2, 1], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [0, 3, 0], [0, 1, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 9, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 1, 1], [1, 3, 1, 1, 2, 0, 3, 2, 1, 1, 1, 0, 2, 2, 2, 1, 1, 2, 3, 3, 0, 3, 3, 0, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 3, 2, 0, 0, 0, 2, 3, 0, 1, 2, 3, 0], [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2, 0], [0, 1, 2, 1, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4, 0, 3, 2], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [1, 1, 0, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 6, 6, 2, 1, 11, 2, 2, 1, 1, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(8.0):]:{:\\nres0 = ( abs(int(7.0)) \\l int(5.0) or divInt(i1,len(in0)) \\ge ( int(7.0) + int(7.0) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 2, 2, 2, 3, 0, 2, 3, 0, 0, 1, 1, 0, 0, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 1, 1, 0, 1, 3, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 3, 1, 0, 3, 5, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = s1.capitalize()[mod(mod(int(0.0),i0),divInt(i2,int(7.0))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 2, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s2[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 14, 14, 11, 1, 49, 15, 10, 9, 6, 7, 1, 0, 15, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( i1 != int(0.0) or ( in0[abs(mod(i1,int(7.0))):mod(int(5.0),min(i1, ( divInt(( int(7.0) + i1 ),( len(s0[min(i0, ( max(( int(2.0) + i2 ), divInt(abs(int(1.0)),i1)) * int(7.0) )):]) - int(7.0) )) + i1 )))].endswith((\"\"R\"\" + in1.capitalize()).capitalize()) and True ) )\\n:}else:{:\\ni2 = ( divInt(int(9.0),max(int(8.0), abs(i2))) * divInt(( ( int(5.0) - int(0.0) ) - ( int(4.0) * i2 ) ),int(8.0)) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 2, 0, 2, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 0, 0, 0, 1, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 0, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [0], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(min(int(0.0), i1)):]:{:\\nres0 = in1 not in in1[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 8, 1, 8, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 1, 1, 0, 3, 2, 4, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 2], [1, 0], [0, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 6, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(int(6.0)):i1]:{:\\nres0 = in1 not in in1[max(i2, int(8.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 4, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 3, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 2, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 4, 1, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nb0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 0, 0, 1, 2, 0, 1, 2, 3, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 1, 0, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 1, 4, 3, 1, 4], [1], [0], [1, 0, 4, 2, 0, 0, 2, 0, 2, 2, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 1, 2, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 2, 2, 3, 0, 8, 2, 1, 1, 1, 4, 1, 0, 8, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif \"\"R\"\" not in s1:{:\\nres0 = ( len(in2[mod(i1,i2):].capitalize()) != int(7.0) or ( s1.endswith(in1[( i0 + int(2.0) ):]) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 2, 3, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2.capitalize():{:\\nres0 = s2 != in0[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 2, 2, 4, 0, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [0], [17], [], [], [20]], "fitness": 32, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 5, 5, 4, 1, 17, 4, 5, 2, 2, 7, 1, 0, 16, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in2.capitalize() != in2:{:\\nres0 = ( len(in1[len(in1):]) != i0 or ( saveChr(int(6.0))[:i2][( int(1.0) + int(1.0) ):][mod(int(2.0),abs(i1)):].endswith(in0) and True ) )\\n:}else:{:\\ni0 = ( saveOrd((s0.rstrip() + in1)) + divInt(int(5.0),len(\"\"R\"\")) )\\n:}\\n", "other_info": {}, "test_fitness": 296}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 1, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 0, 3, 2, 0, 2, 3, 2, 1, 1, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 4, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 32, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\nres0 = len(in1[saveOrd(in0):]) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 11, 4, 2, 1, 3, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[divInt(min(mod(int(0.0),i0), ( i2 + int(7.0) )),divInt(int(5.0),len(in1))):]:{:\\nres0 = in1.capitalize() == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 323}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 3, 1, 2, 1, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),( int(0.0) + i1 )):( i2 + int(7.0) )]:{:\\nres0 = in1 == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [0], [17], [], [], [20]], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[abs(i0):] == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 3, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 3, 1, 1, 2, 1, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [4, 5, 4, 4, 5, 3, 4, 1], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 312}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 1, 5, 6, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 0, 2, 3, 1, 1, 0, 0, 3, 0, 3, 1, 3, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 1, 0, 2, 4, 0, 1], [0, 2, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 2, 0, 4, 0, 2, 4, 0, 1, 3, 4, 4, 0, 4, 0], [2, 2, 1, 2, 1], [4, 0], [2, 2, 0, 0, 2], [0], [21], [], [], [20]], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 6, 2, 1, 2, 0, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[( ( int(6.0) + i1 ) * i2 ):] == in0.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 3, 0, 2, 0, 3, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 4, 2, 4, 1, 4, 1, 1, 0, 0, 1, 0], [1, 0, 3, 2], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 33, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1 == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 2, 6, 1, 7, 7, 9, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 1, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 3, 2, 2, 1, 0, 1, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 2, 2, 3, 3, 1, 1, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 1, 0, 0, 1, 4], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 2], [1], [0], [2, 0, 4, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 0, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 34, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 18, 18, 8, 0, 49, 14, 10, 8, 6, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString(in1[abs(int(3.0)):], int(7.0))):abs(mod(( int(5.0) + i0 ),int(2.0)))]:{:\\nres0 = in1 not in \"\"R\"\"[min(i2, ( i2 + mod(int(6.0),i0) )):( len(in0[divInt(( ( max(min(int(1.0), int(7.0)), divInt(min(int(7.0), i1),int(9.0))) + int(7.0) ) - int(5.0) ),i1):( int(0.0) + max(int(4.0), saveOrd(saveChr(i1))) )]) * mod(divInt(( int(8.0) - int(59.0) ),( int(9.0) - i2 )),int(2.0)) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 379}, {"genotype": [[0], [1, 0, 1, 0, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [2, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 7, 7, 2, 0, 1, 4, 2, 9, 8, 5, 7, 4, 8, 5, 6, 9, 2, 6, 6], [2, 2, 0, 0, 2, 2, 1, 2, 2, 1, 0, 2, 0, 2], [1, 1, 1], [3, 3, 3, 1, 1, 2, 3, 0, 2, 0, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 0, 3, 2, 3, 0, 2, 1, 0, 0, 3, 0, 1, 0, 2, 1, 3, 1, 1, 0, 3, 1, 2, 1, 1, 2, 1, 3, 1, 3, 3, 0, 3, 0, 2, 1, 2, 1, 3, 1, 2, 2, 1, 1, 0, 1, 3, 0, 0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [0, 1, 3, 2, 1, 2, 2, 2, 3, 2, 4, 1, 2, 0, 0, 2], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4, 3], [1], [0], [2, 0, 0, 0, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 1, 1, 0], [2, 1, 3, 1], [3, 0], [2, 2, 0, 0, 1], [1], [17], [20], [], [20]], "fitness": 34, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 0, 4, 4, 11, 1, 30, 8, 8, 5, 4, 7, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(max(len(in1), int(5.0)), int(7.0)):]:{:\\nres0 = in1 not in in0\\nloopBreak% = 0\\nwhile not ( abs(i2) - mod(i2,max(i0, i0)) ) != ( divInt(int(7.0),i2) + divInt(abs(divInt(i2,i1)),abs(( abs(i2) * ( int(2.0) - i2 ) ))) ):{:\\ni1 += i0\\ns1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 475}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 1, 5, 6, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 1, 0, 2, 3, 1, 1, 0, 0, 3, 0, 3, 1, 3, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 1, 0, 2, 4, 0, 1], [0, 2, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 4, 2, 0, 4, 0, 2, 4, 0, 1, 3, 4, 4, 0, 4, 0], [2, 2, 1, 2, 1], [4, 0], [0, 2, 0, 0, 2], [0], [21], [], [], [20]], "fitness": 36, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 12, 3, 2, 3, 0, 5, 0, 1, 10, 3, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1[( ( int(6.0) + int(7.0) ) * i1 ):].capitalize()):( len(in1.capitalize()) - int(1.0) )]:{:\\nres0 = saveChr(int(5.0))[i2:i2] != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 332}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 0, 1, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 37, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 0, 3, 0, 0, 4, 0, 1, 7, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1[abs(i0):i1])):][int(8.0):]:{:\\nres0 = in1 not in saveChr(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 550}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 2, 1, 2, 2, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 1, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 37, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 9, 3, 1, 1, 2, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[int(9.0):]:{:\\nres0 = len(in1) != divInt(int(7.0),divInt(( i2 * i2 ),i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 549}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2, 1], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 2, 0, 0], [0, 1, 1], [2, 1, 0, 2, 2, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 4, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0], [1, 5, 4, 4, 3, 2, 4, 4, 0, 0], [1], [0], [2, 0, 0, 4, 0, 2, 0, 2, 3, 0, 0, 3, 4, 4, 0, 4, 0, 1], [2, 2, 3, 2], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 37, "mapping_values": [1, 5, 5, 1, 4, 1, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 9, 2, 29, 11, 5, 7, 5, 10, 1, 1, 18, 4, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[( int(7.0) + i2 ):]:{:\\nres0 = in1 not in in1.capitalize()\\ni2 = divInt(divInt(divInt(i2,int(7.0)),i0),int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = s2[len((in1 + in1)[i0:]):]\\ni2 -= ( divInt(( int(2.0) * i0 ),( abs(( i2 - ( abs(saveOrd((s0.rstrip().capitalize() + s0.capitalize()))) + int(6.0) ) )) * i0 )) - mod(len(\"\"R\"\"),int(1.0)) )\\n", "other_info": {}, "test_fitness": 525}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 3, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 38, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 10, 0, 34, 10, 8, 4, 6, 6, 1, 1, 15, 4, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len((in1[i0:] + in1)):]:{:\\nres0 = saveChr(len(saveChr(mod(i2,divInt(i2,int(8.0)))))) not in in0[( int(7.0) + abs(i0) ):min(divInt(divInt(int(5.0),i1),divInt(len((\"\"R\"\" + s0.lstrip()).rstrip()),( i2 + ( min(divInt(max(i1, ( abs(int(7.0)) * i2 )),int(6.0)), int(1.0)) - i0 ) ))), i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 390}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 3, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 3, 1, 1, 2, 1, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [4, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 3, 4, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 38, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 0, 0, 8, 1, 3, 0, 1, 6, 1, 1, 10, 2, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[max(len((in1.capitalize() + in1)), abs(int(0.0))):]:{:\\nres0 = saveChr(int(6.0))[:mod(int(3.0),int(2.0))] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in0\\n", "other_info": {}, "test_fitness": 390}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 4, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 2, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 38, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 1, 0, 11, 3, 3, 1, 2, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(max(int(0.0), int(7.0)), mod(mod(i0,int(5.0)),( int(7.0) + saveOrd(s0) ))):]:{:\\nres0 = in1 not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 563}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 2, 0, 3, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 39, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(s1)):]:{:\\nres0 = in1[int(8.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 471}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 1, 0, 3, 3, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 2, 4, 2, 0, 2, 4, 0, 4, 0, 1, 1, 0], [2, 2, 3, 3], [5, 0], [2, 1, 1, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 40, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 2, 4, 1, 1, 5, 1, 0, 15, 3, 1, 6, 1, 1, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in2[len(in2[:mod(i0,int(0.0))][:i2]):] == in1[:len(in1.capitalize()[abs(int(9.0)):( int(8.0) + saveOrd(in0.strip(\"\"R\"\")) )])].capitalize()[i1:int(6.0)]\\n", "other_info": {}, "test_fitness": 320}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 1, 4, 7, 6, 1, 7, 7, 9, 8, 5, 8, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 2, 3, 2, 0, 1, 2, 1, 3, 3, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 1, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 1, 3, 0, 2, 2, 2, 1, 2, 2, 1, 0, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2, 3, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 5, 1, 4, 4], [1], [0], [4, 0, 0, 4, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 40, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 0, 1, 5, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nres0 = in1 in saveChr(len(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 332}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 2, 0, 1, 0, 0, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [0, 2, 0, 2, 0, 2, 4, 2, 0, 2, 4, 1, 4, 0, 1, 1, 0], [2, 2, 3, 3], [5, 0], [2, 1, 1, 1, 1], [0], [17], [], [], [20]], "fitness": 40, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 4, 1, 0, 0, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2:{:\\nres0 = in1[i1:] == in1[:mod(i2,int(0.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 332}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 2, 0, 2, 0, 0], [0, 1, 1], [1, 1, 0, 2, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 4, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0], [1, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 4, 0, 4, 0, 2, 3, 0, 1, 3, 4, 4, 0, 4, 0], [2, 2, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 40, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 3, 1, 8, 2, 1, 1, 1, 5, 0, 1, 7, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[int(5.0):]:{:\\nres0 = ( ( int(7.0) != i1 or True ) and in1 != in1.capitalize() )\\ni2 = ( len(in0.capitalize()) + divInt(i2,int(5.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 5, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 3, 0, 3, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 41, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 11, 0, 51, 15, 12, 7, 8, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = len(in1.capitalize()[:mod(int(4.0),divInt(( i2 + abs(i2) ),min(len(\"\"R\"\"[int(5.0):i2]), divInt(divInt(int(5.0),i1),divInt(min(( i1 + ( max(divInt(abs(i2),( max(int(7.0), i1) * int(6.0) )), int(1.0)) - i2 ) ), i0),mod(int(7.0),saveOrd(in0[int(7.0):max(i0, divInt(( ( int(9.0) + int(8.0) ) * ( int(5.0) - i0 ) ),int(0.0)))])))))))]) != abs(int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 387}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [2, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 41, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 0, 1, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[divInt(int(9.0),int(2.0)):]:{:\\nres0 = in1 not in in1.capitalize()[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 601}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 2, 0, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 41, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(s0)\\n", "other_info": {}, "test_fitness": 339}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 41, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nres0 = in1 == in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [2, 3, 0, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 42, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 5, 0, 17, 5, 3, 1, 4, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[mod(len(in1),i1):]:{:\\nres0 = in1[int(06.0):] == saveChr(int(5.0)).capitalize()[mod(len(in0),int(2.0)):( mod(i0,i1) + i1 )][divInt(abs(int(8.0)),i2):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 404}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 3, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 3, 1, 1, 2, 1, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 0, 0, 8, 1, 3, 0, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1[max(min(abs(int(0.0)), int(6.0)), mod(int(3.0),int(2.0))):].endswith(in2)\\n", "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 4, 0, 2, 4, 3], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 4, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 42, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 7, 7, 9, 0, 38, 12, 10, 3, 9, 7, 1, 0, 15, 4, 2, 2, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveChr(len(in0)).endswith(in2):{:\\nres0 = ( max(abs(mod(i0,divInt(i0,int(8.0)))), ( int(7.0) + min(i1, len(in1[divInt(divInt(int(5.0),i0),divInt(saveOrd(in1),( i1 + ( min(divInt(abs(i2),mod(saveOrd(saveChr(divInt(i1,int(7.0)))),int(6.0))), i2) + i0 ) ))):])) )) != divInt(int(1.0),len(in0)) or ( s0[:int(7.0)].endswith((\"\"R\"\" + in1.lstrip()).rstrip()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 2, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [2, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 0, 3, 0, 1, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 43, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 1, 1, 7, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1 not in (in2 + \"\"R\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [0, 1, 1], [2, 1, 1, 0, 0], [1, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 0, 2], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 0, 2, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 43, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 1, 1, 4, 0, 8, 0, 3, 0, 0, 8, 1, 0, 15, 3, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] == in1:{:\\nres0 = ( len(in1) != i0 or ( s1.endswith(getCharFromString(s0, i2)[len(saveChr(i2)[i0:int(0.0)]):]) and True ) )\\n:}\\ns0 = (\"\"R\"\" + s2.rstrip())\\n", "other_info": {}, "test_fitness": 333}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0, 0, 0, 0], [0, 0], [0, 5], [3, 3, 1, 2, 3, 0, 1], [1, 0, 0], [0, 1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 2, 1, 9, 1, 1, 7, 3, 2, 0, 3, 3, 2, 0, 10, 2, 3, 1, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1):]:{:\\nloopBreak% = 0\\nwhile ( ( abs(( int(0.0) + i0 )) != mod(i2,abs(int(1.0))) or True ) and in1[int(5.0):] in in0 ):{:\\nres0 = not ( b2 and False )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 414}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 7, 7, 2, 0, 1, 4, 2, 9, 8, 5, 7, 4, 8, 5, 6, 9, 2, 6, 6], [2, 2, 0, 0, 2, 2, 1, 2, 2, 1, 0, 2, 0, 2], [1, 1, 1], [3, 3, 2, 1, 1, 2, 3, 0, 2, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 0, 3, 2, 3, 0, 2, 1, 0, 0, 3, 0, 1, 0, 2, 1, 3, 1, 1, 0, 3, 1, 2, 1, 1, 2, 1, 3, 1, 3, 3, 0, 3, 0, 2, 1, 2, 1, 3, 1, 2, 2, 1, 1, 0, 1, 3, 0, 0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [3, 1, 3, 2, 1, 2, 2, 2, 3, 2, 4, 1, 2, 0, 0, 2], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [0, 5, 0, 4, 3, 1, 4, 3], [1], [0], [2, 0, 0, 0, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 1, 1, 0], [2, 1, 3, 1], [3, 0], [2, 2, 0, 0, 1], [1], [17], [20], [], [20]], "fitness": 45, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 5, 5, 11, 1, 33, 10, 8, 6, 5, 7, 1, 1, 10, 1, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( max(( int(5.0) - int(7.0) ), mod(len(s1),i2)) != ( divInt(abs(i2),i0) + divInt(divInt(int(7.0),i0),( max(( i2 * i2 ), abs(( abs(i1) - mod(int(2.0),i2) ))) + i2 )) ) or ( \"\"u\"\".endswith(in1[abs(i1):].capitalize()) and True ) ):{:\\ni0 *= int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 4, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 9, 2, 3, 1, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(len(in1), ( int(0.0) - i0 )):]:{:\\nres0 = in1[mod(i2,abs(int(1.0))):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 7, 1, 3, 1, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(len(in1), ( i0 + abs(i2) )):]:{:\\nres0 = in1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 3, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 2, 3, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 1, 3, 0, 1, 5, 0, 1, 7, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1[i0:i2])):][abs(mod(i2,int(0.0))):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 9, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 0, 2, 1, 2, 2, 0, 1], [0, 1, 1], [1, 3, 2, 1, 0, 3, 0, 0, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 46, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[int(0.0):len(in1)]:{:\\nres0 = in1[mod(int(3.0),i0):] not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 593}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 0, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 46, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[:len(in1)]:{:\\nres0 = in1 != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 555}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 1, 1, 0, 0, 0, 3, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 0, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 46, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 0, 0, 0, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = in1.capitalize() != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(7.0)\\n", "other_info": {}, "test_fitness": 611}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 3, 1, 0, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 2, 0, 0, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 46, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 0, 1, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2:{:\\nres0 = len(in1) != mod(len(in1),int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 611}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 4, 4, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 46, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 4, 0, 1, 6, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = saveChr(int(9.0)).capitalize() not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 571}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 0, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 1, 1, 2, 0, 1, 1, 0, 0, 2], [0, 1, 1], [3, 1, 2, 2, 1, 2, 3, 1, 2, 1, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0, 1, 1, 3, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 1, 4, 1, 2, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0], [5, 5, 4, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 2, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 47, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 11, 4, 2, 1, 3, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in2[int(4.0):]) != mod(divInt(int(0.0),( len(in2) + int(5.0) )),divInt(int(2.0),i2))\\n", "other_info": {}, "test_fitness": 613}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 0, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 47, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 38, 11, 10, 5, 6, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(min(abs(( i0 + mod(i2,int(8.0)) )), ( int(7.0) + min(i2, len(in1)) ))):]:{:\\nres0 = in1[divInt(divInt(int(5.0),i0),divInt(min(( i1 * ( max(divInt(abs(i2),( max(int(7.0), i1) - int(6.0) )), int(1.0)) + i2 ) ), i0),divInt(int(7.0),len(in0)))):] not in saveChr(int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 581}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = in1 != in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 0, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 2, 1, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 1, 1, 0, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(int(0.0), ( int(7.0) * i0 )):]:{:\\nres0 = in1 not in in0.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 645}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [3, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[int(0.0):]:{:\\nres0 = in1 != in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [0, 0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 6, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 2, 0, 1, 1, 0, 1, 4, 2], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [3, 5, 1, 4, 3, 0, 4, 0], [1], [0], [2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 4, 2, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 12, 1, 52, 16, 10, 8, 8, 8, 1, 1, 13, 1, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(s1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(s0)\\nin1 = s0[mod(int(0.0),saveOrd(saveChr(divInt(( int(7.0) - i2 ),divInt(abs(i2),( divInt(( int(5.0) + i0 ),( min(mod(i1,( i2 * max(int(2.0), i1) )), divInt(max(int(6.0), i2),int(1.0))) - int(7.0) )) + int(7.0) )))))):i0][mod(int(9.0),min(int(6.0), max(i0, ( ( ( int(5.0) * int(0.0) ) - divInt(int(4.0),i0) ) - int(8.0) )))):int(59.0)][saveOrd(\"\"R\"\"[:i1]):]\\n", "other_info": {}, "test_fitness": 651}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 8, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 2, 2, 2, 2, 1, 0, 2, 3, 2, 0, 0, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 8, 1, 8, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 1, 0, 3, 2, 4, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 2], [1, 0], [2, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[abs(i0):]:{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 1, 2, 1, 1, 3, 2, 2, 2, 1, 3, 0, 0, 2, 2, 1, 1, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 0, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 2, 2, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 4, 2, 0, 0, 3, 0, 1, 1, 4, 0, 1, 2, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in1 not in in1[len(in0):].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 3, 1, 3, 2, 0, 0, 3, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 4, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 0, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 0, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 1, 1, 2, 0, 0, 0, 2], [0, 1, 1], [1, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 3, 2, 1, 2, 0, 3, 0, 2, 0, 2, 1, 1, 2, 1, 2, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 2, 2, 1, 3, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 1, 2, 0, 2, 0, 2, 1, 1, 2, 1, 1, 2, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 4, 2, 2, 0, 1], [0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 1, 2, 0], [1], [17], [20], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 4, 0, 29, 10, 5, 5, 5, 8, 0, 1, 15, 2, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):abs(saveOrd(s0[( divInt(int(2.0),saveOrd((saveChr(int(7.0)) + in1).capitalize())) + int(0.0) ):][:int(2.0)][i0:( mod(divInt(int(5.0),i2),mod(int(5.0),( i1 - ( i0 - divInt(int(7.0),int(7.0)) ) ))) * ( int(9.0) - int(8.0) ) )]))] in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 562}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 3, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 5, 4, 2, 0, 4], [1, 1], [0], [2, 0, 1, 2, 0, 0, 2, 1, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [0, 0, 0, 1, 0, 0], [0, 3], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 1, 0, 8, 1, 2, 1, 0, 4, 2, 1, 8, 0, 0, 3, 2, 1, 0, 0, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(\"\"R\"\"):len(in2[i0:int(6.0)])]:{:\\nres0 = in1 != \"\";\"\"[int(1.0):( int(1.0) + int(2.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 7, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 2, 3, 0, 0, 0, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 3, 3, 0, 2, 3, 1, 0, 1, 1, 3, 1, 0, 1, 3, 0, 3, 0, 2, 0, 2, 1, 3, 2, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [2, 1, 1, 2, 3, 2, 3, 0, 1, 4], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [23], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 0, 13, 3, 3, 1, 2, 4, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(max(divInt(max(i1, i2),i1), int(0.0))):]:{:\\nres0 = in1 not in s2.capitalize()[mod(( int(7.0) + i0 ),i1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 4, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nres0 = in1 not in in2[abs(saveOrd(in0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 0, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [2, 4, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 0, 13, 2, 4, 0, 2, 5, 0, 1, 10, 3, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(saveChr(len(in1))))[mod(int(0.0),i1):]:{:\\nres0 = in1 not in s2[abs(i2):i2].rstrip()[mod(int(9.0),min(i1, i1)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 1, 0, 0, 0, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [3, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 3, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[min(len(in1), abs(int(0.0))):]:{:\\nres0 = \"\"R\"\" != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 7, 5, 2, 0, 1, 4, 2, 9, 8, 5, 7, 4, 8, 5, 6, 9, 2, 6, 6], [2, 2, 0, 0, 1, 2, 1, 2, 2, 1, 0, 2, 0, 2], [1, 1, 1], [3, 0, 2, 1, 2, 2, 2, 0, 2, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 1, 0, 0, 3, 2, 3, 0, 2, 3, 3, 0, 3, 0, 1, 0, 2, 1, 0, 1, 1, 0, 3, 1, 2, 1, 1, 2, 1, 3, 1, 3, 3, 0, 3, 0, 2, 1, 2, 1, 3, 1, 2, 2, 1, 1, 0, 1, 3, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [3, 1, 2, 0, 1, 3, 2, 2, 3, 2, 4, 1, 2, 0, 0, 2], [1, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [4, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [3, 0], [2, 2, 0, 0, 1], [1], [17], [20], [], [20]], "fitness": 49, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 4, 0, 1, 5, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nres0 = in1 not in saveChr(len(in1))\\ni2 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 2, 0, 2, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 1, 3, 1, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [0], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 1, 13, 3, 3, 2, 1, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:abs(len(in1))]:{:\\nres0 = divInt(i1,int(0.0)) != min(int(7.0), int(5.0))\\ni0 = ( ( int(7.0) - i2 ) + i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 4, 9, 8, 7, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 2, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 2, 1, 0, 1, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 2, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 0, 3, 3, 2, 2, 1, 1, 0], [1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 2, 2, 1, 1, 0, 1, 4, 2, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 2, 2, 0, 4, 2, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1, 1, 0], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 19, 12, 0, 59, 17, 12, 6, 11, 5, 1, 1, 14, 2, 1, 7, 1, 1, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[max(mod(int(0.0),abs(mod(( int(7.0) + i0 ),int(5.0)))), abs(i2)):mod(i2,( int(2.0) + i2 ))][divInt(abs(divInt(i1,divInt(max(max(int(6.0), i2), divInt(( int(1.0) * i1 ),int(7.0))),int(4.0)))),int(9.0)):]):]:{:\\nres0 = in1 not in in0[:i2][:divInt(int(8.0),min(int(7.0), max(i0, mod(( ( int(0.0) - int(4.0) ) + ( int(8.0) * i0 ) ),int(59.0)))))][int(9.0):saveOrd(\"\"R\"\"[i2:abs(saveOrd(saveChr(divInt(divInt(int(2.0),int(2.0)),i0))))].rstrip())]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 1, 2, 0, 0, 1], [1, 1, 1], [1, 3, 1, 0, 0, 0, 3, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 2, 2, 3, 0, 2, 3, 1, 2, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 0, 2, 3, 2, 1, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 1], [1, 1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 2, 0, 0, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [0, 1, 1, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 1, 1, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):len(in1)]:{:\\nres0 = in1[:int(7.0)] != in0\\ni1 *= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 640}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [4, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 4, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nres0 = in1 not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 2, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = int(0.0) != int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 8, 1, 8, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [1, 1, 1], [3, 1, 0, 3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 1, 0, 3, 2, 4, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 3, 0, 0, 0, 2, 1, 2, 1, 4, 3, 4, 4, 0, 1, 0], [2, 1, 2], [1, 0], [1, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 2, 0, 6, 0, 2, 0, 0, 5, 1, 1, 8, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len((in1 + in1))]:{:\\nres0 = ( ( int(6.0) != i0 or True ) or in0 not in \"\"R\"\"[max(i2, int(8.0)):] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 8, 1, 8, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [0, 1, 0, 3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 1, 0, 3, 2, 4, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 2], [1, 0], [2, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[i1:]:{:\\nres0 = in1 not in in1[int(6.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 0, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 4, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = in1 not in in1[len(s1):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 4, 2, 0, 0, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 1, 8, 0, 4, 0, 0, 7, 1, 1, 17, 5, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2.capitalize()[len(in1[len(in1):].capitalize()):]:{:\\nres0 = getCharFromString((in0.lstrip() + s0), abs(int(0.0)))[i0:saveOrd(\"\"R\"\")].rstrip()[:i2] != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(9.0)\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 0, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 0, 2, 1, 2, 0, 3, 2, 0, 2, 3, 2, 1, 1, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 4, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 5, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[mod(i0,int(0.0)):]:{:\\nres0 = in1 not in in1[int(7.0):]\\ni2 = len(s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 3, 1, 2, 2, 1, 0, 3, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 2, 0, 2, 3, 2, 1, 0, 1, 1, 2], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 0, 40, 11, 11, 5, 6, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(abs(( int(0.0) - i1 )), i2):]:{:\\nres0 = in1 not in in1[min(int(7.0), divInt(( int(5.0) + i1 ),abs(mod(divInt(i0,i1),divInt(len(in0),( i2 * ( abs(mod(max(i1, ( min(int(7.0), i2) - int(6.0) )),int(1.0))) + max(i0, divInt(int(7.0),max(int(7.0), abs(i0)))) ) )))))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [1, 0, 0], [0, 0, 1, 0, 0, 0, 2], [0, 0], [1, 5], [3, 3, 1, 3, 1], [1, 0, 1], [0, 0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 0, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 0, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [1, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 7, 1, 1, 5, 3, 2, 0, 0, 0, 3, 0, 5, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[:len(in1)]:{:\\nres0 = ( ( abs(i0) \\g i2 or True ) and ( True or s0[:i2] not in s0 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 4, 0, 1, 7, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(8.0):]:{:\\nres0 = saveChr(len(in0[len(in1):])) not in saveChr(mod(i0,mod(i0,int(7.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 599}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 1, 1, 2, 1, 0, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 5, 4, 4, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 1, 0, 12, 3, 2, 2, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(min(( int(0.0) + int(6.0) ), divInt(int(5.0),int(2.0))), ( int(7.0) * i2 )):]:{:\\nres0 = in1 not in in1[int(1.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 0, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 3, 0, 3, 1, 2, 1, 1, 1, 0, 2, 2, 2, 0, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 2, 3, 0, 4], [1], [0], [2, 2, 0, 2, 2, 0, 2, 2, 2, 1, 4, 0, 4, 0, 0, 1, 0], [2, 1, 3], [3, 0, 0], [2, 2, 2, 1, 2, 0, 2], [0], [17], [], [], [7]], "fitness": 50, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 32, 9, 7, 3, 6, 5, 1, 1, 14, 2, 0, 7, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[abs(len(in1[:i0][abs(i2):])):][min(int(1.0), ( int(7.0) + int(0.0) )):]:{:\\nres0 = \"\"R\"\"[int(2.0):][i1:divInt(( mod(i0,i1) + divInt(len(s2.capitalize()),divInt(i0,divInt(i1,( int(5.0) - int(5.0) )))) ),divInt(abs(int(7.0)),i2))][saveOrd(saveChr(int(7.0))):] != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 680}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 8, 1, 8, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [1, 1, 1], [3, 1, 0, 3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 1, 0, 3, 2, 4, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 0, 0, 0, 2, 1, 2, 1, 4, 3, 4, 4, 0, 1, 0], [2, 1, 2], [1, 0], [2, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 50, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 560}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 0, 0, 0], [1, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 1, 1, 3, 0, 2, 2, 2, 1, 2, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2], [0, 0, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 3, 2, 0, 4, 0], [1], [0], [3, 1, 4, 0, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [1, 1, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 50, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 1, 0, 5, 1, 1, 7, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (\"\"R\"\" + saveChr(len(in2))):{:\\nres0 = in1 in in0\\ni2 += len(s2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 440}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 1, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 0, 3, 2, 0, 2, 3, 2, 1, 1, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 4, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [3, 0, 0, 0, 0, 2, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 50, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 560}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 3, 5, 7, 7, 1, 7, 7, 2, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 1, 1, 3, 0, 2, 2, 2, 1, 2, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 3, 2, 0, 0, 4, 0, 4, 0, 4, 0, 1, 2, 0, 1, 0], [3, 1, 3], [3, 0], [1, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 50, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 7, 0, 1, 12, 3, 2, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len((s0[len(in1):] + in0.lstrip(saveChr(int(9.0)))))]:{:\\nres0 = s0 not in in1.lstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 509}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0], [17], [], [], [20]], "fitness": 50, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 1, 1, 9, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] in \"\"R\"\"[:i1][:int(6.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 572}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 9, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 3, 1, 2, 2, 1, 0, 1, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 50, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 1, 13, 3, 3, 2, 1, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] == \"\"R\"\"[( int(0.0) - i1 ):i0]\\ni1 = min(int(7.0), divInt(( int(5.0) + i2 ),int(9.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 572}, {"genotype": [[0], [1, 0, 0, 1], [2, 1, 0, 0, 0], [0, 2], [1, 0, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 1], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 2, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [1, 1, 1], [3, 1, 1, 3, 0, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 4, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 4, 1, 4, 1, 1, 4, 1, 2, 3], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 4, 0], [1, 1, 3, 3], [1, 3], [2, 2, 0, 1, 2], [0], [17], [], [], [20]], "fitness": 51, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 1, 3, 0, 1, 1, 0, 7, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(s1):]:{:\\ni2 -= int(6.0)\\nres0 = in1[int(2.0):] != s1\\ns1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 623}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2, 0], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 1, 1, 1, 0, 2, 2, 2, 1, 1, 1, 3, 3, 0, 1, 3, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 3, 2, 0, 0, 0, 2, 3, 0, 1, 2, 3, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 1, 0, 3, 2], [1], [0], [0, 0, 0, 2, 2, 0, 4, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [1, 1, 0, 0], [1, 0], [1, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 51, "mapping_values": [1, 5, 5, 1, 4, 1, 4, 0, 0, 3, 1, 4, 1, 1, 2, 1, 0, 0, 4, 4, 4, 1, 12, 2, 3, 2, 0, 6, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in2 not in in1\\ni2 = abs(len(in0[int(8.0):][:i2]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = saveChr(abs(( i2 + ( int(7.0) + int(5.0) ) )))\\nb2 = ( int(7.0) \\l i0 or res0 )\\n", "other_info": {}, "test_fitness": 570}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 0, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 1, 0, 2, 2, 1, 3, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [0, 0, 0, 4, 4, 2, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [3], [17], [], [], [20]], "fitness": 52, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in1 != in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 570}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2, 0], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 0, 0, 2, 0], [0, 0], [1, 5], [3, 0, 2], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [1, 1, 1], [0, 3, 1, 0, 3, 2, 0, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 3, 3, 0, 1, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 3, 2, 0, 0, 0, 2, 3, 0, 1, 2, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2, 0], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 0, 3, 2], [1], [0], [2, 0, 4, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [1, 1, 0, 0, 2], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 52, "mapping_values": [1, 5, 5, 2, 3, 1, 3, 0, 0, 2, 0, 5, 0, 2, 3, 1, 0, 0, 7, 7, 8, 1, 30, 8, 8, 6, 3, 9, 1, 1, 17, 5, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i2:]:{:\\nloopBreak% = 0\\nwhile saveChr(abs(int(8.0))) not in in1[i2:]:{:\\nres0 = ( b2 or not in1.endswith(in0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += len(saveChr(divInt(i0,( abs(int(7.0)) * abs(i0) ))))\\ns0 = in1[:( divInt(( int(5.0) * int(7.0) ),mod(len(getCharFromString((getCharFromString(s0.capitalize(), len(\"\"R\"\")) + in0), i2)),int(7.0))) + max(( int(4.0) - i0 ), ( abs(int(7.0)) * i0 )) )]\\n", "other_info": {}, "test_fitness": 592}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 3, 1, 1, 2, 3, 1, 2, 2, 0, 1, 2, 1, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1], [0], [4, 0, 0, 2, 2, 0, 2, 4, 2, 0, 4, 1, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 53, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in2.capitalize() not in in2\\n", "other_info": {}, "test_fitness": 633}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 2, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 4, 4, 1], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 54, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 13, 4, 3, 1, 3, 6, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in saveChr(len(in2)):{:\\nres0 = in1 not in in1[len(in0):]\\nin1 = saveChr(i1)[mod(int(0.0),mod(abs(int(6.0)),( mod(i0,i1) + i1 ))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 688}, {"genotype": [[0], [0, 1, 1], [2, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 2, 3, 0, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 54, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 1, 12, 3, 3, 1, 2, 7, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(divInt(len(in1),i0),len(in1[i2:])):]:{:\\nres0 = in0 not in getCharFromString(s0, i2)[int(0.0):( int(7.0) + saveOrd(in1) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = i1\\n", "other_info": {}, "test_fitness": 687}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 6, 5, 2, 8, 1, 2, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 1, 1, 1, 2, 1, 1, 0, 3, 0, 0, 0, 2, 3, 3, 0, 2, 0, 2, 1, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 4, 1, 0, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [5, 3, 4, 0, 3, 5, 4, 1], [1], [0], [4, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 54, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in0.capitalize():{:\\nres0 = in1 not in s0[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 688}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 1, 1, 3, 0, 3, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 3, 0, 2, 1, 1, 0, 3, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 1, 3], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 0, 0, 4], [1], [0], [2, 3, 0, 0, 4, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 1, 10, 2, 3, 0, 2, 4, 1, 1, 7, 1, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in (in2 + in1)[len(saveChr(max(abs(mod(i0,divInt(i2,int(8.0)))), int(7.0)))):]:{:\\nres0 = in1 not in \"\";\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(5.0)\\n", "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 3, 1, 1, 3, 0, 2, 2, 2, 1, 0, 0, 3, 1, 0, 2, 3, 0, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 1, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 6, 0, 21, 4, 6, 2, 2, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s1):len(in0[i0:])]:{:\\nres0 = in0.endswith(getCharFromString(s0[int(0.0):abs(mod(i2,min(int(7.0), int(5.0))))], len(saveChr(i2)))[:mod(( ( int(7.0) + i0 ) + i0 ),min(int(7.0), i2))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 1, 1, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[mod(len(in1),len(in1[int(0.0):])):]:{:\\nres0 = in0 != \"\"R\"\"[:i1].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 0, 0, 0, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 3, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 56, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 3, 0, 10, 2, 2, 0, 2, 3, 0, 0, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( mod(len(s2[mod(i0,i1):]),i0) != min(int(0.0), int(7.0)) or True ) and in2 not in in1.capitalize()[int(5.0):] )\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1], [0, 1, 1], [3, 3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1, 0, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 56, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 51, 14, 12, 6, 8, 4, 0, 1, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[abs(len(in1[abs(mod(i0,min(i2, int(8.0)))):divInt(int(7.0),len(in1))][i2:])):]:{:\\nres0 = saveChr(min(( divInt(int(5.0),i0) + divInt(max(divInt(i1,( abs(( max(i2, divInt(min(int(7.0), i1),int(6.0))) + int(1.0) )) * i2 )), i0),( int(7.0) - max(int(7.0), max(i0, mod(divInt(( int(9.0) + int(8.0) ),( int(5.0) * i1 )),int(0.0)))) )) ), i1)) not in saveChr(int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 663}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 3, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 0, 2, 3, 0, 1, 2, 1, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 4, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 2], [1, 0], [1, 2, 2, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 56, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 9, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[:abs(len(in2))]:{:\\nres0 = (in1 + in0) not in saveChr(int(6.0))[i0:].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 3, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 3, 1, 1, 2, 1, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 1, 4, 1, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 5, 4, 4, 5, 3, 4, 1], [1], [0], [3, 0, 0, 4, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 56, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in (in2 + in1):{:\\nres0 = len(in1.capitalize()) != len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 562}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 1, 0, 2, 4, 2, 1, 2, 4, 0, 4, 0, 1, 1, 0], [2, 2, 3, 3], [5, 0], [2, 1, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 5, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in (in2 + in1):{:\\nres0 = \"\"R\"\" != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 1], [2, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 0, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [2, 1, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 3, 0, 1, 4, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in saveChr(len(s1)):{:\\nres0 = in1 not in saveChr(int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 5, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 0, 2, 4, 2, 0, 3, 4, 0, 0, 1, 0], [2, 2, 3, 3], [1, 0], [2, 0, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 9, 9, 8, 0, 33, 8, 8, 1, 7, 7, 1, 0, 16, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2[len(in2[:int(0.0)]):len(in1)][int(4.0):] != in1:{:\\nres0 = ( i0 != abs(i2) or ( in2[:int(8.0)].capitalize()[mod(int(6.0),min(i2, int(6.0))):mod(divInt(int(1.0),i0),divInt(len((s0.capitalize() + in1)),divInt(i1,divInt(min(mod(max(i2, ( abs(int(7.0)) + i1 )),int(7.0)), int(9.0)),i2))))].endswith(\"\"R\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 6, 3, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 2, 1, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 4, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 2, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 3, 0, 0, 9, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1[len(in2):] != in1[len(getCharFromString(saveChr(i0)[:i2], int(6.0))):][mod(i1,int(6.0)):]\\n", "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 0, 1, 0, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 7, 7, 2, 0, 1, 4, 2, 9, 8, 5, 7, 4, 8, 5, 6, 9, 2, 6, 6], [0, 2, 0, 0, 2, 2, 1, 2, 2, 1, 1, 2, 0, 2], [1, 1, 1], [3, 3, 2, 1, 1, 2, 3, 0, 2, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 0, 3, 2, 3, 0, 2, 1, 0, 0, 3, 0, 1, 0, 2, 1, 3, 1, 1, 0, 3, 1, 2, 1, 1, 2, 1, 3, 1, 3, 3, 0, 3, 0, 2, 1, 2, 1, 3, 1, 2, 2, 1, 1, 0, 1, 3, 0, 0], [1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [3, 1, 3, 2, 1, 2, 2, 2, 3, 2, 4, 1, 2, 0, 0, 2], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4, 3], [1], [0], [4, 0, 4, 0, 0, 0, 1, 4, 0, 0, 4, 3, 1, 4, 1, 1, 0], [2, 1, 3, 1], [3, 0], [2, 2, 0, 0, 1], [1], [17], [20], [], [20]], "fitness": 57, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 5, 5, 11, 1, 33, 10, 8, 4, 7, 8, 1, 1, 11, 4, 1, 0, 1, 0, 1, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nres0 = saveChr(len(in1)) not in in1\\nloopBreak% = 0\\nwhile ( max(mod(int(5.0),int(7.0)), divInt(len(in0),i0)) != ( divInt(abs(i2),i0) - divInt(mod(int(7.0),i0),( max(divInt(i2,i2), abs(( abs(i1) + mod(int(2.0),i2) ))) * i2 )) ) or ( \"\"u\"\".endswith(s1.lstrip(in1)) or False ) ):{:\\ni1 -= abs(i1)\\nin0 = saveChr(int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 621}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 3, 3, 3, 1, 12, 2, 5, 1, 1, 5, 1, 0, 7, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[:abs(len(in2))] != in1:{:\\nres0 = ( abs(i0) != min(mod(int(0.0),int(7.0)), ( int(5.0) + len(in1) )) or ( in0.endswith(\"\"R\"\") and True ) )\\ni1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 6, 7, 2, 1, 7, 7, 9, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 1, 2, 2, 0, 2, 1, 1, 3, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 2, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 1, 2, 0, 2, 1, 4, 0, 1, 2, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 10, 10, 8, 1, 34, 12, 5, 6, 6, 4, 1, 0, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] != in1:{:\\nres0 = ( min(( int(2.0) + int(7.0) ), divInt(divInt(i1,divInt(int(6.0),int(7.0))),abs(( divInt(( int(2.0) + i2 ),( ( ( i1 * divInt(min(int(1.0), int(7.0)),i0) ) - divInt(abs(int(7.0)),i1) ) + int(9.0) )) * int(7.0) )))) != i2 or ( in1.endswith(\"\"R\"\") and True ) )\\n:}else:{:\\ni1 = i2\\n:}\\n", "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 8, 8, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 2, 2, 2, 1, 2, 1, 0, 2], [0, 1, 1], [3, 0, 0, 3, 1, 2, 1, 0, 2, 2, 0, 0, 3, 3, 3, 0, 0, 0, 0, 2, 0, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 2, 0, 2, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 4, 4, 1, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [3, 0, 4, 4, 1, 4, 4, 1], [1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 0, 2, 0, 0, 3, 0, 0, 6, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0[len(s0[i1:i0][abs(int(6.0)):]):] not in in1\\n", "other_info": {}, "test_fitness": 604}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 2, 2, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 1, 9, 2, 2, 0, 2, 3, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = len(in1) != min(int(3.0), int(7.0))\\ni2 = divInt(divInt(i2,i2),i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1, 0, 1], [2, 2, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 1, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 5, 2, 0, 1, 4, 2, 9, 8, 5, 7, 4, 8, 5, 6, 9, 2, 6, 6], [1, 2, 0, 0, 2, 0, 1, 2, 1, 1, 2, 0, 0, 2], [1, 1, 1], [3, 3, 2, 1, 0, 1, 0, 1, 2, 0, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [3, 0, 4, 0, 3, 0, 1, 2, 3, 2, 4, 1, 2, 0, 0, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 5, 2, 0, 3, 1, 4, 0, 1], [1, 1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 1], [2, 2, 0, 0, 1], [1, 0], [17], [20], [], [20]], "fitness": 58, "mapping_values": [1, 3, 3, 2, 1, 1, 0, 0, 0, 1, 1, 4, 1, 1, 2, 1, 1, 0, 4, 4, 2, 0, 8, 1, 2, 0, 1, 4, 1, 1, 6, 0, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nloopBreak% = 0\\nwhile s0[min(mod(int(00.0),i1), int(5.0)):] not in \"\"u\"\":{:\\nres0 = ( i2 != int(2.0) or True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 2, 1, 2, 1, 2, 0, 0, 1, 1, 2, 2], [0, 1, 1], [0, 3, 2, 0, 2, 0, 0, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 2, 3, 2, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 11, 11, 14, 0, 49, 16, 8, 8, 8, 6, 1, 0, 15, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[i1:] != in2:{:\\nres0 = ( len(in1[( i1 + divInt(i1,i2) ):]) != int(0.0) or ( in1.endswith(in0[:( divInt(int(7.0),i1) + i2 )][divInt(divInt(i1,i2),( len((\"\"R\"\" + saveChr(( i0 * divInt(min(( abs(i0) - divInt(len(s0),int(5.0)) ), i1),int(7.0)) ))).capitalize()) + int(6.0) )):abs(i1)][mod(int(1.0),max(int(7.0), min(i2, ( ( ( int(7.0) * int(9.0) ) - divInt(int(8.0),i2) ) - int(5.0) )))):]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 5, 4, 2], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [13], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[i0:]:{:\\nres0 = in1.endswith(in1[len(in0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 2, 1, 1, 7, 0, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 1, 1, 0, 0, 1], [0, 1, 1], [3, 3, 3, 2, 0, 3, 3, 0, 0, 1, 1, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [5, 5, 0, 4, 2, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 0, 4, 2, 0, 1, 3, 4, 4, 0, 4, 0], [3, 3, 1], [1, 0, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 10, 1, 5, 1, 0, 6, 0, 1, 10, 2, 2, 3, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[abs(len(s0[min(( i0 + min(len(in1), i2) ), i1):].rstrip())):]:{:\\nres0 = s2.endswith(s0[int(4.0):].lstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 9, 8, 2, 8, 1, 2, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 0, 3, 1, 2, 1, 1, 2, 2, 0, 0, 3, 2, 3, 1, 0, 2, 0, 2, 0, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 2, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [3, 5, 4, 4, 1, 4, 4, 1], [1], [0], [0, 3, 0, 2, 0, 0, 4, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 0, 2, 0, 0, 7, 0, 1, 10, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2:{:\\nres0 = (in1 + in1[len(s1):]) != getCharFromString(saveChr(i0), i2)\\nin1 = in1[abs(int(7.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 2, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [1, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 5, 4, 3, 0, 4], [1], [0], [2, 4, 0, 0, 3, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 9, 8, 4, 5, 6, 1, 1, 15, 4, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in getCharFromString(in2, len(in2))[i2:]:{:\\nres0 = (in1 + saveChr(i2)[int(0.0):]) not in in0[max(( i2 - int(7.0) ), mod(int(2.0),abs(min(i0, ( mod(int(7.0),i1) * divInt(len((\"\"R\"\" + s0.capitalize()).rstrip()),divInt(i2,( min(( max(i1, divInt(abs(int(6.0)),i2)) + int(1.0) ), int(7.0)) - i0 ))) ))))):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 2, 6, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 2, 2, 1, 0, 2, 0, 0, 2], [0, 1, 1], [3, 2, 2, 1, 1, 2, 3, 1, 2, 2, 3, 0, 0, 2, 1, 1, 0, 2, 3, 2, 1, 2, 3, 2, 0, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 0, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 4, 2, 1, 2, 1], [2, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0, 1], [0, 5, 2, 4, 0, 0, 4, 1], [1], [0], [2, 3, 0, 4, 0, 0, 4, 2, 2, 0, 4, 3, 1, 0, 0, 1, 0], [3, 2, 3, 1], [1, 0], [2, 1, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 2, 0, 16, 6, 3, 2, 4, 5, 1, 0, 14, 3, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (s0 + in2.rstrip())[len(s2):] not in in1[mod(mod(int(9.0),int(7.0)),divInt(len((\"\"R\"\" + s0).lstrip()),int(5.0))):][:( ( abs(i0) * i2 ) * divInt(int(2.0),int(6.0)) )].capitalize()\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 1, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 2, 2, 0, 0, 0, 2, 0, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 4, 0, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 4, 1, 1, 8, 2, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize()[len(in1[:i2]):]:{:\\nres0 = saveChr(len(in1)) not in \"\"R\"\"\\ni2 = int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 8, 2, 6, 6, 1, 1, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 1, 2, 3, 0, 2, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 0, 3, 3, 0, 4], [1], [0], [3, 0, 0, 0, 0, 0, 4, 0, 4, 2, 4, 3, 4, 0, 0, 1, 0], [1, 0, 3, 0], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in (in2 + s0):{:\\nres0 = in0.endswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 0, 1, 1, 3, 0, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 3, 2, 0, 0, 2, 2, 2, 0, 2, 3, 4, 0, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 12, 2, 3, 1, 1, 2, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[min(mod(i2,int(6.0)), int(7.0)):]:{:\\nres0 = max(i1, int(1.0)) != ( int(2.0) + abs(i1) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 3, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1, 0, 2, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 12, 0, 50, 15, 12, 7, 8, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(len(in1), abs(mod(i0,divInt(i0,min(( int(8.0) + len(in1[i2:]) ), min(divInt(divInt(int(7.0),i0),divInt(max(( i1 + ( abs(divInt(max(i2, ( min(int(5.0), i1) * int(7.0) )),int(6.0))) - i2 ) ), i0),mod(int(1.0),abs(int(7.0))))), abs(i0))))))):]:{:\\nres0 = divInt(( ( int(7.0) + int(9.0) ) * ( int(8.0) - i2 ) ),int(5.0)) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2, 1], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 2, 0, 0], [0, 1, 1], [1, 0, 0, 2, 3, 0, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 4, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0], [1, 5, 4, 4, 3, 2, 4], [1], [0], [0, 0, 0, 4, 0, 2, 0, 2, 3, 0, 1, 3, 4, 4, 0, 4, 0], [2, 2, 3, 0], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 5, 5, 1, 4, 1, 4, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 1, 0, 6, 0, 1, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2:{:\\nres0 = in1.endswith(in1)\\ni2 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = s2.capitalize()\\ni2 += i2\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 3, 2, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 1, 4], [1], [0], [2, 3, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 60, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 34, 10, 8, 4, 6, 5, 1, 1, 11, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in0 + in1[saveOrd(in1):])[len(saveChr(divInt(int(07.0),i0))[mod(i1,int(5.0)):abs(( min(int(7.0), i2) + divInt(divInt(int(6.0),i0),divInt(len(\"\"R\"\"),( i1 + ( min(divInt(max(i2, ( abs(int(1.0)) * i1 )),int(7.0)), int(7.0)) - i2 ) ))) ))]):]:{:\\nres0 = in0 not in saveChr(i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 719}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 1, 3, 1, 0, 3, 1, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 4, 2, 0, 3, 4, 0, 0, 1, 0], [2, 2, 3, 3], [1, 0], [2, 0, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 60, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1[int(0.0):] != in2\\n", "other_info": {}, "test_fitness": 582}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 61, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 1, 1, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(s0):]:{:\\nres0 = in1[mod(len(in0),int(0.0)):] in \"\"R\"\"[:i1].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 766}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 6, 5, 2, 8, 1, 2, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 1, 1, 0, 3, 0, 0, 0, 2, 3, 3, 0, 2, 0, 2, 1, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 4, 1, 0, 1, 2, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [5, 5, 1, 4, 3, 5, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 61, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 11, 2, 3, 0, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(s1):]:{:\\nres0 = in1[len(in0):] == in2[divInt(int(9.0),int(6.0)):mod(int(5.0),int(2.0))].capitalize()[i1:abs(i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 766}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 2, 1, 2, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 1, 0], [0], [17], [], [], [20]], "fitness": 62, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0[len(in2):] != in1[len(in1):]\\n", "other_info": {}, "test_fitness": 647}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 8, 2, 6, 1, 7, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 2, 0, 0, 3, 2, 0, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 3, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 1, 1, 0, 1, 2], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [3, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 62, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0[len(in2):] not in s0[len(in1):]\\n", "other_info": {}, "test_fitness": 647}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 2, 1, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 66, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 7, 0, 4, 0, 0, 6, 1, 1, 15, 3, 1, 5, 1, 0, 0, 0, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1[:len(in0)][i0:]):]:{:\\nres0 = \"\";\"\"[int(6.0):][:abs(saveOrd(saveChr(i2).capitalize()))] != (in0.rstrip() + s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 678}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 0, 0, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [1, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0], [0, 5, 0, 3, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] in \"\"R\"\"\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 0, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 0, 2, 1, 2, 0, 3, 2, 0, 2, 3, 2, 1, 1, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 4, 2, 1], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s1[i0:int(0.0)]) != int(7.0)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 6, 4, 7, 6, 1, 7, 5, 9, 8, 7, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 2, 2, 2, 0, 0], [0, 1, 1], [2, 3, 0, 2, 1, 2, 0, 1, 3, 0, 3, 3, 3, 2, 2, 1, 0, 2, 3, 2, 0, 0, 3, 2, 2, 0, 2, 3, 1, 1, 1, 1, 0, 0, 0, 1, 3, 1, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 0, 0, 1, 2, 1, 3, 0, 2, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 3, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [0, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 10, 3, 2, 2, 1, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[( len(in2) + i0 ):mod(int(8.0),( i2 + int(6.0) ))] in in1[len(in0):i2]\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 0, 1], [1, 0, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 7, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 2, 0, 0, 0, 0], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 1, 1, 3, 0, 2, 2, 2, 1, 2, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 3, 1, 2, 1, 4, 2], [0, 0, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 3, 4, 0, 4, 0], [1], [0], [2, 0, 0, 0, 0, 3, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [1, 1, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] in in1\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 4, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 3, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 2, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 3, 3, 5, 1, 13, 2, 4, 0, 2, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[:len(in2)] in in1:{:\\nres0 = ( max(mod(int(0.0),i0), i2) != abs(int(7.0)) or ( in1.endswith(in0) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = mod(int(4.0),min(i2, i1))\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [3, 2, 1, 0], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1[len(in2):] == in1[len(in1):]\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1, 1], [0, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0], [1, 5], [3, 2, 1, 1], [1, 0], [1, 0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 4, 0, 0, 4, 1, 2, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( not False or True )\\ni0 = int(9.0)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 3, 2, 0, 2, 0, 1, 1, 1, 3, 0, 3, 0, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 3, 0, 2, 1, 1, 0, 3, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 1, 3], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 1, 0, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 71, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 5, 1, 1, 5, 0, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[int(8.0):]:{:\\nres0 = \"\";\"\" != in1\\nin1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 878}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 3, 7, 2, 8, 1, 2, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 2, 1, 2, 2, 1, 2, 0, 0, 2, 2, 1, 0], [0, 1, 1], [3, 3, 3, 1, 1, 2, 3, 3, 0, 3, 0, 0, 0, 2, 3, 3, 0, 2, 0, 2, 1, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 4, 1, 0, 1, 2, 1, 1], [0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0], [5, 5, 0, 4, 3, 5, 4, 1], [1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 1, 3, 2], [17], [17], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 10, 10, 14, 0, 48, 12, 12, 3, 9, 7, 4, 0, 15, 2, 0, 4, 4, 1, 1, 1, 1], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in2[len(in2):] not in s0[len(in1):]:{:\\nres0 = ( abs(int(3.0)) != int(3.0) or ( \"\"R\"\"[divInt(min(abs(i1), saveOrd(in0[i0:i2])),i1):mod(max(min(i2, ( i2 + mod(int(7.0),divInt(max(abs(divInt(int(2.0),( ( int(8.0) - i1 ) + int(1.0) ))), int(2.0)),i2)) )), i0),divInt(mod(max(int(9.0), max(i0, i2)),divInt(i2,i1)),int(9.0)))].endswith((\"\"r;1\"\" + saveChr(divInt(int(8.0),i0))).capitalize()) and True ) )\\n:}else:{:\\nin2 = in1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 6, 3, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 2, 1, 2, 0, 1, 2, 1, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4, 1, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0, 2, 0, 0], [0, 1, 3, 2], [1, 0], [1, 2, 2, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 4, 4, 5, 0, 21, 5, 7, 3, 2, 10, 1, 1, 20, 4, 1, 5, 1, 0, 0, 0, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[:len(in1)]:{:\\nloopBreak% = 0\\nwhile in1[len(in0):] not in getCharFromString(saveChr(i0)[mod(int(6.0),( i2 + int(6.0) )):], ( int(3.0) + i1 )):{:\\nres0 = ( i0 != divInt(abs(( int(2.0) - saveOrd((s0.capitalize() + in1).rstrip()[:len(\"\";\"\")]) )),abs(saveOrd(s1))) or ( in1[i1:].endswith(s1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 0, 1, 1], [0], [2, 0, 0, 2, 1, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 2, 2, 1], [17], [14], [3, 1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 7, 1, 32, 9, 8, 3, 6, 6, 5, 1, 15, 3, 1, 3, 5, 1, 1, 2, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nres0 = in1 not in \"\"R\"\"[len(in1):]\\ni1 = len(\"\";\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = getCharFromString(\"\"31\"\"[i2:abs(mod(int(0.0),int(7.0)))], ( int(5.0) + min(i0, divInt(divInt(( int(7.0) + i1 ),( len(saveChr(int(7.0))) - i2 )),max(max(divInt(int(1.0),i1), divInt(len((\"\"o\"\" + s0.rstrip())),int(7.0))), divInt(int(7.0),int(9.0))))) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 7, 9, 0, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 2, 1, 0, 1, 3, 0, 1, 3, 3, 1, 0, 2, 3, 2, 0, 2, 3, 3, 2, 0, 2, 3, 2, 0, 1, 2, 1, 0, 2, 2, 3, 1, 3, 0, 2, 2, 2, 0, 1, 2, 1, 0, 1, 1, 3, 0, 1, 2, 3, 0, 0, 1, 3, 0, 2, 2, 2, 3, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], [3, 3, 2, 2, 2, 1, 1, 0, 3, 4, 2, 3, 0, 2, 0, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 1, 0, 2, 0, 0, 2, 2, 2, 0, 4, 2, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1, 0], [0, 1, 2], [17], [4], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 15, 0, 67, 20, 16, 11, 9, 6, 3, 1, 16, 2, 0, 6, 3, 1, 1, 1, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[len(in1):mod(int(6.0),abs(mod(( int(1.0) + i0 ),int(7.0))))] not in in0[:abs(i2)][int(9.0):abs(max(int(0.0), i0))][divInt(max(( i0 + divInt(min(len(getCharFromString(\"\"e\"\"[( i1 * ( saveOrd(saveChr(divInt(i2,int(1.0)))) - ( int(7.0) + i1 ) ) ):divInt(mod(abs(int(7.0)),len(s0)),i2)], ( ( ( i0 * int(9.0) ) - divInt(int(8.0),i0) ) - int(5.0) ))), int(0.0)),min(i2, int(4.0))) ), divInt(abs(i2),i1)),int(8.0)):min(i0, ( ( ( len(\"\"3\"\") * i1 ) + int(59.0) ) + int(9.0) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1, 2, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0], [2, 0, 0, 2, 0, 3, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0, 1], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 0, 1, 1, 1, 1, 2, 2, 2], [17, 18], [17, 4, 16, 17], [4, 3, 8, 3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 14, 14, 11, 1, 51, 15, 12, 6, 9, 5, 10, 0, 18, 3, 1, 3, 10, 2, 4, 4, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[len((\"\"R\"\" + getCharFromString(\"\"4Sr\"\"[abs(min(len(saveChr(mod(int(0.0),int(7.0)))), divInt(int(5.0),max(i0, ( divInt(divInt(int(7.0),i1),divInt(max(int(7.0), i2),len((\"\"e\"\" + in1.rstrip())))) + max(divInt(int(1.0),i0), ( abs(int(7.0)) + mod(int(7.0),int(9.0)) )) ))))):i1], i2))):]:{:\\nres0 = ( ( int(8.0) - len(\"\"qr3\"\") ) != divInt(max(i1, ( ( ( int(5.0) - int(0.0) ) + divInt(int(4.0),i2) ) * int(8.0) )),i0) or ( in0.endswith(\"\"83\"\") and True ) )\\n:}\\ni0 = i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 0, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 3, 3, 3, 0, 12, 3, 3, 1, 2, 4, 1, 0, 9, 2, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s2[len(in2):] not in in1[saveOrd(in1.capitalize()):]:{:\\nres0 = ( divInt(int(7.0),i2) != divInt(i2,int(3.0)) or ( saveChr(( int(5.0) + abs(i2) )).endswith(\"\";\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 1], [2, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 2, 2, 3, 2, 0, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 0, 0, 2, 2, 3, 2, 1, 3, 3, 3, 0, 3, 0, 3, 2, 1, 0, 2, 3, 2, 2, 2, 2, 3, 3, 3, 2, 0, 1, 0, 1, 0, 1, 2, 0, 3, 0, 2, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 0, 0, 0, 1, 4, 4, 1, 2, 2, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 2, 2, 4, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 20, 20, 25, 0, 93, 29, 20, 13, 16, 5, 2, 1, 15, 3, 1, 5, 2, 1, 0, 0, 1], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1.capitalize()[len(\"\"R\"\"[divInt(int(0.0),divInt(( abs(divInt(i2,int(7.0))) + divInt(i2,i2) ),divInt(( int(5.0) + i1 ),( min(divInt(i1,( len(in1[:mod(min(i2, divInt(max(int(7.0), i1),int(6.0))),int(1.0))]) * i2 )), i0) - ( int(7.0) + abs(int(7.0)) ) )))):max(i0, ( ( mod(int(9.0),int(8.0)) * divInt(int(5.0),i2) ) - int(0.0) ))]):int(4.0)][i0:]):]:{:\\nres0 = i1 != ( mod(min(( int(8.0) - min(min(max(i1, saveOrd(saveChr(i1))), saveOrd((\"\";\"\" + in0.rstrip()))), mod(int(59.0),i1)) ), ( max(( ( mod(( abs(abs(abs(divInt(i1,int(9.0))))) * i1 ),int(2.0)) + i0 ) + int(2.0) ), divInt(i0,max(i0, mod(i2,int(1.0))))) - i0 )),i0) - i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 8, 2, 6, 1, 7, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 2, 1, 0, 1, 0, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 3, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 1, 1, 0, 1, 2], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [4, 0, 0, 4, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 3, 0], [17, 17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 1, 7, 1, 2, 1, 0, 6, 3, 1, 16, 5, 2, 2, 3, 2, 0, 0, 1], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1)):{:\\nres0 = in1.capitalize() not in (in0[len((\"\"R\"\" + getCharFromString(s0, i0)).lstrip()):].rstrip()[int(00.0):] + \"\";R\"\")\\ni1 = ( int(8.0) + i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [6, 7, 9, 8, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 7, 1], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 1, 0, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 1, 0, 3, 1, 3, 0, 2, 3, 0, 3, 3, 3, 1, 3, 2, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1, 0, 1, 3, 3, 2, 2, 3, 2, 0, 0], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 3, 2], [1, 1, 1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0, 2, 2, 2, 2, 4, 0, 2, 1, 2, 1, 4, 1], [2, 1, 3, 3], [1, 0], [2, 2, 1, 1, 2, 0, 0, 0, 0, 2, 0], [3, 2, 0, 0, 2], [17, 9], [], [0, 5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 21, 21, 14, 0, 70, 17, 19, 10, 7, 9, 5, 1, 29, 4, 2, 11, 5, 2, 0, 2, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[len(in0):] != \"\";\"\"[mod(int(6.0),int(7.0)):][:( int(9.0) + i1 )][:( int(8.0) + abs(i2) )]:{:\\nres0 = ( divInt(saveOrd((saveChr(( int(5.0) - len(s0) )) + in1).capitalize()),abs(saveOrd(\"\"0\"\"))) != min(i1, ( ( ( int(5.0) * i0 ) - divInt(max(int(7.0), i1),int(7.0)) ) * int(9.0) )) or ( in0.endswith(s2.rstrip()[i2:( divInt(int(8.0),min(int(5.0), max(i1, divInt(( ( int(0.0) - int(4.0) ) - ( int(8.0) * i2 ) ),int(59.0))))) + int(9.0) )][len(\"\"R\"\"[int(2.0):]):i0][len(\"\"J\"\"[int(2.0):abs(i0)]):divInt(abs(i0),len(\"\"5\"\".lstrip()))][abs(min(int(7.0), min(mod(i1,i2), i0))):int(1.0)]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 1, 5, 6, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 1, 2, 2, 3, 1, 1, 0, 0, 3, 0, 3, 1, 3, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 1, 0, 2, 4, 0, 1], [2, 2, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 5, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 4, 4, 2, 2, 4, 0, 1, 3, 4, 4, 0, 4, 0], [2, 2, 1, 2, 1], [4, 0], [2, 2, 0, 0, 2], [0], [21], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 0, 34, 9, 8, 5, 4, 3, 1, 0, 11, 3, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in2[len(in2):] not in saveChr(( ( int(6.0) * int(7.0) ) * ( mod(len(in2),int(1.0)) - int(5.0) ) ))[i1:i2][max(i2, max(int(6.0), min(mod(abs(divInt(i0,( i1 * ( int(5.0) + int(7.0) ) ))),divInt(saveOrd(\"\"V\"\"),int(7.0))), i2))):min(int(9.0), i1)].capitalize().capitalize()[i2:]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1, 1], [1, 0], [0, 0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [8, 7, 1, 2, 6, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 1, 0, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 3, 2, 1, 1, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 2, 3, 1, 3, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 4, 0, 2, 4, 0, 1, 4, 1, 1, 2], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 1], [1, 0, 1], [0], [2, 0, 4, 2, 0, 0, 2, 1, 2, 2, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 2, 0], [0, 0, 0], [17, 17, 10], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 2, 0, 0, 1, 1, 6, 1, 1, 4, 2, 2, 0, 21, 21, 10, 1, 58, 16, 13, 11, 5, 6, 3, 0, 16, 3, 1, 5, 3, 3, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( ( len(s0[( int(8.0) + i0 ):]) != int(7.0) or True ) and in2[( int(1.0) + int(2.0) ):].capitalize() not in in1 ):{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = ( int(6.0) - min(i0, mod(abs(( int(5.0) * saveOrd(\"\"R\"\"[min(abs(saveOrd(saveChr(i0)[( min(( int(7.0) - int(7.0) ), ( max(int(9.0), i1) * int(8.0) )) - int(5.0) ):][i2:divInt(( int(0.0) - saveOrd((in1.rstrip() + in0)) ),int(4.0))])), max(i1, divInt(divInt(( int(8.0) * int(59.0) ),( int(9.0) + i2 )),int(2.0)))):( divInt(max(int(2.0), abs(int(2.0))),i0) + int(2.0) )]) )),i0)) )\\ns0 = \"\"RK\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 1], [0], [2, 0, 0, 2, 2, 0, 4, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [2, 2, 0, 2, 1], [17], [6], [6, 8, 7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 11, 2, 5, 1, 1, 7, 5, 1, 17, 3, 1, 5, 5, 1, 1, 3, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[:len(\"\"6\"\"[abs(mod(i1,saveOrd((in0.rstrip() + s0).capitalize()[:i2]))):int(0.0)].capitalize())][( int(9.0) + len(\"\"8R7g\"\") ):] != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 2, 0, 1, 2, 1, 1, 1, 2, 1], [0, 1, 1], [3, 2, 2, 2, 0, 2, 0, 2, 2, 1, 3, 3, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 0, 2, 3, 0, 2, 3, 1, 1, 1, 1, 0, 1, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 3, 0, 1, 0, 1, 0, 0, 0, 3, 2, 0, 3], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 4, 3], [1, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [5, 5, 3, 3, 3, 0, 4, 5], [1, 0, 0, 1], [0], [2, 0, 0, 4, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 1, 1], [0, 3, 3, 2], [17], [], [9], [20, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 17, 1, 56, 18, 11, 6, 12, 8, 4, 1, 16, 3, 1, 4, 4, 1, 0, 1, 2], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in0):]:{:\\nres0 = in0.capitalize() not in in0\\ni0 = divInt(divInt(divInt(i2,divInt(i2,divInt(divInt(int(17.0),max(abs(i2), ( ( i1 - i2 ) + mod(min(( i1 * divInt(i2,mod(len(s0[:i2][( min(int(5.0), int(7.0)) - int(7.0) ):int(1.0)][i0:int(7.0)]),( int(7.0) + max(int(9.0), abs(i1)) ))) ), ( divInt(divInt(int(8.0),max(i2, int(5.0))),i1) * int(0.0) )),i1) ))),i1))),i2),saveOrd(saveChr(divInt(i1,len((\"\"R\"\" + in1.rstrip()))))))\\nin2 = \"\";\"\\\\\"9\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [2, 2], [2, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 0, 1], [0], [2, 0, 0, 2, 0, 3, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0, 0, 2], [17, 10, 3], [], [7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 5, 1, 21, 6, 5, 3, 3, 5, 4, 0, 15, 3, 1, 3, 4, 3, 0, 1, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] != in1[int(0.0):]:{:\\nin1 = (\"\"R\"\" + \"\"K\"\"[len(saveChr(i0)):abs(mod(int(7.0),int(5.0)))].capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = ( int(7.0) + min(i2, divInt(divInt(( int(7.0) + i0 ),( len((\"\"D7\"\" + in0.rstrip())) - int(1.0) )),i1)) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 0, 3, 2, 2, 1, 1, 1, 3, 2, 2, 2, 1, 1, 2, 3, 2, 0, 2, 2, 2, 1, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [1, 5, 2, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 1, 4, 1, 0, 0, 0, 1, 0], [2, 1, 3], [3, 0, 0], [2, 1, 2, 1, 0, 0], [0, 3, 0], [17, 18], [20], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 4, 0, 33, 11, 8, 4, 7, 5, 3, 1, 12, 1, 0, 4, 3, 2, 0, 0, 1], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(s2):]:{:\\nres0 = in1[:len(in0)] != \"\"R\"\"[:max(min(i0, len(\"\";\"\")), divInt(mod(int(2.0),int(7.0)),int(0.0)))][abs(( divInt(( int(2.0) + int(5.0) ),divInt(saveOrd(\"\"S\"\".capitalize()),( i2 + ( mod(divInt(int(5.0),int(7.0)),mod(min(int(7.0), i1),int(9.0))) - int(8.0) ) ))) * i2 )):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 1, 2, 1, 1, 2, 1, 3, 1, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 1, 0, 2, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 1, 1, 2, 0], [0, 1, 0], [17, 15], [15], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 0, 0, 19, 5, 7, 3, 2, 6, 3, 1, 16, 2, 0, 5, 3, 2, 1, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[len(in1):mod(int(6.0),int(7.0))] != \"\"p\"\"[( int(1.0) + int(2.0) ):][:( int(5.0) - abs(int(5.0)) )][:divInt(saveOrd((saveChr(( int(7.0) - len(in0) )) + s0).capitalize()),abs(saveOrd(\"\"P\"\")))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 1, 2, 2, 3, 2, 1, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [16], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 13, 5, 2, 0, 5, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[mod(len(in1),mod(int(0.0),divInt(divInt(len(\"\"Q\"\"[divInt(int(7.0),int(5.0)):]),int(7.0)),i0))):]:{:\\nres0 = in1 not in in0[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 1], [2, 0, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 1, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [3, 3, 3, 0, 3, 1, 1, 3, 1, 3], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4, 2], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [0], [2, 3, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0, 2, 1, 4, 0, 1, 1], [0, 1, 3, 3], [1, 0], [2, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 3, 1, 2, 2, 0], [17, 23, 15, 0, 25, 24, 11, 5, 1, 24], [1], [8, 6, 9, 4, 6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 3, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 16, 16, 11, 1, 50, 15, 10, 5, 10, 8, 17, 1, 23, 4, 2, 4, 17, 10, 1, 5, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1[len(in1):int(0.0)])[len(\"\"R\"\"):]:{:\\nres0 = getCharFromString(\"\"X\"\"[i0:len(saveChr(mod(int(7.0),int(5.0))))], ( int(7.0) + min(i1, divInt(divInt(( int(7.0) * i2 ),( len((\"\"P\"\" + in0.rstrip())) * int(1.0) )),i0)) )) != \"\"AZYL8F\"\"\\nloopBreak% = 0\\nwhile ( max(max(divInt(int(7.0),i1), divInt(len(s0),int(7.0))), divInt(int(9.0),int(8.0))) != i2 or ( \"\"B6\"\"[i1:( int(5.0) + max(mod(len(in1.lstrip()),i2), ( divInt(divInt(int(0.0),int(4.0)),divInt(int(8.0),i0)) - int(59.0) )) )].endswith(\"\"9;b46\"\") and True ) ):{:\\ni0 = i0\\ns2 = \"\"Y\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 2], [0, 0], [1, 5, 0], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 0, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1, 1], [0], [1, 0, 0, 2, 0, 4, 0, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0, 2], [17], [], [7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 3, 2, 2, 0, 0, 2, 2, 3, 0, 9, 2, 2, 1, 1, 5, 2, 0, 11, 2, 0, 2, 2, 1, 0, 1, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile \"\"R\"\" not in s0:{:\\nres0 = ( len(in2) != len(in1[( int(0.0) + i1 ):]) or ( in1.capitalize().endswith(\"\"7\"\") and s2[mod(i2,i1):] in saveChr(int(7.0)) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1], [0, 1, 1], [3, 0, 2, 1, 0, 2, 0, 1, 3, 2, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 1, 4], [1, 0, 0, 0, 0, 0, 1], [0], [2, 3, 2, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 3, 2, 3, 0, 0], [17, 23, 1], [14], [9], [20, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 49, 15, 9, 7, 8, 5, 7, 1, 15, 3, 1, 4, 7, 3, 1, 1, 2], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2[min(i0, mod(int(0.0),i1)):mod(i2,int(7.0))][len(in1):] + \"\"R\"\".capitalize()[( abs(int(5.0)) + i0 ):divInt(divInt(int(7.0),i1),divInt(min(( i2 + ( len(in1) * divInt(min(i1, ( max(int(6.0), i2) - int(1.0) )),int(7.0)) ) ), i0),i0))])[mod(int(7.0),abs(int(9.0))):]:{:\\nb1 = saveChr(max(i1, divInt(( ( int(8.0) + int(5.0) ) * ( int(0.0) - i1 ) ),int(4.0)))) not in (\"\"o;9*XB\"\" + in1.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 3, 2, 1, 1, 1, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 3, 2, 1, 4], [1, 0, 0, 1], [0], [2, 0, 0, 0, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0, 2, 0, 2], [16, 14], [], [1, 0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 9, 9, 7, 0, 37, 11, 10, 4, 7, 7, 4, 0, 16, 3, 1, 3, 4, 2, 0, 2, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2[len(in2):] not in in1:{:\\nres0 = ( len(in0.capitalize()) != mod(int(0.0),len(s2[mod(min(( int(7.0) + int(5.0) ), int(7.0)),len(s1[i0:])):])) or ( saveChr(divInt(divInt(int(6.0),i2),divInt(min(( i0 + ( max(divInt(abs(i1),( max(int(1.0), i1) * int(7.0) )), int(7.0)) - i2 ) ), i1),mod(int(9.0),len((\"\"Q\"\" + in1.rstrip())))))).endswith(\"\"1O0\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 0, 0, 1, 0, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 1, 1, 2, 1, 5, 1, 2, 0, 1, 7, 1, 0, 7, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s2 not in in2:{:\\nres0 = ( len(in1) != len(in1) or ( in0.endswith(\"\";\"\") and True ) )\\ni0 = divInt(int(8.0),i2)\\n:}else:{:\\ns0 = in1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 3, 1, 2, 3, 1, 2, 2, 1, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 1, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1, 0, 1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 1, 1], [17], [11, 0], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 7, 7, 3, 0, 22, 7, 5, 0, 7, 8, 3, 1, 17, 4, 2, 3, 3, 1, 2, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1.capitalize() not in in0:{:\\nres0 = ( len(in0[divInt(abs(int(0.0)),mod(len((\"\"R\"\" + saveChr(int(6.0))).lstrip()),mod(divInt(int(5.0),int(2.0)),i1))):mod(len(in1),int(8.0))].rstrip()[i0:]) != mod(i0,mod(int(1.0),int(7.0))) or ( \"\"la\"\".endswith(s1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 2, 0, 0, 0, 3, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 4, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 4, 1, 5, 1, 1, 1, 0, 6, 1, 1, 8, 1, 0, 2, 1, 0, 0, 1, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in1 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = len(in0[i2:])\\ns0 = \"\"0\"\"[( i1 - i1 ):].capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 4, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 0, 2, 0, 0, 2, 2], [0, 1, 1], [1, 3, 2, 3, 1, 0, 0, 3, 2, 2, 1, 0, 0, 2, 2, 2, 3, 2, 3, 1, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 0, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 2, 0, 1, 1], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 0, 2, 3, 2, 2, 0, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 1, 1, 0], [0, 3, 4, 4, 2, 0, 4], [1, 1], [0], [2, 0, 0, 2, 2, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 1], [14], [14], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 37, 10, 10, 4, 6, 6, 2, 1, 16, 4, 1, 4, 2, 1, 1, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[int(0.0):]:{:\\nres0 = in1 not in in1[len(saveChr(( max(int(7.0), i1) + i2 )).capitalize()):min(mod(( int(5.0) + i1 ),i0), mod(divInt(divInt(abs(mod(len(s2[int(4.0):i1]),( abs(mod(abs(i2),( min(int(6.0), i0) * int(1.0) ))) - int(7.0) ))),saveOrd((\"\"O\"\" + getCharFromString(s0, i2)).rstrip())),i0),int(7.0)))][saveOrd(\"\"o\"\"):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [4, 0, 0, 2, 0, 0, 4, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [3, 2, 3, 0], [1, 0], [1, 2, 1, 0, 1], [0, 1], [17], [25], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 3, 3, 2, 0, 11, 2, 4, 1, 1, 6, 2, 0, 16, 4, 2, 3, 2, 1, 1, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s1.rstrip() != in2:{:\\nres0 = ( len(in1[:mod(len(in1),int(0.0))]) != i1 or ( \"\"R\"\"[abs(i2):].capitalize().endswith((getCharFromString(in0, int(9.0)) + s0).lstrip()[:( int(8.0) + saveOrd(\"\"z\"\") )]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 8, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 2, 2, 1, 1, 2, 3, 1, 1, 2, 0, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 1, 1, 0], [2, 2, 3, 1], [0, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 2, 0, 16, 5, 3, 0, 5, 6, 2, 1, 15, 3, 1, 4, 2, 1, 0, 0, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[divInt(mod(int(0.0),int(6.0)),mod(len(in0),int(8.0))):] not in in0[int(2.0):divInt(i1,int(7.0))].capitalize()[i0:mod(saveOrd((\"\"R\"\" + \"\";\"\".lstrip()).capitalize()),int(1.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 3, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 1, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [9], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 7, 1, 3, 0, 1, 3, 2, 1, 6, 0, 0, 2, 2, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), mod(int(0.0),int(75.0))):]:{:\\nres0 = \"\"R\"\"[abs(i0):] not in \"\"9\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 1, 2, 6, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 1, 0, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 3, 2, 1, 1, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 4, 0, 2, 4, 0, 1, 3, 4], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 1], [1, 1, 1, 1], [0], [2, 0, 4, 2, 0, 0, 2, 1, 2, 2, 4, 3, 4, 0, 0, 1, 0, 1, 1], [2, 1, 3], [1, 0], [2, 2, 0, 0, 2, 0], [0, 3, 1, 3], [17], [17], [], [20, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 7, 1, 39, 9, 11, 7, 2, 7, 4, 0, 19, 3, 1, 5, 4, 1, 1, 0, 2], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2[i0:].capitalize()):] not in in1:{:\\nres0 = ( int(1.0) != i2 or ( \"\"R\"\"[int(7.0):( int(1.0) + int(2.0) )].endswith(saveChr(( int(6.0) + min(i1, ( abs(mod(int(5.0),saveOrd((in1.rstrip() + in0)))) - min(abs(saveOrd(\"\";\"\")), i0) )) ))[( min(( int(7.0) * int(7.0) ), ( max(int(9.0), i1) - int(8.0) )) * int(5.0) ):][i2:( divInt(int(0.0),len(s0)) - int(4.0) )]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = saveOrd(\"\"r\"\")\\nin1 = \"\"?\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 3, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 1], [0], [1, 0, 4, 4, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 3, 0, 3, 2], [17, 2], [], [5], [20, 0]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 2, 2, 3, 1, 7, 2, 2, 0, 2, 3, 5, 0, 6, 2, 0, 0, 5, 2, 0, 1, 2], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif \"\"R\"\".startswith(s2):{:\\nin2 = getCharFromString(saveChr(divInt(len(\"\";C5\"\"),divInt(int(07.0),i1))), len(in1))\\n:}else:{:\\ni2 = i2\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 0, 1, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 1, 2, 4, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [1], [17], [6], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 5, 0, 2, 0, 0, 4, 1, 1, 8, 1, 0, 3, 1, 0, 1, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[len(saveChr(i0)):] not in \"\"g\"\"[int(9.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = i2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 8, 2, 6, 1, 7, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 2, 0, 0, 3, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 3, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 1, 1, 0, 1, 2], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 0, 1], [0], [2, 0, 0, 2, 1, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0, 3, 0, 2, 1, 1], [17, 23], [11, 0], [4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 0, 12, 2, 3, 1, 1, 5, 6, 1, 15, 3, 1, 5, 6, 2, 2, 1, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\"[len(getCharFromString(in1[:i0], int(0.0))[:mod(i1,i1)][len(saveChr(( int(1.0) + i0 ))):i1]):] not in (\"\";X4la\"\" + in0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1], [2, 0, 0, 0, 0, 0, 0], [0, 2], [0, 2, 2, 2, 2, 1], [0], [0, 0, 0, 0, 0, 0], [], [], [3, 2, 3], [4, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 1, 1, 1, 3, 0, 0, 2, 3, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 3, 0, 3, 2, 4, 3, 1], [0, 1, 1, 2, 2, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4, 1, 3, 3, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 4, 4, 0, 1, 1, 0], [2, 1, 3, 1, 3], [0, 0], [2, 2, 0, 0, 2], [0, 1], [17], [25], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 1, 6, 1, 6, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 9, 1, 31, 8, 7, 6, 2, 11, 2, 1, 18, 5, 2, 4, 2, 1, 1, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = int(0.0) \\le int(1.0)\\nin1 = in0[int(1.0):]\\ns1 = in1\\ns1 = saveChr(int(2.0))[abs(i2):i2].capitalize()[divInt(len((saveChr(int(2.0)) + in0.lstrip()).lstrip()),i2):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = \"\"R\"\"\\ni1 = ( ( int(5.0) + i2 ) - divInt(min(( i1 - ( len(\"\"z\"\") * ( abs(i2) * ( saveOrd(in1) * int(7.0) ) ) ) ), i0),int(7.0)) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 5, 0, 3, 0, 4], [1, 1], [0], [2, 2, 2, 1, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 0], [24, 21], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 10, 0, 40, 11, 10, 7, 4, 5, 2, 1, 15, 4, 1, 4, 2, 2, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"Y\"\"[int(8.0):len(in2)][len(in2):][mod(i0,( i0 + int(7.0) )):]:{:\\nres0 = saveChr(( int(5.0) + abs(i2) )).startswith(saveChr(min(divInt(( int(7.0) * i0 ),( len(s0[( i1 - ( min(divInt(max(i2, ( abs(int(6.0)) + i1 )),int(1.0)), int(7.0)) * i2 ) ):i0]) - divInt(int(7.0),max(int(9.0), saveOrd((\"\"V\"\" + in0.capitalize()).rstrip()))) )), i0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 2, 2, 1, 3, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 1, 2, 0, 2, 0, 2, 1, 1, 2, 1, 1, 2, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 4, 2, 2, 0, 1], [2, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 5], [1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 1, 1, 4, 0, 0, 1, 0], [2, 1, 3], [3, 0, 0], [2, 2, 0, 1, 2, 0], [1, 3, 1, 1], [17], [20, 14, 14], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 10, 10, 4, 0, 29, 10, 5, 5, 5, 6, 4, 0, 14, 1, 0, 5, 4, 0, 3, 0, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2[len(in2):] != in1[len(in1):]:{:\\nres0 = ( abs(saveOrd(in0[( divInt(int(2.0),saveOrd(\"\"u\"\")) * int(7.0) ):][:int(0.0)][int(2.0):i0])) != ( mod(divInt(int(5.0),i2),mod(int(5.0),( i1 - ( i0 - divInt(int(7.0),int(7.0)) ) ))) * ( int(9.0) - int(8.0) ) ) or ( \"\";oo\"\".endswith(s0.capitalize()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [2, 2, 0, 0, 0, 0, 1, 2, 2, 0, 1], [0, 2, 2, 0], [0, 1, 2, 0, 2, 2, 0], [0, 0], [0, 0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0, 0, 1, 0, 2], [0, 0], [3, 5, 3], [3, 3, 1, 1, 2], [1, 0], [0, 1], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 6, 7, 9, 9, 9, 3, 0, 4, 4, 0, 1, 6, 3, 3, 9, 7, 7, 6, 4, 0, 2, 4, 7, 7, 0, 2, 8, 2, 5, 6, 8, 2, 3, 9, 2, 3, 8, 4, 2, 5, 3, 8], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 1, 2, 1, 2, 0, 2, 2, 1, 1, 1, 1, 2, 2, 1, 0, 2, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 0, 2, 2, 1, 0, 0, 1, 1, 1, 2, 0, 2, 2, 2, 2, 1, 0, 1, 1, 1, 2, 2, 1, 2, 1, 0], [1, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 0, 3, 0, 1, 0, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 0, 3, 3, 0, 2, 2, 1, 0, 3, 3, 3, 3, 2, 1, 1, 0, 2, 3, 0, 2, 1, 2, 1, 0, 3, 2, 2, 3, 2, 0, 1, 3, 0, 2, 2, 1, 2, 3, 2, 2, 1, 1, 1, 1, 0, 3, 2, 1, 0, 1, 2, 1, 2, 2, 1, 1, 3, 2, 1, 3, 2, 3, 2, 0, 2, 0, 2, 2, 2, 3, 0, 1, 2, 3, 1, 0, 3, 3, 3, 3, 3, 3, 1, 0, 2, 1, 3, 1, 2, 1, 2, 2, 2, 2, 2, 3, 3, 0, 2, 0, 2, 0, 3, 2, 2, 2, 1, 3, 1, 2, 2, 2, 0, 1, 0, 1, 2, 2, 2, 2, 3, 2, 2, 0, 0, 0, 2, 2, 1, 0, 1, 3, 3, 2, 3, 2, 3, 2, 0, 0, 0, 2, 3, 1, 0, 0, 2, 0, 1, 3, 2, 2, 2, 1, 3, 2, 3, 0, 0, 2, 3, 0, 2, 0, 0, 3, 0, 3, 1, 1, 2, 0, 2, 3, 3, 0, 3, 3, 2, 1, 3, 1, 3, 2, 2, 2, 0, 0, 2, 1, 0, 3, 3, 0, 2, 2, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 3, 0, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [4, 1, 2, 4, 3, 0, 1, 2, 1, 4, 4, 3, 0, 3, 4, 2, 0, 0, 1, 3, 4, 2, 1, 1, 3, 0, 1, 2, 0, 4, 1, 0, 2, 1, 2, 1, 0, 3, 3, 4, 1, 0, 1, 0, 2, 4, 2, 4, 4, 1, 2, 2, 3, 3, 3, 1, 3, 0, 1, 2, 1, 3, 4], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 1, 0, 2, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 2, 1, 0, 2, 2, 1, 1, 0, 1, 2, 1, 1, 1, 1, 0, 2, 0, 1, 2, 1, 1, 2, 2, 0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 5, 4, 3, 0, 4, 5, 4, 0, 2, 0, 2, 2, 5, 4, 1, 4, 3, 4, 4, 3, 4, 1, 3, 1, 4, 2, 5], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [2, 3, 0, 1, 0, 0, 0, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 3, 0, 2, 3, 3, 3, 0, 3, 4, 1, 4, 4, 3, 2, 0, 0, 2, 3, 3, 4, 1, 0, 4, 4, 2, 1, 0, 2, 0, 1, 4, 2, 1, 1, 4, 2, 0, 0, 2, 1, 0, 1, 2, 4, 1, 0, 0, 1, 0, 1, 2, 0, 0, 1], [2, 2, 3, 0, 0, 1, 0, 1, 3, 2, 3, 1], [1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 2, 2], [0, 2, 0, 3, 0, 1, 0, 0, 1, 0, 1, 2, 3, 2, 2, 0, 3, 1, 0, 2, 0, 1, 3, 3, 3], [17, 8, 11, 4, 21, 13, 6, 7, 9], [17, 25, 24, 1, 20], [6, 1, 5, 0, 8], [20, 13, 12, 24, 20, 12]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 4, 7, 2, 5, 0, 0, 3, 2, 10, 2, 3, 5, 2, 2, 0, 61, 61, 67, 1, 278, 91, 63, 50, 42, 29, 25, 2, 77, 12, 3, 13, 25, 9, 5, 5, 6], "tree_depth": 99, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in (in2 + \"\"R6I;Lr\"\")[saveOrd(in2):max(abs(int(09.0)), i1)]:{:\\nloopBreak% = 0\\nwhile in1 != in0:{:\\nres0 = ( saveOrd((s0.rstrip() + in1).capitalize()[:i2].capitalize()[int(8.0):mod(int(6.0),len(\"\"E\"\"))]) != i1 or ( in2.endswith(\"\"V\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 -= int(6.0)\\nin1 = s0\\nb2 = False\\ns2 = \"\"z\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile mod(( int(1.0) + i1 ),divInt(min(divInt(i2,divInt(max(( abs(i1) * ( max(int(7.0), i2) - int(7.0) ) ), int(9.0)),i0)), i0),( int(8.0) + saveOrd(s0) ))) \\l int(5.0):{:\\nloopBreak% = 0\\nfor s2 in \"\"N\"\":{:\\ns2 = \"\"y1\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = not (in2 + (((in1 + (getCharFromString(\"\"*\"\", saveOrd(getCharFromString(saveChr(i2), ( divInt(mod(int(0.0),int(4.0)),( int(8.0) * i2 )) - int(59.0) )))) + (s1[:divInt(i1,i0)] + in1))) + ((getCharFromString(\"\"50\"\", len(in0)) + saveChr(i2)) + \"\"G\"\"[:int(9.0)].lstrip())[i1:i2]) + in1)[( i1 - divInt(int(2.0),mod(i2,min(len(in1[divInt(i0,saveOrd(\"\")\"\")):abs(i2)]), divInt(( int(2.0) * i2 ),min(min(max(len(\"\"b\"\"[:( int(6.0) + int(7.0) )].capitalize()), i1), mod(saveOrd(\"\"H\"\"),i1)), divInt(int(9.0),( int(9.0) + i1 ))))))) ):abs(divInt(mod(max(( i1 - int(9.0) ), max(i2, divInt(( int(3.0) - ( len(in0[:( ( int(0.0) + int(4.0) ) * int(4.0) )].lstrip()) - int(0.0) ) ),i2))),min(( int(1.0) - i1 ), int(63.0))),divInt(int(3.0),( ( int(9.0) - int(7.0) ) - max(divInt(int(7.0),abs(( min(( i0 + divInt(i2,divInt(( mod(saveOrd(in1),i2) - int(6.0) ),( max(int(4.0), i1) - min(abs(max(abs(max(min(int(0.0), i0), ( int(2.0) - len(\"\"8\"\"[int(4.0):( int(7.0) + mod(divInt(( ( ( len(s1) - saveOrd(\"\"J\"\") ) + i1 ) * mod(i2,( i2 - max(( ( divInt(int(7.0),min(int(0.0), ( ( ( i1 + int(2.0) ) * i0 ) * int(8.0) ))) - ( divInt(( ( max(( ( i2 - i1 ) + i0 ), ( mod(int(2.0),i2) - int(5.0) )) * min(abs(mod(saveOrd(saveChr(( abs(mod(i2,i1)) - i0 ))[( saveOrd(\"\"u\"\") - int(6.0) ):]),i0)), i1) ) - divInt(i1,int(8.0)) ),saveOrd(in0)) - mod(( divInt(int(2.0),max(( abs(i1) + i2 ), ( abs(i0) * divInt(i2,i2) ))) + len(s1) ),i2) ) ) - len(\"\"?\"\") ), int(3.0)) )) ),int(9.0)),( i2 * ( len(in1) - max(i1, len(\"\";\"\")) ) )) )]) ))), min(mod(int(2.0),max(int(3.0), abs(( mod(divInt(i0,i1),( int(8.0) - i1 )) * max(len(s2[i1:]), mod(divInt(int(4.0),mod(int(2.0),i2)),int(5.0))) )))), ( i2 * divInt(int(3.0),i1) )))), mod(i2,saveOrd(in2))) ))) ), i1) + i0 ))), int(8.0)) ))))]) != \"\")\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 9, 6, 1, 0, 6, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 2, 1, 0, 1, 1, 0, 3, 2, 3, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 2, 1, 0, 2, 2, 3, 1, 3, 0, 2, 2, 2, 0, 1, 2, 1, 0, 1, 1, 3, 0], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 2, 1, 1, 0, 2, 4, 2, 4], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 0, 4, 2, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0, 2, 0, 1], [17, 9], [13], [2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 14, 14, 11, 0, 52, 15, 12, 9, 6, 5, 4, 0, 14, 2, 0, 5, 4, 2, 1, 1, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( mod(int(6.0),abs(mod(( int(7.0) + i0 ),int(5.0)))) != int(9.0) or ( \"\"R\"\"[i2:abs(( abs(int(6.0)) + i0 ))][( max(divInt(i0,( max(min(int(1.0), i1), ( abs(int(0.0)) - i2 )) - int(6.0) )), divInt(int(9.0),i1)) + ( mod(saveOrd(in0),int(8.0)) * abs(i2) ) ):divInt(( ( i0 - int(5.0) ) - ( int(0.0) * i0 ) ),int(4.0))].endswith(getCharFromString(\"\"2Jn\"\"[:int(8.0)], saveOrd(saveChr(i0)))) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 0, 7, 5, 7, 7, 8, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [2, 2, 3, 3, 1, 2, 1, 2, 1, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 2, 0, 1, 1, 1, 2, 1, 1, 2, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 4, 2, 2, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 2, 4, 5], [1, 1], [0], [2, 4, 0, 2, 1, 0, 2, 2, 2, 0, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [3, 0, 0], [2, 2, 0, 1, 0, 0], [1, 1], [17], [20, 8], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 6, 0, 37, 14, 5, 7, 7, 7, 2, 1, 17, 3, 1, 5, 2, 0, 2, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2.capitalize()[( divInt(len(\"\"u\"\"[len(in1):]),int(0.0)) + ( int(7.0) + mod(int(0.0),int(7.0)) ) ):]:{:\\nres0 = in1[i1:i2][:divInt(divInt(( int(5.0) - i1 ),( abs(divInt(( divInt(i0,int(7.0)) * int(7.0) ),int(8.0))) - mod(int(9.0),int(8.0)) )),( saveOrd(saveChr(int(5.0))) * i1 ))][i2:( int(0.0) - saveOrd((in0.lstrip(s2) + \"\"i\"\")) )] != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 2, 1, 2, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4, 5], [1, 1], [0], [2, 0, 0, 2, 0, 0, 1, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 1, 0], [3, 1], [17], [11], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 5, 5, 3, 0, 18, 5, 5, 3, 2, 8, 2, 1, 17, 3, 1, 4, 2, 0, 1, 0, 1], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[len(in0):] != \"\";\"\":{:\\nres0 = ( i0 != int(6.0) or ( saveChr(int(1.0)).capitalize()[:divInt(i2,int(1.0))][( int(2.0) + ( i1 + divInt(abs(( int(5.0) - saveOrd((s0.rstrip() + in1)) )),len(\"\"l\"\")) ) ):].endswith(in2) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 2, 1, 2], [0, 1, 1], [3, 3, 2, 3, 3, 0, 2, 1, 1, 3, 3, 0, 0, 2, 2, 1, 2, 2, 3, 2, 0, 2, 3, 3, 2, 0, 2, 3, 3, 0, 3, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0, 3, 3, 2, 1, 1, 1, 3, 0, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 2, 1, 1, 0, 1, 4, 2, 4, 4, 2, 2, 1, 0, 1, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 3, 2, 0, 4, 4, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0, 2], [17], [], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 15, 1, 63, 16, 19, 8, 8, 7, 2, 1, 16, 3, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in (in0[mod(abs(abs(i0)),divInt(int(0.0),int(7.0))):abs(max(i0, i2))] + getCharFromString(saveChr(( mod(int(5.0),( divInt(max(( i0 + ( min(max(divInt(i1,( saveOrd(\"\"R\"\") + abs(i2) )), saveOrd(in1.rstrip())), int(2.0)) + saveOrd(\"\"1\"\") ) ), i1),divInt(int(6.0),abs(int(1.0)))) - abs(i2) )) + mod(( ( int(7.0) * int(7.0) ) - ( int(9.0) - i0 ) ),i0) )), int(8.0)))[max(i0, min(max(divInt(int(5.0),int(7.0)), int(4.0)), max(i0, i2))):int(8.0)]\\ni1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 3, 1, 3, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 2, 1, 0, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 1, 1, 0, 1, 4, 2], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [14], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 11, 1, 51, 15, 11, 8, 7, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1)):{:\\nres0 = in1[len(in0):] not in s0[i0:int(0.0)][abs(divInt(mod(int(7.0),i2),int(5.0))):min(i2, ( mod(( divInt(i0,( len(saveChr(( i1 + mod(max(max(int(2.0), i2), ( min(int(3.0), i1) - int(1.0) )),int(3.0)) ))) * int(7.0) )) - i2 ),divInt(int(9.0),max(int(8.0), saveOrd((\"\"O\"\" + in1.rstrip()))))) + i0 ))][mod(( ( int(5.0) * int(0.0) ) - ( int(4.0) - i0 ) ),int(8.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = abs(int(59.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 0, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [2, 3, 2, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0], [23], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 0, 0, 8, 3, 1, 2, 1, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[mod(len(in1),( int(6.0) + int(0.0) )):]:{:\\nres0 = \"\"X\"\"[( int(1.0) + int(2.0) ):] != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 4, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 5, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [9], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 33, 9, 8, 5, 4, 6, 2, 1, 15, 3, 1, 4, 2, 1, 1, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = in1[len(in2):] not in getCharFromString(\"\"R\"\"[i0:i2], abs(mod(i2,int(0.0))))[mod(int(5.0),min(i0, ( divInt(( int(5.0) + i1 ),divInt(len(saveChr(( i2 + min(saveOrd((\"\"j\"\" + in2.rstrip())), ( int(7.0) * i1 )) ))),( min(int(7.0), i2) - int(1.0) ))) + int(7.0) ))):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 3, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 1, 3, 1, 0, 1, 1, 0, 0, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1, 3, 1], [0, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 3, 4], [1, 1], [0], [2, 0, 2, 2, 2, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 9], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 34, 9, 8, 5, 4, 5, 2, 1, 16, 4, 2, 5, 2, 2, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1[len(saveChr(i0)):int(8.0)][i2:mod(( int(7.0) + ( int(3.0) + saveOrd(saveChr(i2)) ) ),min(divInt(divInt(int(7.0),i0),divInt(len(in1[:( i1 * ( min(( max(i2, int(6.0)) - abs(int(1.0)) ), i0) + int(7.0) ) )]),int(7.0))), i2))][i0:]):]:{:\\nb2 = (\"\"R\"\" + in0.lstrip()).rstrip() not in \"\"J\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 2, 2, 4, 3, 2, 4, 0, 1, 4], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 5, 3, 0, 4], [1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0, 0, 2, 3], [17, 4], [], [5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 12, 12, 5, 0, 38, 11, 10, 6, 5, 6, 4, 0, 16, 2, 0, 5, 4, 2, 0, 1, 1], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2[abs(abs(mod(int(6.0),int(7.0)))):] != in2:{:\\nres0 = ( divInt(int(9.0),int(2.0)) != ( int(5.0) + abs(i0) ) or ( in1[divInt(saveOrd(in2),( int(5.0) + len(\"\"R\"\"[abs(saveOrd((saveChr(min(i2, ( ( ( int(7.0) - i1 ) * divInt(max(int(7.0), i0),int(9.0)) ) - int(8.0) ))) + in0).capitalize())):][:i1][:( divInt(int(5.0),saveOrd(s0)) * int(0.0) )]) )):].endswith(\"\"E5;\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 2, 3, 2, 2, 1, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [1], [17], [19], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 11, 0, 40, 11, 10, 4, 7, 7, 1, 1, 15, 2, 0, 5, 1, 0, 1, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[:divInt(abs(divInt(( int(0.0) + i1 ),i2)),int(7.0))][min(i2, i1):divInt(divInt(int(5.0),i1),divInt(len((\"\"t\"\" + saveChr(( i2 + ( min(divInt(max(i1, ( abs(int(7.0)) * i2 )),int(6.0)), int(1.0)) - i0 ) ))).capitalize()),i0))][mod(int(7.0),max(int(7.0), len(in1))):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 2, 1, 1, 3, 0, 3, 2, 2, 1, 2, 3, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1, 3, 0, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [3, 1, 4, 4, 3, 0, 5], [1], [0], [2, 2, 0, 1, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [0], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in s1[len(\"\"A\"\"):][abs(i1):]:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 3, 2, 2, 1, 0, 0, 3, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0, 0], [17, 8], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 39, 11, 11, 4, 7, 7, 2, 1, 15, 2, 0, 4, 2, 2, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[mod(abs(divInt(( int(0.0) + i1 ),i2)),min(len(s0[i2:i1]), divInt(divInt(int(7.0),i1),divInt(min(( i2 + ( max(divInt(abs(i1),( max(int(5.0), i2) * int(7.0) )), int(6.0)) - i0 ) ), i0),mod(int(1.0),saveOrd((\"\"I\"\" + saveChr(int(7.0))).capitalize())))))):saveOrd(in1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2, 1], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 1, 1, 3, 0, 3, 2, 2, 1, 2, 3, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0, 2, 3, 1, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1, 3, 0, 0, 1, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 5], [1], [0], [4, 2, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [0], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 12, 1, 56, 15, 15, 6, 9, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[abs(int(0.0)):]):].capitalize():{:\\nres0 = in1 not in in0[i1:abs(mod(i2,mod(int(9.0),int(5.0))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = min(i1, len(s0[( divInt(int(7.0),divInt(min(max(abs(i1), divInt(max(divInt(int(6.0),i2), ( len(saveChr(int(1.0))) + i1 )),int(7.0))), int(7.0)),i2)) + min(mod(int(9.0),min(( max(i0, divInt(( ( int(8.0) * int(5.0) ) - ( int(0.0) + i0 ) ),i2)) * int(4.0) ), abs(i1))), mod(len((\"\"A\"\" + in2.rstrip())),int(8.0))) ):int(59.0)]))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 3, 2, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 6, 0, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(\"\";\"\"):]:{:\\nin1 = in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 2, 3, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0, 0], [17, 2], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 18, 5, 7, 3, 2, 7, 2, 1, 16, 2, 0, 5, 2, 2, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != \"\"R\"\"[i1:][:mod(abs(( int(6.0) + int(7.0) )),( int(9.0) + saveOrd((saveChr(i2) + s0).capitalize()) ))][:divInt(len(in1),( int(2.0) - abs(saveOrd(\"\"C\"\")) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 2, 1, 2, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 1, 1, 0, 0], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 0, 18, 5, 5, 3, 2, 7, 1, 1, 16, 3, 1, 5, 1, 0, 0, 0, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != saveChr(i0).capitalize()[int(6.0):int(1.0)][:divInt(i2,int(1.0))][:( int(2.0) + ( i1 + divInt(abs(( int(5.0) - saveOrd((s0.rstrip() + in1)) )),len(\"\";\"\")) ) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1], [2, 1, 0, 0, 0, 2, 1, 0], [0, 2], [0, 2, 2, 1, 2, 2], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [0, 6, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 0, 6, 2, 9, 2, 2, 6], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2, 2, 0, 0, 0, 0], [0, 1, 1], [3, 3, 2, 3, 1, 2, 3, 1, 2, 2, 1, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1, 3, 3, 3, 2, 1, 3, 0, 1, 0, 1, 3, 1, 3, 3, 0, 3, 0, 1, 1, 3, 2, 1, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1, 1, 4, 4, 4, 1, 0, 0, 4], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1, 2, 2, 0, 4, 1, 5, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1], [0], [2, 0, 0, 4, 3, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 4, 3, 4, 1, 0, 3, 2, 4, 2, 3, 1, 0, 3, 1, 4, 2, 1, 4, 1, 2, 2, 3, 0, 3, 4, 2, 2, 4, 4, 0, 1, 3, 2, 1, 4, 0, 1, 1, 1, 0], [2, 3, 3, 1, 0, 2, 0, 0, 2, 1, 0, 2, 1], [1, 0], [2, 2, 0, 0, 1, 2, 2, 1, 1, 1, 1], [0, 0, 2, 0, 2, 3, 0, 3, 2, 1, 2, 1, 0, 1], [17, 24, 23, 11, 10], [25, 25, 2], [5, 0, 0, 0], [20, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 2, 6, 1, 4, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 26, 26, 16, 1, 72, 16, 19, 5, 11, 17, 14, 1, 57, 13, 2, 11, 14, 5, 3, 4, 2], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = (in1 + in0[len((\"\"R\"\" + saveChr(divInt(abs(int(0.0)),mod(len(in0),int(6.0))))).lstrip()):mod(divInt(int(5.0),int(2.0)),i1)].rstrip()[mod(len(\"\"Y\"\"),int(8.0)):]).capitalize() not in in1\\ns1 = getCharFromString((\"\"5\"\".capitalize() + s2), i0)\\ns2 = (getCharFromString((\"\"X\"\" + s0)[:mod(i0,mod(int(1.0),int(7.0)))], saveOrd((\"\"0\"\" + getCharFromString(\"\";\"\"[( max(int(7.0), divInt(abs(int(9.0)),i1)) + ( int(8.0) * i2 ) ):], i2))))[mod(divInt(max(int(5.0), abs(i1)),i2),( i0 + i0 )):int(0.0)] + \"\"L\"\".capitalize())\\ni2 = ( int(4.0) - i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( int(8.0) != max(max(saveOrd((in1 + (saveChr(( int(59.0) + saveOrd(getCharFromString(s1.capitalize(), i0)[:int(9.0)][:i0]) )) + \"\",\"\"))[:int(2.0)][saveOrd((\"\"0\"\"[:int(2.0)] + saveChr(max(min(i0, min(i0, int(0.0))), int(6.0))))):]), saveOrd(in2)), mod(int(29.0),int(226.0))) or ( \"\"z0\"\".endswith(\"\"zK\"\") and True ) ):{:\\ns2 = \"\"c\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 1, 7, 7, 7, 9, 8, 4, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 3, 3, 3, 3, 1, 2, 1, 1, 1, 0, 2, 2, 2, 1, 0, 3, 0, 2, 0, 2, 0, 2, 1, 1, 2, 1, 1, 2, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 4, 4, 2, 2, 0, 1], [0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 5], [1, 0, 1], [0], [2, 0, 4, 2, 0, 2, 2, 2, 2, 0, 4, 3, 4, 0, 0, 1, 0, 1], [2, 1, 3], [3, 0, 0], [2, 2, 0, 1, 2, 0], [1, 1, 1], [17], [20, 19, 21], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 7, 0, 34, 11, 6, 7, 4, 7, 3, 1, 18, 3, 1, 6, 3, 0, 3, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1[divInt(len(in1[min(saveOrd(saveChr(saveOrd((in0.lstrip(s0) + \"\"u\"\")))), int(2.0)):( int(7.0) + int(0.0) )][int(2.0):][:i0][( mod(( int(1.0) - i2 ),abs(i1)) - ( i0 * ( i1 - ( int(7.0) * int(7.0) ) ) ) ):divInt(int(7.0),int(9.0))]),( divInt(int(8.0),i2) - i1 )):].capitalize()):]:{:\\nres0 = in1 != \"\"tv\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 0, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 2, 1, 2], [0, 1, 1], [3, 0, 2, 0, 0, 0, 3, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 0, 2, 3, 2, 1, 0, 1, 3], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 5, 4, 4, 0, 4, 1], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [2, 3, 1], [17], [12], [8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 2, 1, 6, 1, 2, 3, 2, 1, 0, 11, 11, 15, 0, 51, 15, 10, 8, 7, 8, 3, 1, 16, 2, 0, 4, 3, 0, 1, 1, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = in1[i1:] not in in1\\nb2 = ( ( i2 * i1 ) != i2 or ( \"\"8\"\"[max(int(0.0), divInt(( int(7.0) + i1 ),i2)):mod(divInt(i1,i2),divInt(min(( i0 * ( abs(mod(len(s0[i0:( abs(int(5.0)) - i0 )]),int(7.0))) + int(6.0) ) ), max(i0, divInt(int(1.0),min(int(7.0), max(i2, mod(( ( int(7.0) * int(9.0) ) - ( int(8.0) - i1 ) ),int(5.0))))))),len((\"\";\"\" + saveChr(i2)).capitalize())))].endswith(in1) and True ) )\\ns1 = \"\"m\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 2, 1, 0, 2, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 1, 0, 0, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [8], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i1 != len(\"\"I\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 0, 1], [0], [2, 4, 4, 2, 0, 2, 2, 2, 0, 2, 4, 0, 4, 0, 1, 1, 0], [2, 2, 3, 3], [5, 0], [2, 2, 1, 0, 1, 1], [0, 0, 1, 2, 3, 2], [17, 22], [21], [5, 2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 4, 0, 7, 0, 2, 0, 0, 5, 6, 1, 16, 4, 2, 6, 6, 2, 1, 2, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1[:i0][i2:int(0.0)][:i1]):].capitalize().capitalize()[len(in1.strip(in0.lstrip())[:i0]):]:{:\\nres0 = \"\"R\"\" != \"\"Wv5;2\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1, 1], [0], [2, 0, 2, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1, 2], [0, 0], [17, 22], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 12, 2, 3, 1, 1, 5, 2, 1, 16, 3, 1, 6, 2, 2, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(s0[( int(0.0) + i1 ):].capitalize()[:len(saveChr(i2))][int(7.0):mod(int(2.0),i1)]):][i0:]):]:{:\\nres0 = (\"\"R\"\" + in0.rstrip()) not in \"\"W\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [2, 2], [1, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 6, 2, 21, 7, 5, 4, 4, 4, 1, 0, 7, 0, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[mod(len(in2),len(in0[:i0])):] in in1:{:\\ni1 = abs(( int(0.0) + int(7.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += divInt(int(5.0),min(i0, divInt(( ( int(7.0) - i1 ) - divInt(len(\"\";\"\"),int(7.0)) ),i2)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 1, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 3, 2, 3, 1, 1, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 2, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 1, 0, 1, 3, 0, 1, 3, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1, 2, 2, 3, 1, 3, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 2, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 1, 1], [5], [16, 6], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 14, 14, 11, 0, 55, 15, 15, 7, 8, 7, 4, 1, 16, 3, 1, 5, 4, 1, 2, 0, 1], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = ( ( len(in1.capitalize()[divInt(int(0.0),len(in0[divInt(min(int(7.0), int(5.0)),int(7.0)):len(s0[i0:min(( divInt(int(6.0),i1) + divInt(max(divInt(i0,( abs(( max(i1, divInt(abs(int(1.0)),i1)) + int(7.0) )) * int(7.0) )), abs(i2)),( mod(len(saveChr(int(9.0))),max(i1, divInt(( ( int(8.0) - i2 ) + ( int(5.0) * i0 ) ),int(0.0)))) - len(\"\"F\"\"[:i0]) )) ), int(4.0))])])):]) != min(i2, int(8.0)) or True ) and in1.rstrip() not in \"\";qg\"\" )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 0, 1, 1, 2, 1, 2, 0, 0, 0, 1, 1, 2, 1], [0, 1, 1], [3, 3, 2, 0, 2, 2, 0, 0, 0, 2, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 1], [0], [2, 0, 0, 2, 1, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 3, 1, 3], [12], [12], [], [20, 16, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 15, 0, 52, 16, 11, 7, 9, 4, 5, 1, 8, 0, 0, 3, 5, 1, 1, 0, 3], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"M\"\"[min(mod(i2,mod(( i0 + i0 ),i1)), divInt(abs(min(i1, divInt(divInt(int(0.0),i2),( len(in1) + ( i1 * divInt(min(( max(i2, mod(abs(int(2.0)),i0)) - int(5.0) ), int(7.0)),i0) ) )))),i0)):] not in \"\";-m+\"\"[divInt(int(6.0),max(int(1.0), max(i1, ( ( ( int(7.0) + int(7.0) ) * mod(int(9.0),i1) ) - int(8.0) )))):max(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [1], [17], [7], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 3, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != \"\"h\"\"\\ni0 = abs(i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 1, 0, 0], [0, 1], [0, 1, 2], [0], [0, 0], [], [], [0, 2, 3], [0, 4, 0], [2, 0, 1, 1, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 3, 4, 8, 5, 9, 9, 2, 2, 0, 4, 5, 6, 8], [1, 1, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 0, 0, 1, 0, 1], [0, 1, 1], [3, 3, 1, 1, 2, 2, 0, 3, 2, 2, 3, 0, 0, 3, 2, 1, 1, 2, 2, 2, 0, 2, 3, 0, 3, 0, 2, 3, 1, 1, 2, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 0, 1, 0, 1, 2, 1, 1, 3, 2, 2, 1, 2, 2, 3, 2, 3, 2, 3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 0, 0, 3, 2, 0, 3, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0], [1, 3, 4, 0, 0, 0, 1, 2, 1, 2, 1, 1, 3, 0, 2, 2, 3, 3, 2, 3], [2, 0, 2, 2, 0, 2, 1, 0, 2, 0, 0, 1, 1, 2, 2], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 0, 4, 4, 1, 0, 4, 1], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 0, 1, 4, 3, 4, 0, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0, 2], [17], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 0, 0, 0, 1, 2, 4, 2, 1, 1, 1, 0, 1, 24, 24, 17, 0, 87, 27, 20, 15, 12, 8, 2, 1, 16, 2, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[max(len(in1), int(9.0)):]:{:\\nif in1[int(7.0):] != s1:{:\\nb0 = ( mod(( i1 * saveOrd(s0[( ( min(i1, i2) + min(divInt(int(5.0),int(7.0)), divInt(( ( i0 * divInt(min(i1, max(i1, ( abs(int(6.0)) * int(1.0) ))),divInt(int(7.0),int(7.0))) ) + i1 ),divInt(int(9.0),max(int(8.0), abs(i2))))) ) * ( ( ( int(5.0) - int(3.0) ) + mod(int(4.0),i0) ) * int(8.0) ) ):divInt(int(59.0),i0)][int(9.0):]) ),i2) \\l int(2.0) or mod(int(2.0),int(0.0)) \\le max(( ( int(4.0) + ( divInt(max(( len(\"\"R\"\") + ( min(abs(abs(i2)), len((saveChr(mod(int(5.0),int(6.0))) + in1).rstrip())) - divInt(int(8.0),len(s1)) ) ), i0),i0) - i1 ) ) * abs(( i0 * len(\"\"6\"\") )) ), i1) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 9, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 3, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 4, 0, 3, 2, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 3, 3], [1, 0, 4], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 11, 0, 40, 13, 8, 7, 6, 7, 2, 1, 16, 3, 3, 4, 2, 1, 0, 0, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nres0 = s0[len(in0):] not in s2[( int(0.0) + i0 ):mod(( abs(int(1.0)) - int(9.0) ),mod(i2,i2))].rstrip()[divInt(divInt(int(7.0),i2),( min(( i1 * ( len((\"\"R\"\" + in1.rstrip(\"\";\"\")).lstrip()) - ( min(i2, divInt(i1,divInt(i2,int(6.0)))) + int(1.0) ) ) ), i0) * i0 )):( int(7.0) - max(int(7.0), abs(i0)) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 2, 1, 1, 7, 0, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 1, 1, 0, 0, 1], [0, 1, 1], [3, 3, 3, 2, 0, 3, 3, 0, 0, 1, 1, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1, 0, 0, 1, 0, 1], [0], [2, 0, 4, 1, 0, 4, 0, 4, 2, 0, 1, 3, 4, 4, 0, 4, 0, 1], [3, 3, 3, 3, 0, 3], [1, 0, 0, 0, 3], [2, 2, 2, 2, 1], [0, 3, 3, 3, 3, 1], [17], [15], [], [20, 27, 0, 19]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 2, 2, 3, 0, 11, 1, 5, 0, 1, 6, 6, 0, 18, 6, 5, 2, 6, 1, 1, 0, 4], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(\"\"R\"\".rstrip()):].endswith(in2):{:\\nres0 = ( len(in1.lstrip()) != min(divInt(i0,min(len(in1[i2:].lstrip()), i1)), int(7.0)) or ( \"\";\\\\\\\\\"\".endswith((getCharFromString(s2, int(7.0)).lstrip() + s0.lstrip(\"\":p\"\"))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0, 1, 2, 1, 2, 1, 1], [0, 1, 1], [3, 3, 2, 0, 0, 2, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 0, 0, 4], [1, 1], [0], [2, 0, 2, 4, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [1, 2, 0, 0, 1], [0, 1], [17], [3], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 16, 1, 49, 14, 9, 6, 8, 5, 2, 1, 16, 4, 1, 4, 2, 1, 1, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[:max(len(in1.capitalize()[mod(i1,i2):]), mod(i2,i2))]:{:\\nres0 = (saveChr(i1)[int(5.0):abs(i2)] + in1[i1:( divInt(int(7.0),i2) + divInt(min(divInt(i0,( len((\"\"R\"\" + getCharFromString(s0, ( min(i0, divInt(max(int(5.0), i1),int(7.0))) + int(6.0) ))).rstrip()) * i2 )), i1),( int(1.0) - abs(int(7.0)) )) )]) not in \"\"d\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = max(i1, mod(divInt(( int(7.0) + int(9.0) ),( int(8.0) * i1 )),int(5.0)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4, 3], [1, 0, 1], [0], [2, 0, 0, 2, 0, 2, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 2, 0], [17, 13], [], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 16, 16, 10, 0, 50, 15, 10, 9, 6, 8, 3, 1, 17, 2, 0, 5, 3, 2, 0, 1, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in2[len(in0[i1:][int(0.0):abs(mod(i1,int(7.0)))]):] not in s0[:mod(int(5.0),min(i1, ( divInt(( int(7.0) + i1 ),( len(getCharFromString((\"\"R\"\" + saveChr(min(i0, ( max(( int(2.0) + i2 ), divInt(abs(int(1.0)),i1)) * int(7.0) )))), int(7.0))) - i1 )) + ( divInt(int(9.0),max(int(8.0), len(in1))) * i2 ) )))]:{:\\nres0 = ( divInt(( ( int(5.0) - int(0.0) ) - ( int(4.0) * i2 ) ),int(8.0)) != int(59.0) or ( \"\"3N\"\".endswith(in0) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 3, 3, 0, 2, 1, 3, 3, 2, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 2, 2, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0, 0], [17, 16], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 12, 12, 11, 0, 50, 14, 13, 7, 7, 7, 2, 1, 15, 3, 1, 3, 2, 2, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nloopBreak% = 0\\nwhile in1[len(in0):] not in \"\"R\"\".capitalize()[abs(min(i2, mod(int(0.0),len(s1)))):min(( max(int(7.0), i1) + ( divInt(int(5.0),i2) + divInt(abs(divInt(i0,( max(( max(i1, divInt(abs(int(7.0)),i2)) * int(6.0) ), int(1.0)) - i1 ))),i2) ) ), ( int(7.0) + abs(int(7.0)) ))]:{:\\nb1 = ( abs(i0) != divInt(mod(( int(9.0) * int(8.0) ),( int(5.0) - i0 )),int(0.0)) or ( saveChr(i0).endswith((\"\"Q\"\" + in1.rstrip())) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 2, 1, 1, 3, 1, 0, 1, 0, 2, 2, 2, 1, 0, 2, 1, 2, 0, 2, 0, 2, 1, 1, 2, 1, 1, 2, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 4, 2, 2, 0, 1], [0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 5], [1, 1], [0], [2, 0, 0, 2, 0, 1, 2, 2, 2, 0, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [3, 0, 0], [0, 2, 0, 1, 2, 0], [1, 3], [17], [20], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 11, 11, 7, 1, 33, 10, 6, 5, 5, 6, 2, 0, 16, 2, 0, 5, 2, 0, 1, 0, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in2[len(in2):len(in1[abs(saveOrd(\"\"u\"\")):])] != in1[( int(2.0) + int(7.0) ):][:saveOrd((saveChr(int(0.0)) + in0).capitalize())][i0:int(2.0)]:{:\\nres0 = ( i2 != divInt(( mod(int(5.0),i1) - divInt(int(5.0),mod(i0,( i1 - ( int(7.0) * int(7.0) ) ))) ),divInt(int(9.0),int(8.0))) or ( s0.endswith(\"\";\"\") and True ) )\\n:}else:{:\\ni2 = ( abs(int(5.0)) - i1 )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 1, 0, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 5, 1, 1, 6, 0, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(\"\";\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 3, 1, 2, 3, 1, 2, 2, 1, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 1, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1, 1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 9], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 3, 0, 22, 7, 5, 0, 7, 7, 2, 1, 17, 3, 2, 5, 2, 2, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0[:divInt(abs(int(0.0)),mod(len((\"\"R\"\" + in0.lstrip()).rstrip()),int(6.0)))].capitalize()[mod(divInt(int(5.0),int(2.0)),i1):mod(len(\"\"J\"\"),int(8.0))][i0:mod(i0,mod(int(1.0),int(7.0)))]):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 8, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 2, 2, 1, 1, 2, 1, 0, 2], [0, 1, 1], [3, 0, 0, 3, 0, 2, 1, 1, 2, 2, 0, 0, 3, 2, 3, 1, 0, 2, 0, 2, 0, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 2, 0, 2, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 4, 4, 1, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1], [3, 5, 2, 4, 3, 4, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 1, 0, 0, 1], [1], [17], [24], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 10, 0, 31, 8, 7, 2, 6, 8, 1, 1, 15, 2, 0, 5, 1, 0, 1, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(s2):]:{:\\nres0 = in1[:i1] not in in0\\nin1 = in1[:i0][abs(i1):mod(int(6.0),int(1.0))][mod(( i2 + i2 ),abs(mod(min(int(8.0), i1),divInt(i1,mod(i2,int(2.0)))))):saveOrd(getCharFromString((\"\"y\"\" + saveChr(mod(saveOrd(s1),int(8.0)))), ( max(i1, i0) + int(1.0) )))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 1, 8, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 2, 2, 2, 1, 2, 1, 0, 2, 2, 2, 0], [0, 1, 1], [3, 1, 0, 3, 1, 2, 1, 1, 2, 2, 2, 0, 3, 2, 3, 0, 0, 2, 0, 2, 0, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 2, 0, 2, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 4, 4, 1, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [3, 5, 4, 4, 3, 4, 4, 1], [1, 0, 1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 4, 1, 0], [0, 1, 3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 2], [17], [], [5, 5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 14, 0, 48, 15, 9, 7, 8, 6, 3, 1, 16, 5, 2, 4, 3, 1, 0, 2, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, int(9.0))[i1:] not in saveChr(abs(int(1.0)))[mod(int(8.0),int(2.0)):mod(( mod(i0,abs(( min(i1, i2) + divInt(i2,mod(i2,int(8.0))) ))) + saveOrd(in0[( saveOrd((\"\"R\"\" + saveChr(int(1.0))).rstrip()) * divInt(max(i1, i2),int(8.0)) ):( i1 - mod(divInt(( abs(int(7.0)) + max(i0, i2) ),( i2 * i2 )),int(9.0)) )]) ),( int(8.0) - i0 ))]\\nin1 = \"\"55\"\".lstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 1, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 3, 1, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1, 1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 1, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 2], [13], [], [5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 17, 6, 4, 1, 5, 5, 2, 1, 10, 1, 0, 3, 2, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"N\"\"[len(in2):]:{:\\nres0 = in1[len(in1):] not in \"\"5\"\".capitalize()[( int(0.0) + i1 ):mod(abs(int(5.0)),mod(mod(divInt(int(1.0),i2),mod(len(in0),int(2.0))),i0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 1, 1, 1, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 0, 2, 0, 0, 0, 2, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 0, 3, 3, 0, 4], [1], [0], [2, 4, 0, 1, 0, 0, 4, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 6, 1, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize()[len(\"\"4\"\"):]:{:\\nres0 = s0 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 3, 2, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 2], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 4, 4, 4, 0, 19, 4, 7, 2, 2, 8, 1, 0, 18, 3, 1, 5, 1, 0, 0, 0, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2[len(in2):] != in1[len(in1):]:{:\\nres0 = ( i0 != int(6.0) or ( saveChr(int(1.0)).capitalize()[mod(i2,int(1.0)):abs(( i1 + i0 ))][:( saveOrd((in0.rstrip() + s0)) + divInt(int(2.0),len(\"\";\"\")) )][abs(saveOrd(in1)):].endswith(s2) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1, 0, 1], [0], [2, 1, 4, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 3], [17], [], [8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 3, 3, 1, 8, 2, 0, 2, 3, 1, 0, 1, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[int(0.0):]:{:\\nres0 = getCharFromString(in2[len(in1):], len(\"\"8;\"\")).endswith(saveChr(i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 1, 1, 3, 0, 3, 2, 2, 1, 2, 3, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 5], [1, 1], [0], [2, 1, 0, 1, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0], [0, 10], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 2, 1, 4, 0, 0, 1, 2, 2, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"A\"\"[len(in2):]:{:\\nin1 = \"\"K\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0, 0], [0, 1, 1], [3, 3, 2, 3, 2, 2, 3, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 2, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 1, 0, 1], [0, 0], [24, 18], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 12, 0, 49, 15, 11, 11, 4, 6, 2, 1, 15, 2, 0, 5, 2, 2, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1[:len(in1)]):][:( abs(( ( min(i1, i2) + int(0.0) ) + len(\"\"Y\"\"[i2:i2]) )) * mod(( int(7.0) - i1 ),( min(( i2 + ( max(divInt(abs(i1),( max(int(5.0), i2) * int(7.0) )), int(6.0)) - i0 ) ), i0) - divInt(int(1.0),len(in0[:int(7.0)])) )) )]:{:\\nres0 = (\"\"S\"\" + saveChr(min(i0, divInt(( ( int(7.0) * int(9.0) ) + ( int(8.0) + i0 ) ),int(5.0))))).capitalize() not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0], [1, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 1, 4, 0, 0, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 0, 1, 0, 1], [2], [17], [], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 1, 0, 5, 1, 1, 7, 1, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = \"\"3\"\" != in1.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += len(s2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 3, 2, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [10], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 11, 0, 49, 15, 10, 8, 7, 6, 2, 0, 16, 3, 1, 4, 2, 1, 1, 0, 0], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[len(in1):]:{:\\nb0 = ( ( int(0.0) + i0 ) != mod(i1,int(7.0)) or ( in0[abs(( min(int(5.0), i2) + mod(divInt(int(7.0),i0),divInt(len(saveChr(( i1 * ( min(divInt(max(i2, ( abs(int(6.0)) - i1 )),int(1.0)), int(7.0)) + i2 ) ))),i0)) )):divInt(int(7.0),max(int(9.0), len((\"\"R\"\" + s1.rstrip()))))].capitalize()[i0:mod(( ( int(8.0) * int(5.0) ) - ( int(0.0) - i0 ) ),int(4.0))].endswith(\"\"k\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 1, 2, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0, 0, 2], [17, 16], [], [7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 0, 0, 8, 1, 3, 0, 1, 4, 3, 1, 10, 0, 0, 5, 3, 2, 0, 1, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1[len(in1):] != \"\"Q7\"\"[abs(int(6.0)):][:int(7.0)][:mod(int(9.0),int(2.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 6, 1, 5, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 1, 3, 1, 2, 2, 2, 1, 0, 2, 2, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 2, 3, 3, 4, 1], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 1, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [3], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 8, 8, 3, 0, 22, 7, 4, 1, 6, 5, 1, 0, 11, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2[len(in2):] not in in1[saveOrd(s2):]:{:\\nres0 = ( ( int(3.0) + int(6.0) ) != int(1.0) or ( \"\"D\"\".capitalize()[abs(int(5.0)):divInt(mod(mod(int(7.0),i1),divInt(mod(int(1.0),i2),len(in0))),i0)].endswith(saveChr(divInt(int(7.0),int(7.0)))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 2, 2, 0, 0, 0, 0, 2, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 1, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [12], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 5, 0, 10, 3, 2, 1, 2, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in \"\"M\"\"[len(in2):]:{:\\nb2 = in1[min(mod(i2,mod(( i0 + i2 ),i1)), i1):] not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 0, 0, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [0, 1], [0], [1, 0, 0, 2, 4, 0, 4, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 1], [0, 0], [17, 14], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 1, 3, 0, 0, 0, 2, 2, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in \"\"RO\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 3, 3, 2, 2, 1, 2, 1, 3, 1, 0, 2, 2, 2, 1, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 1, 1, 2, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 1, 0, 2, 0, 1], [0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0], [5, 5, 4, 4, 3, 0, 4, 5], [1, 0, 1], [0], [2, 0, 0, 2, 4, 0, 4, 2, 2, 0, 4, 3, 4, 1, 0, 1, 0], [3, 1, 3, 0], [3, 0, 0], [2, 2, 0, 2, 1], [1, 0, 0], [17, 3], [20], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 0, 34, 12, 5, 6, 6, 6, 3, 1, 16, 4, 2, 4, 3, 2, 1, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.lstrip(saveChr(i0))[len(in0[abs(( divInt(int(2.0),( int(7.0) + saveOrd((getCharFromString(\"\"u\"\", int(0.0)) + s0).lstrip()) )) - i2 )):][( divInt(divInt(int(2.0),i1),( int(5.0) - ( i0 * mod(i1,( int(5.0) - i2 )) ) )) * divInt(int(7.0),int(7.0)) ):mod(max(int(9.0), i1),i2)]):] != \"\"RD\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 0, 0, 0, 3, 1, 2, 0, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 4, 4, 0, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [14], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 11, 3, 2, 2, 1, 4, 1, 1, 8, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[( abs(divInt(i2,i2)) - i1 ):]:{:\\nres0 = in1[len(s0):].capitalize() not in \"\"O\"\"[int(0.0):( i0 + int(2.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 1, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 1, 2, 2, 2, 1, 0, 0, 3, 1, 3, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 5, 3, 3, 4, 1], [1, 1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 2, 4, 3, 1, 4, 1, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 1, 2, 2], [17], [22], [6, 4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 2, 0, 18, 5, 6, 2, 3, 5, 4, 1, 16, 3, 1, 4, 4, 1, 1, 2, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in2[len(in0):] not in \"\"R\"\".capitalize()[( int(0.0) + int(6.0) ):mod(abs(int(1.0)),mod(( mod(int(2.0),i0) * i2 ),len(saveChr(int(7.0))[len((\"\"w\"\" + \"\"6\"\".rstrip())):saveOrd(\"\"4\"\")])))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 3, 0, 0, 0, 1, 0, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3, 3], [17], [], [], [20, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 5, 2, 1, 9, 1, 0, 1, 2, 0, 0, 0, 2], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in (in2 + in1)[len(in1):]:{:\\nres0 = \"\";\"\" not in in0\\ni0 = len(\"\"/\"\".capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 1, 2, 0, 1, 2, 2, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 5, 3, 0, 4], [1, 0, 1], [0], [2, 0, 1, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0], [3, 0, 3], [17], [], [], [20, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 0, 18, 5, 5, 3, 2, 6, 3, 1, 16, 3, 1, 5, 3, 1, 0, 0, 2], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(\"\";\"\"):]:{:\\nb1 = in1[len(in2):] != saveChr(int(3.0)).capitalize()[int(1.0):int(1.0)][:divInt(i0,int(2.0))][( ( i2 + i1 ) + divInt(abs(( int(5.0) * saveOrd((in0.rstrip() + s0)) )),len(\"\"R!\"\")) ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 0, 2, 5, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 1, 1, 2, 1, 2, 0, 0, 0, 1, 1], [0, 1, 1], [0, 3, 3, 3, 2, 2, 0, 1, 2, 1, 1, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 3, 1, 1, 2, 1, 1, 2, 3, 2, 0, 0, 2, 1, 0, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 3, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 4, 4, 2, 2, 0, 0], [0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 2, 4, 4, 4, 0, 0, 1, 0], [2, 1, 3], [3, 0, 0], [2, 2, 0, 1, 2, 0], [1], [17], [12], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 14, 14, 13, 1, 50, 17, 7, 9, 8, 6, 1, 0, 16, 3, 1, 6, 1, 0, 1, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in2[i0:] != in2:{:\\nres0 = ( len(in1[abs(abs(( divInt(i2,int(2.0)) + ( int(7.0) - int(0.0) ) ))):]) != i1 or ( in1.endswith(saveChr(mod(divInt(mod(int(2.0),i1),( saveOrd(in0.lstrip(s0)) - ( i1 * ( i2 - saveOrd(\"\"m\"\") ) ) )),int(5.0))).capitalize()[int(3.0):( int(7.0) * int(7.0) )][divInt(abs(divInt(i1,i2)),( int(9.0) - i0 )):][:int(8.0)][abs(i0):( ( mod(int(5.0),int(0.0)) - divInt(int(4.0),i0) ) * int(8.0) )]) and True ) )\\n:}else:{:\\ni1 = i1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 5, 2, 6, 1, 7, 2, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 4, 9, 7, 7, 1, 1, 6, 3, 1, 4, 8, 7, 0, 7, 8], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 2, 1, 0, 1, 2, 0, 2, 1, 2, 1, 0, 2, 3, 2, 2, 2, 2, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 1, 1, 3, 3, 3, 1, 1, 2, 2, 3, 2, 0, 2, 3, 3, 2, 2, 1, 3, 3, 1, 3, 1, 2, 1, 3, 3, 0, 0, 3, 0, 3, 0, 1, 2, 2, 3, 3, 0, 1, 0, 2, 0, 3, 1, 1, 0, 3, 2, 0, 2, 2, 3, 2, 1, 3, 1, 2, 1, 0, 2, 3, 3, 2, 0, 2, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [3, 1, 2, 0, 3, 2, 1, 0, 1, 4, 1, 1, 4, 4, 2, 3, 0, 2, 3, 0, 1, 0, 1, 1, 1, 4, 2, 2, 1, 4], [0, 0, 1, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2, 0, 2, 2, 0], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4, 2, 5, 3, 3], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 0, 0, 1, 0, 2, 1, 0, 2, 0, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0, 1], [0, 2, 2], [17], [], [0, 2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 34, 34, 23, 1, 120, 35, 30, 17, 18, 11, 3, 0, 23, 1, 0, 7, 3, 1, 0, 2, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[max(i0, int(3.0)):]:{:\\nres0 = ( abs(mod(( int(7.0) + i2 ),int(5.0))) != ( i2 + mod(int(2.0),( int(6.0) - i0 )) ) or ( in1.endswith(in0[:divInt(min(divInt(( mod(( len(getCharFromString((\"\"R\"\" + s0), int(1.0))) - i1 ),divInt(abs(int(7.0)),i2)) + int(2.0) ),int(9.0)), int(8.0)),i1)][mod(int(5.0),max(int(0.0), min(i2, ( ( ( int(4.0) - int(8.0) ) - divInt(int(59.0),i0) ) - int(9.0) )))):max(divInt(int(2.0),int(2.0)), saveOrd(in1))][max(max(int(4.0), int(9.0)), ( divInt(saveOrd(\"\"0\"\"),mod(i0,mod(saveOrd(s2),abs(divInt(( int(7.0) * len(\"\"2\"\"[min(int(7.0), abs(int(1.0))):( int(1.0) + len(in2) )]) ),min(i0, i1)))))) + max(i0, min(i2, int(6.0))) )):( ( max(max(i1, int(3.0)), i1) - divInt(i1,max(int(1.0), int(4.0))) ) * i1 )]) and True ) )\\n:}else:{:\\ni2 = saveOrd(in0[:( i2 + ( divInt(abs(( int(8.0) * abs(int(7.0)) )),divInt(int(0.0),i1)) * divInt(max(saveOrd(in0), mod(i2,( i1 + int(7.0) ))),int(8.0)) ) )])\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [8, 1, 4, 7, 6, 1, 7, 7, 9, 8, 5, 8, 4, 8, 5, 9, 9, 2, 2, 0, 3], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 2, 1, 2], [0, 1, 1], [3, 2, 0, 2, 3, 2, 0, 1, 2, 1, 3, 3, 3, 2, 2, 1, 0, 2, 3, 2, 3, 2, 3, 2, 3, 0, 1, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 1, 3, 0, 2, 2, 2, 1, 2, 2, 1, 0, 1, 1, 2, 2, 2, 3, 1, 2, 2, 3, 3, 2, 0, 1, 1, 0, 1, 3, 2, 1, 2, 0, 3, 3, 0, 3, 0, 2, 3, 3, 2, 2, 1, 3, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 2, 2, 1, 0, 1, 2, 1, 2, 3, 2, 1, 2, 4, 0, 0, 0, 4, 4, 1, 3, 4], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1, 1, 0, 2, 2], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 5, 4, 5, 4, 4, 4, 0, 3], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 0, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0, 1], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0, 2, 2], [17], [], [7, 6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 21, 21, 15, 0, 84, 26, 23, 16, 10, 9, 3, 1, 18, 2, 0, 4, 3, 1, 0, 2, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2[( i0 + mod(len(in1),( i2 + int(8.0) )) ):divInt(int(1.0),abs(abs(max(divInt(divInt(int(4.0),i2),( min(( max(divInt(abs(( max(i0, int(7.0)) * abs(int(6.0)) )),i1), int(1.0)) + int(7.0) ), i2) + i1 )), len(in1)))))] in in1[int(7.0):abs(int(9.0))][max(i2, divInt(mod(( int(8.0) * ( ( int(5.0) - i0 ) - int(8.0) ) ),int(4.0)),divInt(mod(mod(abs(int(8.0)),( ( saveOrd((\"\"R\"\" + saveChr(min(( i0 * int(59.0) ), int(9.0)))).capitalize()) + i0 ) + int(2.0) )),min(( int(2.0) - ( i0 - min(saveOrd(s0), i2) ) ), saveOrd(\"\"7\"\"))),i1))):( max(len(in0), ( ( int(0.0) + saveOrd(\"\"6\"\") ) * i2 )) * int(3.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 1, 1, 1, 1, 2, 0, 0, 1, 0, 1], [0, 1, 1], [3, 0, 3, 1, 2, 2, 0, 0, 2, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 3, 1, 3, 0, 4], [1, 0, 1], [0], [2, 4, 4, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 1, 2], [17], [11], [7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 13, 0, 49, 16, 9, 7, 9, 5, 3, 1, 15, 4, 1, 4, 3, 1, 1, 1, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in saveChr(len(in2[i2:])).capitalize()[len(in0):]:{:\\nres0 = \"\"R\"\"[int(6.0):mod(divInt(i1,i2),( divInt(abs(i1),i1) + divInt(divInt(int(1.0),i1),( min(( i1 + divInt(len(s1[( min(i2, mod(max(int(5.0), i0),int(7.0))) * int(6.0) ):i0]),i1) ), divInt(int(1.0),abs(int(7.0)))) - max(i0, ( ( ( int(7.0) + int(9.0) ) * mod(int(8.0),i1) ) - int(5.0) )) )) ))] not in (\"\"l7\"\" + in0.capitalize()).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 2, 6, 1, 7, 7, 9, 7, 8, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 1, 0, 1, 3, 3, 2, 3, 2, 1, 0, 2, 3, 2, 2, 2, 3, 3, 1, 2, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 1, 1, 0, 1, 4, 4, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 2], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 1, 0, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0, 2], [0], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 8, 0, 49, 14, 12, 9, 5, 7, 2, 1, 16, 2, 0, 5, 2, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(saveChr(i0), int(5.0))[:abs(mod(int(7.0),int(5.0)))][i2:int(2.0)][min(len((\"\"A\"\" + s0)), ( max(( int(6.0) + i2 ), ( max(( divInt(( min(max(int(1.0), ( divInt(saveOrd(in1),int(7.0)) + i0 )), int(7.0)) * int(9.0) ),int(7.0)) - i1 ), ( int(8.0) + saveOrd(\"\"6\"\") )) * i2 )) - max(i1, divInt(mod(( int(0.0) - int(4.0) ),( int(8.0) * i2 )),int(59.0))) )):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [0, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 3, 1, 0, 2, 4, 2, 1, 2, 4, 0, 4, 0, 1, 1, 0], [2, 2, 3, 3], [5, 0], [2, 1, 1, 0, 1], [0, 3, 2], [17], [], [7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 0, 2, 0, 0, 3, 3, 0, 12, 2, 0, 4, 3, 1, 0, 1, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in2[len((\"\"R\"\" + in2)):] != \"\";7\"\"[:len(in1.capitalize()[i0:int(0.0)])].capitalize()[:i2]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 2], [0, 0], [3, 5, 1], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 2, 2, 1, 1, 7, 0, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 1, 1, 3, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 5, 4], [1, 1, 0, 1], [0], [2, 0, 0, 0, 2, 0, 4, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [2, 2, 0, 1, 1], [0, 1, 0, 3], [17, 1], [18], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 3, 2, 2, 0, 0, 6, 6, 1, 0, 10, 2, 2, 1, 1, 7, 4, 1, 16, 4, 1, 2, 4, 2, 1, 0, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1 != in0[int(47.0):]:{:\\nres0 = ( divInt(int(5.0),i0) != ( int(2.0) * int(2.0) ) or ( saveChr(len(\"\"R\"\")).capitalize().endswith(in2) and (\"\"s\"\" + getCharFromString(in1, int(1.0))).rstrip() not in \"\"B;\"\" ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [23], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 3, 0, 0, 5, 1, 1, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != \"\"X\"\"[:abs(int(0.0))].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 6, 7, 2, 1, 7, 7, 9, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 1, 2, 3, 0, 2, 1, 1, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 2, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 0, 2, 1, 4, 0, 1, 2, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [6], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 2, 1, 1, 3, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"G\"\"):]:{:\\ni0 = min(i1, int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 4, 4], [1, 1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 3, 3], [1, 0], [2, 2, 2, 0, 1], [0, 1], [17], [19], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 7, 7, 11, 0, 34, 11, 5, 6, 5, 7, 2, 1, 17, 3, 2, 5, 2, 1, 1, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[len(saveChr(( int(0.0) + i0 ))[divInt(i2,int(1.0)):int(5.0)]):][int(7.0):] not in in0[:( i2 - i2 )]:{:\\nres0 = ( divInt(divInt(int(6.0),i1),divInt(abs(( i2 * ( min(( len((\"\"R\"\" + in1.lstrip()).rstrip()) - i1 ), ( i2 + divInt(i0,int(1.0)) )) * int(7.0) ) )),i0)) != i2 or ( \"\"t\"\".endswith(in1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 3, 2, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1, 1], [0], [2, 3, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 13], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 34, 10, 8, 4, 6, 6, 2, 1, 15, 3, 1, 3, 2, 2, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1[len(in1):])[len(getCharFromString(\"\"R\"\", mod(int(0.0),i1))[mod(i0,int(7.0)):abs(( min(int(5.0), i2) + divInt(divInt(int(7.0),i0),divInt(len(in0),( i1 + ( min(divInt(max(i2, ( abs(int(6.0)) * i1 )),int(1.0)), int(7.0)) - i2 ) ))) ))]):]:{:\\nres0 = saveChr(i0) not in (\"\"N\"\" + s1.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 2, 2, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1], [5, 2, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 4, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 1], [0], [16], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 9, 0, 49, 17, 9, 7, 10, 6, 1, 1, 15, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s2[len(in1):]:{:\\nres0 = in1.capitalize()[len(in0[divInt(int(0.0),len(saveChr(mod(( divInt(int(7.0),int(5.0)) + int(7.0) ),i0))[:divInt(divInt(( int(6.0) + i2 ),( min(divInt(i0,( len((\"\"Q\"\" + saveChr(mod(min(i1, divInt(max(int(1.0), i1),int(7.0))),int(7.0)))).rstrip()) * i2 )), i1) - ( int(9.0) + abs(int(8.0)) ) )),max(i2, ( ( mod(int(5.0),int(0.0)) * mod(int(4.0),i0) ) - int(8.0) )))])):]):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 0, 2, 1, 2, 0, 0, 0, 2, 2], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 2, 0, 4, 0, 1], [1, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [2, 2, 0, 2, 1], [0, 0, 1], [17, 20], [23], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 13, 1, 49, 14, 10, 7, 7, 9, 3, 1, 17, 4, 1, 3, 3, 2, 1, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(s2):] not in saveChr(mod(int(0.0),i0)).capitalize()[abs(i2):int(3.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( ( int(5.0) + min(i2, i1) ) != ( divInt(int(7.0),i0) + divInt(len(s0),divInt(i2,( min(( max(i1, divInt(abs(int(6.0)),i2)) * int(1.0) ), int(7.0)) - i0 ))) ) or ( (\"\"R\"\" + getCharFromString(in1, i0)).rstrip().endswith(\"\"Ux\"\") and True ) ):{:\\ni0 = ( int(7.0) + max(int(9.0), min(i2, divInt(mod(( int(8.0) * int(5.0) ),( int(0.0) - i2 )),int(4.0)))) )\\ns0 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 0, 7, 5, 7, 3], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0, 1, 1, 1, 0, 0, 1, 1, 1, 2, 0, 2, 0, 1, 2, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 3, 2, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 3, 3, 2, 3, 3, 1, 3, 3, 3, 2, 1, 2, 0, 2, 3, 3, 3, 0, 0, 1, 1, 0, 2, 1, 2, 2, 2, 0, 2, 3, 1, 3, 3, 2, 1, 3, 0, 0, 3, 3, 0, 2, 1, 2, 2, 3, 0, 0, 0, 3, 1, 0, 0, 2, 0, 2, 2, 3, 1, 0, 3, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0], [1, 0, 2, 0, 3, 0, 1, 2, 1, 1, 0, 4, 0, 2, 4, 2, 2, 0, 2, 0, 1, 0, 2, 3, 0, 3, 2, 2, 1, 3, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 2], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 5, 4, 4, 3, 1, 4, 3], [1, 1, 1], [0], [2, 2, 3, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0, 2, 0, 4, 1, 4, 0], [2, 1, 3, 1, 0, 2], [1, 0], [2, 2, 0, 0, 1], [0, 3, 0], [17, 22], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 24, 24, 28, 0, 113, 31, 31, 13, 18, 8, 3, 1, 23, 6, 1, 5, 3, 2, 0, 0, 1], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2[max(min(mod(int(0.0),i0), mod(i1,int(7.0))), abs(( min(int(5.0), i2) + divInt(divInt(int(7.0),i0),divInt(len(in1),( i1 + ( min(divInt(max(i2, ( abs(int(6.0)) * i1 )),int(1.0)), int(7.0)) - i2 ) ))) ))):i0] + saveChr(mod(int(7.0),max(int(9.0), max(i0, divInt(( ( int(8.0) + int(5.0) ) * ( int(0.0) - i2 ) ),int(4.0)))))).capitalize()[min(i0, saveOrd(in1)):min(mod(abs(saveOrd((\"\"R\"\" + saveChr(int(8.0))).rstrip())),abs(abs(min(divInt(int(59.0),mod(i1,( abs(min(max(i1, i1), int(9.0))) - int(2.0) ))), i0)))), ( int(2.0) * divInt(( divInt(i0,( min(int(0.0), abs(len(in0))) + divInt(int(7.0),min(i1, i1)) )) + len(\"\";\"\") ),abs(i1)) ))])[mod(int(5.0),( mod(abs(i2),i0) - i2 )):][max(int(7.0), i0):]:{:\\nres0 = ( ( i1 != divInt(i2,mod(( len(s1) * int(3.0) ),i0)) or True ) and in1[:saveOrd(getCharFromString(\"\"W\"\", i1))] in in0.capitalize() )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [1, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 3, 5, 7, 7, 1, 7, 7, 2, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 1, 1, 3, 0, 2, 2, 2, 1, 2, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 2, 1, 3, 0, 0, 3], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 1, 1, 2, 1, 2, 3, 3, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0], [0, 5, 3, 4, 3, 5, 4, 2, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 0, 0, 4, 0, 4, 0, 4, 0, 1, 2, 0, 1, 0], [3, 1, 3], [3, 0], [2, 2, 2, 2, 1], [0, 0, 2], [17, 22], [], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 0, 13, 13, 13, 1, 55, 17, 13, 11, 6, 10, 3, 1, 16, 3, 2, 3, 3, 2, 0, 1, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nb1 = len(in1[int(9.0):]) != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( max(( i2 + ( int(3.0) + int(5.0) ) ), min(i2, divInt(( ( int(7.0) * mod(( len(in0) - max(i0, ( max(( int(7.0) + i0 ), ( abs(int(1.0)) * i2 )) - int(7.0) )) ),int(7.0)) ) - i0 ),max(divInt(int(2.0),abs(mod(len(in2.lstrip(saveChr(i2))),( ( ( int(7.0) * int(5.0) ) + mod(int(0.0),i0) ) + i0 )))), divInt(int(4.0),len(in1)))))) \\l i2 or ( s2.lstrip() not in \"\"R\"\" and True ) ):{:\\ni0 = i0\\ns0 = in1[saveOrd(\"\"W0\"\"):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [2, 1, 0, 0, 0, 2, 1, 0, 2, 0, 1, 1, 0], [0, 2, 0], [0, 1, 2, 0, 1, 2, 0, 0, 2, 1], [0, 0], [0, 0, 0, 0, 0, 0], [], [], [3, 2, 3, 1, 1], [5, 0, 0], [1, 0, 1, 0, 2, 0, 0, 2, 2], [0, 0], [1, 5, 2], [3, 3, 1, 0], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 2, 3], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 1, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 2], [0, 1, 1], [0, 0, 2, 0, 2, 0, 3, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 3, 2, 0, 2, 3, 2, 2, 0, 1, 3, 3, 0, 1, 1, 2, 3, 0, 2, 3, 1, 0, 1, 2, 1, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 0, 2, 3, 2, 1, 0, 1, 3, 2, 1, 0, 2], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [1, 5, 4, 4, 3, 0, 4, 5, 4, 2, 3, 2, 4, 5], [1, 1, 1, 0, 1, 0, 0, 1], [0, 0], [0, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0, 0, 1, 1], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [2, 1, 2, 3, 3, 1, 0, 3], [17], [6, 0], [5, 9], [20, 26, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 13, 13, 3, 10, 2, 6, 0, 0, 5, 2, 9, 2, 3, 4, 2, 1, 0, 21, 21, 23, 3, 76, 23, 14, 11, 14, 14, 8, 2, 20, 2, 0, 3, 8, 1, 2, 2, 3], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2:{:\\nres0 = i1 != i2\\ni1 = ( i0 - divInt(i1,saveOrd(in1)) )\\nin1 = in0\\nb2 = ( int(0.0) \\l ( mod(int(7.0),i2) + i1 ) or ( s0[divInt(divInt(i2,i0),( max(( i0 * mod(min(( abs(i1) - divInt(len(in1),int(5.0)) ), i1),int(7.0)) ), int(6.0)) + abs(i0) )):] not in \"\"5\"\"[mod(int(1.0),max(int(7.0), min(i0, ( ( ( int(7.0) * int(9.0) ) - divInt(int(8.0),i0) ) - int(5.0) )))):] and True ) )\\nloopBreak% = 0\\nwhile res0:{:\\ni2 *= i0\\nin2 = in1[max(divInt(i2,( len((\"\"g\"\" + saveChr(mod(mod(i0,int(0.0)),abs(max(i2, int(4.0)))))).capitalize()) + int(8.0) )), mod(min(i0, mod(abs(int(59.0)),i0)),int(9.0))):mod(int(2.0),int(2.0))]\\nloopBreak% = 0\\nfor s2 in in0:{:\\nb1 = \"\"9\"\".endswith(s2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = in1 == \"\";[\"\"\\nin2 = \"\"aR(\"\"\\ni2 += int(23.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0, 1, 1, 0, 2, 2, 1, 1], [0, 1, 1], [3, 3, 2, 2, 0, 2, 0, 1, 2, 1, 2, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 3, 0, 2, 0, 0, 3, 2, 0, 3, 1, 1, 2, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2, 1, 4], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 5, 4, 4, 1, 4, 4], [1, 1], [0], [2, 0, 0, 2, 0, 1, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 18, 0, 66, 22, 12, 9, 13, 6, 2, 1, 15, 2, 1, 5, 2, 1, 0, 0, 1], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[max(( mod(i0,( i2 + int(0.0) )) + mod(int(8.0),divInt(abs(i2),divInt(( int(5.0) - i2 ),( min(( i1 * ( len(\"\"R\"\") - divInt(min(i2, divInt(i1,( i2 * int(7.0) ))),int(6.0)) ) ), i0) - i0 )))) ), ( int(1.0) - max(int(7.0), abs(i0)) )):] not in s1[:( mod(divInt(int(7.0),int(9.0)),divInt(int(8.0),i1)) * int(5.0) )][max(mod(abs(i1),mod(i0,i2)), max(mod(i2,saveOrd((\"\";\"\" + in1.rstrip()).capitalize())), int(0.0))):int(4.0)][divInt(i1,i1):int(8.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0, 0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1, 1, 0, 1, 1, 0, 0, 0, 1], [0], [2, 0, 0, 3, 1, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0, 3, 2, 0, 1, 2, 1, 2, 0], [17, 18, 4], [22, 11], [0, 8, 8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 7, 1, 33, 9, 9, 3, 6, 6, 9, 1, 16, 3, 1, 2, 9, 3, 2, 3, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = (\"\"R\"\" + in1) not in \"\";\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(getCharFromString(\"\"0S\"\"[abs(i1):min(mod(int(0.0),int(7.0)), ( int(5.0) + len(saveChr(i2)) ))], divInt(divInt(( int(7.0) + i0 ),( max(int(7.0), i1) - max(len((\"\"w\"\" + s0.rstrip())), divInt(int(1.0),i2)) )),divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i1))))\\ns0 = \"\"8l8E\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 1, 1, 2, 0], [0], [7], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 0, 2, 0, 0, 5, 1, 1, 9, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0[len(in1):]:{:\\nres0 = in1[len(in0):i1] != \"\"H\"\"[:int(6.0)][:int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 4, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 3, 2, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1], [0], [2, 0, 0, 2, 2, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0, 1], [0, 1, 3, 1], [1, 0], [2, 2, 1, 1, 0, 0], [3, 3, 3, 3], [17], [], [], [20, 3, 20, 7]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 7, 0, 32, 8, 9, 6, 2, 7, 4, 1, 18, 3, 1, 6, 4, 0, 0, 0, 4], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nb1 = in1[:len(getCharFromString(saveChr(i0), int(6.0))[int(1.0):mod(i2,int(4.0))][abs(( i1 + i0 )):( saveOrd((in0.rstrip() + s0)) + divInt(int(2.0),len(\"\";\"\")) )][:abs(saveOrd(in1))])][min(i1, ( ( ( int(5.0) * i2 ) - ( max(int(5.0), i1) + int(7.0) ) ) * int(7.0) )):] != \"\";$\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 4, 2, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [8], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"I\"\":{:\\nres0 = in2 == in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 3, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1, 1], [0], [2, 1, 0, 2, 0, 1, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 1, 1], [17], [7, 2, 12], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 34, 10, 7, 4, 6, 4, 4, 1, 16, 3, 1, 5, 4, 1, 3, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[len(\"\"h\"\"):] not in saveChr(mod(int(0.0),int(7.0)))[:saveOrd((\"\"c\"\" + in1.rstrip()))][i0:int(5.0)].capitalize()[divInt(int(7.0),( i2 + i2 )):divInt(divInt(int(6.0),i1),divInt(min(( i1 + ( len(\"\"m\"\") * divInt(min(i2, ( max(int(1.0), i1) - int(7.0) )),int(7.0)) ) ), i2),i0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2, 0, 2, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 0, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 1, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 13, 13, 15, 1, 52, 14, 11, 6, 8, 5, 2, 0, 11, 2, 0, 3, 2, 1, 0, 0, 1], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):len(\"\"R\"\"[abs(int(8.0)):])] not in in1:{:\\nres0 = ( i0 != mod(i1,i2) or ( \"\";\"\".endswith(saveChr(divInt(int(7.0),min(i0, len(in1[( divInt(int(5.0),i1) + divInt(min(divInt(i2,( max(( abs(i1) + divInt(max(int(7.0), i2),int(6.0)) ), int(1.0)) * i0 )), i0),( int(7.0) - min(int(7.0), max(i0, mod(divInt(( int(9.0) + int(8.0) ),( int(5.0) * i2 )),int(0.0)))) )) ):i0]))))) and True ) )\\n:}else:{:\\ni2 = int(4.0)\\n:}\\nin0 = saveChr(i1)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 5], [2, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2, 0, 2, 2, 2], [0, 1, 1], [3, 3, 2, 2, 2, 2, 0, 3, 0, 1, 3, 2, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 3, 3, 3, 3, 3, 1, 3, 3, 3, 2, 3, 1, 0, 2, 2, 1, 2, 0, 1, 2, 3, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 0, 0, 2, 4, 2, 4, 2, 1, 0, 4, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [4, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 4, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 20, 20, 15, 0, 76, 22, 20, 9, 13, 6, 2, 1, 15, 3, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = len(in1.capitalize()[mod(divInt(divInt(divInt(i2,abs(i2)),int(4.0)),min(divInt(i2,divInt(( int(4.0) + i1 ),( len(\"\"R\"\"[mod(i1,( min(divInt(max(i2, divInt(abs(int(5.0)),i1)),int(7.0)), int(6.0)) + i2 )):i0]) * ( int(1.0) - max(int(7.0), min(i0, ( ( mod(int(7.0),int(9.0)) + divInt(int(8.0),i2) ) * int(5.0) ))) ) ))), i0)),min(abs(saveOrd(in0[abs(saveOrd(saveChr(int(0.0)))):abs(max(min(divInt(saveOrd((\"\"0\"\" + s0.rstrip())),int(4.0)), i2), ( ( int(8.0) - divInt(i2,int(59.0)) ) - ( min(int(9.0), int(2.0)) * i2 ) )))])), int(2.0))):]) != int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 1, 2, 2, 0, 3, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 0, 3, 3, 4, 1], [1, 1, 0, 0, 0, 1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 3, 3, 1, 0, 1], [17, 6], [4, 6], [], [20, 0]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 17, 5, 5, 1, 4, 6, 6, 1, 16, 3, 1, 4, 6, 2, 2, 0, 2], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = \"\"R\"\"[len(s0):] not in in0[( int(0.0) + int(6.0) ):divInt(abs(int(5.0)),mod(mod(i1,len((\"\";\"\" + in0.rstrip()).capitalize())),i2))].capitalize()[divInt(len(\"\"eGg\"\"),int(2.0)):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [1, 3, 0, 1, 1, 2, 0, 1, 3, 2, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [1, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 3, 4, 4, 0, 4, 3], [1], [0], [2, 0, 2, 2, 0, 0, 2, 2, 2, 4, 2, 3, 4, 0, 0, 1, 0, 0], [0, 1, 3], [1, 0], [2, 2, 2, 1, 0, 0, 2], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 5, 0, 21, 4, 7, 2, 2, 8, 1, 1, 18, 2, 0, 7, 1, 0, 0, 0, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[int(6.0):]:{:\\nres0 = in0[len(in1):][i0:] != getCharFromString((saveChr(int(1.0)) + in1)[int(1.0):], mod(i2,int(2.0)))[len(s0):( i1 - i0 )][( abs(divInt(int(5.0),saveOrd(\"\";\"\"))) * len(in1) ):abs(saveOrd(in0))][:i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 0, 2, 1], [0, 1, 1], [3, 2, 2, 1, 0, 0, 3, 1, 2, 2, 1, 0, 1, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 1, 2, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 3, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 2, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [25], [7], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 14, 1, 55, 18, 9, 8, 10, 5, 2, 1, 14, 2, 0, 5, 2, 1, 1, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[( divInt(int(0.0),i1) - i2 ):len(\"\"Z\"\"[int(7.0):( mod(int(5.0),i1) + int(7.0) )])][divInt(divInt(i0,i1),( min(( i2 * mod(abs(( len(in0[:i1]) - divInt(abs(int(6.0)),i2) )),int(1.0)) ), int(7.0)) + max(i0, mod(int(7.0),min(int(9.0), max(i0, ( ( ( int(8.0) * int(5.0) ) - divInt(int(0.0),i0) ) - int(4.0) ))))) )):] not in (\"\"h\"\" + saveChr(divInt(i0,int(8.0)))).capitalize()\\ni2 = divInt(i1,int(59.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 1], [0, 1, 1], [3, 2, 3, 3, 0, 2, 0, 3, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 2, 3, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1, 0, 1, 3, 3], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1, 0, 0, 0, 0, 1], [0], [2, 0, 0, 0, 0, 0, 4, 2, 4, 1, 4, 1, 1, 0, 0, 1, 0], [1, 0, 3, 2], [1, 0], [2, 2, 1, 2, 1], [0, 2, 1, 0, 3, 0, 1, 1, 0], [17, 14, 25, 4], [14, 6, 17], [8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 12, 12, 13, 1, 54, 17, 13, 9, 8, 6, 9, 0, 14, 3, 1, 2, 9, 4, 3, 1, 1], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s2[len(in2):] not in in1:{:\\nres0 = ( ( len(in1) + saveOrd(in0) ) \\l i0 or ( saveChr(( i2 - min(( int(1.0) * len(getCharFromString(\"\"R\"\", i2)[int(7.0):]) ), mod(mod(int(8.0),i0),divInt(min(( i1 - ( max(divInt(abs(i2),( max(int(6.0), i1) + int(6.0) )), int(1.0)) * i2 ) ), i0),divInt(int(7.0),min(int(7.0), max(i0, divInt(( ( int(9.0) - int(8.0) ) - ( int(5.0) * i0 ) ),int(0.0)))))))) )).endswith(\"\"8oO\"\".rstrip()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = mod(len(\"\";ZgrE\"\"),divInt(len(s0),i1))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 5, 4, 2], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [0], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 10, 1, 39, 11, 11, 4, 7, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = len(in1[abs(mod(i0,divInt(i2,int(8.0)))):]) != ( int(7.0) + min(i2, len(in0)) )\\ni0 = divInt(divInt(int(5.0),i1),divInt(min(( i2 + ( max(divInt(abs(i1),( max(int(7.0), i2) * int(6.0) )), int(1.0)) - i0 ) ), i0),mod(int(7.0),max(int(7.0), len(\"\"A\"\")))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 3, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 1, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 8], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 2, 1, 7, 0, 0, 2, 2, 2, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\"[len(in0):] not in \"\"I\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [0, 1, 1, 1, 1, 0, 1], [0], [2, 3, 0, 2, 0, 1, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 0, 0, 1, 2, 3], [17, 10, 12], [3], [3], [20, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 1, 34, 9, 9, 3, 6, 4, 7, 1, 16, 3, 1, 3, 7, 3, 1, 1, 2], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1[len(\"\"R;\"\"):])[len(\"\"K\"\"):]:{:\\nres0 = getCharFromString(\"\"M\"\"[abs(i0):min(mod(int(0.0),int(7.0)), ( int(5.0) + len(saveChr(i1)) ))], divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len((\"\"d\"\" + in1.rstrip())), divInt(int(1.0),i1)) )),divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2))) not in \"\"3+\"\"\\ni1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 4, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 2, 2, 0], [0, 2, 2, 3], [17], [], [5, 7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 4, 4, 1, 0, 8, 1, 2, 0, 1, 4, 4, 0, 10, 0, 0, 4, 4, 1, 0, 2, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s1[len(in2):] != in1[len(in1):]:{:\\nres0 = ( i1 != int(1.0) or ( \"\"R\"\"[int(0.0):][:mod(int(4.0),int(7.0))].endswith(\"\"57;\"\") and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 2, 2, 0, 0, 4, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0, 1], [17], [4], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 7, 0, 4, 0, 0, 6, 2, 1, 16, 3, 1, 5, 2, 1, 1, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1[:len(in1)][abs(int(8.0)):]):]:{:\\nres0 = \"\"R\"\"[i1:saveOrd((in0.rstrip() + s0).capitalize()[:i2])].capitalize() != \"\"e\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1, 1, 1], [1, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [1], [17], [21], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 6, 1, 1, 7, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:int(0.0)]:{:\\nres0 = in1 not in getCharFromString(in1, len(in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = \"\"v\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 8, 1, 8, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 1, 0, 3, 2, 4, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 1, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 3, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 2], [1, 0], [0, 2, 0, 0, 2], [0, 0], [17, 2], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 6, 0, 29, 7, 7, 4, 3, 6, 2, 1, 16, 3, 0, 4, 2, 2, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(s1):int(6.0)]:{:\\nres0 = (in1 + in0[i1:max(i2, int(8.0))].capitalize()[max(int(1.0), int(8.0)):min(len(saveChr(i1)), mod(( ( int(2.0) + i0 ) + mod(abs(int(5.0)),i1) ),divInt(i2,( int(7.0) + int(7.0) ))))])[( saveOrd((\"\"R\"\" + s0.capitalize())) * int(9.0) ):] not in \"\"C\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [2, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 2, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 3], [17], [], [4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 14, 14, 12, 0, 49, 16, 8, 8, 8, 7, 3, 1, 16, 3, 1, 4, 3, 1, 0, 1, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),( int(07.0) + i0 )):][( i2 + int(5.0) ):]:{:\\nloopBreak% = 0\\nwhile in1 not in in0:{:\\nb0 = ( mod(int(7.0),len(s0[i2:i0].capitalize()[divInt(divInt(int(6.0),i1),( abs(( i2 * divInt(min(( len(saveChr(i1)) - divInt(min(int(1.0), i2),int(7.0)) ), int(7.0)),i0) )) + i0 )):mod(int(9.0),max(int(8.0), abs(i0)))])) != ( ( ( int(5.0) * int(0.0) ) - divInt(int(4.0),i1) ) - int(8.0) ) or ( (\"\"R\"\" + in1.rstrip()).endswith(\"\"4;\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 0, 0, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 2, 1, 3, 1, 1, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1, 0, 0, 0, 1], [0], [2, 1, 0, 4, 0, 2, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 2, 2, 1], [0, 0, 3, 0, 3], [17, 21, 5], [], [], [20, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 13, 4, 3, 2, 2, 4, 5, 1, 10, 1, 0, 4, 5, 3, 0, 0, 2], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[saveOrd(in2):]:{:\\nres0 = in1.capitalize() == \"\"V;F/\"\"[( divInt(int(0.0),i1) - ( mod(int(7.0),len(in2[int(0.0):])) + int(0.0) ) ):][:abs(i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 0, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 3, 0, 2, 0, 3, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1, 3], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 1, 4, 3, 1, 4, 0, 5], [1, 1, 0, 1], [0], [2, 0, 0, 0, 0, 0, 4, 2, 4, 1, 4, 1, 1, 0, 0, 1, 0], [1, 0, 3, 2], [1, 0], [2, 2, 1, 2, 1], [0, 2, 2, 3], [17], [], [2, 9], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 3, 0, 0, 2, 1, 6, 1, 2, 3, 2, 1, 0, 6, 6, 8, 0, 33, 9, 10, 5, 4, 9, 4, 1, 15, 3, 1, 2, 4, 1, 0, 2, 1], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(s1):]:{:\\nres0 = in1 not in in0\\nb2 = ( len(s1) \\l saveOrd(saveChr(min(i2, ( i2 + len(getCharFromString(\"\"R\"\", ( int(1.0) - min(i2, int(7.0)) ))[( mod(int(8.0),i0) * mod(max(divInt(i1,( abs(( max(i2, divInt(len(\"\"2\"\".rstrip()),int(6.0))) - i1 )) + int(6.0) )), int(1.0)),i2) ):]) )))) or ( \"\"9;\"\".endswith(in1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = in2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 7, 1, 7, 2, 9, 8, 5, 0, 1, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 2, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 2, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 3, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 0, 0, 2, 3], [17, 19, 13], [], [9, 2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 16, 16, 13, 1, 53, 18, 8, 7, 11, 6, 6, 0, 16, 3, 1, 4, 6, 3, 0, 2, 1], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( i0 != int(0.0) or ( getCharFromString(in0[abs(mod(i2,int(4.0))):mod(int(5.0),min(i2, ( divInt(divInt(int(7.0),i0),mod(len(saveChr(( i1 * ( i2 - divInt(int(7.0),i1) ) ))),( len((\"\"R\"\" + s0.rstrip())) * int(1.0) ))) - mod(int(7.0),int(2.0)) )))], i2)[i0:divInt(int(9.0),( max(abs(i0), ( ( divInt(int(8.0),int(5.0)) + divInt(int(0.0),i0) ) * int(1.0) )) - i2 ))].endswith(\"\"9TN2;\"\") and True ) )\\n:}else:{:\\ni1 = divInt(int(8.0),int(59.0))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 1, 0, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 3, 1, 0, 7, 1, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = s2.capitalize()[:len(in2[len(\"\";\"\"):])] not in in1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 2, 1, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0], [24], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"Y\"\":{:\\nres0 = in2 != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 4, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 3, 1, 2, 1, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 3, 2, 3, 2, 1, 0, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 2, 0, 2, 2, 1, 4, 3, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 4, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 9, 0, 49, 15, 12, 7, 8, 6, 2, 1, 15, 3, 1, 4, 2, 1, 0, 0, 1], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1):]:{:\\nres0 = in1[max(mod(int(1.0),i2), i2):] not in \"\"R\"\"[abs(int(0.0)):divInt(int(4.0),min(abs(i2), ( divInt(int(7.0),i1) + divInt(min(divInt(abs(( abs(( int(6.0) + i1 )) * divInt(max(( i2 - int(1.0) ), int(7.0)),i1) )),i2), mod(int(7.0),saveOrd(in0[int(9.0):len(saveChr(len((\"\";\"\" + s0.rstrip()))))]))),divInt(( ( int(8.0) + int(5.0) ) * ( int(0.0) - i0 ) ),int(4.0))) )))].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 2, 1, 1, 3, 0, 3, 2, 2, 1, 2, 3, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 0, 3, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 1, 5], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [0], [], [2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 11, 0, 52, 14, 14, 6, 8, 7, 2, 0, 16, 2, 0, 4, 2, 1, 0, 1, 0], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( int(0.0) != i1 or ( in0[abs(mod(i2,mod(int(9.0),int(5.0)))):min(i2, len(s1[( divInt(int(7.0),divInt(min(max(abs(i1), divInt(max(divInt(int(6.0),i1), ( len((\"\"A\"\" + saveChr(int(1.0))).capitalize()) + i2 )),int(7.0))), int(7.0)),i1)) + min(mod(int(9.0),min(( len(in2) * i2 ), divInt(( ( int(8.0) - int(5.0) ) + ( int(0.0) * i0 ) ),i0))), int(4.0)) ):abs(i2)]))].endswith(\"\"2\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 3, 2, 1, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 4, 0, 1, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [0, 2, 2, 1, 1], [0], [16], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 1, 0, 12, 3, 4, 1, 2, 6, 1, 1, 10, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):len(in1.capitalize()[mod(int(0.0),len(\"\"Q\"\")):])]:{:\\nres0 = in0 not in in1[divInt(min(( int(7.0) + int(5.0) ), int(7.0)),i0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 3, 7, 7, 9, 7, 3, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 2, 2, 2], [0, 1, 1], [3, 0, 2, 3, 1, 1, 0, 1, 2, 2, 1, 0, 2, 2, 2, 3, 1, 2, 3, 2, 0, 0, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 1, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 0, 2, 0, 2, 1, 0, 1, 4], [0, 0, 2, 1, 0, 2, 2, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1, 1], [0], [2, 0, 2, 2, 4, 0, 1, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [4], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 8, 0, 39, 10, 10, 6, 4, 4, 2, 1, 10, 2, 0, 3, 2, 1, 1, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1.capitalize()[i1:( max(int(0.0), int(7.0)) + i2 )][int(5.0):]):]:{:\\nres0 = \"\"R\"\" not in getCharFromString(\"\"e\"\", divInt(( int(7.0) + i1 ),( mod(divInt(min(int(8.0), ( abs(( i0 * i1 )) - min(divInt(abs(i2),( max(int(3.0), i1) + int(7.0) )), int(7.0)) )),min(i2, int(9.0))),int(7.0)) * max(int(3.0), saveOrd(s1)) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1, 2], [0, 1, 1], [3, 1, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 0, 0, 4], [1, 0, 1], [0], [2, 1, 2, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 0, 1], [17, 3], [7], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 13, 0, 53, 16, 9, 7, 9, 3, 3, 1, 14, 4, 1, 5, 3, 2, 1, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(saveChr(int(8.0))[i0:mod(i2,divInt(( int(7.0) + divInt(int(5.0),len(in2)) ),i2))][min(divInt(divInt(int(7.0),i0),( min(( i1 + divInt(len(saveChr(( min(i2, mod(max(int(6.0), i1),int(1.0))) * int(7.0) ))[i2:i0]),divInt(int(7.0),abs(int(9.0)))) ), max(i0, ( ( ( int(8.0) - int(5.0) ) + mod(int(0.0),i1) ) * int(4.0) ))) - i1 )), int(8.0)):]):]:{:\\nres0 = in1[:i2] not in (\"\"Dh\"\" + saveChr(int(59.0))).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 7, 5, 2, 0, 1, 4, 2, 9, 8, 5, 7, 4, 8, 5, 6, 9, 2, 6, 6], [1, 2, 0, 0, 0, 2, 1, 2, 2, 0, 0, 2, 0, 2], [1, 1, 1], [3, 3, 2, 1, 1, 2, 2, 0, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 0, 3, 2, 3, 0, 2, 3, 0, 0, 3, 0, 1, 0, 2, 1, 3, 1, 1, 0, 3, 1, 2, 1, 1, 2, 1, 3, 1, 3, 3, 0, 3, 0, 2, 1, 2, 1, 3, 1, 2, 2, 1, 1, 0, 1, 3, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 1, 2, 0, 0, 2], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1, 1], [0], [2, 0, 2, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [3, 0], [2, 2, 0, 0, 1], [1, 3], [17], [20], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 10, 1, 30, 9, 7, 5, 5, 7, 2, 1, 16, 3, 1, 4, 2, 0, 1, 0, 1], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1.capitalize()[max(mod(int(5.0),int(7.0)), divInt(( i1 + int(5.0) ),int(2.0))):]):]:{:\\nres0 = in1 not in in0[len(s1[i2:i0]):divInt(( int(0.0) * i0 ),divInt(abs(( i0 * i2 )),len(saveChr(( len((\"\"u\"\" + in1.lstrip(\"\";\"\"))) + i1 )))))]\\ni2 -= divInt(abs(i2),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [0, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 3, 3, 0, 2, 0, 3, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1, 0, 0, 2], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 5, 3, 0, 4], [1, 1, 1, 1], [0], [2, 1, 0, 0, 2, 4, 4, 2, 4, 1, 4, 1, 1, 0, 0, 1, 0], [1, 0, 3, 2], [1, 0], [2, 2, 1, 2, 1], [0, 1, 0, 3], [17, 0], [8], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 11, 1, 40, 10, 12, 6, 4, 3, 4, 1, 13, 4, 1, 3, 4, 2, 1, 0, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1 not in saveChr(len(getCharFromString(\"\"i\"\".rstrip()[:saveOrd(\"\"A\"\".capitalize())], min(i0, ( i2 + len(\"\";\"\") )))))[( int(1.0) - min(i2, int(7.0)) ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = ( mod(int(8.0),i1) * mod(max(divInt(i2,( abs(( max(i1, divInt(min(int(6.0), i2),int(6.0))) - int(1.0) )) + i0 )), i0),( int(7.0) * min(int(7.0), abs(i0)) )) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 9, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2, 2, 2, 0, 2, 0, 1, 0, 2, 2], [0, 1, 1], [3, 3, 2, 3, 2, 2, 3, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 3, 2, 2, 3, 2, 0, 1, 2, 3, 3, 2, 2, 3, 2, 2, 0, 1, 0, 2, 1, 1, 2, 2, 3, 3, 1, 0, 2, 1, 0, 2, 1, 2, 3, 2, 3, 0, 1, 0, 3, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 1, 1, 1, 4, 3, 3, 4, 4, 1, 3, 4, 0, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0], [5, 5, 4, 4, 3, 0, 4, 3, 4, 5], [1, 1, 1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0, 4, 2, 2, 1, 0, 4, 4, 4, 4, 2, 0, 4, 1], [2, 1, 3, 3, 1, 3, 3, 3], [1, 0, 0, 3, 0], [2, 2, 0, 0, 1, 2, 2], [0, 3, 2, 0, 1], [17, 25], [14], [8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 21, 21, 20, 0, 93, 30, 23, 17, 13, 10, 5, 1, 30, 8, 5, 7, 5, 2, 1, 1, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[mod(abs(mod(( min(i1, i2) + int(0.0) ),len(s0[i2:i1]))),divInt(divInt(int(7.0),i1),divInt(min(( i2 + ( max(divInt(abs(i1),( max(int(5.0), i2) * int(7.0) )), int(6.0)) - i0 ) ), i0),mod(int(1.0),max(int(7.0), max(i2, divInt(( ( int(7.0) + int(9.0) ) * ( int(8.0) - i2 ) ),int(5.0)))))))):max(max(saveOrd((\"\";\"\" + saveChr(divInt(mod(len(in1),( i2 - int(0.0) )),mod(len(\"\"8\"\"),saveOrd(in0))))).capitalize()), ( ( saveOrd(\"\"Z\"\"[( ( i0 * int(4.0) ) + i2 ):][:( int(8.0) + int(59.0) )].rstrip()) - divInt(( max(len(in1), int(9.0)) - i0 ),( int(2.0) - i1 )) ) - divInt(int(2.0),( saveOrd(saveChr(( min(i0, int(9.0)) - i2 )).lstrip()) + len(in2[i2:].lstrip(\"\"o\"\".lstrip()).lstrip()) )) )), int(2.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 0, 3, 2, 0, 1, 2, 1, 3, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 3, 0, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 3, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1, 0, 0, 1], [0], [2, 2, 0, 2, 0, 0, 2, 1, 2, 0, 2, 3, 1, 1, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1, 0], [0, 2, 0, 1, 2, 2, 3], [17, 18], [16], [2, 9, 5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 7, 0, 32, 9, 6, 5, 4, 5, 7, 1, 14, 0, 0, 6, 7, 2, 1, 3, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[int(0.0):i0]):][i2:len(in1)]:{:\\nres0 = \"\"R\"\"[( i2 + int(7.0) ):( int(5.0) + abs(( divInt(( divInt(int(7.0),int(7.0)) * divInt(min(( i0 - len(in0[:i1]) ), int(1.0)),int(7.0)) ),i2) + divInt(abs(int(7.0)),i1) )) )] not in (\"\"2Sq\"\" + \"\"95;\"\")[int(9.0):int(8.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 2, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 2, 2, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 4, 1, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0, 2], [17], [], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 11, 0, 32, 11, 5, 5, 6, 5, 2, 1, 15, 3, 1, 5, 2, 1, 0, 1, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\".capitalize()[( divInt(i1,i1) - i1 ):] != in1[:i2][int(0.0):( divInt(int(7.0),i1) + i2 )][divInt(divInt(i1,i2),( len(saveChr(( i0 * divInt(min(( abs(i0) - divInt(len((\"\"3\"\" + in0.rstrip())),int(5.0)) ), i1),int(7.0)) ))) + int(6.0) )):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 0, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 3, 0, 3, 0, 0, 0, 2, 3, 3, 0, 0, 2, 2, 3, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 3, 0, 3, 2, 3, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 1, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 4, 0, 3, 4, 4, 0, 1, 0], [2, 1, 0, 1, 2], [1, 0], [2, 2, 0, 0, 2], [0], [14], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 1, 7, 1, 3, 0, 1, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = divInt(saveOrd(in1[i2:]),len(\"\"O\"\")) != i2\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0, 2], [0, 0], [0, 5], [3, 3, 1, 2], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 3, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 2, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 3, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 3], [17], [18], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 7, 1, 2, 4, 2, 1, 1, 13, 13, 11, 0, 49, 17, 8, 5, 12, 5, 3, 0, 16, 3, 1, 3, 3, 1, 1, 0, 1], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( ( mod(len(s0[divInt(int(0.0),i0):]),( i2 + int(7.0) )) != divInt(int(5.0),len(in2)) or True ) and (\"\"R\"\" + in1) in in1[i2:i0].capitalize()[divInt(divInt(int(7.0),i1),mod(abs(( i2 + mod(min(divInt(mod(i1,mod(len(saveChr(int(6.0))),i2)),int(1.0)), int(3.0)),min(i0, ( int(7.0) * max(int(9.0), abs(i0)) ))) )),( ( divInt(int(8.0),int(5.0)) - mod(int(0.0),i0) ) + int(4.0) ))):] ):{:\\nres0 = not (\"\"s\"\" + in0.rstrip()).endswith(\"\";\"\")\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 2, 1, 2, 1, 2, 0, 0, 1, 1, 2, 2, 0, 0, 1], [0, 1, 1], [3, 3, 2, 0, 0, 2, 0, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 2, 3, 2, 2, 2, 0, 3, 3, 3, 2, 0, 3, 2, 0, 1, 1, 0, 3, 2, 1, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0], [3, 3, 0, 2, 3, 2, 1, 0, 1, 3, 2, 4, 4, 1, 4, 0, 4], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4, 4, 1], [1, 1, 0, 0, 1, 1, 0, 1], [0], [2, 0, 0, 2, 0, 2, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0, 4, 0, 3, 4, 4, 1, 3, 3, 1, 2, 1, 0], [2, 1, 3, 1, 0], [1, 0], [2, 2, 2, 0, 1, 0, 2], [0, 0, 0, 0, 3, 0, 3, 1], [17, 5, 9, 12, 1], [19], [], [20, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 17, 0, 73, 23, 17, 11, 12, 9, 8, 1, 29, 5, 1, 7, 8, 5, 1, 0, 2], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = in1[len(in0[( i1 - i1 ):divInt(i1,int(0.0))][:( divInt(int(7.0),i2) + i1 )][divInt(divInt(i2,i1),( min(( i2 * divInt(abs(( len((\"\"R\"\" + saveChr(i0)).capitalize()) - divInt(abs(int(5.0)),i0) )),int(7.0)) ), int(6.0)) + max(i1, mod(int(1.0),min(int(7.0), max(i1, ( ( ( int(7.0) * int(9.0) ) - divInt(int(8.0),i2) ) - int(5.0) ))))) )):len(s0)][abs(mod(saveOrd(\"\"F\"\"),divInt(mod(( i2 * saveOrd(in1) ),max(saveOrd(in1.rstrip()), divInt(i0,min(( i0 + int(0.0) ), int(4.0))))),i1))):]):] == (saveChr(saveOrd(getCharFromString(\"\"JM;\"\", ( int(8.0) + int(59.0) )))) + ((\"\"B\"\" + \"\"#t\"\"[int(9.0):]) + s1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 8, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 0, 3, 0, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 3, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 0], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 23], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 5, 5, 7, 0, 24, 5, 7, 3, 2, 8, 2, 1, 17, 3, 1, 4, 2, 2, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[len(in0):] in getCharFromString(saveChr(i2), i2)[abs(mod(i2,int(0.0))):( int(7.0) + min(i0, ( divInt(( int(5.0) + int(8.0) ),i1) * len(s0) )) )]:{:\\nres0 = ( i2 != i1 or ( (\"\"R\"\" + in1.rstrip())[abs(len(\"\"X\"\")):int(7.0)].endswith(s0) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [1, 2, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [19], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 7, 1, 33, 9, 9, 3, 6, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(abs(abs(i0)), min(mod(int(0.0),int(7.0)), ( int(5.0) + len(in0) ))):]:{:\\nres0 = in1[i1:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = divInt(divInt(( int(7.0) + i0 ),( max(int(7.0), i1) - max(len(\"\"T\"\"), divInt(int(1.0),i2)) )),divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i1))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 2, 1, 1, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 0, 0], [1], [0], [2, 0, 0, 2, 0, 2, 2, 2, 2, 4, 2, 3, 4, 0, 0, 1, 0, 2, 3, 4, 0, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 0, 0, 0, 0], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 7, 0, 33, 8, 8, 5, 3, 9, 1, 1, 22, 3, 1, 8, 1, 0, 0, 0, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len((saveChr(i0) + in0)[int(6.0):int(1.0)].capitalize()[divInt(i2,int(1.0)):divInt(int(2.0),int(5.0))][i1:( abs(divInt(int(5.0),saveOrd(s0))) + len(\"\";\"\") )][:abs(saveOrd(in1))][i0:]):] != (s0.rstrip() + s0)[( ( ( int(7.0) + i1 ) - ( min(int(7.0), i2) * int(9.0) ) ) - int(8.0) ):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2, 0], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 1, 1, 1, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4, 4], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0], [2, 4, 3, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 3, 2, 0, 3, 3, 1, 3, 3, 0], [17, 7, 1], [0], [9], [20, 7, 31, 30, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 1, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 6, 1, 12, 2, 2, 0, 2, 8, 10, 1, 17, 3, 1, 4, 10, 3, 1, 1, 5], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2[:len(in1)] + \"\"R\"\"[i2:i1]).capitalize()[int(6.0):]:{:\\ns2 = in0[i2:mod(i1,int(1.0))]\\ni1 = divInt(int(5.0),len(saveChr(i1)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = (\"\";9H$`a_(\"\" + in1.rstrip())\\nres0 = \"\"B\"\" not in in1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 4, 4, 0, 1, 3], [0, 2, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 1, 1, 2, 2, 1, 0], [0, 1, 1], [3, 2, 2, 1, 1, 2, 0, 1, 2, 2, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 0, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 3, 3, 1, 0, 1, 3, 0, 1, 3, 3, 1, 2, 2, 1, 0, 3, 3, 3, 2, 1, 2, 0, 2, 1, 2, 2, 2, 2, 2, 0, 1, 2, 3, 1, 3, 0, 2, 0, 1, 2, 2, 0, 0, 2, 2, 2, 1, 3, 0, 3, 3, 1, 0], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 1, 3, 2, 1, 1, 4, 2, 2, 3, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 1, 1, 2, 2, 1, 2, 2, 0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 5, 4, 0, 3, 0, 4, 0], [1, 1], [0], [2, 0, 0, 2, 4, 0, 4, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 0], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 24, 24, 20, 0, 97, 34, 20, 20, 14, 8, 2, 1, 18, 4, 1, 4, 2, 2, 0, 0, 0], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s0.capitalize()[mod(( int(0.0) + int(7.0) ),mod(i0,int(5.0))):] not in saveChr(divInt(divInt(len(in0[i2:divInt(( ( int(7.0) + i2 ) * mod(abs(( i0 - mod(min(( i1 + i2 ), ( len((\"\"R\"\" + saveChr(int(6.0)))[i1:int(1.0)]) * int(7.0) )),int(7.0)) )),i0) ),( int(9.0) - min(int(8.0), max(i0, ( divInt(mod(int(5.0),abs(max(int(0.0), i0))),int(4.0)) - max(i2, int(8.0)) ))) ))].rstrip()),max(len(s0), int(59.0))),( ( int(9.0) * i2 ) + abs(max(max(( int(2.0) + ( i1 - ( int(2.0) - ( ( mod(( divInt(i0,int(4.0)) - ( saveOrd(\"\"A\"\") * int(4.0) ) ),abs(i1)) * mod(i1,int(0.0)) ) - ( mod(i2,i2) * ( ( mod(int(1.0),abs(i1)) * len(in1) ) + len(s0) ) ) ) ) ) ), int(3.0)), i0)) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 9, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 1, 2, 0], [0, 3, 2, 3], [17], [], [6], [20, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 6, 6, 2, 0, 17, 4, 5, 2, 2, 6, 4, 0, 16, 2, 0, 5, 4, 1, 0, 1, 2], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2[len(in2):] != in1[len(in1):]:{:\\nres0 = ( i1 != int(6.0) or ( \"\"R\"\"[int(7.0):][:mod(int(9.0),int(2.0))][:( int(5.0) + abs(i2) )].endswith((saveChr(( saveOrd(in0) + divInt(int(5.0),len(s0)) )) + \"\";6\"\").capitalize()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 3, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 0, 4, 3, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 1, 0, 0, 1], [0, 2, 1], [17], [25], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 5, 5, 4, 0, 13, 2, 3, 1, 1, 7, 3, 1, 17, 4, 2, 3, 3, 1, 1, 1, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[( len(in1) + divInt(int(07.0),i0) ):]:{:\\nloopBreak% = 0\\nwhile (in1 + saveChr(len(in0[i2:int(5.0)]))[:int(7.0)]).rstrip() not in (\"\"R\"\" + getCharFromString(s0, int(6.0))).lstrip():{:\\nres0 = ( abs(i2) != i0 or ( \"\"1z\"\".endswith(in1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 2], [0, 0], [1, 5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 9, 3, 4, 1, 7], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0, 1, 1, 0, 2, 1, 2, 2, 1, 0, 2, 1], [0, 1, 1], [3, 2, 3, 2, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 1, 1, 3, 2, 2, 3, 1, 1, 3, 2, 1, 0, 1, 0, 3, 0, 3, 2, 0, 3, 2, 3, 3, 2, 2, 2, 0, 2, 1, 3, 1, 2, 2, 2, 1, 3, 1, 0, 1, 3, 1, 1, 0, 2, 0, 3, 3, 3, 0, 1, 2, 1, 3, 3, 1, 0, 3, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0], [1, 3, 2, 0, 3, 0, 1, 2, 1, 0, 3, 1, 1, 1, 2, 2, 0, 2, 0, 0, 2, 1, 4, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 1, 0, 0, 1, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0], [0, 5, 5, 4, 0, 0, 4], [1, 0, 1, 1], [0], [4, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 1], [1, 3, 3, 1, 0], [1, 0], [2, 2, 0, 0, 2], [0, 1, 0, 2], [17, 1], [7], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 3, 2, 2, 0, 0, 24, 24, 19, 0, 94, 27, 25, 15, 12, 7, 4, 0, 18, 5, 2, 2, 4, 2, 1, 1, 0], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveChr(max(( len(s0) + mod(i0,( mod(int(8.0),( int(7.0) + abs(i2) )) * min(divInt(( int(5.0) - i2 ),( len(in2) + divInt(i0,( min(divInt(max(i1, divInt(abs(int(7.0)),i2)),int(6.0)), i2) * i2 )) )), i0) )) ), ( int(1.0) - int(7.0) ))) not in in2[int(7.0):]:{:\\nres0 = ( max(( ( min(int(9.0), int(8.0)) - len(in1) ) - mod(int(5.0),i0) ), int(0.0)) != i1 or ( s0[max(i1, max(mod(i0,max(( abs(abs(mod(divInt(( i2 + ( int(4.0) + min(int(8.0), ( mod(( int(59.0) - abs(int(9.0)) ),i1) + int(2.0) )) ) ),min(int(2.0), int(9.0))),i2))) + divInt(i2,min(abs(max(i1, int(3.0))), ( int(4.0) - saveOrd(saveChr(abs(int(1.0)))) ))) ), i0)), len((\"\"R\"\" + getCharFromString(s0, int(7.0)))))):].lstrip().rstrip().endswith(\"\"hB\"\") and in1.endswith(\"\"0\"\") ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 3, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 2, 3, 0, 1, 2, 1, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 3, 5, 2], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0, 0], [2, 3, 3, 2], [1, 0], [2, 2, 2, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 3, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 2, 2, 6, 1, 12, 2, 3, 0, 2, 10, 1, 1, 18, 4, 2, 4, 1, 0, 0, 0, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[len(in0):] not in (s0.capitalize() + in1).lstrip()[:i0].rstrip()[i2:].capitalize():{:\\nres0 = ( mod(abs(i1),int(6.0)) != divInt(int(2.0),i0) or ( \"\";\"\".endswith(in0) and True ) )\\ni1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 0, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 3, 2, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 1, 2, 0, 2, 0, 2, 3, 2, 3, 0, 3, 2, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 0, 3, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [3, 3, 3, 0, 3, 1, 1, 2, 1, 3, 0], [0, 0, 2, 0, 0, 0, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 0, 1, 0, 4], [1, 1], [0], [1, 2, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3], [0, 0], [2, 2, 1, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 8, 0, 34, 11, 8, 4, 7, 6, 2, 1, 15, 4, 2, 3, 2, 1, 0, 0, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2[len(in1[len(s0):]):] not in getCharFromString(saveChr(len(s1[:mod(i1,( ( int(6.0) + divInt(int(0.0),min(i2, len((\"\";\"\" + s0.lstrip()).lstrip()))) ) + divInt(divInt(int(5.0),int(7.0)),( i2 * ( i2 + divInt(max(divInt(max(i1, abs(mod(int(6.0),i2))),int(1.0)), int(7.0)),i1) ) )) ))])), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 6, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1], [0, 1, 1], [1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 3, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 2, 0, 1, 1, 0, 1, 4, 2], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 3, 0, 1, 0, 2, 2, 2, 0, 4, 2, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0, 1], [17], [2], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 18, 18, 12, 0, 54, 16, 9, 8, 8, 6, 2, 1, 15, 2, 0, 5, 2, 1, 1, 0, 0], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nloopBreak% = 0\\nwhile (in1 + \"\"R\"\") not in in1:{:\\nres0 = ( len(in0[mod(int(7.0),len(saveChr(divInt(( int(5.0) - i0 ),divInt(saveOrd(\"\"c\"\"[:i2]),( divInt(( int(2.0) + i2 ),( abs(mod(i0,( i1 * min(int(6.0), i2) ))) - divInt(max(int(1.0), i1),int(7.0)) )) + int(7.0) )))))):int(9.0)][i2:mod(int(6.0),max(int(5.0), min(i0, ( ( ( int(0.0) * int(4.0) ) - divInt(int(8.0),i0) ) - int(59.0) ))))][int(9.0):]) != max(i1, int(2.0)) or ( saveChr(i1).endswith(s0) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 2, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 0, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 1, 0, 2], [0, 1, 1], [3, 1, 2, 1, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 2, 1, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 4, 1, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0, 2, 0], [17, 22], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 17, 17, 13, 1, 50, 14, 9, 7, 7, 6, 3, 1, 16, 4, 1, 4, 3, 2, 0, 1, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile saveChr(int(0.0)) not in \"\"R\"\":{:\\nres0 = ( ( int(7.0) * i0 ) != divInt(len(in1),int(5.0)) or ( saveChr(min(int(06.0), int(1.0)))[i2:].endswith((\"\"6\"\" + saveChr(i1)).rstrip()[( mod(int(7.0),i0) + divInt(min(divInt(i1,( len(in0) * ( abs(i2) - divInt(max(int(7.0), i1),int(9.0)) ) )), int(8.0)),i2) ):i0][( int(5.0) + min(int(0.0), max(i0, divInt(mod(( int(4.0) * int(8.0) ),( int(59.0) - i1 )),int(9.0)))) ):]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i2\\ns0 = \"\"W\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 9, 3, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 1, 0, 2, 1, 1, 3, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1, 0, 1, 0, 1], [0], [2, 1, 0, 1, 2, 2, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0, 3, 2, 1, 3], [17], [17], [4], [20, 5]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 10, 2, 2, 2, 0, 3, 5, 1, 10, 0, 0, 5, 5, 1, 1, 1, 2], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = \"\";4\"\" != \"\"r\"\"\"[( i1 * int(0.0) ):i2][( int(7.0) + int(9.0) ):][len(in1[:int(3.0)]):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2, 0], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1, 4], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4, 1], [1, 1, 1, 0, 0, 1, 1], [0], [2, 0, 4, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0, 0, 1], [0, 1, 3, 2], [1, 0], [2, 0, 0, 0, 1], [0, 3, 2, 1, 2, 2, 3], [17], [14], [1, 9, 0], [20, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 1, 4, 0, 0, 2, 1, 6, 1, 2, 3, 2, 1, 0, 16, 16, 10, 1, 49, 15, 10, 5, 10, 8, 7, 1, 19, 4, 1, 3, 7, 1, 1, 3, 2], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = getCharFromString(in1[len(in1):len(\"\"R\"\")], i0) != saveChr(abs(mod(int(7.0),int(5.0))))\\ni1 = ( int(7.0) + min(i2, divInt(divInt(( int(7.0) + i0 ),( len(\"\";\"\"[int(1.0):i1]) - max(max(divInt(int(7.0),i2), divInt(len((\"\"1\"\" + in0.capitalize()).rstrip()),int(7.0))), divInt(int(9.0),int(8.0))) )),i1)) )\\ns0 = \"\"o90\"\"\\nb2 = ( i2 != mod(int(5.0),max(( saveOrd(in1) - i0 ), ( divInt(divInt(int(0.0),int(4.0)),mod(int(8.0),i0)) + int(59.0) ))) or ( s1.endswith(\"\"\"\\\\\"\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 2, 1, 2, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 1, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 1, 1, 0], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[abs(len(\"\";\"\")):]:{:\\nb2 = in1[i0:] != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [2, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 2, 1, 0, 1, 1, 1], [1, 2, 1, 1, 2, 2], [0, 1, 2, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [3, 2, 3, 2, 1, 2, 3, 1, 0, 3, 0], [5, 0, 0, 2, 2], [2, 0, 1, 0, 2, 0, 1, 1, 1, 0, 2, 2, 1, 2, 2, 0, 2, 1, 0, 0, 1], [0, 0, 0, 0, 0], [1, 5, 3, 0, 4, 2, 4, 1], [3, 3, 1, 3, 0, 0, 1, 1], [1, 0, 0], [0, 1, 0], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 7, 5, 8, 2, 1, 7, 7, 2, 3, 5, 0, 4, 8, 5, 9, 9, 2, 2, 7, 8, 8, 6, 8, 0, 8, 2, 4, 9, 2, 7, 9, 6, 6, 6, 8, 2, 9, 7, 4, 1, 7, 7, 2, 4, 8, 3, 9, 5, 3, 6, 4, 1, 8, 2, 7, 7, 4, 9, 8, 0, 2, 3, 4, 1, 9, 8, 0, 1, 1, 5, 3, 9, 5, 7, 2, 9, 6, 0, 8, 6, 9, 7, 1, 7, 7, 5, 0, 2, 2, 3, 7, 1, 6], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 0, 1, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 2, 2, 1, 1, 0, 2, 2, 1, 0, 0, 0, 0, 1, 0, 2, 2, 1, 2, 1, 0, 0, 0, 0, 0, 2, 0, 1, 2], [0, 1, 1, 1, 1], [0, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 2, 0, 2, 2, 1, 0, 1, 3, 2, 3, 2, 2, 2, 1, 1, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 3, 2, 0, 0, 3, 2, 0, 2, 0, 1, 2, 1, 1, 0, 1, 1, 2, 1, 1, 1, 0, 0, 1, 2, 3, 2, 2, 3, 2, 1, 2, 0, 1, 3, 3, 1, 1, 3, 2, 3, 3, 1, 3, 0, 2, 1, 1, 1, 2, 3, 0, 2, 3, 0, 3, 0, 3, 2, 0, 3, 0, 3, 0, 2, 3, 0, 3, 3, 3, 0, 1, 3, 0, 1, 3, 0, 3, 2, 3, 3, 1, 2, 3, 1, 2, 3, 0, 1, 0, 0, 2, 2, 3, 0, 0, 0, 2, 1, 0, 2, 2, 1, 3, 2, 0, 0, 3, 2, 2, 2, 2, 3, 1, 0, 3, 1, 3, 0, 1, 3, 2, 0, 0, 0, 1, 1, 3, 0, 1, 3, 1, 0, 1, 3, 3, 3, 2, 3, 3, 3, 2, 3, 1, 0, 3, 2, 0, 0, 2, 2, 1, 3, 3, 3, 1, 2, 3, 1, 0, 2, 2, 3, 0, 0, 3, 2, 3, 0, 0, 2, 1, 1, 1, 1, 3, 3, 1, 1, 1, 3, 3, 1, 1, 2, 2, 2, 3, 0, 0, 0, 1, 2, 2, 1, 0, 3, 3, 0, 1, 2, 1, 2, 0, 1, 0, 1, 0, 2, 1, 2, 2, 1, 2, 3, 3, 0, 0, 0, 1, 1, 3, 1, 2, 0, 2, 2, 3, 0, 2, 0, 3, 1, 0, 1, 2, 3, 1, 0, 1, 3, 1, 1, 0, 0, 0, 3, 3, 1, 1, 3, 2, 2, 1, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [3, 3, 1, 0, 3, 0, 2, 2, 1, 4, 4, 3, 0, 3, 4, 4, 4, 2, 1, 1, 1, 2, 3, 4, 0, 0, 0, 3, 3, 2, 1, 4, 2, 2, 3, 1, 0, 1, 1, 0, 1, 0, 4, 0, 0, 4, 1, 2, 4, 2, 2, 2, 1, 4, 1, 0, 2, 3, 2, 2, 2, 0, 3, 3, 2, 0, 1, 1, 1, 4, 4, 0, 3, 0], [0, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 1, 1, 2, 1, 0, 0, 1, 1, 1, 1, 0, 2, 1, 1, 2, 2, 1, 0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 5, 4, 4, 3, 0, 4, 1, 4, 5, 4, 5, 0, 1, 2, 5, 5, 4, 4, 0, 5, 2, 3, 3, 1, 2, 0, 4, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0, 4, 4, 2, 2, 2, 2, 1, 2, 0, 0, 0, 4, 3, 2, 4, 1, 1, 3, 2, 2, 3, 4, 2, 4, 4, 1, 4, 2, 4, 2, 0, 4, 0, 2, 2, 4, 2, 1, 2, 0, 1, 1, 1, 4, 4, 2, 1, 0, 0, 3, 4, 4, 3, 0, 2, 2, 1, 2, 0, 0, 2, 4, 2, 0, 1, 2, 0, 4, 1, 1, 2, 2, 1, 4, 4, 2, 1, 1, 0, 2, 1, 4, 4, 0, 1, 3, 4, 0, 1, 2, 2, 2, 4, 2, 2, 0, 1, 4, 1, 1, 0, 0, 0, 4, 2, 2, 0], [0, 1, 3, 3, 2, 2, 1, 2, 3, 2, 0, 0, 1, 1, 0, 2, 0, 1, 0, 0, 2, 1, 2, 2, 3, 3, 3, 1], [1, 0, 5, 3, 1, 1], [2, 2, 0, 0, 1, 0, 0, 2, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 2, 1, 2, 2, 2, 0, 0, 0, 1, 0, 1, 1, 1, 1, 2, 1, 0, 0, 2, 1], [0, 2, 3, 3, 3, 2, 1, 3, 1, 1, 2, 3, 0, 0, 3, 1, 3, 1, 0, 0, 2, 3], [17, 21, 7, 17, 0], [14, 15, 20, 18], [0, 6, 3, 8], [20, 15, 13, 17, 14, 5, 28, 7, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 1, 7, 0, 6, 0, 0, 3, 3, 8, 3, 2, 3, 2, 1, 1, 27, 27, 21, 3, 74, 21, 11, 12, 11, 8, 3, 0, 24, 6, 2, 7, 3, 1, 0, 1, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s1[i2:] not in in2:{:\\nres0 = ( len(getCharFromString(in1, i2)[i2:]) != len(saveChr(i0)[i1:int(0.0)]) or ( in1.endswith(in0) and True ) )\\n:}else:{:\\ni2 = mod(int(7.0),max(divInt(i1,( divInt(int(5.0),i2) + int(8.0) )), min(mod(len((\"\"R\"\" + s0.lstrip()).rstrip()),( ( ( int(2.0) * int(1.0) ) * divInt(min(( i0 + int(7.0) ), int(7.0)),divInt(i0,mod(int(2.0),abs(int(3.0))))) ) - abs(i0) )), ( ( ( int(5.0) * int(0.0) ) - divInt(int(4.0),i2) ) - int(8.0) ))))\\nin1 = \"\"0\"\"\\nb2 = int(59.0) \\l max(saveOrd(s1), mod(i1,i0))\\ni0 *= saveOrd(\"\";\"\"[( i2 + ( i0 + int(9.0) ) ):divInt(int(2.0),int(2.0))][i1:int(7.0)][:int(8.0)][divInt(int(8.0),int(6.0)):int(808.0)].capitalize().capitalize())\\nres0 = i2 \\l i2\\n:}\\ni1 -= int(2.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 0, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [3, 2, 3, 0], [1, 0], [2, 0, 1, 0, 1], [0, 0], [17, 25], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 3, 3, 2, 0, 11, 1, 5, 0, 1, 7, 2, 0, 16, 2, 1, 4, 2, 2, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s1[len(in2):] != in1[len(in1):abs(int(0.0))]:{:\\nres0 = ( i1 != saveOrd(in0) or ( \"\"R\"\"[:i2].endswith((s0.capitalize() + in1).rstrip()[int(9.0):mod(int(8.0),len(\"\"Z\"\"))]) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1, 0, 0, 0, 0, 0, 0, 1, 1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 3, 0, 2, 1], [17, 10, 6, 21, 8], [3, 22], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 1, 34, 9, 9, 3, 6, 7, 9, 1, 15, 3, 1, 3, 9, 5, 2, 1, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[:len(in1)]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = abs(i1)\\ns0 = getCharFromString(\"\"KdGV;I1\"\"[min(mod(int(0.0),int(7.0)), ( int(5.0) + len(saveChr(i2)) )):divInt(divInt(( int(7.0) + i0 ),( max(int(7.0), i1) - max(len((\"\"w\"\" + in1.rstrip())), divInt(int(1.0),i2)) )),divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i1))], i2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 0, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 1, 2, 1, 2, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 3, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 0, 0, 1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 1, 1, 3], [17], [5, 20, 14], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 10, 0, 50, 16, 11, 8, 8, 6, 5, 1, 16, 3, 1, 4, 5, 1, 3, 0, 1], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[len(in1):] not in getCharFromString(in0[i0:int(0.0)], abs(mod(i2,int(7.0))))[mod(int(5.0),min(i2, ( int(7.0) + divInt(int(2.0),( divInt(len(saveChr(( i0 + ( min(divInt(int(0.0),i1), ( max(abs(i2), int(7.0)) * divInt(i1,i2) )) - mod(int(7.0),max(int(9.0), len((\"\"f\"\" + s0.rstrip())))) ) ))),i0) + ( ( ( int(8.0) * int(5.0) ) - divInt(int(0.0),i0) ) - int(4.0) ) )) ))):len(\"\"uo;\"\")]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1, 1], [0], [4, 0, 3, 1, 0, 2, 4, 2, 1, 2, 4, 0, 4, 0, 1, 1, 0], [2, 2, 3, 3], [5, 0], [2, 1, 1, 0, 1], [2, 0, 0, 1, 0], [17, 24, 11], [0], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 5, 5, 1, 15, 4, 2, 3, 5, 3, 1, 1, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2.capitalize():{:\\nres0 = (\"\"0\"\" + in1) != \"\"RYa\"\"[:len(in1.strip(in0.lstrip())[:len(\"\"L\"\")])].capitalize()[i0:]\\ni2 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 3, 4, 4, 3, 0, 4], [1, 1], [0], [2, 4, 0, 2, 0, 0, 4, 2, 1, 2, 4, 3, 4, 0, 4, 1, 0], [3, 2, 2, 0, 1], [1, 0], [2, 2, 1, 0, 1], [0, 1], [17], [21], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 12, 2, 5, 1, 1, 6, 2, 1, 17, 5, 1, 4, 2, 1, 1, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in0.rstrip()[len(in1[len(in1):]):]:{:\\nres0 = \"\"R\"\"[:abs(mod(i1,saveOrd((getCharFromString(in0, i2) + saveChr(int(0.0))).capitalize()[( int(9.0) + len(\"\"v\"\") ):i1])))].capitalize() != s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 1, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 3, 3, 1, 1, 2, 0, 1, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1, 1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 0, 0, 3, 0], [17, 9, 13, 10], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 0, 0, 8, 1, 4, 0, 1, 6, 5, 1, 16, 3, 1, 4, 5, 4, 0, 0, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(\"\"R\"\"):] not in in0[divInt(int(0.0),int(6.0)):saveOrd((\"\"J\"\" + in0.rstrip()).capitalize())].capitalize()[len(\"\"N;K\"\"):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 3, 5, 0, 2, 1, 7, 7, 9, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 2, 0, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 2, 3, 0, 1, 2, 1, 1, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 4, 0, 4, 1, 4, 0, 1, 2, 0, 1, 0], [3, 1, 3], [3, 1], [2, 2, 2, 2, 1], [0], [21], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 0, 0, 0, 2, 1, 4, 1, 1, 2, 1, 0, 0, 5, 5, 1, 0, 11, 3, 2, 2, 1, 5, 1, 1, 10, 3, 2, 2, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[int(2.0):].lstrip(in1)):]:{:\\nloopBreak% = 0\\nwhile saveChr(( int(3.0) + divInt(len(in0),i2) )) not in \"\"V\"\".rstrip():{:\\nres0 = ( int(5.0) != ( int(0.0) + int(2.0) ) or b2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [2, 0, 0], [0, 0, 1, 1, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 2, 0, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 3, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 2, 5, 2, 1, 2, 2, 0, 0, 3, 3, 5, 0, 13, 1, 4, 0, 1, 1, 1, 0, 3, 0, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( abs(abs(i2)) == int(0.0) or i2 \\l min(i2, int(7.0)) ) or \"\";\"\"[divInt(int(5.0),min(i0, i1)):] not in s0 )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], [2, 2, 0, 0, 0, 0, 1, 1, 1, 2, 1, 1, 1, 0], [0, 2, 2], [0, 0, 2, 1, 2, 1, 2, 2, 0, 0, 2], [0], [0, 0, 0, 0, 0], [], [], [3, 2, 3, 2, 2, 0], [5, 0, 0], [2, 0, 1, 0, 2, 0, 0, 0, 1, 1], [0, 0, 0], [1, 5], [3, 3, 1, 0, 0], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 6, 5, 7, 4, 5, 7, 2, 1, 7, 0, 4, 4, 1, 0, 1, 4, 6, 0, 8, 8, 1, 4, 9, 2, 6, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 2, 2, 2, 0, 0, 0, 1, 0, 0, 1, 1, 0, 2, 0, 1, 2, 1, 2, 0, 2, 1, 2, 2, 2, 1], [0, 1, 1], [3, 0, 2, 0, 0, 0, 3, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 3, 2, 2, 3, 3, 0, 3, 1, 0, 3, 3, 0, 1, 3, 0, 3, 1, 2, 2, 1, 2, 0, 2, 3, 1, 1, 2, 1, 0, 3, 2, 2, 0, 1, 0, 2, 0, 2, 0, 1, 1, 2, 1, 3, 1, 2, 1, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 2, 2, 2, 3, 0, 2, 1, 1, 3, 3, 1, 2, 1, 0, 2, 3, 0, 2, 2, 3, 2, 2, 3, 3, 0, 2, 2, 3, 1, 3, 2, 1, 3, 1, 2, 0, 0, 2, 0, 3, 3, 2, 3, 2, 3, 3, 3, 1, 1, 2, 3, 3, 1, 0, 2, 0, 1, 1, 0, 0, 3, 1, 1, 0, 1, 2, 3, 2, 0, 0, 2, 3, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0], [3, 1, 0, 2, 3, 2, 1, 0, 1, 0, 2, 0, 2, 2, 2, 2, 0, 3, 0, 4, 4, 2, 4, 0, 4, 0, 0, 0, 3, 2, 1, 4, 3, 2, 2, 0, 0, 3, 1, 1, 0, 1, 1, 0, 3, 4, 2], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 2, 2, 0, 1, 1, 0, 0, 0, 1, 0, 1, 2, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [4, 5, 5, 4, 3, 0, 4, 4, 1, 1, 3, 5, 4, 3, 3, 2, 2, 3, 2, 0], [1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0], [2, 0, 0, 2, 2, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0, 3, 0, 1, 4, 2, 1, 1, 1, 4, 1, 2, 1, 0, 0, 0, 1, 0, 4, 2, 0, 0, 0], [2, 1, 3, 0, 0], [1, 0], [2, 2, 0, 0, 1, 1, 0, 2], [2, 1, 2, 3, 2, 0, 2, 3, 2, 2, 0, 3, 0, 0, 3, 2, 3, 1, 3], [17, 22, 18, 5], [24, 24], [9, 9, 0, 9, 3, 9, 7], [20, 19, 28, 28, 17, 7]], "fitness": 9223372036854775807, "mapping_values": [1, 14, 14, 3, 11, 1, 5, 0, 0, 6, 3, 10, 3, 2, 5, 2, 1, 0, 45, 45, 45, 2, 184, 53, 47, 25, 29, 20, 19, 1, 39, 5, 1, 8, 19, 4, 2, 7, 6], "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in2):]:{:\\nloopBreak% = 0\\nwhile in1[i1:( i2 - i1 )][i0:] not in \"\"9\"\"[max(int(0.0), divInt(( int(7.0) + i1 ),i2)):mod(divInt(i1,i2),divInt(min(( i0 * ( abs(mod(len(in0[:i0]),( abs(int(5.0)) - i1 ))) + int(7.0) ) ), int(6.0)),max(i0, divInt(int(1.0),min(int(7.0), max(i0, mod(( ( int(7.0) * int(9.0) ) - ( int(8.0) - i1 ) ),int(5.0))))))))]:{:\\nres0 = ( min(i0, abs(divInt(divInt(min(abs(i1), abs(int(0.0))),i1),abs(abs(i1))))) != int(4.0) or ( (\"\"y\"\" + saveChr(min(i0, len(s0)))).capitalize().endswith(\"\"9\"\") and True ) )\\nb2 = res0\\nin1 = in1\\ni1 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = (s1 + \"\";0R9:\"\")\\ni2 *= ( mod(int(59.0),divInt(i2,divInt(min(int(9.0), int(2.0)),divInt(int(2.0),i2)))) + saveOrd(\"\"3\"\"[:( ( i0 + int(6.0) ) - i0 )].rstrip()) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = \"\"9W]\"\"\\nloopBreak% = 0\\nwhile b2:{:\\nin2 = \"\"S\"\"\\nb2 = mod(i0,( i1 * int(5.0) )) \\l int(7.0)\\nb0 = ( int(45.0) * saveOrd(getCharFromString(\"\"F]\"\", int(72.0))) ) \\l mod(int(17.0),abs(saveOrd(\"\"7.y\"\"[min(int(0.0), ( saveOrd(in1) + mod(i0,mod(min(divInt(divInt(( min(i0, divInt(int(4.0),int(4.0))) - min(len(in0), int(1.0)) ),divInt(int(0.0),i1)),( abs(i1) - ( ( max(( mod(saveOrd(in0),len(\"\"$\"\")) + i0 ), divInt(mod(abs(int(1.0)),abs(( int(4.0) + min(int(6.0), ( i2 + i0 )) ))),mod(i1,min(len(s2), mod(max(divInt(max(min(max(int(0.0), int(8.0)), mod(max(min(int(8.0), i2), ( i1 - int(1.0) )),int(4.0))), i2),i0), len(getCharFromString(s2[int(9.0):], int(2.0)))),i2))))) + int(6.0) ) - divInt(saveOrd(in0),( i1 * i2 )) ) )), ( abs(int(2.0)) - i2 )),i2)) )):i1])))\\ns2 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0, 0, 2], [0, 1, 1], [3, 1, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 2, 3, 0, 0, 2, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 5, 4, 4, 0, 0, 4], [1, 0, 0, 1], [0], [2, 3, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 0, 0], [17, 22, 21], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 14, 0, 57, 18, 10, 7, 11, 5, 4, 1, 15, 3, 1, 4, 4, 3, 0, 0, 1], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1[len(\"\"R\"\"):])[int(8.0):]:{:\\nres0 = saveChr(i0)[mod(i2,divInt(( int(7.0) + divInt(int(5.0),len(in1[i2:min(divInt(divInt(int(7.0),i0),( min(( i1 + divInt(len(saveChr(( min(i2, mod(max(int(6.0), i1),int(1.0))) * int(7.0) ))),i2) ), i0) - divInt(int(7.0),abs(int(9.0))) )), max(i0, ( ( ( int(8.0) + int(5.0) ) * divInt(int(0.0),i1) ) - int(4.0) )))])) ),int(8.0))):mod(max(i0, i0),mod(i2,int(59.0)))] not in (\"\";WV\"\" + s0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 3, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 2, 3, 2, 1], [2, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 1, 1, 0, 0, 2, 4, 4, 0, 2, 3, 4, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 2, 1, 5, 0, 0, 1, 2, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = \"\"0\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [1, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 0, 8, 4, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 2, 2, 3, 1, 1, 0, 0, 2, 2, 1, 0, 0, 3, 2, 0, 2, 3, 1, 1, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 4, 3, 2, 1, 0, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 5, 3, 0, 4], [1, 1], [0], [2, 0, 4, 4, 0, 2, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [2, 2, 2, 0, 1], [0, 1], [17], [9], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 7, 7, 8, 0, 29, 9, 5, 3, 6, 4, 2, 0, 15, 4, 1, 4, 2, 1, 1, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( len(s0[( divInt(int(0.0),i1) * ( mod(divInt(len(saveChr(int(7.0)).capitalize()),int(5.0)),i2) + i1 ) ):]) != divInt(divInt(int(0.0),i0),i1) or True ) and in2 != \"\"R\"\"[min(( i2 * divInt(saveOrd(in0[int(8.0):int(4.0)]),i1) ), i2):][len((\"\"j\"\" + getCharFromString(in2, int(7.0))).rstrip()):] )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 3, 1, 0, 2, 0, 0, 2, 1, 0, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 2, 1, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [25], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 2, 0, 0, 4, 1, 1, 7, 1, 1, 2, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[min(int(2.0), len(in1)):]:{:\\nres0 = \"\"Z\"\"[int(7.0):].rstrip() not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 0, 4, 4, 1], [1, 1], [0], [2, 0, 0, 2, 1, 0, 1, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 2, 0, 1], [0, 2], [17], [], [5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 4, 2, 1, 7, 0, 0, 2, 2, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = \"\"R\"\"[len(in1):] not in \"\"5\"\"\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [4, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 1, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 0, 2, 0, 4], [1, 0, 0, 0, 1], [0], [2, 0, 0, 2, 1, 0, 2, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0, 3, 1, 3, 0], [17, 9], [11], [], [20, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 0, 5, 5, 0, 0, 11, 1, 5, 0, 1, 4, 5, 0, 9, 0, 0, 3, 5, 2, 1, 0, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(s2[len(in2):]) \\le len(\"\"R\"\"[int(0.0):]):{:\\nres0 = ( int(7.0) \\l mod(min(int(5.0), int(7.0)),int(6.0)) or ( in1 not in s0[len(\"\";l!J\"\"):] and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 6, 3, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 0, 1, 2, 0, 1, 2, 1, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 4, 0, 2, 1, 0, 4, 2, 4, 2, 4, 3, 4, 2, 2, 1, 0], [0, 3, 3, 3, 2], [1, 0, 0], [2, 2, 2, 1, 2, 0], [3, 1], [17], [21], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 5, 0, 12, 2, 1, 1, 1, 4, 2, 1, 17, 5, 3, 6, 2, 0, 1, 0, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in getCharFromString(in2, len(\"\";\"\"[int(6.0):]))[i0:]:{:\\nres0 = in1 not in (\"\"v\"\"[i2:int(6.0)][mod(i1,int(3.0)):].capitalize() + in1).lstrip()[:( int(2.0) + i0 )].lstrip()[i1:].rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1, 1], [0], [2, 0, 0, 2, 3, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0, 3, 1], [17, 4], [13], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 6, 0, 33, 9, 9, 3, 6, 6, 4, 1, 15, 3, 1, 3, 4, 2, 1, 0, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = (in0 + \"\"R\"\")[len(getCharFromString(\"\"E;\"\"[abs(i0):min(mod(int(0.0),int(7.0)), ( int(5.0) + len(saveChr(i1)) ))], divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len((\"\"n\"\" + s0.rstrip())), divInt(int(1.0),i1)) )),divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2)))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 3, 3, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 2, 2, 3], [17], [], [8, 0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 7, 0, 32, 9, 8, 5, 4, 7, 4, 1, 16, 2, 0, 3, 4, 1, 0, 2, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in ((s0[i1:int(27.0)] + getCharFromString((\"\"R\"\" + saveChr(abs(mod(i1,int(5.0))))), mod(int(7.0),min(i1, ( divInt(( int(2.0) + i1 ),( len(in1) + min(i0, ( max(( int(1.0) * i2 ), divInt(abs(int(7.0)),i1)) - int(7.0) )) )) + int(9.0) ))))) + \"\"80;\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 7, 5, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 0, 3, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 2, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 4, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 5, 4], [1, 1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0, 2], [17], [], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 37, 10, 10, 3, 7, 6, 2, 1, 16, 3, 1, 5, 2, 1, 0, 1, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s2[:abs(int(0.0))].capitalize()[:min(mod(i1,i2), abs(int(2.0)))][min(i2, i2):mod(( int(5.0) + i1 ),divInt(max(divInt(i2,divInt(saveOrd(saveChr(divInt(( i1 + mod(max(int(7.0), i2),int(5.0)) ),int(1.0)))),i0)), i0),( int(7.0) * saveOrd((\"\"R\"\" + in2.rstrip())) )))]):] not in \"\"0\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 3, 2, 2, 1, 0, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [21], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 13, 3, 4, 0, 3, 6, 1, 1, 10, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"V\"\"[mod(abs(divInt(divInt(int(0.0),i1),i2)),int(7.0)):saveOrd(s0[i2:i1])]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 1, 3, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 2, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [2], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 8, 0, 3, 0, 0, 5, 2, 1, 14, 2, 0, 5, 2, 1, 1, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(in1):i0]):][int(0.0):]:{:\\nres0 = \"\"R\"\"[int(7.0):saveOrd(in0[:i2])] not in (\"\"c\"\" + saveChr(int(5.0))).capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 2, 3, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 2, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0, 1], [2], [9], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 4, 4, 2, 0, 12, 3, 3, 1, 2, 7, 2, 1, 15, 3, 1, 3, 2, 1, 1, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[mod(len(s2),mod(int(0.0),i0)):]:{:\\nloopBreak% = 0\\nwhile in1.capitalize()[( len(in0[int(7.0):]) + int(5.0) ):] not in \"\"C\"\":{:\\nres0 = ( int(7.0) != len(s0) or ( saveChr(i1).endswith((\"\"j\"\" + in1.rstrip())) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [2, 3, 2, 0, 3, 1, 1, 3, 1, 4], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [0, 1, 0, 0, 1, 1, 1], [0], [2, 0, 1, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0, 1, 3, 0, 1, 1], [17, 14, 20], [23, 7, 11], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 10, 10, 7, 0, 37, 10, 10, 4, 6, 4, 7, 0, 15, 3, 1, 3, 7, 3, 3, 0, 1], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[abs(len(\"\"RO\"\")):] != in2[abs(i0):]:{:\\nres0 = ( min(mod(int(0.0),int(7.0)), ( int(5.0) + len(in1) )) != i1 or ( \"\"x;U\"\".endswith(\"\"h\"\"[divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len(saveChr(divInt(int(1.0),i1))), divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2)) )),i1):( int(8.0) - saveOrd((\"\"l\"\" + in1.rstrip())) )].capitalize()) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 3, 0, 1, 0, 0, 0, 2, 3, 3, 2, 3, 2, 2, 3, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 4, 3, 0, 3, 2, 3, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 4, 2, 3, 4, 4, 0, 1, 0], [2, 1, 3, 1, 2], [1, 0], [2, 2, 0, 0, 2], [0], [2], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 6, 1, 2, 0, 1, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(divInt(saveOrd(in2),i2)):]:{:\\nres0 = \"\"C\"\"[int(0.0):] == in1\\ni2 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 8, 5, 7, 9, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 1, 0, 0, 1, 2, 0, 0], [0, 1, 1], [3, 2, 1, 1, 0, 3, 0, 1, 2, 3, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [1, 5, 4, 1, 3, 0, 5], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [1], [17], [8], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 0, 0, 4, 1, 1, 1, 0, 4, 1, 1, 6, 0, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = \"\"i\"\"[( int(4.0) + int(857.0) ):] not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 1], [3, 0, 2, 0, 0, 0, 3, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 3, 3, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 0, 2, 3, 2, 1, 0, 1, 1, 4], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [5, 5, 4, 4, 1, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 1, 3, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [2, 1, 3], [17], [18], [7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 16, 1, 54, 16, 11, 8, 8, 5, 3, 1, 15, 2, 0, 4, 3, 0, 1, 1, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = \"\"7\"\"[i1:] not in (\"\"s\"\"[( i2 - i1 ):i0] + in1[max(int(0.0), divInt(( int(7.0) + i1 ),i2)):mod(divInt(i1,i2),divInt(min(( i0 * ( abs(mod(len((\"\";\"\" + saveChr(i0)).capitalize()),( abs(int(5.0)) - i0 ))) + int(7.0) ) ), int(6.0)),max(i0, divInt(int(1.0),min(int(7.0), max(i0, mod(( ( int(7.0) * int(9.0) ) - ( int(8.0) - i0 ) ),int(5.0))))))))])\\ni0 = divInt(int(0.0),max(saveOrd(s1), i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 3, 0, 2, 0, 1, 0, 1, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 3, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 2, 3, 2, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 1, 11, 2, 3, 1, 1, 5, 1, 1, 8, 0, 0, 3, 1, 0, 0, 1, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in0[len(in0):] not in \"\"8\"\"[( int(0.0) - i1 ):i2]\\ni1 = min(i0, divInt(i1,int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 1, 0, 0, 0, 2, 2, 2, 2, 0, 1, 2, 2, 0, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 3, 1, 2, 2, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 2, 1, 2, 1, 1, 0, 0, 2, 1, 2, 0, 3, 0, 2, 2, 2, 1, 1, 2, 3, 0, 1, 2, 2, 0, 2, 2, 3, 3, 3, 1, 2, 0, 2, 0, 1, 2, 2, 3, 2, 3, 0, 2, 1, 2, 3, 0, 1, 1, 3, 0, 2, 3, 1, 3, 0, 0, 1, 2, 0, 0, 2, 3, 3, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4, 4, 3, 1, 0, 0, 3, 3, 2, 3], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 0, 1, 0, 2], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 4, 4, 3, 2, 4, 5, 1], [1, 1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0, 4, 2, 4, 0, 4, 2, 1, 1], [0, 1, 3, 3, 2, 2, 2], [1, 0], [2, 2, 0, 0, 1], [0, 2, 3, 0], [17, 12], [], [9], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 19, 22, 0, 92, 33, 19, 16, 17, 9, 4, 1, 25, 7, 2, 5, 4, 2, 0, 1, 1], "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] == getCharFromString(saveChr(i0), int(0.0))[abs(mod(min(int(7.0), mod(( len(s2) * i2 ),divInt(divInt(mod(int(5.0),i2),( min(( i0 + divInt(i1,( int(7.0) * i2 )) ), mod(divInt(int(2.0),( int(1.0) - int(7.0) )),i1)) + i1 )),( int(7.0) * ( i0 - max(i0, divInt(divInt(mod(int(9.0),int(8.0)),( abs(i0) - int(5.0) )),divInt(( i2 * mod(( max(saveOrd((\"\"R\"\" + in1.lstrip()).rstrip()), saveOrd(\"\"9\"\")) + int(0.0) ),( i2 + ( i2 - int(4.0) ) )) ),divInt(mod(len(in2),( max(i2, ( int(8.0) + ( min(i0, int(59.0)) - int(9.0) ) )) + min(i1, divInt(len(s1.capitalize()[int(2.0):len(\"\";\"\"[:i2].capitalize())].capitalize()),i2)) )),int(2.0))))) ) )))),( i0 * i1 ))):mod(abs(len(\"\"M\"\")),i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 1, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 5, 4, 3, 0, 4, 3], [1, 1], [0], [2, 0, 2, 1, 0, 0, 0, 2, 4, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0, 0], [17, 2], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 1, 3, 3, 4, 1, 12, 1, 5, 0, 1, 6, 2, 0, 16, 3, 1, 4, 2, 2, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s1[len(\"\"R\"\"[len(in2):]):] != in2:{:\\nres0 = ( saveOrd(in1) != int(0.0) or ( i0 \\l saveOrd((in0.rstrip() + s0).capitalize()[i2:int(6.0)].capitalize()[:mod(int(8.0),len(\"\"C\"\"))]) and True ) )\\n:}\\ni1 = i0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 2, 0, 0, 1, 2, 2, 2, 1, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 1, 2, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 3, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 0, 1, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3, 1, 1], [1, 0], [2, 2, 2, 0, 1], [1], [17], [2], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 16, 16, 16, 1, 55, 15, 10, 7, 8, 5, 1, 1, 15, 5, 1, 4, 1, 0, 1, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[min(max(i0, int(9.0)), i1):]:{:\\nres0 = in1 not in in1[mod(i2,int(7.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( mod(int(5.0),len(saveChr(i2))) != i1 or ( saveChr(( divInt(int(7.0),i2) + divInt(min(divInt(i1,( len(saveChr(( min(i2, divInt(max(int(6.0), i0),int(1.0))) + int(7.0) )).rstrip()[i0:i1]) * ( int(7.0) - abs(int(9.0)) ) )), max(i2, mod(divInt(( int(8.0) + int(5.0) ),( int(0.0) * i2 )),int(4.0)))),saveOrd((\"\"c\"\" + saveChr(i2)))) ))[int(8.0):].endswith(s0) and True ) ):{:\\ni1 = ( int(59.0) - i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [0, 1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 2, 1, 7, 0, 0, 2, 2, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R4\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 2, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 0, 3, 0, 2, 1, 1, 1, 0, 2, 2, 2, 1, 1, 2, 3, 2, 0, 2, 2, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 1, 4, 3, 4, 0, 1, 1, 0], [2, 1, 3], [3, 0, 0], [2, 1, 1, 1, 0, 0], [1, 1], [17], [20, 24], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 7, 0, 34, 10, 8, 6, 4, 6, 2, 1, 15, 2, 0, 5, 2, 0, 2, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[:len(in0)] != \"\"u\"\"[max(min(i0, len((saveChr(i2) + s0).capitalize())), divInt(int(2.0),int(7.0))):int(2.0)][:i1][:mod(( divInt(int(2.0),int(5.0)) + ( abs(( i0 + ( ( divInt(int(5.0),int(7.0)) - ( saveOrd(\"\"y\"\") * int(7.0) ) ) - i1 ) )) * min(int(9.0), i2) ) ),i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 8, 6, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 1, 2, 4, 3, 4, 0, 0, 1, 0], [2, 2, 3, 0], [1, 0], [2, 2, 1, 0, 1], [0], [21], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 3, 0, 0, 5, 1, 1, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != \"\"V\"\"[:abs(int(0.0))].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 2, 0, 1], [0, 1], [17], [18], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 7, 7, 11, 1, 33, 11, 5, 6, 5, 6, 2, 0, 16, 3, 2, 4, 2, 1, 1, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( ( int(0.0) + i0 ) != mod(i2,int(1.0)) or ( in0[int(5.0):int(7.0)].capitalize()[( i2 - i2 ):].endswith((\"\"R\"\" + in1.lstrip()).rstrip()) and True ) )\\n:}else:{:\\ni1 = mod(divInt(int(6.0),i2),divInt(abs(( i1 * ( min(( len(\"\"s\"\") - i2 ), ( i0 + divInt(i0,int(1.0)) )) * int(7.0) ) )),i2))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 1, 1, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 2, 0, 2, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 1, 4, 4, 3, 0, 4, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 4, 0, 0, 1, 0, 4], [2, 1, 3, 1], [3, 0, 0], [2, 2, 2, 1, 0, 0], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 7, 0, 32, 9, 9, 6, 3, 8, 1, 1, 18, 4, 1, 5, 1, 0, 0, 0, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s1[len(in1):]:{:\\nres0 = in1[len(in0):] != saveChr(i0).capitalize()[int(6.0):i0][:mod(i1,int(1.0))][abs(( i0 + ( divInt(saveOrd((s0.lstrip(in1) + \"\";\"\")),( int(1.0) + len(in0) )) * abs(saveOrd(saveChr(min(i1, ( ( ( int(2.0) - i2 ) + divInt(max(int(5.0), i1),int(5.0)) ) * int(7.0) ))))) ) )):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 4, 2, 9, 8, 5, 7, 4, 8, 5, 6, 9, 2, 6, 6], [1, 2, 0, 0, 1, 2, 1, 2, 2, 1, 0, 2, 0, 2], [1, 1, 1], [3, 3, 3, 1, 3, 2, 0, 0, 2, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 0, 3, 2, 3, 0, 2, 3, 0, 0, 3, 0, 1, 0, 2, 1, 3, 1, 1, 0, 3, 1, 2, 1, 1, 2, 1, 3, 1, 3, 3, 0, 3, 0, 2, 1, 2, 1, 3, 1, 2, 2, 1, 1, 0, 1, 3, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [3, 1, 2, 1, 3, 1, 3, 4, 3, 2, 4, 1, 2, 0, 0, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1, 1], [0], [2, 0, 0, 2, 2, 0, 0, 4, 2, 1, 4, 3, 4, 4, 0, 1, 0], [2, 1, 3, 1], [3, 0], [2, 2, 0, 0, 1], [0, 2], [17], [20], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 12, 0, 34, 9, 10, 4, 5, 7, 2, 1, 17, 4, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in1[max(abs(int(0.0)), max(mod(i1,i2), divInt(( len(in0) + i0 ),i0))):divInt(divInt(int(7.0),i1),mod(max(( i2 + i1 ), len(\"\"R\"\"[( saveOrd(saveChr(i2)) * ( len((saveChr(i2).lstrip(s1) + \"\"1\"\")) - i1 ) ):abs(i0)].capitalize())),int(5.0)))][i2:] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [6], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] != \"\"G\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 0, 1, 0, 3, 2, 0, 2, 1, 1, 3, 0, 3, 2, 2, 1, 2, 3, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 3, 0], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [5, 0, 4, 4, 3, 0, 5], [1], [0], [2, 0, 0, 2, 0, 1, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [0], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0[len(in1):]:{:\\nres0 = in1[i1:] not in \"\"A\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 2, 1, 3, 2, 3, 2, 1, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 4, 0, 1, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [16], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 4, 1, 1, 7, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize()[i0:] not in \"\"Q\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 1, 5, 6, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 2, 1, 0, 1, 2, 3, 1, 1, 0, 0, 3, 0, 3, 1, 3, 2, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 1, 0, 2, 4, 0, 1], [0, 2, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 2, 0, 4, 0, 2, 4, 0, 1, 3, 4, 4, 0, 4, 0], [2, 2, 1, 2, 1], [4, 0], [2, 2, 0, 0, 2], [0], [21], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 5, 5, 2, 0, 11, 2, 2, 2, 0, 7, 1, 1, 15, 4, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[int(6.0):] != in0.capitalize():{:\\nres0 = ( ( int(7.0) + i1 ) != int(1.0) or ( s2.capitalize()[( len(\"\"V\"\") * int(5.0) ):int(6.0)].endswith((saveChr(i2) + in1.capitalize())) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 8, 2, 6, 1, 7, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1], [0, 1, 1], [3, 2, 0, 1, 2, 0, 2, 1, 0, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 3, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 3, 0, 3, 1, 1, 0, 1, 2], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0, 2], [17], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 32, 9, 6, 3, 6, 6, 2, 1, 16, 3, 1, 5, 2, 1, 0, 1, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[saveOrd(in1):mod(i0,int(7.0))]:{:\\nres0 = in1[mod(i1,( int(7.0) + i1 )):int(8.0)][i0:] not in getCharFromString(in0[:i1], i1)[divInt(( int(2.0) + i1 ),divInt(len(saveChr(( i0 * mod(len((\"\"R\"\" + s0.rstrip())),min(len(\"\"6\"\"), i0)) ))),divInt(max(int(6.0), i1),int(1.0)))):int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 2, 0, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 2, 1, 0, 2, 0, 0, 2], [0, 1, 1], [3, 2, 2, 1, 1, 2, 3, 1, 2, 2, 3, 0, 0, 2, 3, 1, 0, 2, 3, 2, 1, 2, 3, 2, 0, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 0, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 2, 0, 4, 2, 1, 2, 1], [2, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0, 1], [0, 5, 4, 4, 0, 0, 4, 1], [1], [0], [2, 3, 0, 4, 0, 0, 2, 2, 2, 0, 4, 3, 1, 0, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 1, 2, 0, 1], [0], [2], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 9, 0, 37, 12, 7, 4, 8, 5, 1, 0, 14, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (s0 + in2.capitalize())[len(in1):] not in in1[mod(( int(9.0) * int(7.0) ),mod(len(saveChr(int(5.0))),( divInt(max(i0, i2),divInt(min(int(2.0), i1),mod(abs(( int(0.0) - divInt(min(( i0 - i2 ), mod(saveOrd((\"\"C\"\" + s0)),int(1.0))),i1) )),int(0.0)))) - int(7.0) ))):i0][i2:][:divInt(int(9.0),i0)]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 1], [2, 2, 0, 0, 0, 1, 1, 1, 0], [0, 2], [0, 2, 2, 0, 2, 2, 2], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0, 2], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 6, 3, 2, 8, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 1, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 4, 1, 2, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 5, 4, 4, 5, 3, 4, 1, 0, 0, 4, 1, 2, 2, 0], [1, 1, 0, 1, 0, 0, 1], [0], [2, 4, 0, 4, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0, 3, 1, 0, 3, 4, 0, 4, 4, 0], [2, 1, 3, 1, 2, 2, 3, 1], [1, 0], [2, 1, 0, 0, 1], [0, 0, 3, 2, 1, 1, 3], [17, 4], [25, 0], [9], [20, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 2, 7, 1, 4, 0, 0, 2, 2, 7, 2, 2, 3, 2, 1, 0, 10, 10, 7, 0, 32, 9, 6, 4, 5, 15, 7, 1, 26, 8, 2, 2, 7, 2, 2, 1, 2], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2.capitalize()[len(saveChr(len(in1))):]:{:\\nloopBreak% = 0\\nwhile mod(int(9.0),int(6.0)) != mod(int(3.0),int(2.0)):{:\\nres0 = ( ( mod(i1,i0) + i1 ) \\l ( abs(int(8.0)) + i1 ) or ( in1 not in \"\"R\"\".rstrip()[:divInt(i2,( int(1.0) * int(8.0) ))] and True ) )\\nin2 = in0\\nin1 = saveChr(min(( max(int(7.0), mod(saveOrd((\"\"E\"\" + s1.capitalize())),i2)) - i1 ), int(9.0)))\\nb2 = \"\";9\"\".endswith(s0)\\ns0 = (\"\"za<\"\" + in1)\\ns1 = (s2.capitalize() + saveChr(int(8.0)).lstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = s0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 0, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 2, 0, 4], [1, 0, 1], [0], [2, 0, 1, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 0, 0], [17, 2, 0], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 1, 8, 1, 3, 0, 1, 4, 3, 1, 9, 1, 0, 3, 3, 3, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1[len(in1):] not in \"\"CA\"\".capitalize()[mod(int(0.0),i0):abs(i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(3.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 2, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0, 2, 0, 0], [0, 1, 1], [3, 2, 0, 0, 1, 0, 0, 0, 2, 3, 3, 0, 0, 2, 2, 3, 0, 2, 1, 3, 0, 2, 3, 2, 1, 0, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 3, 0, 1, 2, 3, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1, 0, 0, 1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 4, 2, 3, 4, 4, 0, 1, 0, 4, 4, 2, 0, 1], [2, 1, 3, 3, 2, 2], [0, 0], [2, 2, 0, 2, 2, 1, 2], [0, 0, 0, 3], [17, 16, 5], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 11, 11, 16, 1, 49, 14, 9, 9, 5, 6, 4, 0, 22, 6, 2, 7, 4, 3, 0, 0, 1], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] == in1[divInt(i2,i1):int(0.0)][i1:]:{:\\nres0 = ( i0 != i1 or ( saveChr(( saveOrd((in1.lstrip().lstrip() + \"\"R\"\")[:len(in0)]) + i2 ))[i1:].capitalize()[( ( min(i2, ( int(0.0) + max(i0, divInt(abs(( int(1.0) * i0 )),( len(s1[divInt(i0,int(2.0)):].capitalize().capitalize()) - int(2.0) ))) )) + i1 ) * i0 ):].endswith(\"\"QF;\"\") and True ) )\\ni2 = ( int(5.0) - min(int(7.0), max(i0, divInt(divInt(( int(7.0) - int(9.0) ),( int(8.0) * i0 )),int(5.0)))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [0, 1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 0, 0, 0, 1], [1, 1], [17], [4, 1], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 0, 0, 5, 2, 1, 7, 0, 0, 2, 2, 0, 2, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nb1 = in1[len(in0):abs(i0)] not in \"\"eb\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 2, 0, 2, 3, 0, 2, 2, 0, 1, 0, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [5, 5, 4, 4, 4, 3, 4, 1], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [9], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 6, 0, 19, 6, 5, 0, 6, 7, 2, 1, 16, 3, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in1):] not in in0[divInt(mod(i1,mod(abs(i0),divInt(mod(i0,int(0.0)),i1))),divInt(len((\"\"R\"\" + in1.rstrip()).capitalize()),int(6.0))):i2].capitalize()[len(\"\"9\"\"):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 2, 2, 0, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 4, 4, 2, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3, 0, 1], [1, 0], [2, 2, 0, 2, 1], [0, 1, 2], [17], [13], [2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 12, 0, 38, 11, 8, 5, 6, 5, 3, 1, 17, 5, 2, 5, 3, 1, 1, 1, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):].rstrip().capitalize()[len(getCharFromString((\"\"R\"\" + saveChr(mod(int(0.0),i0))), abs(i2))[:mod(( i2 + i0 ),i1)][i2:].lstrip()[divInt(( int(7.0) + i1 ),divInt(min(( i2 * ( len(in1) - divInt(min(i0, ( max(int(2.0), i0) + int(7.0) )),int(6.0)) ) ), i1),i0)):divInt(int(1.0),abs(int(7.0)))]):]:{:\\nres0 = \"\"n2\"\" not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 6, 3, 2, 5, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 2, 1, 0, 0, 2, 3, 2, 1, 3, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 2, 4, 0, 1], [0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 1], [1], [0], [2, 0, 0, 2, 0, 0, 4, 2, 4, 2, 4, 3, 4, 0, 1, 1, 0], [0, 3, 3, 2], [1, 0], [2, 2, 2, 1, 2, 0], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 0, 2, 0, 0, 6, 1, 1, 15, 4, 2, 4, 1, 0, 0, 0, 1], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString((s0.capitalize() + \"\";\"\").lstrip()[:i0].rstrip()[i2:], int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [2, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 2, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 1, 1, 2, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 2, 1, 1, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 1, 3, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 4, 1, 2, 1, 2, 1], [0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1], [5, 5, 4, 4, 3, 3, 4, 1], [1, 0, 0, 1, 0, 0, 0, 1], [0], [2, 0, 2, 0, 4, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 1, 0, 2, 2, 1, 1, 2], [5, 24], [14, 1, 0], [1, 5, 7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 6, 6, 5, 0, 23, 7, 5, 1, 6, 6, 8, 0, 16, 4, 1, 3, 8, 2, 3, 3, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2[len(in2[len(in1.capitalize()):]):] not in saveChr(mod(int(0.0),int(6.0)))[mod(abs(int(5.0)),( mod(i1,i0) + i1 )):divInt(len(\"\"F\"\"),int(2.0))]:{:\\nres0 = ( i1 != mod(i2,mod(int(8.0),int(1.0))) or ( in1.endswith((\"\"oY1\"\" + saveChr(len(in0))).rstrip()) and True ) )\\nin0 = \"\"5ba7\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}][{"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(4.0) ):{:\\nres0 = i0 \\le divInt(int(8.0),i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1, 0, 1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( i0 + ( int(3.0) + int(7.0) ) ))) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(6.0) ) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 169}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [2, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(3.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( i0 + ( int(3.0) + int(7.0) ) ))) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + i0 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [0, 0], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + divInt(i0,( int(5.0) * i1 )) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + divInt(i0,( int(7.0) * int(8.0) )) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + divInt(int(7.0),i0) ))) + ( int(4.0) * i1 ) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),min(( i0 + int(3.0) ), int(4.0)))) + int(5.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 323}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + min(i0, divInt(int(4.0),i1)) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [0], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 3, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 1, 13, 4, 4, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - mod(len(in0),min(( i0 + int(3.0) ), int(3.0))) ) + int(3.0) )\\ni0 -= int(8.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 313}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 6, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(6.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1], [4, 3, 3, 0], [0, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 9, 3, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),int(3.0))) + int(1.0) )\\ni2 -= i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 296}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 0, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( int(3.0) + int(7.0) ) + int(0.0) ))) + int(8.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 161}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),min(( i0 + int(3.0) ), int(3.0)))) + int(5.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 323}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 3, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),min(( i2 + int(3.0) ), int(7.0)))) + int(3.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 308}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 14, 6, 3, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + ( i0 * int(7.0) ) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 0, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + divInt(i0,( int(7.0) * i2 )) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 2, 1, 8, 7, 7], [2, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - divInt(len(in0),min(( i2 + int(3.0) ), int(2.0))) ) + int(1.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 181}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1], [1, 1, 5, 8, 7], [2, 2, 0, 0, 2], [1], [3, 2, 2, 3, 2, 1, 3, 0, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [1, 0, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 1], [1, 1, 0, 0, 0], [1, 5, 1, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [3, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 1, 9, 3, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le mod(( len(in2) + mod(int(1.0),len(s1)) ),i2)\\ni2 -= i0\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 300}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [0], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 1, 15, 4, 5, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - mod(len(in0),min(( i0 + int(3.0) ), int(3.0))) ) + int(4.0) )\\ni0 -= min(int(8.0), int(7.0))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 313}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [0], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [4, 3, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 1, 13, 4, 4, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - mod(len(in0),min(( i0 + int(4.0) ), int(3.0))) ) + int(4.0) )\\ni0 -= int(8.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 313}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 1, 5, 9, 5, 9, 1, 3, 9, 2, 9, 5, 9], [2, 1, 1, 0, 2, 0, 0, 0, 2, 2, 1], [1], [3, 2, 2, 3, 0, 2, 3, 1, 2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 3, 3, 1, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3], [0, 0, 0, 2, 2, 2, 0, 0, 1], [0, 1, 1, 0, 0], [2, 5, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 7, 1, 23, 8, 5, 6, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + i2 ) + divInt(len(in0),int(6.0)) )\\ni1 += ( i1 * ( mod(mod(( int(1.0) * i0 ),int(59.0)),i2) * min(min(int(5.0), i0), i0) ) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 349}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [0, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 1, 13, 4, 4, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\l ( ( len(in2) - divInt(len(in0),min(( int(3.0) + int(3.0) ), int(4.0))) ) + int(8.0) )\\ni0 -= int(7.0)\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 276}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1], [1, 1, 5, 8, 7], [2, 2, 1, 0, 2], [1], [3, 2, 2, 3, 2, 1, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [1, 0, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 1], [0, 1, 0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 9, 3, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(( len(in2) + mod(int(1.0),len(in0)) ),int(1.0))\\ni2 -= i2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 301}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [1, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 1, 3, 1, 3, 3, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [1, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( int(1.0) + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 300}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 1, 3, 8, 7], [2, 2, 1, 0, 2], [0], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 1, 11, 4, 3, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(divInt(len(in0),int(8.0)),i2)) + int(1.0) )\\ni2 = int(3.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 0], [0], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - mod(len(in0),min(( i0 + int(3.0) ), int(3.0))) ) + int(4.0) )\\nb1 = b2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 313}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 1, 2, 1, 1], [2, 2, 0], [0, 2, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 9, 9, 4, 7, 0, 8], [1, 0, 1, 1, 0], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 2, 2, 1, 1, 3, 1, 0, 0, 2, 3, 0, 0], [1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 2, 2, 3], [0, 1, 0], [1, 1, 0, 0, 1], [1, 5, 3, 5, 4, 2, 2, 1, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 13, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 1, 0, 10, 3, 3, 0, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le mod(mod(len(in2),divInt(len(in0),int(31.0))),int(0.0)):{:\\nres0 = i1 \\le int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 191}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 1, 3, 8, 7], [2, 2, 1, 0, 2], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 1, 11, 4, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(divInt(len(in0),int(8.0)),i2)) + int(1.0) )\\ni2 += int(3.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 1, 5, 9, 9, 9, 1, 3, 9, 2, 9, 5, 9], [2, 1, 1, 0, 2, 0, 0, 0, 2, 2, 1], [1], [3, 2, 2, 3, 0, 2, 3, 1, 2, 0, 2, 2, 2, 2, 1, 0, 1, 3, 2, 1, 1, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3], [1, 0, 0, 2, 2, 2, 0, 0, 1], [0, 0, 0, 0, 0], [2, 5, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 6, 1, 23, 9, 4, 6, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - i2 ) + divInt(len(in0),int(6.0)) )\\ni1 += ( i1 * ( divInt(divInt(( int(1.0) * i0 ),int(59.0)),min(divInt(int(9.0),int(9.0)), i2)) * i0 ) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 349}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 5, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(5.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 175}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 1, 3, 8, 7], [2, 2, 1, 0, 2], [0], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 1, 11, 4, 3, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(divInt(len(in0),int(8.0)),i2)) + int(1.0) )\\ni2 = int(3.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [0, 5], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [8, 1, 5, 8, 7, 6, 6, 8, 6, 0, 1, 1, 0, 9, 4, 6, 0], [2, 0, 1, 0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 2, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 0, 0, 1, 0, 3, 1, 0, 1, 1, 2, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [4, 3, 3, 0, 0, 4, 1], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 1, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 6, 0, 26, 10, 4, 5, 5, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\l ( ( len(in2) + mod(divInt(len(in0),int(8.0)),i2) ) + ( int(1.0) + divInt(divInt(( int(5.0) * i0 ),int(8.0)),i1) ) )\\nb1 = divInt(i0,int(7.0)) != ( min(i2, i1) - int(6.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 338}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 2, 2, 2, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 8, 3, 3, 5, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(divInt(( int(8.0) + i2 ),int(13.0)),len(in0))) + divInt(divInt(( int(8.0) + i2 ),int(7.0)),i1) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 300}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + divInt(len(in0),( divInt(i0,int(3.0)) + int(7.0) )) ) + divInt(i0,( int(7.0) * i1 )) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 340}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [0], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 1, 13, 4, 4, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( ( len(in2) - mod(len(in0),min(( i0 + int(3.0) ), int(3.0))) ) + int(4.0) )\\ni0 -= int(8.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 313}, {"genotype": [[0], [0, 1, 1], [0, 2, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 2], [0, 0], [2], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 1, 1], [8, 1, 3, 8, 7, 2, 6, 8, 7, 8], [0, 2, 1, 0, 2, 0, 2, 0, 0, 2, 1], [0], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1], [2, 5, 3, 2, 4, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 0], [0, 3, 2], [4], [0, 2, 0, 0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 9, 9, 11, 1, 30, 10, 3, 4, 6, 7, 0, 0, 13, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(divInt(len(in0),int(8.0)),i0)) + int(1.0) )\\nloopBreak% = 0\\nwhile (s2 + (in1[int(3.0):( divInt(divInt(int(8.0),i2),i1) + i0 )][mod(i2,int(7.0)):] + in2))[( int(26.0) + ( i0 * i2 ) ):i0] == s2[i0:i2]:{:\\ni1 = int(87.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 7, 4, 1, 7, 7], [0, 2, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - divInt(len(in0),min(( i0 + int(3.0) ), int(7.0))) ) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 206}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [5, 2, 6, 8, 3, 5, 5], [2, 2, 1, 2, 0], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 13, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(min(int(52.0), mod(i2,int(6.0))), i2)), int(8.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 244}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1], [0, 3, 8, 8, 7, 7], [0, 1, 1, 0, 2], [1], [3, 2, 2, 2, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 1, 13, 5, 3, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( mod(( len(in2) - len(in0) ),mod(i0,int(0.0))) + int(3.0) ) + int(8.0) )\\ni1 -= int(8.0)\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 151}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 2, 2, 4, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( int(3.0) + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 314}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1], [4, 3, 3, 0], [0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 9, 3, 3, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),mod(len(in0),int(3.0))) + int(1.0) )\\ni2 = i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 297}, {"genotype": [[0], [1, 1, 1, 0, 1], [0, 2, 2, 1, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [3, 0, 0, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 3, 3, 3], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 8, 3, 3, 0, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le mod(mod(len(in2),divInt(len(in0),int(30.0))),int(0.0))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 189}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [9, 1, 6, 8], [2, 0, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 0, 1], [4, 3, 3, 0], [0, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 9, 3, 3, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( ( len(in2) + divInt(len(in0),int(9.0)) ) + int(1.0) )\\ni2 = i0\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 337}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 6, 7, 8, 3, 5], [1, 1, 2], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3], [0, 1, 1], [2, 1, 3, 0, 0, 3], [0], [1, 1, 0], [4, 5, 4, 3, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(int(46.0), mod(i1,i1)), i2) ), int(7.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 246}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [0], [3, 2, 2, 1, 1, 3, 1, 3, 0, 1, 3, 1, 3], [0, 1, 1], [4, 3, 3, 0], [0, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 1, 7, 2, 2, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(int(3.0),int(1.0)) + len(in2) )\\ni2 = int(6.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 314}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 3, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 18, 6, 5, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),min(( i0 + int(3.0) ), min(( i0 + divInt(int(3.0),i1) ), int(5.0))))) + i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 297}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7], [1, 0, 1, 0, 2], [1], [3, 2, 2, 1, 0, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 1, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 7, 2, 3, 3, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( int(3.0) - i1 ) + len(in2) )\\ni0 -= len(in0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 314}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [0, 0], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [3, 4, 6, 8, 3, 5], [0, 1, 1], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 1, 3, 3], [0, 0, 1], [2, 1, 3, 0, 0, 3], [0, 2], [1, 1, 0], [4, 5, 5, 1, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(int(34.0), ( i0 * int(6.0) )), i1) ), int(8.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 244}, {"genotype": [[0], [0, 1, 1], [0, 2, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 2], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 1, 3, 8, 7, 2, 6, 8, 7, 8], [0, 2, 1, 0, 2, 0, 2, 0, 0, 2, 1], [0], [3, 2, 2, 3, 2, 2, 3, 1, 1, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1], [2, 5, 3, 2, 4, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 0], [0, 3, 2], [4], [0, 2, 0, 0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 9, 9, 9, 1, 28, 9, 3, 3, 6, 7, 0, 0, 13, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(divInt(len(in0),int(8.0)),int(1.0))) + int(3.0) )\\nloopBreak% = 0\\nwhile (s2 + (in1[int(8.0):( divInt(divInt(int(7.0),i0),int(26.0)) + i2 )][mod(i1,int(8.0)):] + in2))[( i0 + int(7.0) ):i2] in s2[i0:i2]:{:\\ni0 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 314}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 0, 7, 8, 3, 5], [1, 1, 1], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 1, 1, 3, 3], [0, 1, 1], [2, 1, 3, 0, 0, 3], [1], [0, 0, 0, 0, 0], [4, 5, 3, 0, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 13, 2, 6, 1, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) - min(min(int(40.0), divInt(i1,i1)), int(7.0)) ), int(8.0))) \\l len(in2)\\nin0 = s0\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 244}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 6, 8, 0], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 2, 3, 2, 1, 1, 3, 3, 0, 0, 1, 1, 3], [0, 1, 1, 0, 1], [4, 3, 3, 0, 4, 2, 3], [0, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5, 0], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 19, 5, 7, 2, 3, 7, 0, 0, 12, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),int(3.0))) + ( min(divInt(int(2.0),int(6.0)), saveOrd((s2 + (in1[:abs(i2)][:i0] + in2))[int(8.0):int(0.0)])) + len(s0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 297}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 4, 7, 8, 3, 5], [1, 1, 1], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 1, 1, 3, 3], [0, 1, 1], [2, 1, 3, 0, 0, 3], [1], [0, 0, 0, 0, 0], [4, 5, 3, 5, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 13, 2, 6, 1, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) - min(min(int(44.0), divInt(i1,i1)), int(7.0)) ), int(8.0))) \\l len(in2)\\nin0 = in2\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 244}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(s0),min(( i2 + int(3.0) ), int(7.0)))) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 325}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(9.0) ) + int(7.0) ))) + divInt(i0,( int(7.0) * i1 )) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 197}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1], [4, 3, 3, 0], [0, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 9, 3, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),mod(len(in0),int(3.0))) + int(1.0) )\\ni2 -= i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 297}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 2, 3, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( int(3.0) + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 314}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 2, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 2, 3, 1, 1, 1, 3], [0, 1, 1, 1], [4, 3, 3, 0], [0, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 4, 4, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),int(3.0))) + divInt(min(int(2.0), int(6.0)),int(8.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 297}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [5, 2, 6, 8, 3, 5, 5], [2, 2, 1, 2, 0], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 13, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(min(int(52.0), mod(i2,int(6.0))), i2)), int(8.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 244}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [4, 1, 5, 8, 7, 6, 6, 8, 6, 0, 1, 1, 0, 9, 4, 6, 0], [1, 0, 1, 0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 3, 1, 2, 3, 2, 3, 0, 1, 0, 2, 0, 1, 2, 3, 0, 3, 1, 0, 3, 1, 0, 1, 1, 2, 1, 1], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [4, 3, 3, 0, 0, 4, 1, 1, 1], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 16, 16, 7, 0, 35, 9, 9, 3, 6, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\l divInt(( len(in2) + mod(divInt(len(in0),int(4.0)),i1) ),min(int(1.0), ( min(divInt(saveOrd((s2 + (in1[i0:int(5.0)][:i1] + in2))[divInt(i0,int(8.0)):( max(i2, max(int(7.0), i1)) + max(int(6.0), i1) )]),int(6.0)), int(86.0)) + mod(int(01.0),int(10946.0)) )))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], "other_info": {}, "test_fitness": 371}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 2, 4, 8, 7, 7], [2, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - divInt(len(in0),min(( i2 + int(3.0) ), int(2.0))) ) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [0, 1, 1, 2], [0, 0], [5], [3], [0], [], [1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [4, 1, 6, 8, 7, 4, 3, 3, 9, 7, 1, 5, 6], [2, 0, 1, 2], [1], [3, 2, 0, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3, 1, 0, 1, 1], [0, 1, 1], [4, 3, 3, 0], [0, 2], [0, 1, 0], [1, 5, 3, 2, 4, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 0], [0, 3, 2], [4], [0, 0, 2, 1], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 2, 4, 2, 1, 1, 1, 0, 0, 13, 13, 4, 1, 17, 2, 4, 2, 1, 7, 0, 0, 13, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( i2 + len(in2) ) and divInt(len(in0),int(41.0)) \\le int(6.0) )\\nloopBreak% = 0\\nwhile (s2 + (in1[i0:][int(8.0):int(743.0)] + in2))[int(3.0):min(int(97.0), i1)].endswith(s2[:int(1.0)]):{:\\ni2 *= int(56.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1], [3, 4, 6, 8], [2, 0, 1], [], [3, 3, 3, 3, 2, 3, 1, 2, 0, 1, 1, 1, 3], [0, 0, 1, 0], [4, 3, 3, 0], [1, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 2, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( i0 + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [1, 1], [2, 2, 0], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 1, 5, 9, 5, 9, 1, 3, 9, 2, 9, 5, 9], [2, 1, 1, 0, 2, 0, 0, 0, 2, 2, 1], [1], [3, 2, 2, 3, 0, 2, 3, 1, 2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 3, 1, 1, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3], [0, 0, 0, 2, 2, 2, 0, 0, 1], [1, 0, 0, 0, 0], [2, 5, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 8, 3, 3, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + i2 ) + mod(len(in0),int(6.0)) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 2, 1, 1, 1, 3], [1, 1, 1, 1], [4, 3, 3, 0], [0], [0, 0, 0, 0], [0, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 1, 11, 4, 3, 0, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le divInt(divInt(len(in2),divInt(len(s2),int(3.0))),int(1.0))\\ni2 = divInt(int(6.0),int(8.0))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2, 1, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 7, 0, 24, 8, 3, 5, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(getCharFromString((in0 + (s2[( ( i0 + int(3.0) ) + int(7.0) ):divInt(i0,( int(4.0) + i1 ))][int(8.0):i0] + in1))[( i2 * int(7.0) ):], i1)),int(7.0))) - i1 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [3, 1, 5, 9, 5, 9, 1, 3, 9, 2, 9, 5, 9], [2, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1], [1], [3, 2, 2, 3, 0, 0, 3, 1, 2, 0, 2, 2, 2, 2, 1, 0, 3, 0, 2, 3, 1, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3], [0, 0, 0, 2, 2, 2, 0, 0, 1], [0, 0, 0, 0, 0], [2, 5, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 1, 7, 2, 3, 3, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + i2 ) + i1 )\\ni1 += len(in0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [], [3, 3, 2, 3, 2, 3, 1, 2, 0, 1, 1, 1, 3], [0, 1, 0, 0], [4, 3, 3, 0], [0, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 2, 6, 8], [2, 0, 1], [], [3, 3, 2, 3, 3, 3, 1, 2, 3, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 3, 0], [0, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 2, 4, 8, 7, 7], [2, 0, 1, 0, 2], [1], [3, 3, 1, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 0, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 3, 8, 3, 1, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 0, 0, 1, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 4, 2, 3], [0], [1, 1, 0, 0, 1], [2, 5, 3, 5, 4, 1, 2, 3, 4, 3, 3], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 15, "mapping_values": [1, 5, 5, 3, 2, 2, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 16, 5, 4, 1, 4, 11, 0, 2, 11, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in2),divInt(len(in0),int(31.0))),i0):{:\\nloopBreak% = 0\\nfor in2 in (in1 + s1)[i2:]:{:\\nloopBreak% = 0\\nfor s2 in getCharFromString(in0, int(0.0)):{:\\nres0 = i1 \\l ( divInt(saveOrd(in1),int(8.0)) + int(3.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 203}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 1, 3, 8, 7], [2, 2, 1, 0, 2], [0], [3, 2, 2, 3, 2, 0, 3, 2, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le divInt(mod(len(in2),divInt(i2,len(in0))),( i2 * int(8.0) ))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 0, 3, 2, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( i0 + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( i0 + ( int(3.0) * int(7.0) ) ))) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 288}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [8, 1, 5, 8, 7, 6, 6, 9, 6, 0, 1, 1, 0, 9, 3, 6, 0], [2, 0, 1, 0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 2, 2, 1, 0, 3, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 1, 3, 1, 0, 3, 1, 0, 1, 1, 3, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [4, 3, 3, 0, 0, 4, 1], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [1, 5, 3, 3, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 16, 16, 6, 0, 32, 10, 6, 5, 5, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\l ( ( len(in2) + divInt(mod(( int(8.0) + i2 ),len(in0)),int(1.0)) ) + divInt(divInt(( int(5.0) * i0 ),int(8.0)),i1) )\\nb1 = divInt(i0,int(7.0)) \\le ( min(int(6.0), min(int(6.0), i2)) - saveOrd((in0 + (in1[int(96.0):i1][:int(01.0)] + in2))[int(10936.0):]) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 366}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 0, 3, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 1, 0], [2, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [1, 2, 2, 0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2[:i0]) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 1, 2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 6, 3, 3, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len((in0 + (s2[( ( i0 + int(3.0) ) + int(7.0) ):][:int(4.0)] + in1))[:i0][divInt(int(8.0),i1):]),int(7.0))) + i0 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 1, 3, 8, 7], [2, 2, 1, 0, 2], [0], [3, 3, 2, 3, 2, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [0, 5, 1, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 1, 11, 3, 4, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le len(in2)\\ni2 = ( len(s1) + divInt(mod(min(int(8.0), i2),int(1.0)),int(3.0)) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [1, 1, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 4, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(i1,( ( i1 + int(3.0) ) + int(7.0) ))) + divInt(i2,( int(7.0) * i0 )) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [], [3, 3, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 0, 0], [4, 3, 4, 0], [0, 0], [0, 1, 0], [0, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 7, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(divInt(len(in0),int(8.0)),i0)) + int(7.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 174}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 3, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 1, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 5, 5, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(s1),min(( i0 + min(int(3.0), int(3.0)) ), i0))) + ( int(5.0) + i1 ) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 337}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 0, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 3, 2, 3, 2, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [1, 2], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1, 1, 2], [0], [3, 3, 2, 3, 3, 3, 3, 2, 0, 1, 0, 3, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [0, 1, 1], [4, 3, 3, 0, 3, 3, 2, 1, 0], [0], [0, 1, 0], [0, 5, 4, 2, 4, 5, 0], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [1, 1, 2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [2, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [1, 1, 1, 0, 0, 0, 0], [4, 3, 2, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 4, 0, 21, 6, 5, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le divInt(mod(len(in2),divInt(abs(min(( i2 + int(3.0) ), int(7.0))),int(4.0))),min(i0, int(8.0))):{:\\nres0 = int(7.0) \\le ( i2 + ( i0 + int(71.0) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 1], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 0, 1, 0, 1], [3, 0, 4, 8, 7, 7, 8, 9], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 2, 0, 1, 2, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 1, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 3, 0, 18, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - divInt(len(in0),max(( mod(i0,int(3.0)) + divInt(int(0.0),int(4.0)) ), int(8.0))) ) + i0 )\\nb1 = int(77.0) \\le i1\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 257}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 0, 2], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\le ( len(in2) + ( min(min(abs(i2), int(24.0)), i1) - int(8.0) ) )\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 174}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [0], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [0, 2, 1, 0, 2], [0], [3, 2, 2, 2, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( mod(( len(in2) - len(in0) ),mod(i0,int(3.0))) + int(3.0) ) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 181}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 1, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 2, 4], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 10, 2, 5, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\le ( len(in2) + ( min(abs(int(248.0)), i2) - int(8.0) ) )\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 174}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 0, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 8, 3, 3, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\l ( ( len(in2) + i2 ) + divInt(len(in0),int(8.0)) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 331}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 1, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 0, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [2, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\l ( divInt(len(in2),mod(divInt(len(in0),int(8.0)),i2)) + i2 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 197}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [3, 4], [0, 1], [0, 0], [], [2], [], [], [], [1, 1, 1, 1, 1], [8, 1, 3, 8, 7], [2, 2, 1, 0, 2], [1], [3, 3, 2, 3, 2, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 2, 1, 11, 3, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not saveOrd(s0) \\ge len(in2)\\ni2 += ( len(in0) + divInt(mod(min(int(8.0), i2),int(1.0)),int(3.0)) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 293}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [0], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 6, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 1, 13, 4, 4, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - mod(len(in0),min(mod(i0,int(3.0)), int(3.0))) ) + int(6.0) )\\ni0 += int(8.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 187}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [4, 4, 8, 8], [2, 1, 1], [0], [3, 3, 2, 3, 2, 2, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 2, 4], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 3, 5, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\le ( len(in2) + ( divInt(min(abs(i2), int(44.0)),i1) - int(8.0) ) )\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 174}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1], [3, 3, 8, 8, 7, 7], [0, 1, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 2], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 14, 4, 4, 3, 1, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - mod(len(in0),len((s2 + (in1[( i0 + int(3.0) ):][int(3.0):] + in2))[int(8.0):int(8.0)])) ) + int(7.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 181}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 1, 3, 8, 7], [2, 2, 1, 0, 2], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 1, 11, 4, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(divInt(len(in0),int(8.0)),i2)) - int(1.0) )\\ni2 += int(3.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 197}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 4, 0], [0, 0], [0, 1, 0], [0, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 8, 3, 3, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(saveOrd(in2),int(3.0))) + int(1.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 314}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 0, 0], [0, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 4, 3, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(min(int(3.0), ( i2 + int(1.0) )),int(6.0))) + int(8.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 357}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 1, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(int(3.0),( ( i0 + int(7.0) ) + int(4.0) ))) + int(8.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 357}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [0], [3, 2, 2, 3, 2, 3, 1, 3, 0, 1, 1, 1, 3], [0, 0, 1], [4, 3, 3, 0], [0, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 3, 4, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( ( len(in2) + divInt(len(in0),int(3.0)) ) - min(i2, int(1.0)) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 396}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 5, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( mod(i0,int(3.0)) + int(5.0) ))) + divInt(i0,( int(7.0) + i1 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 1, 2], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [8, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 4, 1, 4, 0], [0, 2], [], [2], [0], [5], [], [], []], "fitness": 18, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 8, 2, 3, 0, 2, 3, 1, 0, 8, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(8.0):]) \\le len((in2 + getCharFromString(\"\"F\"\", divInt(mod(int(0.0),len(in1.capitalize())),i0))))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 244}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 0, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(6.0) ) + min(int(0.0), i0) ))) + divInt(int(5.0),i1) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 197}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 2, 4, 8, 7, 7], [2, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - divInt(len(in0),min(mod(i2,int(3.0)), int(2.0))) ) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 195}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 3, 8], [2, 0, 2, 0, 2], [1], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 2, 7, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( len(in2) + ( min(min(max(i2, int(24.0)), i0), int(3.0)) - len(in0) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 161}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 0, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(6.0) ) + int(0.0) ))) + int(5.0) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 197}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 7, 8, 8], [0, 1, 1], [1], [3, 3, 2, 3, 3, 0, 3, 2, 0, 1, 0, 1, 3, 1], [0, 0, 1], [2, 3, 3, 0, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 11, 2, 5, 2, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( len(in2) + min(i0, min(( i1 - int(27.0) ), i1)) )\\nin0 = s2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 195}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) - int(5.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 213}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 5, 8], [1, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 2, 7, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( len(in2) + ( min(min(max(i1, int(24.0)), i1), int(5.0)) - len(in0) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 161}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [0, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 2, 7, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( len(in2) + ( min(min(max(i0, int(24.0)), i1), int(8.0)) - len(in0) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 161}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 0, 0], [0, 0, 2], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 2, 6, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3, 0, 3, 1, 2, 1, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3, 1, 2], [0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 3, 3, 3, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 18, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 2, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 3, 0, 19, 3, 8, 0, 3, 9, 0, 2, 10, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le len(in2):{:\\nloopBreak% = 0\\nfor in0 in in0:{:\\nloopBreak% = 0\\nfor in1 in (s1 + s2)[mod(len(getCharFromString(in0, mod(abs(abs(len(in0))),i0))),int(32.0)):]:{:\\nres0 = i2 \\l int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = max(i1, abs(int(8.0))) != divInt(int(7.0),int(83.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [0, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 2, 7, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( len(in2) + ( min(min(max(i0, int(24.0)), i1), int(8.0)) - len(in0) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 161}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 6, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 0, 2, 3, 2, 3, 3, 2, 0, 3, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 4, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2, 2], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 16, 4, 5, 2, 2, 6, 0, 0, 12, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2[i0:]) \\le ( len(in2) + divInt(len((in0 + (s2[saveOrd(in1):][mod(i0,min(int(3.0), int(6.0))):] + in2))[i1:]),( int(5.0) + i0 )) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 382}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [7, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [3, 5, 0, 1, 2], [1], [], [2, 0, 3, 0, 0, 1, 0], [0], [], [2], [0], [5], [], [], []], "fitness": 19, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 3, 3, 1, 0, 9, 2, 3, 0, 2, 5, 1, 0, 7, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(in0[int(7.0):]) \\le len((in2 + s0)):{:\\nres0 = divInt(mod(int(0.0),len(\"\"F\"\")),i0) \\le int(6.0)\\n:}else:{:\\ns1 = s2\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 256}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [3, 4, 6, 8, 3, 5], [0, 1, 1], [0], [3, 3, 2, 3, 0, 3, 1, 2, 0, 2, 0, 1, 3, 3, 3], [0, 0, 1], [2, 1, 3, 0, 0, 3, 3], [0, 2], [0, 1, 0], [4, 5, 5, 1, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 15, 3, 7, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + i0 ), min(int(34.0), ( i1 * divInt(i1,int(6.0)) )))) \\l min(len(in2), len(in2))\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 0, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 4, 0], [0, 0], [0, 1, 0], [0, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 8, 3, 3, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(saveOrd(in2),int(3.0))) + int(0.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 4, 7, 8, 3, 5], [1, 2, 2, 2], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 2, 3, 3, 0], [0, 0, 1], [2, 1, 3, 0, 2, 3, 2], [0, 0], [1, 1, 0], [4, 5, 3, 4, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 15, 3, 7, 2, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(abs(int(44.0)), ( i1 + i2 )) ), i2)) \\l mod(len(in2),abs(i2))\\nin0 = in1\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 0, 3, 0, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [4, 1, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 4, 1, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\l max(len((in2 + in1)), ( i0 + abs(i1) ))\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 277}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 1], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1], [6, 1, 3, 8, 7, 9, 8, 2, 6, 7], [2, 0, 2, 2, 2, 2, 0, 1, 2], [0], [3, 3, 2, 2, 2, 3, 1, 2, 0, 1, 3, 1, 3, 2, 0, 0, 3, 0, 2, 1, 0, 0, 2, 1, 3, 3, 2, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1], [3, 3, 0, 0, 1, 1, 2, 2], [0, 1, 0, 2], [1, 0, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 9, 1, 29, 8, 8, 4, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in1) \\l len(in2)\\ni2 = ( ( mod(min(int(6.0), divInt(i0,int(1.0))),min(int(3.0), max(( i2 + i2 ), max(i2, ( int(8.0) - i2 ))))) + i0 ) * divInt(int(7982.0),abs(abs(mod(i1,i2)))) )\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 1], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [8, 1, 5, 3, 7, 9, 8, 2, 6, 7], [2, 0, 2, 2, 2, 2], [0], [3, 3, 2, 2, 2, 0, 1, 2, 0, 1, 3, 1, 3, 1, 0, 0, 3, 0, 2, 1, 0], [0, 0, 1, 1, 0], [3, 3, 0, 0, 1, 1], [1, 1, 0], [1, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in1) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 0, 1], [7, 1, 6, 8, 3, 1], [2, 0, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1], [4, 3, 3, 0], [0, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 2], [], [], [], [], []], "fitness": 20, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 1, 0, 12, 3, 3, 1, 2, 7, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),int(7.0))) + int(1.0) )\\ns2 = (in1 + (in2[i2:][int(6.0):] + in0))[int(8.0):int(31.0)]\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 1, 2], [], [0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [8, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 0, 1], [4, 3, 3], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 4, 1, 4, 0], [0, 2], [], [2], [0], [5], [], [], []], "fitness": 20, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 8, 2, 3, 1, 1, 3, 1, 0, 8, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(8.0):]) \\l len((in2 + getCharFromString(\"\"F\"\", divInt(( int(0.0) + len(in1.capitalize()) ),i0))))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 247}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 0, 0, 1], [1, 5, 3, 2, 4, 5], [], [0, 0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 20, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( mod(len(in2),mod(len(in0),min(( i0 + int(3.0) ), ( int(7.0) + i0 )))) + divInt(int(5.0),i1) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 0, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 20, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(10.0):]) \\l len((in2 + s0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 230}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 2, 4, 8, 7, 7], [2, 0, 1, 0, 2], [1], [3, 0, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 4, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 20, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 2, 0, 15, 3, 4, 2, 1, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(s2, i2)) \\le ( len(in2) - divInt(saveOrd((in0 + (s2[:min(( i0 + int(3.0) ), int(2.0))][:int(4.0)] + in1))[int(8.0):int(7.0)]),int(7.0)) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0], [1, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 20, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(len(in2),mod(len(in0),min(( i2 + int(3.0) ), int(7.0)))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 314}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 - int(3.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 222}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [0], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1], [3, 3, 4, 8, 7, 7, 0, 2], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 4, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 3, 1, 18, 5, 4, 4, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - mod(len(in0),saveOrd((s2 + (in1[:( mod(int(3.0),int(3.0)) + int(4.0) )][int(8.0):int(7.0)] + in2))[int(7.0):i0])) ) + int(02.0) )\\ni0 -= i1\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 290}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 2, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 2, 3, 1, 0, 1, 3], [0, 1, 1, 0], [4, 3, 3, 0], [0, 0], [1, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(len(in2),mod(len(in0),int(3.0))) + ( min(int(2.0), i2) + int(6.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 325}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [9, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 21, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(9.0):]) \\le len((in2 + in1))\\n", "test_case_results": [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 274}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [7, 2, 5, 0, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 2, 1, 1, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),min(( i0 + int(7.0) ), ( int(2.0) + int(5.0) )))) + divInt(int(0.0),int(8.0)) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 286}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [9, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 21, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(9.0):]) \\le len((in2 + in1))\\n", "test_case_results": [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 274}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [9, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 21, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(9.0):]) \\le len((in2 + in1))\\n", "test_case_results": [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 274}, {"genotype": [[0], [0, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [9, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 21, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 4, 1, 0, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(9.0):]) \\le len((in2 + in1))\\ns1 = \"\"F\"\"\\n", "test_case_results": [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 274}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [7, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 21, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(7.0):]) \\le len((in2 + in1))\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 305}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 - int(3.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 222}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 2, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 3, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(10.0):]) \\l abs(len((in2 + in1)))\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [0], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 3, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 2, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 1, 12, 3, 5, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( len(in2) - len(in0) )\\ni0 += ( abs(min(mod(i0,int(3.0)), int(3.0))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + divInt(len(in0),min(( i0 + int(3.0) ), int(3.0))) ) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 430}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 1, 3, 8, 7], [0, 2, 1, 0, 2], [0], [3, 2, 2, 3, 0, 2, 3, 1, 1, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [1, 0, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 8, 3, 3, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le divInt(( len(in2) + i0 ),mod(len(in0),int(5.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 279}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 6, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 18, 8, 3, 5, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + divInt(( ( int(6.0) * i0 ) - int(8.0) ),i1) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 236}, {"genotype": [[0], [1, 1], [2, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 1], [3, 2, 6, 8, 8, 2, 8, 5], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 2, 3, 1, 1, 1, 3, 0, 1, 1], [0, 0, 1, 0], [4, 3, 3, 0, 1], [0, 0, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 1, 0, 16, 4, 5, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( ( len(in2) + divInt(len(in0),int(3.0)) ) + ( min(int(2.0), int(6.0)) - int(8.0) ) ):{:\\nres0 = max(i2, int(8.0)) \\le int(285.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 373}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 5, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 3, 3, 3, 2, 0, 1, 1, 2, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 1, 15, 4, 5, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - len(in0) ) + min(min(mod(i0,int(3.0)), int(3.0)), ( int(5.0) + int(8.0) )) )\\ni0 -= int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 2, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 2, 3, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 3, 0], [0, 0], [1, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(len(in2),mod(len(in0),int(3.0))) + ( min(int(2.0), int(6.0)) + int(8.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 335}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1], [3, 1, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 0, 0, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 3, 0], [0, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 8, 3, 3, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),int(3.0))) + i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 253}, {"genotype": [[0], [1, 1], [0, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [9, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [3, 5, 5, 1], [1], [], [2, 0, 3, 0, 0, 1, 0], [0], [], [2], [0], [5], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(9.0):]) \\le len((in2 + in2))\\n", "test_case_results": [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 250}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 2, 3, 1, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 1, 12, 2, 5, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( len(in0) + int(2.0) )) \\l ( len(in2) - min(min(i2, int(48.0)), i1) )\\ni1 = int(8.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 222}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [9, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [3, 5, 5, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(9.0):]) \\le len((in2 + in2))\\n", "test_case_results": [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 250}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 2, 4, 8, 7, 7], [2, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 2, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 23, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 13, 4, 4, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( abs(divInt(len(in2),min(( i2 - int(3.0) ), int(2.0)))) + int(4.0) ) + int(8.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 403}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 1, 1, 3], [0, 1, 1, 1], [4, 3, 3, 0], [0, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 23, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 1, 11, 4, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(divInt(len(in0),int(3.0)),i2)) + int(1.0) )\\ni0 -= int(6.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 249}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1], [9, 8, 5, 8, 7], [2, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 1, 1, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 0, 1, 0, 1, 1], [4, 2, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 0, 0, 0], [1, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 23, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 11, 4, 3, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( ( abs(( mod(len(in2),int(98.0)) + i2 )) + int(5.0) ) + int(8.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 420}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [7, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 23, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(( len(in0) + ( i0 + int(7.0) ) ),int(3.0))) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 331}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [4], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 24, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(3.0) ) + i0 ))) + int(7.0) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 24, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( int(3.0) + i0 ))) + int(7.0) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [9, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 24, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),min(( i2 + int(9.0) ), int(7.0)))) - int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 286}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 2, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 2, 3, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 3, 0], [0, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 24, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),divInt(len(in0),int(3.0))) + ( min(int(2.0), int(6.0)) + int(8.0) ) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 236}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 0, 2], [0, 0], [5], [3, 2], [1], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5, 1, 2], [1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 3, 0, 1, 4, 0], [0, 3, 2], [4], [2, 1, 2], [1], [], [17], [], []], "fitness": 24, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 4, 1, 1, 2, 1, 0, 0, 5, 5, 4, 0, 18, 6, 3, 3, 3, 8, 1, 0, 17, 1, 0, 3, 1, 0, 1, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(5.0) ) or not (s2 + (in1[i0:][:divInt(int(8.0),i1)] + in2))[int(8.0):].endswith(((s1 + \"\"r\"\") + getCharFromString(s2, i0))) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 24, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + i0 ))) + int(7.0) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1], [0, 1, 0, 1], [2], [0, 2, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [8, 8, 6, 8], [1, 1, 1], [0, 1], [3, 1, 3, 3, 2, 3, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 2, 3, 0, 0], [0], [0, 1, 0], [3, 5, 3, 1], [1], [], [4, 0, 3, 0, 0, 1], [0], [], [2], [0], [25], [], [], []], "fitness": 24, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 3, 0, 0, 3, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(in0, int(8.0))) \\l abs(len((in2 + in0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 402}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 1], [1, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 3, 0, 1, 0, 2, 3, 1, 1, 1, 3, 1, 0, 1], [1, 1, 0, 0, 1], [4, 3, 3, 2, 2, 3], [0, 2], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 3, 3, 3], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 25, "mapping_values": [1, 5, 5, 3, 2, 2, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 7, 7, 2, 0, 16, 4, 5, 2, 2, 10, 0, 2, 10, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(s2) \\le mod(mod(len(in2),( len(in0) + int(31.0) )),abs(i0)):{:\\nloopBreak% = 0\\nfor in0 in (in1 + s1)[int(0.0):]:{:\\nloopBreak% = 0\\nfor s2 in getCharFromString(in0, i2):{:\\nres0 = ( abs(int(8.0)) * int(7.0) ) \\l int(83.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 392}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 25, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( ( i0 + int(5.0) ) + int(7.0) ))) + ( i0 * ( int(7.0) - i1 ) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 297}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 2, 0, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [3, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 2, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 25, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 7, 0, 28, 9, 5, 3, 6, 4, 0, 0, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le ( divInt(len(in2),mod(i2,len((in0 + s2)[int(8.0):i2][int(13.0):min(divInt(( divInt(int(8.0),i1) + int(7.0) ),i0), divInt(i2,int(1.0)))]))) + ( mod(int(8.0),int(16.0)) + min(i1, i0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 306}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1, 2, 2, 1, 1, 2, 1], [2, 2, 0], [0, 1, 0, 1, 2], [], [0, 0], [], [], [3, 3], [4, 4, 2, 1], [1, 1], [0, 0], [], [3, 1], [0], [1], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 2, 7, 8, 3, 5, 5, 1, 4, 0, 4, 3, 3, 3, 4, 1, 3, 3, 2], [2, 2, 1, 0, 2, 2, 1, 2, 0, 2, 1, 0, 2, 2, 2], [1, 0], [3, 2, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 3, 3, 2, 1, 1, 0, 0, 0, 0, 1, 3, 2, 1, 2, 1, 3, 0, 0, 1, 0, 0, 3, 1, 3, 2, 1, 3], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3, 2, 1, 1, 2, 4], [2, 0, 0, 2, 1, 2, 0], [0, 1, 1, 0, 0, 1, 1, 1], [4, 5, 3, 4, 4, 0, 5, 2, 0, 3, 4], [1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [3], [], [], [], [26]], "fitness": 25, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 8, 3, 3, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le ( divInt(len(in2),i2) * mod(len(in0),int(8.0)) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], "other_info": {}, "test_fitness": 407}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 2], [1, 1, 0], [0, 0], [], [1], [], [0], [], [1, 1, 1, 1, 1, 1, 1], [3, 7, 5, 2, 6, 3, 4], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0, 1, 0, 2, 2, 0, 4, 1], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [3, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [1, 2, 2], [], [], [], [], []], "fitness": 25, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 2, 1, 17, 5, 4, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le ( divInt(len(in2),mod(len(in2),min(( ( int(3.0) + int(7.0) ) + int(5.0) ), int(2.0)))) + int(6.0) )\\nloopBreak% = 0\\nwhile int(3.0) == i0:{:\\ni0 = int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 305}, {"genotype": [[0], [0, 1], [0, 0], [2], [0, 1], [0], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [2, 0, 1, 0, 2], [1], [3, 2, 2, 2, 2, 3, 3, 2, 0, 2, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 1, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 25, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 1, 15, 6, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( mod(( len(in2) - len(in0) ),mod(i2,divInt(int(3.0),int(3.0)))) + int(4.0) ) - int(8.0) )\\ni0 -= int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 258}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 1], [0, 0, 0, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),divInt(( mod(int(3.0),int(7.0)) + int(4.0) ),i1))) - ( int(8.0) - i0 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 249}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),min(( i2 - int(3.0) ), int(7.0)))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 0, 0], [4, 3, 3, 0], [0, 1, 0, 2], [0, 1, 0], [0, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 9, 3, 3, 4, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( ( len(in2) + ( len(in2) - int(3.0) ) ) + int(1.0) )\\ni2 *= i0\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 444}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(0.0) ) - int(7.0) ))) + int(5.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(len(in2),divInt(len(in0),int(3.0))) + ( i0 + int(7.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 275}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 0, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 0, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( ( i2 + divInt(len(in2),len(in0)) ) + ( i0 + int(3.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 284}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 0], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 1, 3, 8, 7], [2, 2, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 6, 4, 2, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),min(int(8.0), i2))) + int(1.0) )\\nb0 = int(3.0) \\le divInt(( divInt(int(8.0),i2) + int(7.0) ),i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 288}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 0, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),( i2 + i0 ))) + int(3.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 284}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( i0 + i0 ))) + int(3.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 284}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [4, 0, 3, 0, 4, 4], [0, 1, 1], [], [2], [], [5], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 8, 1, 4, 0, 1, 2, 0, 0, 6, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(in0, int(166.0))) \\l len((in2 + saveChr(len(saveChr(divInt(int(8.0),abs(i0)))))))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [8, 1, 6, 8], [2, 0, 1], [0], [3, 2, 2, 3, 2, 3, 0, 3, 0, 1, 1, 1, 3], [0, 1, 1], [4, 3, 3, 0], [0, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 3, 4, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),i2)) + min(i0, int(8.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 289}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),min(( i2 - int(3.0) ), int(7.0)))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),min(divInt(i2,int(3.0)), int(7.0)))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 3, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 1, 13, 4, 4, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\l ( ( len(in2) + len(in2) ) + divInt(min(mod(i0,int(3.0)), int(35.0)),int(8.0)) )\\ni0 += i1\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 444}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [4, 0, 0, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(in0, int(166.0))) \\le len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 6, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( divInt(i0,int(3.0)) + i0 ))) + int(7.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 1, 3, 8, 7], [2, 2, 1, 0, 2], [0], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 0, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 9, 3, 3, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),int(8.0))) + int(1.0) )\\ni2 = i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 306}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 9, 8], [0, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [4, 3, 3, 2, 0, 1, 3], [2, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\l len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 307}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 3, 1, 3, 2, 0, 2, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 1, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 1, 13, 4, 4, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),len(in0)) - int(3.0) )\\ni0 += min(mod(i0,( int(3.0) - int(4.0) )), int(8.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 293}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( int(3.0) - int(7.0) ) + min(int(5.0), i0) ))) + divInt(int(8.0),i0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1, 0, 1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 5, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 2, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 16, 5, 5, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),min(( ( int(3.0) + int(7.0) ) + int(5.0) ), min(i2, int(8.0))))) + int(7.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [4, 1, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [], [], [4, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 8, 1, 4, 1, 0, 3, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(in0, int(16.0))) \\l max(len((in2 + in1)), ( int(6.0) + abs(i0) ))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 339}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 2, 0, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 8, 3, 3, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),( i2 + len(in0) )) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 2, 1, 3, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 18, 6, 5, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le ( divInt(len(in2),divInt(len(in0),min(( i0 + int(3.0) ), ( int(2.0) + min(divInt(int(5.0),int(8.0)), int(8.0)) )))) + i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 3, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),i0)) + ( min(int(3.0), int(7.0)) + int(5.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 0, 2, 0, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 0, 4, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [1, 2, 2, 3, 2, 3, 1, 1, 0, 1, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1], [0, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 5, 3, 0, 4, 1, 2, 3, 3, 3], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 1, 0, 10, 3, 2, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(31.0) \\le ( mod(saveOrd(s2),mod(len(in2),int(0.0))) + int(8.0) ):{:\\nres0 = i0 \\l int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], "other_info": {}, "test_fitness": 306}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [1, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 3, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),int(1.0))) + ( min(int(7.0), int(7.0)) + ( i0 * divInt(int(8.0),i0) ) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [4, 3, 3, 0, 2, 4], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 306}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [5, 2, 6, 8, 3, 5, 5], [2, 2, 1, 2, 0], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1], [3, 1, 3, 0, 0, 3, 1, 0, 1], [0], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 2, 5, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in1) \\l max(mod(len(in2),min(min(int(5.0), mod(i2,int(2.0))), i2)), int(6.0))\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 270}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le ( divInt(len(in2),divInt(len(in0),( int(3.0) + i0 ))) + int(7.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 303}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [8, 4, 8, 8], [0, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 1, 1, 3], [0, 0, 1], [2, 3, 3, 2, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( len(in2) + ( abs(min(max(i0, int(84.0)), int(8.0))) - int(8.0) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 4, 3, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(divInt(len(in0),int(8.0)),i2)) - int(13.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 281}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [8, 1, 5, 8, 7, 0, 6, 4, 1, 4, 1, 7], [2, 0, 1, 0, 2], [1], [3, 2, 2, 3, 0, 2, 3, 1, 0, 1, 2, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1, 3, 1, 1], [1, 1, 1, 0, 0, 1, 1, 1], [4, 3, 3, 0, 0], [2, 2, 0, 2, 1, 2, 0], [0, 1, 1, 1, 1, 0], [2, 5, 3, 2, 4, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 0], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 5, 0, 25, 8, 4, 2, 6, 7, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le divInt(mod(len(in2),i2),mod(len(in0),int(8.0)))\\ns2 = (in1 + (in2[i0:int(15.0)][( ( mod(mod(int(8.0),i1),int(7.0)) * i0 ) * divInt(i2,int(0.0)) ):] + s2))[int(64.0):min(int(14.0), int(17.0))]\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 306}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 0, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 3, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),len(in0)) * min(divInt(( i0 + int(6.0) ),int(0.0)), ( i0 + divInt(int(7.0),i1) )) )\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [1, 0, 1, 0, 2], [1], [3, 0, 2, 1, 2, 3, 3, 2, 0, 2, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2, 2], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 16, 5, 3, 3, 2, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2[i1:]) \\le ( int(3.0) + divInt(len(in2),len((in0 + (s2[mod(i0,( int(3.0) + int(5.0) )):][i1:] + in1))[( int(8.0) + i0 ):])) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 307}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [0, 4, 8, 8], [0, 0, 1, 0, 2], [0], [3, 3, 2, 1, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 2, 1], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 2, 5, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(in0)) \\l ( int(0.0) + ( len(in2) - min(abs(i0), int(4.0)) ) ):{:\\nres0 = i0 \\le int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [0, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 1, 1], [2, 3, 3, 0, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 2, 7, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( len(in2) + divInt(min(min(max(i0, int(24.0)), i1), int(8.0)),len(in0)) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 3, 2, 3, 2, 0, 3, 3, 0, 1, 0, 1, 3], [1, 0, 1], [2, 3, 3, 0, 2, 1], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 2, 5, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l divInt(len(in2),( i2 + min(abs(i1), int(24.0)) ))\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 2, 3, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 3, 4, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),min(int(8.0), i2))) + int(13.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 271}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 2, 3, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 6, 0, 28, 9, 6, 3, 6, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),min(int(8.0), i2))) + int(13.0) ):{:\\nres0 = min(divInt(( divInt(int(8.0),i2) + int(7.0) ),i1), divInt(i0,int(1.0))) \\le ( mod(int(8.0),int(16.0)) + min(i2, i1) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 271}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [2, 1, 2, 0, 2], [1], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 0, 1, 3], [0, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 2, 7, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(s2)) \\l ( len(in2) + ( min(min(max(i2, int(24.0)), i1), int(8.0)) - len(in0) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [0, 1, 1], [0], [3, 3, 2, 3, 2, 3, 0, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 11, 2, 5, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( len(in2) + ( min(i0, min(i1, int(24.0))) - i1 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [7, 4, 9, 8], [0, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 0, 4, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 11, 2, 6, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( len(in2) + ( min(min(saveOrd(in0), i0), int(74.0)) - i1 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [2, 4, 8, 8, 3, 0], [0, 1, 1, 2, 1, 1, 1, 1, 1, 0], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 2, 3, 3, 2, 3, 2, 0, 3, 0, 0, 1, 0, 1, 2, 2, 2, 2, 0, 0, 0, 1, 0, 3, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 3, 0, 0, 1, 3, 1, 4, 2, 2], [0, 1, 0, 0], [0, 1, 0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 2], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 10, 0, 35, 9, 11, 4, 5, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( len(in2) + ( min(min(max(i0, int(24.0)), i1), divInt(len(in0),max(mod(saveOrd((s2 + (in1[divInt(i1,abs(i2)):][:i1] + in2))[int(8.0):i1]),int(8.0)), ( ( mod(divInt(i1,i1),i1) - int(3.0) ) + i0 )))) + abs(int(0.0)) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [5, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [1, 1, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),min(( i2 - int(5.0) ), int(7.0)))) - int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 296}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 2, 2], [0, 1, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 29, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2) \\le ( divInt(len(in2),mod(len(in0),min(( i2 + int(3.0) ), int(7.0)))) - int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 313}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [0, 1, 1], [0], [3, 3, 2, 3, 1, 3, 3, 3, 0, 1, 0, 2, 3], [1, 0, 1], [2, 3, 3, 0, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 29, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 3, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l divInt(len(in2),int(24.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 303}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 0, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [4, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 29, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(in0, int(1668.0))) \\le len((in2 + in1))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 353}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [0], [3, 2, 2, 3, 2, 3, 1, 3, 0, 1, 1, 1, 3], [0, 1, 1], [4, 3, 3, 0], [0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 29, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 1, 11, 3, 4, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),int(31.0))) + min(i2, int(6.0)) )\\ni0 = int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 301}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [0, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 1, 0, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 2, 2, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 2, 7, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(in0)) \\l ( len(in2) + ( min(abs(abs(int(24.0))), i0) - i1 ) ):{:\\nres0 = int(8.0) \\le len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 334}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [2, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(2.0):]) \\l len((in2 + in1))\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], "other_info": {}, "test_fitness": 335}, {"genotype": [[0], [0, 1], [1, 0], [2], [0, 1], [0, 0], [0, 0], [], [], [3], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1], [4, 3, 3, 0], [2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 9, 3, 3, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) == ( divInt(len(in2),mod(len(in0),int(3.0))) * int(1.0) )\\ni2 = i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 318}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 2, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 3, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 2], [0], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 4, 5, 2, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2) \\le ( divInt(len(in2),mod(len(in0),len((s2 + (in1[( i2 + int(3.0) ):][:int(7.0)] + in2))[int(4.0):min(i0, int(8.0))]))) + int(7.0) )\\n", "test_case_results": [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 309}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [1], [], [5], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[:int(3.0)]) \\l len((in2 + in1))\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 339}, {"genotype": [[0], [1, 1], [0, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [1, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 0, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[i0:]) \\le len((in2 + in1))\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 340}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [1, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 4, 3, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\l ( mod(len(in2),mod(divInt(len(in0),int(8.0)),i2)) - int(13.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le ( divInt(len(in2),mod(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + divInt(i0,( int(5.0) * i1 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [9, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 0, 0], [3, 5, 3, 1], [1], [], [2, 0, 3, 0, 0, 1, 0], [0], [], [1], [0], [5], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[:int(9.0)]) \\le len((in2 + in0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 401}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [4, 5, 5, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1[int(3.0):]) \\l len((in2 + in2))\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 383}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [1, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 4, 3, 0, 2, 4], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 2, 6, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(saveOrd(in0)) \\le ( len(in2) + ( min(abs(saveOrd(in0)), i1) - int(24.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 4, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(saveOrd(in0),min(( i0 + int(8.0) ), int(7.0)))) + int(5.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 318}, {"genotype": [[0], [1, 1, 0, 1, 1], [1, 2, 2, 1, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 6, 8, 3, 6, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 0, 2, 3, 2, 3, 1, 1, 0, 1, 0, 2, 1, 3, 1, 1, 3, 2, 0, 1], [1, 1, 0, 0, 1], [4, 3, 3, 2, 2, 3], [1], [1, 1, 0, 0, 1], [3, 5, 3, 3, 4, 3, 2, 3, 3, 3], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [0, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 0, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\ni0 -= saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1], [8, 1, 3, 8, 7, 9, 0, 8], [2, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1], [4, 0, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 4, 1, 21, 7, 4, 3, 5, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(min(mod(len(in2),min(int(8.0), int(1.0))), int(3.0)),int(8.0)) + divInt(( divInt(int(7.0),i2) + int(9.0) ),i0) )\\ni1 += divInt(i0,int(08.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1], [3, 7, 4, 8, 7, 7, 1, 2], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 1, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 5, 0, 23, 6, 5, 4, 2, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(getCharFromString(in2, mod(len((s1 + (s2[:min(( i2 + int(3.0) ), int(7.0))][:int(4.0)] + in1))[min(i0, int(8.0)):int(7.0)]),( i2 + ( i0 + int(71.0) ) )))),int(2.0)) * i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [2, 1], [0, 0], [1], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [1], [3, 2, 2, 3, 2, 0, 2, 1, 0, 1, 1, 1, 3], [0, 0, 0], [4, 4, 3, 0], [0, 1, 1, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0 not in in2\\ni2 += saveOrd(in0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [], [3, 1, 0, 2, 2, 3, 2, 2, 0, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 3, 0], [0, 0], [0, 1, 0], [0, 2, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 2, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 0, 0, 2], [0, 0, 0, 0], [4], [2, 2], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [3, 1, 1, 8, 0, 8, 3, 5, 9, 4, 7, 0, 8], [1, 0, 1, 1, 0], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 2, 3, 1, 1, 3, 1, 0, 0, 2, 3, 0, 0], [1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 2, 2, 3], [0, 1, 0], [1, 1, 0, 0, 1], [1, 5, 3, 5, 4, 2, 2, 1, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 0, 0, 1, 2, 5, 2, 1, 2, 0, 0, 0, 10, 10, 1, 0, 18, 5, 5, 1, 4, 10, 0, 1, 11, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le mod(mod(len(in2),divInt(len(in0),int(31.0))),int(1.0)):{:\\nloopBreak% = 0\\nwhile i1 \\le int(8.0):{:\\nloopBreak% = 0\\nfor in2 in (in1 + s2)[int(0.0):]:{:\\nres0 = not not getCharFromString(s2, ( divInt(abs(int(83.0)),int(59.0)) + abs(int(4.0)) )).startswith(s1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [1], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0], [4, 3, 2, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 not in in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 3, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 1, 5, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le divInt(divInt(len(in2),divInt(len(in0),( mod(i0,min(int(3.0), int(7.0))) + i0 ))),divInt(int(4.0),i1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [8, 1, 5, 8, 7, 1, 6, 8, 6, 0, 1, 1, 0, 9, 4, 6, 0], [2, 0, 1, 2, 2, 1, 1], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 3, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 0, 3, 1, 0, 3, 1, 0, 1, 1, 2, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [0, 3, 3, 0, 0, 4, 1], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 4, 2, 4, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 7, 0, 30, 9, 7, 4, 5, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( ( len(s1) + divInt(mod(len(in2),int(8.0)),i2) ) + min(int(1.0), ( divInt(divInt(int(5.0),i0),int(8.0)) + i1 )) ), ( i2 * int(7.0) )) \\l divInt(min(i2, saveOrd(in0)),int(1.0))\\nb1 = i1 \\le max(int(6.0), i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 1, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 4, 1, 17, 6, 3, 3, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s2[( divInt(len(in2),divInt(len((in0 + (s2[:i0][( int(3.0) + int(7.0) ):] + in1))[:( int(5.0) + i1 )]),divInt(int(8.0),i0))) + int(8.0) ):])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 1, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(i0,( ( int(3.0) + int(7.0) ) + int(7.0) ))) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [0, 2, 2, 1, 2, 1, 3, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 4, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 2, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(s2),( len(s0) + ( i0 + i0 ) )) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [0, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 10, 4, 2, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = i2 \\le ( mod(saveOrd(s1),mod(divInt(len(in2),int(8.0)),i2)) + int(13.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [1, 3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 3, 3, 0, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [2, 3, 3, 2, 2, 3], [0], [1, 1, 1, 0, 1], [3, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 8, 2, 4, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = abs(mod(mod(len(in0),len(in2)),abs(i0))) \\le int(31.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 0, 1], [2, 2, 0], [0, 2, 2], [0], [0, 0], [], [], [3], [0, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 9, 4, 7, 0, 8], [1, 0, 1, 1, 0], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 2, 2, 1, 1, 3, 1, 0, 0, 2, 3, 0, 0, 1], [1, 1, 1, 0, 1, 0, 0], [4, 3, 0, 2, 2, 3], [0, 1, 0], [1, 1, 0, 0, 1], [1, 5, 3, 5, 4, 2, 2, 1, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 10, 10, 5, 0, 25, 7, 5, 3, 4, 7, 0, 1, 7, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\l mod(mod(len(in2),divInt(min(int(3.0), int(1.0)),i1)),int(0.0)):{:\\nloopBreak% = 0\\nwhile int(8.0) \\le ( divInt(( int(7.0) + int(83.0) ),abs(int(59.0))) - i0 ):{:\\nloopBreak% = 0\\nfor in0 in in2:{:\\nres0 = i1 != ( abs(i1) + i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = (s2 + s2)[int(4.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 2, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 1, 3, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [1], [3, 3, 0, 3, 2, 0, 1, 1, 0, 1, 1, 2, 2, 2, 1, 1, 3, 1, 0, 0], [1, 1, 1, 0, 1], [1, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 5, 3, 0, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 4, 4, 3, 1, 1, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 4, 4, 3, 0, 10, 1, 3, 0, 1, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(len(s2), i0) \\le len(in2):{:\\nloopBreak% = 0\\nwhile mod(i0,int(41.0)) \\le int(3.0):{:\\nloopBreak% = 0\\nfor in0 in s0:{:\\nres0 = i1 != int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 2, 4, 8, 7, 7], [2, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 0, 3, 2, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 13, 4, 4, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( min(divInt(len(in2),abs(( i2 - int(3.0) ))), int(2.0)) + int(4.0) ) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(s0),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [1, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 2, 4], [0, 1], [0, 1, 0], [3, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 10, 2, 5, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(248.0) \\le abs(( len(in0) + ( len(in1) - min(abs(i2), int(8.0)) ) ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1, 1], [2, 2, 2, 1, 0, 0], [1, 1, 2], [0, 2, 2], [0, 0], [0, 0], [], [], [3, 3], [1, 0, 5], [0, 1, 1, 0], [0, 0, 0], [4], [1, 0], [], [0], [0, 0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 9, 0, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 2, 3, 2, 1, 1, 1, 0, 1, 0, 2, 0, 3], [1, 1, 1, 0, 1, 1, 1], [4, 2, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1, 0], [2, 5, 3, 3, 4, 1, 1, 3, 3, 2], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 0, 1, 0, 0, 2, 2, 4, 2, 0, 2, 0, 1, 2, 5, 5, 1, 0, 11, 3, 3, 0, 3, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif True:{:\\nif saveOrd(s2) \\g mod(mod(abs(divInt(len(in2),int(39.0))),int(0.0)),i0):{:\\nloopBreak% = 0\\nwhile int(8.0) \\l int(7.0):{:\\nres0 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in0\\n:}\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 5, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 6, 3, 3, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(s2, ( divInt(len(in2),mod(len((in2 + (s2[( ( i0 + int(3.0) ) + int(7.0) ):][int(4.0):] + in1))[i0:]),divInt(int(8.0),i1))) + int(7.0) ))) \\l i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 0, 8, 8], [0, 0, 1, 0, 2, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 4, 3, 2, 4, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 6, 0, 22, 8, 3, 5, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in1),divInt(len((in0 + (s2[( ( i0 + int(3.0) ) + int(7.0) ):][divInt(i0,( int(0.0) + i1 )):] + in1))[:int(8.0)][i0:]),( i2 * int(8.0) ))) - i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 1], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [7, 1, 0, 8, 7, 8, 4, 1, 4, 2, 4, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 2, 3, 1, 3, 0, 2, 1, 0, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 1, 3], [0, 0], [0, 1, 1, 0, 1], [2, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 0, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 9, 9, 4, 1, 20, 5, 6, 1, 4, 7, 0, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le divInt(mod(len(in2),mod(len(in0),int(71.0))),abs(i0)):{:\\nloopBreak% = 0\\nwhile ( int(0.0) + i0 ) \\le divInt(max(int(8.0), int(7.0)),len(in0)):{:\\nloopBreak% = 0\\nfor in1 in (s1 + s2):{:\\nres0 = int(84.0) \\g i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(14.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [5, 1, 0, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 0, 4, 3, 4, 1, 2, 2, 3, 3], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 2, 0, 16, 5, 3, 1, 4, 10, 0, 2, 10, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(s0),divInt(len(in1),int(51.0))),int(0.0)):{:\\nloopBreak% = 0\\nfor in0 in (in1 + s1)[i0:]:{:\\nloopBreak% = 0\\nfor s2 in getCharFromString(s2, int(8.0)):{:\\nres0 = i2 \\l ( divInt(int(7.0),int(83.0)) + int(5.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [0], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [9, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s1[int(9.0):]) \\le len((in2 + in0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 2, 4, 8, 7, 7], [2, 0, 1, 0, 2], [1], [3, 2, 2, 1, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 1, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 2, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 1, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 5, 3, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(abs(divInt(len(in2),divInt(( i0 + int(3.0) ),int(7.0)))),int(4.0)) + i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [2, 2, 2, 3, 2, 3, 2, 1, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( divInt(divInt(saveOrd(s2),( len(in2) + ( int(3.0) + i0 ) )),int(7.0)) + int(4.0) ) == int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1], [1, 2, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 2, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 2, 4, 1], [1], [], [2, 0, 3, 0, 0, 4, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 9, 2, 4, 0, 2, 3, 1, 0, 7, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[divInt(len((s2 + in1)),len(getCharFromString(\"\"F\"\", divInt(int(126.0),abs(i0))))):]) == int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [9, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 0, 3], [0], [0, 1, 0], [3, 5, 5, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 9, 2, 3, 0, 2, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(9.0):]) \\l min(divInt(mod(int(0.0),len((in2 + in2))),i0), int(6.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 1, 1], [3, 1, 6, 8, 7, 4, 8, 2, 1], [2, 0, 1], [0], [3, 2, 1, 3, 2, 3, 1, 1, 0, 2, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [0, 1, 1, 1, 0], [3, 3, 0, 0, 4], [0, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5, 4], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [0, 1, 1], [0], [4], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\nin0 = s2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 0, 2, 3, 1, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1], [], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 4, 2, 2, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(i2,mod(len(\"\"f\"\"),int(3.0))) + ( i0 + int(7.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [3, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1], [3, 5, 5, 1], [1], [], [2, 4, 3, 4, 0, 4, 1], [0, 1, 1], [], [2], [1], [5], [20], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 9, 1, 4, 0, 1, 1, 1, 0, 7, 3, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString((saveChr(int(30.0)) + in0), len(saveChr(len(\"\"u\"\"))))[divInt(int(6.0),abs(i0)):]) \\le int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 2, 2, 3, 2, 2, 0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(divInt(( len(in2) + ( divInt(i1,int(3.0)) + i0 ) ),int(7.0)),i1) * ( int(4.0) * i0 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 4, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 3, 2, 2, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 0, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 3, 4, 0, 3, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[len(in2):]) \\l divInt(mod(len(in1),abs(int(14.0))),divInt(i0,i1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [0, 1, 1, 1, 0], [0], [3, 3, 2, 3, 2, 2, 3, 3, 2, 1, 0, 1, 3, 2, 2, 0, 0, 2, 0, 0], [1, 0, 1, 0, 0, 0, 0], [2, 3, 3, 0, 2, 4], [0, 1, 0, 1, 0], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 20, 7, 6, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\le divInt(len(in2),( mod(min(abs(( int(24.0) + i0 )), int(8.0)),saveOrd(in0)) - ( ( i1 + i1 ) - ( i1 + i0 ) ) ))\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1], [0, 1, 0, 1], [1], [0, 2, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [6, 5, 6, 8], [1, 1, 2, 0, 2], [0, 1], [3, 2, 3, 3, 0, 3, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 1, 4, 1, 4], [0, 1, 1], [0, 1, 0], [3, 4, 5, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 9, 1, 5, 0, 1, 3, 1, 0, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[divInt(max(saveOrd((in1 + in2)), i1),max(saveOrd(\"\"F\"\"), i1)):]) \\l int(6.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [1, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [2, 0, 2, 0, 0, 4], [0], [], [2, 0], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 8, 1, 4, 0, 1, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(in0[int(10.0):]) \\l len(in2[len(in1):divInt(int(6.0),abs(i0))])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 2, 8, 8], [2, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),( len(in0) + ( ( i2 + int(3.0) ) + int(7.0) ) )) * int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [0, 1], [0, 0], [], [1], [], [1], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [2], [0, 1, 2], [], [0, 0], [], [], [3, 1], [0, 1], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [7, 6, 3, 8, 7, 9, 1, 2, 6, 7], [2, 1, 1, 2, 1, 2, 1, 1, 2, 0], [0], [3, 3, 3, 0, 2, 3, 0, 2, 0, 0, 3, 1, 3, 1, 0, 0, 2, 2, 2, 1, 0, 0, 0], [0, 0, 0, 1, 0], [3, 3, 0, 3, 2, 1], [1, 1, 0, 1], [0, 0, 0], [3, 3, 3, 2, 4, 5, 0], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 10, 1, 23, 5, 6, 4, 1, 7, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in0) \\l len(in0)\\ni2 = min(i1, ( len(in0) - i1 ))\\ns2 = (in1 + (in2[( i2 - i1 ):abs(int(7.0))][max(int(63.0), i2):] + s0))[i1:( divInt(( int(8.0) + i1 ),i2) - i0 )]\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [4, 4], [2, 1], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s2 in in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 2, 0, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2) \\le ( divInt(len(in2),mod(( i0 + ( i0 + int(3.0) ) ),int(8.0))) + int(5.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 320}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 4], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [7, 1, 0, 8, 7, 7, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 3, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1, 2, 3, 1], [1, 0, 1, 0, 1], [4, 3, 1, 2, 3, 3, 1, 3], [0, 0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 5, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 4, 4, 3, 1, 1, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 11, 11, 2, 0, 23, 5, 8, 2, 3, 8, 0, 1, 10, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(( len(in2) + max(abs(int(71.0)), int(0.0)) ),i0):{:\\nloopBreak% = 0\\nwhile int(8.0) \\le len(in0):{:\\nloopBreak% = 0\\nfor in0 in (in2 + s1)[mod(( len(getCharFromString(s2, int(7.0))) + int(7.0) ),max(int(3.0), i0)):]:{:\\nres0 = int(54.0) \\le divInt(len(s2),int(47.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [3, 8, 6, 8, 3, 5], [2, 1, 1], [0], [3, 3, 2, 0, 3, 3, 1, 2, 0, 1, 0, 1, 3, 3], [0, 0, 1], [2, 1, 3, 0, 0, 3], [0, 1], [1, 1, 0], [4, 5, 5, 1, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 11, 2, 4, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( i2 + len(in1) ), min(int(38.0), ( i1 - int(6.0) )))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0, 1, 1], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1, 0, 0, 1, 0], [1, 0, 3, 2, 2, 5, 2], [], [], [3, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 9, 0, 33, 11, 5, 4, 7, 5, 0, 0, 10, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd((s1 + s0)) \\le ( divInt(len((in0 + s2)[mod(mod(len(getCharFromString(s2[int(8.0):i2], int(13.0))),min(( divInt(divInt(int(8.0),i2),int(7.0)) + i1 ), ( i0 + int(1.0) ))),mod(( int(8.0) + int(16.0) ),min(i2, i1))):int(5.0)]),divInt(i0,i1)) * i1 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 1, 1], [3, 7, 4, 8, 7, 7, 1, 5, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 5, 0, 23, 8, 3, 6, 2, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(s2, ( divInt(len(in2),( len((in0 + (s2[( ( i0 + int(3.0) ) + int(7.0) ):divInt(i0,( int(4.0) + i1 ))][int(8.0):] + in1))[i0:]) * ( i2 - int(7.0) ) )) * int(715.0) ))) \\le int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1], [2, 4, 8, 8], [0, 1, 1], [0], [3, 2, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3, 0], [0, 0, 1], [2, 3, 3, 0, 0, 2, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 14, 3, 6, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( ( len(in0) + divInt(len(in2),min(min(i0, int(24.0)), i1)) ) - int(88.0) )) \\l abs(i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [8, 6, 5, 8, 7, 6, 6, 8, 6, 6, 1, 1, 0, 9, 4, 6, 0], [2, 0, 1, 0, 2, 1, 1], [1, 0], [3, 2, 2, 3, 2, 2, 3, 3, 0, 3, 1, 2, 2, 1, 1, 0, 1, 0, 2, 0, 1, 2, 3, 0, 3, 1, 0, 3, 2, 0, 1, 1, 2, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [4, 3, 3, 0, 0, 4, 1], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [1, 4, 3, 2, 0, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 2, 18, 6, 5, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += saveOrd(s1)\\ni0 = ( ( len(in1) + divInt(mod(len(in0),min(i1, min(int(8.0), ( divInt(int(6.0),int(5.0)) + i0 )))),int(8.0)) ) * i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [1], [], [], [], [], [0, 1, 1, 1, 1, 1], [3, 4, 6, 8, 3, 5], [0, 1, 1], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 1, 3, 3], [0, 0, 1], [2, 2, 3, 0, 3, 3], [0, 2], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 not in in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 1, 3, 8, 7], [2, 2, 1, 0, 2], [1], [3, 2, 2, 1, 2, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 1, 11, 4, 2, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(int(8.0),divInt(divInt(len(in2),int(1.0)),i2)) + int(3.0) )\\ni2 += int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(min(( ( i0 + int(3.0) ) + int(7.0) ), int(4.0)),i0)) + divInt(int(8.0),i1) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [0], [4, 1, 0], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [7, 1, 0, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 2, 3, 1, 1, 3, 1, 0, 3], [1, 1, 1, 0, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 1, 0, 0, 1], [2, 3, 3, 3, 2, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 9, 9, 3, 1, 20, 5, 6, 1, 4, 8, 0, 1, 10, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in0),divInt(len(in0),int(71.0))),int(0.0)):{:\\nloopBreak% = 0\\nwhile i0 \\g int(8.0):{:\\nloopBreak% = 0\\nfor in0 in (s2 + s1)[int(7.0):]:{:\\nb0 = ( divInt(abs(int(8.0)),int(3.0)) + len(getCharFromString(s2, int(54.0))) ) \\l i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = len(s2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in1),( len(in0) + ( ( i0 + int(3.0) ) + int(7.0) ) )) * divInt(i0,( int(7.0) - i1 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 1], [2, 2, 0], [0, 1], [0], [0, 0], [], [], [3], [2, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1], [3, 1, 0, 8, 8, 8, 3, 5, 9, 4, 7, 0, 8, 5], [1, 0, 1, 1, 0, 1, 0, 0, 0, 2, 0], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 2, 0, 0, 2, 2, 1, 1, 3, 1, 0, 0, 2, 3, 0, 2, 3, 2, 3, 2, 0, 1, 1, 2, 3, 1, 2, 2, 2, 0, 2, 2, 1, 2, 1, 3, 0, 1, 3, 1, 3, 0], [1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0], [4, 3, 3, 2, 2, 3, 1, 0, 2, 4, 3], [0, 1, 0, 0, 1, 2, 1, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 0], [1, 5, 3, 5, 5, 2, 2, 1, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 1, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 14, 14, 11, 1, 50, 17, 11, 11, 7, 9, 0, 1, 11, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) == mod(mod(len(in2),divInt(len(in0),int(3.0))),int(1.0)):{:\\nloopBreak% = 0\\nwhile i1 \\le divInt(i0,i1):{:\\nloopBreak% = 0\\nfor in2 in (in2 + s2)[mod(( int(0.0) + int(8.0) ),abs(int(8.0))):]:{:\\nres0 = i1 != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= ( abs(i0) + mod(len(getCharFromString(s2, ( max(( i0 + int(83.0) ), int(59.0)) - ( min(int(4.0), ( divInt(( i0 * ( ( int(7.0) - ( int(0.0) + abs(i2) ) ) - int(8.0) ) ),saveOrd(s1)) + int(5.0) )) - len(in0) ) ))),i0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [0, 9, 6, 5, 3, 5], [2, 1, 1], [0], [3, 3, 2, 3, 0, 3, 1, 2, 0, 1, 0, 1, 3, 3], [0, 0, 1], [2, 1, 3, 0, 0, 3], [0, 2], [1, 1, 0], [4, 5, 5, 1, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 11, 2, 4, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + i2 ), min(int(09.0), ( i1 * int(6.0) )))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(s0),divInt(len(in0),( ( i0 - int(3.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 0, 3, 0, 0, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 0, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 1, 7, 1, 3, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s2) \\le ( i0 - min(i0, i1) )\\ni0 += len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 4, 6, 8, 3, 5], [0, 1, 1], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 1, 2, 3], [1, 0, 1], [2, 1, 3, 0, 0, 0], [0, 2], [1, 1, 0], [4, 5, 5, 1, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 6, 3, 2, 4, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(s2, divInt(divInt(len(in2),divInt(len((in0 + (s2[( ( i0 * int(3.0) ) + int(2.0) ):][:int(4.0)] + in1))[i0:]),divInt(int(8.0),i1))),int(7.0)))) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [1], [], [], [], [], [0, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 not in in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [4, 6, 7, 8, 3, 5], [1, 0, 2], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3], [0, 1, 1], [1, 1, 3, 4, 0, 3], [0], [1, 1, 0], [4, 5, 4, 3, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 12, 2, 5, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(in1) + saveOrd(in2) ), min(int(4.0), mod(i1,i0))), i2) \\l int(6.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 0, 0, 1], [2, 6, 6, 8, 4, 2, 7], [0, 1, 2, 0, 2], [0, 1], [3, 3, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 0, 0], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [4, 0, 3, 0, 0, 4, 4], [0, 0, 1], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 1, 0, 11, 1, 5, 1, 0, 3, 0, 0, 7, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(in0, len((in2 + in1)))) \\l len(getCharFromString(saveChr(min(( int(26.0) + min(i0, int(6.0)) ), int(8.0))), int(427.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 4, 5, 8, 8, 0], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 5, 0, 21, 7, 3, 3, 4, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s2) \\le divInt(mod(len(in2[divInt(len((in0 + (s2[( ( i0 + int(3.0) ) + int(4.0) ):int(5.0)][i0:] + in1))[divInt(int(8.0),i1):]),int(8.0)):]),i0),( i2 + int(0.0) ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 1, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),int(3.0)) + len(s1) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1, 2, 2, 1, 1, 2, 1], [2, 2, 0], [0, 1, 0, 1, 2], [], [0, 0], [], [], [0, 3], [4, 4, 2, 1], [1, 1], [0, 0, 0, 0], [], [3, 1], [0], [1], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 2, 7, 8, 3, 5, 5, 1, 4, 0, 4, 3, 3, 3, 4, 1, 3, 3, 2], [2, 2, 1, 0, 2, 2, 1, 2, 0, 2, 1, 0, 2, 2, 2], [1, 0], [3, 2, 2, 3, 0, 3, 0, 1, 0, 1, 1, 0, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 3, 3, 2, 1, 1, 0, 0, 0, 0, 1, 3, 2, 1, 2, 1, 3, 0, 0, 1, 0, 0, 3, 1, 3, 2, 1, 3], [1, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0, 3, 2, 1, 1, 2, 4], [2, 0, 0, 2, 1, 2, 0], [1, 1, 1, 0, 0, 1, 1, 1], [2, 5, 3, 4, 4, 0, 5, 2, 0, 3, 4], [1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [3], [], [], [], [26]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 2, 3, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s2) \\le mod(mod(len(in2),i2),len(in0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 9, 6, 8, 3, 5], [2, 1, 1, 0], [0], [3, 3, 2, 3, 3, 3, 2, 2, 0, 1, 1, 1, 3, 3, 2, 0, 0, 1, 0], [0, 0, 1, 0], [2, 1, 3, 0, 0, 3, 0], [0, 2, 0], [1, 1, 0], [4, 5, 5, 1, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 19, 4, 7, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(( mod(i2,int(49.0)) * int(6.0) ), int(8.0)), len(in2)) ), min(( i1 + i1 ), int(3.0)))) \\l i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [0, 1], [0, 0], [], [1], [], [1], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 3, 3, 3, 3, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 0, 2, 1, 2, 3, 3, 2, 2, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 3, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [8, 4, 7, 8, 3, 5], [1, 1, 1, 2, 1, 2, 1], [0], [3, 3, 2, 2, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3, 0, 1, 3, 0, 0], [0, 1, 1], [2, 1, 3, 0, 1, 3, 3], [0], [1, 0, 0], [4, 5, 3, 4, 4, 5, 4], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 7, 1, 19, 3, 7, 1, 2, 7, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = abs(max(( mod(len(in1),min(int(84.0), divInt(i1,i1))) + i2 ), int(7.0)))\\nin2 = getCharFromString(in0, max(len((in1 + (in1[i1:][:int(8.0)] + in2))[len(in1):i2]), i1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 0, 0], [2, 2, 0], [0, 2, 2], [0], [0, 0], [], [], [3], [0, 2, 5], [1, 1, 2], [0, 0, 0], [3], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8], [2, 0, 1, 1], [1], [3, 3, 0, 3, 2, 0, 1, 1, 0, 1, 1, 2, 2, 2, 1, 1, 3, 1, 0, 0], [1, 1, 1, 0, 1], [4, 2, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [4, 5, 3, 0, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 3, 3, 3, 0, 9, 1, 3, 0, 1, 7, 0, 1, 9, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in1) \\l abs(i2):{:\\nloopBreak% = 0\\nwhile len(in2) == mod(i0,int(31.0)):{:\\nloopBreak% = 0\\nfor in0 in s0:{:\\nres0 = (in1 + s1)[int(0.0):] != getCharFromString(s2, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [1, 0, 1], [], [0, 0], [], [], [3, 3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0, 0, 0, 1, 1, 1], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(in0[int(3.0):])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [0, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 1, 8, 3, 5, 4, 5, 7, 0, 8], [2, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 0], [4, 3, 1, 2, 2, 3], [0, 0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 3, 3, 3], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 2, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 2, 0, 18, 5, 5, 2, 3, 9, 0, 2, 9, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2:{:\\nloopBreak% = 0\\nfor in0 in in0:{:\\nres0 = saveOrd(in1) \\le mod(mod(len((s1 + s2)[divInt(max(int(31.0), int(0.0)),i2):]),int(8.0)),i2)\\nin0 = getCharFromString(in0, ( ( abs(int(1.0)) + int(83.0) ) + abs(int(5.0)) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 0, 0], [0, 1, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8, 7], [1, 2, 1, 1, 2, 1, 1], [1], [2, 2, 2, 3, 2, 3, 1, 1, 0, 3, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1, 2, 2, 1, 2, 2, 2, 2, 1, 3, 3, 3, 1, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 2, 2, 3, 2, 0, 2, 3], [0, 0, 0, 2, 2, 2, 2], [1, 1, 0, 0, 1, 1, 0, 1], [2, 5, 3, 1, 4, 1, 2, 3, 3, 2], [1], [0, 0], [0, 0, 0, 2, 2, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 14, 14, 7, 1, 42, 14, 10, 7, 8, 9, 0, 2, 10, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(mod(divInt(saveOrd(s2),( len(in2) + int(3.0) )),int(1.0)),i1) \\le len(in0):{:\\nloopBreak% = 0\\nfor s1 in in1[i2:][divInt(( abs(int(0.0)) + int(8.0) ),abs(int(7.0))):]:{:\\nloopBreak% = 0\\nfor s1 in s2:{:\\nres0 = i1 \\l int(83.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += ( ( int(5.0) * mod(mod(( ( int(4.0) * len(getCharFromString(in0, abs(min(int(57.0), int(0.0))))) ) * int(8.0) ),i2),i1) ) * divInt(mod(abs(int(7.0)),len(in0)),i1) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 4, 9, 8, 3, 5], [2, 1, 1], [0], [3, 3, 2, 2, 3, 3, 1, 1, 0, 0, 0, 1, 3, 3], [0, 0, 1], [2, 1, 3, 0, 2, 3], [0, 1], [1, 1, 0], [4, 5, 3, 4, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 11, 2, 4, 2, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( ( len(in1) + min(int(44.0), int(9.0)) ) - i2 ), i1)) \\l i1\\nin2 = in0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0, 1], [1], [3, 2, 2, 3, 2, 2, 2, 0, 3, 3, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [4, 3, 3, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0, 1], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 8, 0, 32, 12, 6, 4, 8, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(divInt(( i2 + len(in0) ),min(min(divInt(divInt(( int(8.0) + i2 ),int(13.0)),i1), mod(i0,int(8.0))), ( divInt(int(7.0),int(1.0)) + min(i2, i1) ))),int(8.0))) * mod(i0,i1) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1, 7, 9, 6, 1, 6], [0, 0, 1, 0, 2, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 6, 0, 26, 9, 3, 6, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2) \\le ( divInt(len(in2[divInt(len((in0 + (s2[:( ( i0 + int(3.0) ) + int(7.0) )][int(4.0):i0] + in1))[divInt(int(8.0),i1):int(7.0)]),i0):]),( i2 + int(717.0) )) * ( ( int(96.0) - int(16.0) ) * i1 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4, 3], [1, 1, 1], [0, 0, 0], [], [], [], [], [1], [1, 1, 1, 1], [3, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [2, 0, 0, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 2, 3, 3, 3, 0, 0, 0, 0, 1, 4, 4, 1, 0, 10, 1, 4, 0, 1, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(in0[int(3.0):]) \\l len(in2):{:\\nres0 = len(in1) \\le divInt(int(0.0),abs(i0))\\n:}else:{:\\nb1 = int(6.0) \\ge int(8.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 0, 2], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 9, 0, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8, 2], [0, 2, 1, 1, 1], [0, 1], [1, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 2, 2, 2, 2, 1, 3, 1, 3, 1, 0, 0, 2, 2, 1, 1, 0, 0, 1], [1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [4, 3, 2, 2, 2, 3], [0, 1, 0, 0], [1, 1, 0, 0, 1, 1], [2, 5, 3, 3, 4, 1, 1, 3, 3, 2], [], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 1, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 14, 14, 5, 0, 29, 10, 4, 4, 6, 7, 0, 1, 7, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(39.0) \\le mod(mod(saveOrd(s2),divInt(len(in2),int(0.0))),( i0 + int(8.0) )):{:\\nloopBreak% = 0\\nfor in0 in in0:{:\\nloopBreak% = 0\\nwhile int(7.0) \\l divInt(mod(( mod(int(83.0),abs(int(54.0))) - abs(int(47.0)) ),i2),i1):{:\\nres0 = ( ( int(0.0) + int(8.0) ) + i1 ) != i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = (s1 + s1)[int(2.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 2, 4, 8, 7, 7], [2, 0, 1, 0, 2], [1], [3, 2, 2, 1, 2, 3, 3, 2, 3, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s2) \\le ( ( int(3.0) - divInt(len(in2),len(in0)) ) + mod(min(int(2.0), int(4.0)),int(8.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 0, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 1, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 5, 0, 18, 5, 4, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(s2) \\le ( divInt(len(in2),divInt(max(( min(i0, i0) + int(3.0) ), int(7.0)),i1)) + ( int(4.0) + i0 ) ):{:\\nres0 = int(8.0) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 2, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 16, 6, 4, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(s0),( len(in0) + min(( i0 + int(8.0) ), ( i0 + i1 )) )) * divInt(int(7.0),i0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [2], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 1, 5, 9, 5, 9, 1, 3, 9, 2, 9, 5, 9], [2, 1, 1, 2, 2, 0, 0, 0, 2, 2, 1], [1], [3, 2, 2, 3, 0, 2, 3, 1, 2, 0, 2, 2, 0, 2, 1, 0, 1, 0, 2, 3, 2, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3], [0, 0, 0, 2, 2, 2, 0, 0, 1], [0, 0, 0, 0, 0], [2, 5, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 5, 1, 17, 7, 3, 5, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s2) \\le ( ( len(in2) + i2 ) + divInt(len(in0),int(6.0)) )\\ni1 += ( i1 * ( divInt(i2,divInt(int(159.0),i2)) * int(5.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 0, 2, 3, 2, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 2, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 0, 1, 3, 0, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [4, 1, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 1, 1, 0], [2, 2, 0], [0, 2, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 2], [0, 0, 0], [4], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [1], [3, 2, 0, 3, 2, 0, 1, 1, 0, 1, 1, 2, 2, 2, 1, 1, 3, 1, 0, 0], [1, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 5, 3, 0, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 2, 2, 3, 0, 9, 2, 2, 0, 2, 5, 0, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(i0,len(in2)):{:\\nloopBreak% = 0\\nwhile mod(i0,int(3.0)) \\le int(1.0):{:\\nres0 = in0.startswith((s0 + in1)[i1:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 2, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(mod(( len(in2) + ( divInt(i0,int(3.0)) + int(7.0) ) ),int(4.0)),i0) + ( int(8.0) * i1 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [1], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 6, 0, 8, 7, 8, 3, 6, 4, 4, 7, 0, 8], [0, 2, 1, 1, 0], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 2, 3, 2, 1, 3, 2, 0, 1, 3, 0, 2, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1, 1, 1], [2, 5, 3, 3, 1, 1, 1, 3, 3, 2], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 2, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 4, 4, 3, 1, 2, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 5, 0, 25, 8, 6, 1, 7, 9, 0, 2, 11, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in2),divInt(len(in0),int(36.0))),int(0.0)):{:\\nloopBreak% = 0\\nfor in0 in (s1 + s1)[i0:]:{:\\nloopBreak% = 0\\nfor s1 in getCharFromString(in0, int(8.0)):{:\\nb1 = int(7.0) \\l divInt(mod(abs(mod(int(83.0),abs(mod(i2,int(64.0))))),len(in0[i1:])),( i1 + i0 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [3, 7, 5, 2, 8, 1, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 5, 0, 22, 7, 3, 4, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(s2, ( divInt(len(in2),divInt(len((in0 + (s2[( ( int(3.0) + int(7.0) ) + int(5.0) ):int(2.0)][i0:divInt(int(8.0),i0)] + in1))[int(1.0):]),i1)) + ( i0 * int(8.0) ) ))) \\le i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 4, 7, 8, 3, 5], [1, 1, 1], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 1, 1, 1, 3], [0, 1, 1], [3, 1, 3, 0, 0, 3], [1], [0, 0, 0, 0, 0], [4, 5, 5, 0, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 2, 5, 1, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in1) \\l max(( len(in2) - min(min(int(44.0), divInt(i1,i1)), int(7.0)) ), int(8.0))\\nin2 = s0\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 277}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [8, 1, 5, 8, 7, 6, 6, 8, 6, 0, 1, 1, 0, 9, 4, 6, 7], [2, 0, 1, 0, 2, 1, 0], [1], [2, 2, 2, 3, 2, 2, 3, 1, 0, 3, 1, 0, 2, 2, 1, 0, 1, 0, 2, 0, 1, 3, 3, 0, 3, 1, 0, 3, 1, 0, 0, 1, 2, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [4, 3, 3, 0, 0, 4, 1], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 4, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 7, 0, 27, 8, 6, 5, 3, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( divInt(saveOrd(s1),( ( len(in2) + int(8.0) ) + i2 )) + len(getCharFromString(in0[int(1.0):i0], mod(divInt(int(5.0),i1),int(8.0)))) ) * i0 ) \\le ( i2 - int(7.0) )\\nb1 = min(min(i1, saveOrd(s2)), int(6.0)) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1], [8, 3, 8, 4, 7, 7], [0, 0, 1, 0, 2], [0], [1, 2, 2, 0, 2, 3, 3, 2, 0, 1, 1, 3, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 11, 4, 2, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(8.0) \\le ( ( i0 - mod(saveOrd(s2),len(in2)) ) + ( i0 + int(3.0) ) )\\ni1 = int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 2, 6, 8], [2, 0, 1], [1], [3, 0, 2, 3, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [0, 1, 1, 0], [4, 3, 3, 0], [0, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 7, 2, 3, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le i2\\ni0 += ( len(in2) + divInt(len(in0),int(3.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 1, 5, 9, 5, 9, 1, 3, 9, 2, 9, 5, 9], [2, 0, 2, 0, 2, 1, 0, 1], [1], [3, 2, 2, 3, 0, 2, 3, 1, 2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 3, 1, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0], [4, 2, 4, 0, 0, 3], [0, 0, 0, 2, 2, 2, 0, 0, 1], [0, 0, 0, 0, 0], [2, 5, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 8, 1, 24, 9, 4, 7, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( abs(i2) + divInt(saveOrd(in2),int(6.0)) ) + ( i0 + ( divInt(divInt(( int(1.0) * i2 ),int(59.0)),i0) * ( min(int(5.0), i2) * i1 ) ) ) )\\ni0 += i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0, 1], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 1, 0, 0, 1, 0, 0], [1, 2, 3, 2, 2, 5, 2], [], [], [2, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 8, 0, 32, 11, 5, 3, 8, 4, 0, 0, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s1[divInt(divInt(len(s2),mod(divInt(len((in0 + s2)[int(8.0):i2]),int(13.0)),min(( divInt(mod(int(8.0),i2),int(7.0)) * i1 ), ( i0 + int(1.0) )))),divInt(( int(8.0) + int(16.0) ),min(i2, i1))):int(5.0)]) \\le divInt(i0,i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [0], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 9, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 2, 2, 1, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 1, 13, 5, 2, 4, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( mod(( int(3.0) - len(in2) ),mod(i0,int(9.0))) + int(4.0) ) + int(8.0) )\\ni0 -= int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 1, 5, 9, 5, 9, 1, 3, 9, 2, 9, 5, 9], [2, 1, 1, 0, 2, 0, 0, 0, 2, 2, 1], [1], [3, 2, 2, 3, 0, 2, 3, 1, 2, 3, 2, 2, 2, 2, 1, 0, 1, 0, 2, 3, 1, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [4, 3, 1, 0, 0, 3, 2], [2, 0, 1, 2, 2, 2, 0, 0, 1], [0, 0, 0, 0, 0], [2, 5, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 8, 1, 30, 10, 7, 6, 5, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) * i2 ) + divInt(max(int(6.0), divInt(min(( divInt(divInt(( int(1.0) - i1 ),int(59.0)),i1) * divInt(min(int(5.0), i0),i2) ), i0),len(in0))),i0) )\\ni0 *= abs(( int(9.0) * int(1392.0) ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [1, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(3.0) \\l int(0.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 2, 8, 8], [0, 0, 1, 0, 2], [0, 1], [2, 2, 2, 3, 0, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 4, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 17, 7, 2, 4, 3, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( divInt(divInt(saveOrd(s2),i0),len(getCharFromString(in2, ( ( i0 + int(3.0) ) + int(7.0) )))) + divInt(i1,( int(2.0) * i0 )) ) \\le int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [7, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 4, 1, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(saveOrd(in2),divInt(max(( ( i0 + int(7.0) ) + int(7.0) ), int(4.0)),i0)) + divInt(int(8.0),i1) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 3], [0, 4], [1, 1], [0, 0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [1, 3, 3, 2], [0], [0, 0, 0, 0, 0, 1, 1, 1], [3, 5, 4, 1], [1], [0, 0], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 8, 1, 4, 0, 1, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(int(3.0), len(in0[len((in2 + in1)):])) \\l divInt(int(0.0),abs(i0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [2, 1], [0, 0], [1], [], [], [], [], [1, 1, 0, 1, 1], [2, 1, 5, 8, 7], [2, 2, 2, 0, 2], [1], [3, 2, 2, 3, 2, 1, 3, 0, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [1, 0, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 1], [0, 1, 0, 0, 0], [1, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1 not in in2\\nin2 = s2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [2], [0, 0], [], [0, 0], [], [], [3, 1], [0, 4, 2], [1, 1, 0, 1], [0, 0, 0], [], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [8, 1, 5, 8, 7, 6, 4, 8, 6, 0, 1, 1, 0, 9, 4, 6, 0], [2, 0, 1, 0, 2, 1, 1], [1], [3, 1, 2, 3, 2, 2, 3, 1, 0, 3, 1, 2, 2, 2, 2, 0, 1, 0, 2, 0, 1, 2, 3, 0, 3, 1, 0, 3, 1, 0, 1, 1, 2, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [1, 3, 2, 0, 0, 4, 1], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [1, 5, 3, 1, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 3, 4, 3, 0, 1, 0, 0, 0, 16, 16, 7, 0, 35, 10, 7, 5, 5, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(int(8.0), ( len(s1) + ( divInt(abs(int(1.0)),i2) + min(int(5.0), mod(( divInt(divInt(i0,int(8.0)),i1) + ( i0 * int(7.0) ) ),divInt(min(i2, saveOrd(in2)),int(6.0)))) ) )) \\l i1\\nloopBreak% = 0\\nwhile max(int(4.0), i1) \\le int(86.0):{:\\nb1 = not int(01.0) == ( int(1094.0) - int(6.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 4], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [7, 1, 0, 8, 7, 1, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 2, 3, 1, 3, 3, 1, 1, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 4, 4, 3, 1, 1, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 11, 11, 1, 0, 19, 5, 6, 1, 4, 8, 0, 1, 10, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in2),divInt(len(in0),int(71.0))),int(0.0)):{:\\nloopBreak% = 0\\nwhile i0 \\le int(8.0):{:\\nloopBreak% = 0\\nfor in0 in (in1 + s1)[int(7.0):]:{:\\nres0 = ( divInt(abs(int(13.0)),len(getCharFromString(s2, len(s2)))) + int(54.0) ) \\le int(47.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 0, 0, 1, 1], [3, 1, 6, 8, 6, 1, 0, 9], [2, 0, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 0], [4, 3, 3, 0], [0, 1], [0, 0, 0], [5, 5, 5, 2, 4, 5, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 1, 0, 12, 3, 3, 2, 1, 7, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2) \\le ( divInt(len(in2),( len(in2) + int(31.0) )) - int(6.0) )\\ns2 = (in1 + (in2[i2:][int(8.0):] + in0))[int(610.0):int(9.0)]\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [1, 2, 2, 0, 1, 2, 0, 1, 0, 2, 2, 2, 2, 2, 0, 2, 1, 1, 0], [1, 2, 2, 0, 0, 1, 1, 0, 1], [0, 2, 2, 2, 1, 0, 1, 2, 0, 0], [0, 0, 0], [0, 0, 0, 0, 0], [], [], [3, 0, 3, 3], [4, 3, 5, 3, 5, 4, 0, 2], [1, 1, 1, 1, 1, 1, 1, 2, 2, 1], [0, 0, 0, 0, 0, 0, 0, 0], [4, 4], [], [], [], [1, 0, 1, 1], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 9, 4, 6, 0, 8, 9, 1, 2, 2, 7, 1, 3, 9, 4, 5, 1, 9, 3, 6, 8, 9, 0], [1, 0, 1, 1, 0, 1, 0, 2, 0, 2, 0, 1, 0, 0, 0, 2, 1, 2, 2, 0, 2, 1, 0, 2, 0, 0, 0], [1, 1], [3, 2, 2, 3, 2, 3, 1, 1, 3, 1, 1, 2, 2, 2, 1, 1, 3, 1, 0, 0, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 1, 2, 1, 3, 0, 0, 0, 0, 1, 3, 1, 1, 2, 3, 1, 1, 3, 3, 3, 2, 3, 0, 3, 1, 2, 3, 0, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 1, 3, 1, 3, 0, 3, 2, 3, 1, 0, 0, 2, 0, 1, 1, 2, 3, 1, 3, 3, 3, 3, 0, 2, 0, 1, 2, 3, 2, 2, 3, 0, 2, 0, 3, 1, 2, 3, 3, 3, 1], [1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [4, 2, 3, 2, 2, 3, 4, 0, 1, 4, 2, 0, 2, 0, 1, 2, 3, 0, 1, 4, 0, 4, 1, 4, 2, 3, 1, 4, 3, 3, 3], [0, 0, 0, 1, 2, 2, 1, 1, 0, 2, 1, 2], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0], [1, 5, 4, 5, 4, 2, 2, 1, 3, 2, 4, 4, 1, 0, 1, 2, 0, 2, 4, 5, 1, 2, 5, 1, 5, 2], [1, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0], [0, 0, 2, 2, 3, 0, 0, 4, 0, 0, 0, 1, 4, 2, 1, 0, 4, 4, 1, 2, 0, 1, 1, 1, 2, 4, 0, 2, 1, 1, 0, 0, 0, 4, 4, 4, 2, 4, 0, 4, 0, 0, 0], [0, 3, 2, 2, 0, 0, 0, 2, 1], [4], [2, 2, 2, 0, 2, 0, 1], [2, 2, 1, 2, 2, 2, 0, 1], [19], [21, 10], [8, 7, 7, 0], [12]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 10, 3, 4, 0, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le mod(divInt(abs(divInt(len(in2),int(31.0))),int(0.0)),abs(int(8.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1, 1], [7, 0, 6, 8, 5], [0, 1, 2, 0, 2], [0, 1], [3, 1, 2, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [1, 3, 3], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 11, 3, 2, 0, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(int(7.0), divInt(divInt(divInt(int(0.0),len(in0[i0:])),int(6.0)),int(8.0))) \\le int(5.0)\\nin2 = (in1 + s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [2, 0], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [3, 0, 4, 8, 7, 7, 2, 9, 7, 7, 2], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 2, 1, 1, 3, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0, 0, 0], [2, 5, 3, 2, 4, 5, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 3, 0, 23, 7, 5, 2, 5, 7, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\nres0 = saveOrd(in0) \\le ( divInt(len(s2),mod(len((in1 + (in2[:min(divInt(divInt(int(3.0),int(0.0)),min(int(4.0), int(8.0))), int(7.0))][i0:] + in2))[int(7.0):]),i0)) - divInt(( int(29.0) + i1 ),int(772.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [1, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [2, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [4, 0, 2, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 8, 2, 3, 0, 2, 3, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = divInt(int(10.0),saveOrd(getCharFromString(in0, len(in2[divInt(int(6.0),len(in1)):])))) \\l i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 6, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [2, 2, 2, 0, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 2, 2], [1, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( mod(mod(i2,( saveOrd(s0) + len(in2) )),( i0 + int(3.0) )) + int(7.0) ) \\le int(6.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 0], [3, 2, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 3, 1, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 4, 0], [0, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 10, 3, 4, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(saveOrd(in0),int(3.0))) + min(int(2.0), int(6.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 1, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 16, 5, 4, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s2) == divInt(mod(max(divInt(len(in2),max(( i0 + int(3.0) ), i0)), int(3.0)),i1),( int(5.0) + i0 ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 0, 1], [], [0, 0], [], [], [3, 3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [3, 5, 3, 8, 7, 7, 4, 1, 9, 4, 9], [2, 0, 1, 0, 2], [0], [3, 2, 2, 1, 2, 3, 1, 3, 0, 1, 1, 1, 2, 2, 1, 1, 1, 0, 2, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0], [2, 2, 4, 4, 0], [0, 2, 0, 1, 0, 2, 0], [1, 1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 11, 11, 1, 0, 17, 5, 3, 4, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( ( int(3.0) + ( abs(int(53.0)) * saveOrd(getCharFromString(s2, i2)) ) ) + int(8.0) )) \\le int(7.0)\\nres0 = int(74.0) \\le ( mod(int(1.0),int(9.0)) - int(49.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 2, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 6, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 2, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [1, 5, 3, 3, 4, 1, 2, 3, 3, 3, 3], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 2, 0, 11, 3, 3, 0, 3, 11, 0, 2, 11, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le mod(mod(abs(divInt(len(in2),int(31.0))),int(0.0)),i0):{:\\nloopBreak% = 0\\nfor in0 in in0:{:\\nloopBreak% = 0\\nfor in1 in (s1 + s2)[int(8.0):]:{:\\nres0 = getCharFromString(in0, i2).startswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 16, 7, 2, 5, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( i0 + divInt(len(in2),( ( i0 + int(3.0) ) + int(7.0) )) ) * divInt(i1,( int(7.0) - i0 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [0, 0], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1], [3, 3, 8, 8, 7, 7], [0, 1, 1, 0, 2], [1], [3, 2, 2, 2, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1, 2], [4, 4], [0, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [4, 7, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 2, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [5, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b1\\ni0 -= saveOrd(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 1], [3, 9, 2, 8, 7, 9, 4, 8, 0], [1, 0, 1, 0, 2, 1, 0], [1], [3, 0, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 0, 2, 0, 1, 0, 0, 2, 3, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1], [4, 3, 4, 0, 0], [0, 0, 0, 1, 0, 2, 0], [1, 1, 0, 0], [2, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 2, 2, 2, 2, 0, 0, 0], [0, 3, 2], [4], [1, 2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s2) \\le i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1, 2, 2, 1, 1, 2, 1], [2, 2, 0], [0, 1, 0, 1, 2], [], [0, 0], [], [], [0, 3], [4, 4, 2, 1], [1, 1], [0, 0], [], [3, 1], [0], [1], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 2, 7, 8, 3, 5, 5, 1, 4, 0, 4, 3, 3, 3, 4, 1, 3, 3, 2], [2, 2, 1, 0, 2, 2, 1, 2, 0, 2, 1, 0, 2, 2, 2], [1, 0], [3, 2, 2, 3, 0, 2, 3, 2, 0, 1, 1, 0, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 3, 3, 2, 1, 1, 0, 0, 0, 0, 1, 3, 2, 1, 2, 1, 3, 0, 0, 1, 0, 0, 3, 1, 3, 2, 1, 3], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3, 2, 1, 1, 2, 4], [2, 0, 0, 2, 1, 2, 0], [0, 1, 1, 0, 0, 1, 1, 1], [2, 5, 3, 4, 4, 0, 5, 2, 0, 3, 4], [1], [0], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2, 0], [3], [], [], [], [26]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 6, 0, 22, 7, 3, 2, 5, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s2[( divInt(len(in2),i2) * mod(len((in0 + (in1[mod(i2,int(5.0)):int(2.0)][i1:] + in1))[( divInt(int(7.0),i0) + int(8.0) ):i2]),divInt(i2,int(3.0))) ):]) \\le int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 1, 6, 8, 7], [2, 0, 1], [0], [3, 2, 2, 2, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1, 1], [4, 3, 4, 0], [0], [0, 1, 0], [0, 5, 3, 2, 4, 5, 4], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 4, 2, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(mod(divInt(len(in2),int(3.0)),int(1.0)),i2) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [1, 4], [1, 1], [0, 0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s2) \\g divInt(divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) - int(7.0) ))),int(4.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1, 0], [4, 0, 4, 0], [0, 0], [0, 0, 0], [0, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 3, 3, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(min(divInt(saveOrd(in2),int(3.0)), int(1.0)),i2) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 4, 4, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( divInt(len(s2),divInt(len(in2),min(( i0 + int(3.0) ), int(7.0)))) + int(5.0) )) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [0, 1], [0, 0], [], [1], [], [1], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 3, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [0, 1, 2, 2, 1, 1, 2, 1], [2], [0, 1, 0, 1, 2], [0], [0, 0], [], [], [3, 3], [4, 4, 2, 1], [0, 1, 0, 1, 0, 1], [0, 0, 0, 0], [], [3, 1], [0], [1], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 2, 7, 8, 3, 5, 5, 1, 4, 0, 4, 3, 3, 3, 4, 1, 3, 3, 2], [0, 1, 2, 0, 2], [1, 0], [3, 3, 2, 3, 2, 1, 3, 1, 0, 1, 1, 0, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 3, 3, 2, 1, 1, 0, 0, 0, 0, 1, 3, 2, 1, 2, 1, 3, 0, 0, 1, 0, 0, 3, 1, 3, 2, 1, 3], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3, 2, 1, 1, 2, 4], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0, 0, 1, 1, 1], [2, 5, 3, 4, 4, 0, 5, 2, 0, 3, 4], [1], [], [0, 0, 4, 2, 3, 0, 3, 4, 2, 0, 0, 3, 0, 1, 0, 0], [0, 3, 2], [4], [2, 0, 0], [3], [], [], [], [26]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 0, 2, 1, 1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s2) \\le len(in2) and False )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 3, 6, 8], [2, 0, 1], [], [3, 2, 1, 3, 2, 3, 1, 2, 3, 1, 1, 2, 3], [0, 0, 1, 0], [4, 3, 3, 0], [0, 0], [0, 1, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [0, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 1, 5, 8, 7], [2, 1, 2, 2], [0], [3, 3, 2, 0, 2, 3, 2, 2, 0, 1, 0, 0, 3, 1, 2, 0], [1, 1, 1], [3, 3, 0, 3, 1], [0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = len(in1) \\l len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 1], [8, 7, 3, 8, 7, 7, 7, 6, 5], [2, 2, 1, 0, 2], [0], [3, 2, 2, 3, 2, 2, 1, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 5, 1, 21, 8, 2, 3, 5, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2[( divInt(len(in2),mod(divInt(int(8.0),int(7.0)),i2)) + int(3.0) ):int(8.0)]) \\le ( divInt(divInt(int(7.0),i2),int(77.0)) + i1 )\\ni0 = ( i2 + int(65.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 0, 0], [0, 0, 2], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 9, 7, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 3, 3, 1, 0, 0, 1, 0, 2, 2, 3, 2, 1, 3, 1, 0, 1], [1, 1, 0, 0, 1], [4, 3, 4, 2, 2, 3], [0, 0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 5, 3, 3, 3], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 2, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 4, 0, 20, 5, 6, 2, 3, 9, 0, 2, 10, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in2),saveOrd(in0)),abs(int(31.0))):{:\\nloopBreak% = 0\\nfor in0 in (in1 + s1)[i0:]:{:\\nloopBreak% = 0\\nfor in2 in getCharFromString(in0, i2):{:\\nres0 = int(0.0) \\l i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = ( ( abs(divInt(int(9.0),len(in0))) + int(7.0) ) + i1 ) != int(83.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 0, 3, 2, 3, 1, 2, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 2, 3, 3, 4, 1, 2, 3, 3, 3], [1], [0, 0], [0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 2, 0, 11, 3, 3, 0, 3, 9, 0, 2, 7, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(s2),divInt(len(in0),int(31.0))),int(0.0)):{:\\nloopBreak% = 0\\nfor in0 in in1[i0:]:{:\\nloopBreak% = 0\\nfor s1 in s2:{:\\nres0 = int(8.0) \\l i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [2, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [7, 2, 4, 8, 7, 7], [2, 0, 1, 0, 2], [1], [3, 2, 2, 1, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) == ( ( int(7.0) - divInt(len(in2),len(in0)) ) + ( i2 + int(2.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le divInt(divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))),int(4.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 0, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [3, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd((in0 + (in2 + in1))) \\l int(1.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 1, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 1], [2, 2, 0], [0, 2, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [3, 1, 4, 8, 7, 8, 3, 5, 0, 4, 7, 0, 8], [1, 0, 1, 1, 0], [1], [3, 2, 2, 3, 0, 3, 1, 1, 0, 1, 1, 2, 2, 2, 0, 1, 3, 1, 0, 0, 2, 3, 0, 0], [1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 2, 2, 3], [0, 1, 0], [1, 1, 0, 0, 1], [1, 5, 1, 5, 4, 0, 2, 1, 3, 2], [1], [0], [0, 0, 0, 2, 4, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 1, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 9, 9, 4, 0, 19, 5, 4, 1, 4, 7, 0, 1, 7, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le mod(mod(len(in2),i1),len(s1)):{:\\nloopBreak% = 0\\nwhile int(31.0) \\le int(4.0):{:\\nloopBreak% = 0\\nfor in2 in getCharFromString(in1, i0)[int(8.0):]:{:\\nres0 = int(7.0) != divInt(( divInt(i1,int(83.0)) + abs(int(50.0)) ),i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [2, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),( len(in0) + ( ( i2 + int(3.0) ) + int(7.0) ) )) * divInt(i0,( int(7.0) - i1 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 1, 8, 8], [0, 1, 1], [0], [3, 3, 0, 3, 2, 3, 3, 3, 0, 1, 0, 3, 3], [0, 0, 1], [2, 3, 3, 0, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 0, 0, 1], [2, 4, 8, 8, 2, 8, 5, 6], [2, 1, 1, 2, 1], [0], [3, 1, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3, 0, 0, 2, 1, 2, 1, 0, 3], [0, 0, 1, 0], [2, 0, 3, 0, 0, 1, 3], [0, 1, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 5, 0, 21, 4, 7, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(int(24.0)) \\l ( min(( len(in0) + min(min(i2, int(8.0)), i1) ), int(8.0)) - max(i1, i2) ):{:\\nres0 = divInt(int(2.0),( int(856.0) - i1 )) \\le len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [2], [], [0, 0], [], [], [3], [4, 4], [2, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [7, 2, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 2, 3, 1, 1, 1, 3], [0, 1, 0, 0], [4, 3, 3, 0], [0, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 0, 0, 0, 0, 1, 1], [3, 3, 6, 8, 0, 1, 5, 9, 4], [2, 0, 1], [], [2, 2, 2, 3, 2, 3, 1, 2, 3, 1, 1, 1, 3], [0, 0, 1, 0, 0], [4, 3, 3, 0], [0, 0, 2, 2], [0, 0, 0], [0, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 0, 0, 12, 5, 3, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( divInt(saveOrd(s0),( len(s0) + int(3.0) )) + ( len(in0) * int(36.0) ) ) * int(80159.0) ) \\le int(4.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 1, 2, 1, 0], [2, 2, 0], [2, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [7, 1, 0, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8], [1, 2, 0, 1], [0], [3, 2, 2, 3, 2, 3, 1, 0, 0, 1, 1, 2, 2, 3, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 2, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 9, 3, 3, 0, 3, 6, 0, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in2),divInt(len(in0),int(71.0))),i1):{:\\nin0 = (s2 + s1)[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += saveOrd(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [2, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + divInt(len(in0),( ( i2 + int(3.0) ) + int(7.0) )) ) * divInt(i0,( int(5.0) - i1 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in0),divInt(len(in0),( min(int(3.0), int(7.0)) + int(5.0) ))) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [0, 1], [0, 0], [], [1], [], [1], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 1, 1], [1], [2, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 0, 0, 0], [4, 3, 3, 0], [0, 1, 1, 1, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 2, 2, 2, 1, 9, 4, 2, 5, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\ni2 += ( ( ( saveOrd(s0) - ( len(in2) - int(3.0) ) ) - int(1.0) ) + i1 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0, 0, 0, 0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [4, 4, 7, 8, 3, 5], [2, 1, 1], [0], [3, 3, 2, 2, 3, 1, 1, 2, 0, 0, 0, 1, 3, 3], [0, 0, 1], [2, 1, 3, 3, 2, 3], [0, 1], [1, 1, 0], [4, 5, 3, 4, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 11, 3, 3, 2, 1, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( ( len(in1) + int(4.0) ) - int(4.0) ), mod(i2,i1))) \\l i1\\nin2 = in0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [2, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [4, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2[saveOrd((in1 + s1)):]\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [0, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(( len(in0) + int(8.0) ),i0)) + int(13.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [0, 1, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 2, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 1, 14, 4, 4, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s2) \\le ( divInt(len(in1),mod(abs(min(( i0 - int(3.0) ), int(3.0))),int(4.0))) + int(8.0) )\\ni1 += int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [0], [0, 0], [], [], [3, 1, 2], [4, 4], [0, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 0, 0, 1, 1, 2, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [3, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\ni0 -= len(in1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [0], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [0], [3, 2, 2, 3, 2, 3, 1, 3, 0, 1, 1, 1, 3], [0, 0, 1], [4, 3, 3, 0], [0, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 3, 4, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s0) \\le ( ( len(in2) + divInt(len(in0),int(3.0)) ) + min(i2, int(1.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [2], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [5, 2, 7, 8, 3, 5, 5], [2, 2, 1, 2, 0], [0], [2, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 3, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1], [2, 1, 4, 2, 0, 3, 1, 0, 1], [0], [1, 1, 0], [4, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 3, 8, 0, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = mod(abs(mod(max(saveOrd(in1), abs(int(52.0))),divInt(i2,int(7.0)))),i2) \\l min(len(in0), max(min(int(8.0), i1), i2))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1, 0], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [2, 3, 3, 1], [1, 0, 1, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 2, 13, 4, 4, 4, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= abs(( ( len(s2) + divInt(len(in2),max(( i0 - int(3.0) ), int(7.0))) ) - int(4.0) ))\\ni1 = int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [4, 5, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [7, 1, 0, 8, 7, 8, 6, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [1, 1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 0, 1, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 0, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 9, 9, 4, 1, 19, 5, 5, 2, 4, 7, 0, 1, 8, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(divInt(len(in2),divInt(len(in0),int(71.0))),int(0.0)):{:\\nloopBreak% = 0\\nwhile i0 != i0:{:\\nloopBreak% = 0\\nfor in0 in (in1 + s1)[int(8.0):]:{:\\nres0 = ( divInt(abs(int(7.0)),int(86.0)) + len(s2) ) != int(54.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),( len(in0) + ( ( i0 + int(3.0) ) + int(7.0) ) )) * divInt(i0,( int(7.0) - i1 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 2, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 13, 5, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(abs(divInt(len(in2),( ( int(3.0) + int(7.0) ) + int(4.0) ))),int(8.0)) * i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [2, 1], [], [0, 0], [], [], [3], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1], [1, 1, 5, 8, 7], [2, 2, 1, 0, 2], [1], [3, 2, 2, 3, 2, 1, 3, 0, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 1, 0, 1, 1], [4, 3, 0, 0, 0], [0, 1], [0, 1, 0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\ni2 += saveOrd(in0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 2, 2, 0, 1, 1, 2, 3, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 1, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 7, 3, 3, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(i0,divInt(len(in2),( divInt(i0,int(3.0)) - int(7.0) ))) + mod(max(( int(7.0) + i1 ), int(8.0)),i0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [8, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [3, 0, 4, 1], [1], [], [2, 0, 3, 0, 4, 1, 4, 0], [0, 2], [], [2], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 8, 2, 3, 0, 2, 3, 1, 0, 8, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(8.0):]) \\le len((s0 + getCharFromString(\"\"F\"\", divInt(mod(int(0.0),len(in1.capitalize())),i0))))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 4], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [7, 1, 0, 8, 7, 1, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 2, 3, 1, 0, 0, 1, 1, 2, 2, 3, 1, 1, 3, 1, 0, 1], [0, 1, 1, 0, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 1, 0, 0, 1], [2, 4, 4, 3, 4, 3, 1, 2, 3, 2], [1], [0], [0, 4, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [0], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 4, 4, 3, 1, 1, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 11, 11, 3, 0, 20, 5, 5, 2, 3, 8, 0, 1, 11, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( mod(len(getCharFromString(in1, mod(len((in1 + in0)[int(71.0):i0]),i0))),int(0.0)) + int(8.0) ):{:\\nloopBreak% = 0\\nwhile ( divInt(abs(int(7.0)),int(13.0)) + len(in1.rstrip(in0)) ) \\le int(54.0):{:\\nloopBreak% = 0\\nfor s1 in s2:{:\\nres0 = i1 \\le int(47.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 0, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 4, 3, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(min(divInt(len(in2),int(3.0)), ( i0 + int(7.0) )),int(5.0)) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 1], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [8, 1, 5, 3, 7, 9, 8, 2, 6, 7, 8, 7, 7, 3], [2, 0, 2, 2, 2, 2, 1, 1], [0], [3, 3, 2, 2, 2, 0, 1, 2, 0, 1, 3, 1, 3, 1, 0, 0, 3, 0, 2, 1, 0, 3, 1, 3, 3, 0, 2, 1, 3, 1, 0, 1], [0, 0, 1, 1, 0, 1], [3, 3, 0, 0, 1, 1, 2, 1, 0], [1, 1, 0], [1, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [3, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 8, 0, 32, 6, 9, 3, 3, 5, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len((in1 + in2)) \\l len((in0 + (s2[( ( mod(i2,int(81.0)) - divInt(i0,int(5.0)) ) - min(int(3.0), min(int(7982.0), i2)) ):i2][:max(i2, ( int(67.0) + i2 ))] + in1))[max(int(8.0), abs(max(i1, divInt(int(7.0),min(int(7.0), i1))))):int(3.0)])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [1, 0, 0], [2, 2, 2], [0, 0], [0, 0], [], [], [0], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 0, 2, 1, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [3, 5, 3, 3, 4, 1, 2, 3, 3, 3, 4, 0], [1], [0, 0], [0, 0, 0, 2, 4, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 4, 4, 1, 0, 10, 3, 3, 0, 3, 12, 0, 2, 11, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(in0) \\le mod(mod(len(in2),divInt(len(in0),int(31.0))),int(0.0)):{:\\nloopBreak% = 0\\nfor in0 in getCharFromString(in1, i0)[int(8.0):]:{:\\nloopBreak% = 0\\nfor s1 in s2:{:\\nin0 = in0.rstrip(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 0, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 4, 3, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(max(mod(i0,len(in2)), ( i0 + int(3.0) )),int(3.0)) - int(5.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 1, 5, 6, 5, 9, 1, 3, 9, 2, 9, 5, 9], [2, 1, 1, 0, 2, 0, 2, 0, 2, 2, 1], [1], [3, 2, 2, 3, 0, 2, 3, 1, 2, 0, 2, 0, 2, 2, 1, 0, 1, 2, 2, 3, 3, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3], [0, 0, 0, 2, 2, 2, 0, 0, 1], [0, 1, 0, 1, 0], [2, 0, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 5, 1, 17, 7, 3, 6, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(s0) + i2 ) + divInt(len(in0),int(6.0)) )\\ni1 += ( i1 * ( i0 * ( mod(int(1.0),i2) * int(565.0) ) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 0, 1], [2, 4, 8, 8, 6, 7], [2, 1, 1], [0], [3, 1, 2, 3, 2, 3, 3, 2, 2, 1, 0, 1, 3, 0, 2, 0, 1, 1], [0, 0, 1, 1, 0], [2, 3, 2, 0, 0, 1, 3], [0, 1, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 0, 18, 5, 5, 3, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(2.0)) \\l ( len(in0) + ( abs(min(divInt(mod(int(4.0),i2),int(8.0)), min(i1, ( i1 - int(8.0) )))) - int(67.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [5, 2, 6, 8, 3, 5, 5], [2, 2, 1, 2, 0], [0], [3, 0, 2, 0, 3, 3, 1, 2, 0, 1, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1], [2, 2, 4, 0, 0, 3, 1, 0, 1], [0], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 1, 3, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(i2) \\l mod(i2,abs(saveOrd(in1)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le divInt(divInt(len(in2),divInt(len(in0),( ( int(3.0) + int(7.0) ) + int(5.0) ))),int(8.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [0, 1, 2, 0, 2, 1, 2, 2], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 5, 1, 2, 2, 5, 2], [], [], [2, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 8, 0, 32, 11, 5, 4, 7, 4, 0, 0, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1[( divInt(len(in2),mod(divInt(len((s1 + s2)[int(8.0):i0]),int(13.0)),min(( divInt(divInt(int(8.0),i1),int(7.0)) + i2 ), ( i0 + int(1.0) )))) + mod(( int(8.0) * int(16.0) ),min(i2, i1)) ):int(5.0)]) \\le divInt(i2,i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [2, 2, 2, 3, 2, 3, 2, 2, 0, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 16, 7, 2, 3, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = divInt(divInt(divInt(saveOrd(s2),( len(in2) + divInt(( i0 + i0 ),int(3.0)) )),int(7.0)),i1) \\le ( int(4.0) + i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 6, 3, 3, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(getCharFromString(in2, divInt(len((in0 + (s2[:( i0 + ( int(3.0) + int(7.0) ) )][int(5.0):] + in1))[i0:]),divInt(int(8.0),i1)))),int(8.0)) + i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 0, 1, 3, 1, 0], [0, 1, 1, 1], [2, 3, 3, 0, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 15, 4, 5, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( divInt(len(in0),mod(len(in2),min(divInt(i2,int(2.0)), i1))) + int(4.0) )) \\l min(int(8.0), i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 2, 1, 1, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 2, 1, 16, 6, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(( divInt(len(s0),mod(len(in2),min(( i0 + int(3.0) ), ( int(2.0) + int(5.0) )))) + mod(int(8.0),int(8.0)) ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [2, 2, 3, 3, 2, 2, 3, 1, 1, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( mod(saveOrd(s1),len(in2)) + ( mod(len(in0),int(8.0)) + int(13.0) ) ) \\le int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [1], [3, 0, 2, 3, 3, 3, 2, 2, 0, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 3, 0], [0, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += saveOrd(s0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [3, 4, 6, 8, 3, 5], [0, 1, 1], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 1, 3, 3], [0, 0, 1], [2, 1, 3, 0, 0, 3], [0, 2], [1, 1, 0], [4, 5, 5, 1, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 1, 12, 2, 5, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(max(( len(in1) + min(min(int(34.0), ( i1 * int(6.0) )), i1) ), int(8.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 1, 1], [3, 7, 5, 3, 8, 9, 4, 6, 6], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [2, 4, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 4, 0, 21, 7, 3, 4, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s2) \\le ( divInt(len(in1[divInt(len((in0 + (s2[( ( int(3.0) + int(7.0) ) + int(5.0) ):][int(3.0):] + in1))[i0:divInt(int(8.0),i0)]),int(946.0)):]),i1) - ( i0 * int(6.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1, 2, 2, 1, 1, 2, 1], [2, 2, 0], [1, 1, 0, 1, 2], [], [0, 0], [], [], [3, 3], [4, 4, 2, 1], [1, 1], [0, 0, 0, 0], [], [3, 1], [0], [1], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 2, 7, 8, 3, 5, 5, 1, 4, 0, 4, 3, 3, 3, 4, 1, 3, 3, 2], [2, 2, 1, 0, 2, 2, 1, 2, 0, 2, 1, 0, 2, 2, 2], [1, 0], [3, 2, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 3, 3, 2, 1, 1, 0, 0, 0, 0, 1, 3, 2, 1, 2, 1, 3, 0, 0, 1, 0, 0, 3, 1, 3, 2, 1, 3], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3, 2, 1, 1, 2, 4], [2, 0, 0, 2, 1, 2, 0], [1, 1, 1, 0, 0, 1, 1, 1], [2, 5, 2, 4, 4, 0, 5, 2, 0, 3, 4], [1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [3], [], [], [], [26]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 1], [3, 9, 2, 6, 7, 9, 4, 8, 0], [2, 0, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 2, 1, 2, 2, 0, 1, 1, 1, 2, 2, 2, 1, 1, 0, 2, 0, 1, 0, 0, 2, 3, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1], [4, 3, 4, 0, 0], [0, 0, 2, 1, 0, 2, 0], [1, 1, 0, 0], [2, 5, 2, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 2, 2, 2, 2, 0, 0, 0], [0, 3, 2], [4], [1, 2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 3, 0, 21, 9, 2, 7, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2[:( int(3.0) + ( mod(i2,int(9.0)) + int(2.0) ) )]) * int(6.0) ) - ( ( ( int(7.0) + int(94.0) ) * i0 ) + mod(i1,int(8.0)) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 4, 3, 2, 2, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(len(s2),divInt(len(getCharFromString(in2, i0)),( i0 + int(3.0) ))) + int(2.0) ), int(5.0)) == i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 0, 1, 1], [1, 6, 6, 8, 0], [0, 1, 2, 0, 2], [0, 1], [1, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [1, 1, 1, 2], [0], [0, 1, 0], [3, 2, 4, 1], [1], [], [2, 0, 1, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(1668.0) \\l int(0.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 4, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 18, 6, 3, 3, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(getCharFromString(in2, divInt(len((in1 + (s2[:( ( i0 + int(3.0) ) + i0 )][:int(7.0)] + in1))[i1:]),divInt(int(4.0),i0)))),int(8.0)) + i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [2], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 1, 5, 9, 5, 9, 1, 3, 9, 2, 9, 5, 9], [2, 0, 1, 0, 2, 0, 0, 0, 2, 2, 1], [1], [3, 2, 1, 3, 0, 2, 3, 1, 2, 2, 2, 2, 2, 0, 2, 0, 1, 2, 2, 3, 1, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3], [0, 0, 0, 2, 2, 2, 0, 0, 1], [0, 0, 0, 0, 0], [2, 5, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s2) \\le ( int(6.0) + len(in2) )\\nin0 = s2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [1, 1], [], [0, 0], [], [], [3], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [0, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 3, 0, 1, 3], [0, 0, 1], [2, 3, 0, 0, 4, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(len(in0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [3, 2, 4, 8, 7, 7, 2, 3, 2, 4], [2, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 1, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 2, 0, 18, 4, 4, 3, 1, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2[( ( len(in2) - divInt(len((in0 + (s2[:max(( int(3.0) + int(2.0) ), int(4.0))][int(8.0):int(7.0)] + in1))[:int(7.0)]),int(232.0)) ) + i2 ):int(4.0)]) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [1], [], [], [], [], [0, 1, 1, 1], [2, 4, 6, 8], [2, 2, 1], [1], [3, 3, 3, 3, 2, 1, 1, 2, 0, 1, 0, 1, 3], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0], [2, 0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 3, 0, 3, 3, 2, 1], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= saveOrd(in1)\\nin2 = in0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [2, 0], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [7, 1, 5, 8, 7, 6, 6, 8, 6, 0, 1, 1, 0, 9, 4, 6, 0], [2, 0, 2, 0, 2, 1, 1], [1], [3, 1, 2, 3, 2, 2, 3, 1, 0, 3, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 0, 3, 1, 0, 3, 1, 0, 1, 1, 2, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [4, 3, 3, 0, 0, 4, 1], [0, 0, 1, 0, 1], [0, 1, 0, 0, 1], [1, 0, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 0, 1], [2, 2, 0], [0, 2, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [3, 1, 0, 8, 7, 8, 6, 1, 9, 4, 7, 0, 8], [1, 0, 1, 1, 0, 0, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 2, 2, 1, 0, 3, 1, 0, 0, 2, 3, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0], [4, 3, 3, 2, 2, 3], [0, 1, 0, 1], [1, 1, 0, 0, 1], [1, 5, 3, 5, 4, 2, 2, 1, 3, 2], [1], [0], [0, 0, 0, 2, 3, 2, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 9, 9, 7, 0, 25, 7, 5, 4, 3, 8, 0, 1, 10, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le mod(mod(len(in2),divInt(len(in0),int(31.0))),int(0.0)):{:\\nloopBreak% = 0\\nwhile i1 \\le int(8.0):{:\\nloopBreak% = 0\\nfor in2 in (in1[int(7.0):] + getCharFromString(s2, ( ( ( int(86.0) + i0 ) - abs(int(19.0)) ) + i1 )))[i1:]:{:\\nres0 = ( abs(i0) - i0 ) != i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1], [3, 1, 6, 8, 5], [2, 0, 1], [1], [3, 2, 2, 0, 2, 3, 1, 1, 1, 1, 1, 0, 3], [0, 1, 1], [4, 4, 3, 0], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 4], [0, 3, 2], [4], [0, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 8, 3, 2, 1, 2, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le ( divInt(i2,mod(saveOrd(in2),int(3.0))) + int(1.0) )\\nin0 = s2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [2], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [1, 1, 2, 3, 0, 2, 3, 1, 2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 3, 1, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(8.0) \\ge int(13.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [7, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 1, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 1, 1, 0, 3, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(7.0):]) \\le len(\"\"F\"\")\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 4], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [7, 4, 0, 8, 7, 1, 3, 5, 4, 4, 7, 0, 8], [1, 0, 1, 1], [0], [3, 2, 2, 2, 2, 3, 1, 1, 0, 1, 1, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 4, 4, 3, 1, 1, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 10, 10, 2, 0, 20, 6, 4, 1, 5, 6, 0, 1, 7, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(divInt(( len(in2) + int(74.0) ),int(0.0)),i1),int(8.0)):{:\\nloopBreak% = 0\\nwhile int(7.0) \\le divInt(mod(len(in0),int(1.0)),int(3.0)):{:\\nloopBreak% = 0\\nfor in0 in (in1 + s1)[abs(int(54.0)):]:{:\\nres0 = i0 \\le int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [2], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [8, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 1, 1, 3, 0, 1, 1, 1, 1, 3], [0, 1, 1], [4, 3, 4], [0], [0, 1, 0], [3, 2, 4, 1], [1], [], [2, 0, 3, 0, 4, 1, 4, 0], [0, 2], [], [2], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 6, 1, 2, 1, 0, 2, 1, 0, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(in0[int(8.0):]) \\le len((s2 + getCharFromString(\"\"F\"\", ( int(0.0) + int(6.0) ))))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [2, 4, 4, 8, 2, 8, 1, 2, 6, 7, 5], [0, 1, 1, 2, 0], [0], [3, 3, 2, 2, 2, 3, 3, 3, 0, 1, 0, 1, 3, 2, 1, 2, 0, 3, 2, 2, 1, 3, 0, 0], [0, 0, 1, 1, 1, 1, 0], [2, 3, 3, 1, 0, 1, 3, 2], [0, 1, 1], [0, 1, 0, 1], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 5, 0, 24, 7, 8, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( ( divInt(len(in2),max(min(i0, int(24.0)), i1)) + int(4.0) ) - max(mod(int(8.0),divInt(i1,len(in0))), mod(( int(2812675.0) - abs(i2) ),i0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [4, 4], [2, 1], [0, 0], [3], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s2 != in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 2, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 18, 7, 4, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(s0),( ( divInt(int(3.0),min(int(2.0), i0)) + ( int(5.0) + i0 ) ) + int(8.0) ))) * i1 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 1, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(s1),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [1, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 2, 3, 2], [0], [0, 1, 0], [3, 0, 4, 1], [1], [0, 0], [4, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(166.0) \\le int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 2, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 7, 2, 3, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(in0) \\le divInt(divInt(len(in2),divInt(( ( mod(int(3.0),int(7.0)) + int(2.0) ) + int(8.0) ),i0)),( int(8.0) + i0 ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [8, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 2, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 4, 1, 4, 0], [0, 2], [], [2], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 10, 3, 2, 0, 3, 2, 1, 0, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(8.0):]) \\le divInt(divInt(divInt(int(0.0),len((in2 + getCharFromString(\"\"F\"\", i0)))),int(6.0)),int(8.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [2, 1], [0, 3], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [8, 1, 5, 5, 7, 6, 6, 8, 6, 0, 1, 6, 0, 9, 4, 6, 0], [2, 2, 1, 0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 2, 2, 1, 0, 3, 1, 1, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 0, 3, 1, 0, 3, 1, 0, 1, 1, 2, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [4, 3, 3, 0, 0, 4, 1], [0, 0, 0, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 5, 3, 2, 4, 5, 4], [], [], [0, 0, 4, 4, 3, 0, 3, 2, 2, 0, 0, 0, 2, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 16, 16, 7, 0, 32, 9, 6, 4, 5, 7, 0, 0, 14, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s1) \\l ( ( len(in2) + divInt(mod(( int(8.0) + i2 ),len(getCharFromString((in0 + (s2[:int(1.0)][int(5.0):divInt(divInt(int(5.0),i2),int(7.0))] + in1)).rstrip(in2), i1))),( i0 + int(6.0) )) ) + divInt(min(i2, min(int(6.0), i1)),saveOrd(in1[int(86.0):i1])) )\\nb1 = int(01.0) \\ge int(60946.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [2], [], [], [], [1, 1, 1, 1, 1], [4, 3, 5, 8, 8], [2, 0, 1], [1], [3, 2, 2, 3, 2, 2, 3, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 4, 4, 3, 0, 17, 7, 3, 3, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not abs(( divInt(len(s2),mod(divInt(len(in2),( i2 + int(4.0) )),mod(int(3.0),i0))) + ( int(5.0) + i1 ) )) \\le int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 0], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1], [4, 6, 7, 8, 3, 5], [1, 0, 2], [0], [3, 3, 0, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3], [0, 1, 1], [2, 1, 3, 0, 0, 4], [0], [0, 1, 0, 0, 1], [4, 5, 4, 3, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [2, 0, 1, 0, 2], [0, 1], [3, 2, 1, 1, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0], [4, 3, 2, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( int(3.0) + int(7.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [2, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 0, 3, 2], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2[saveOrd((in1 + s1)):]\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [0, 0, 1, 0, 2], [], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 1, 3], [0, 1, 1, 1], [4, 3, 3, 0], [0, 0], [0, 0, 0], [0, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in0),divInt(len(in0),int(3.0))) + divInt(i0,int(1.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 6, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) == ( divInt(len(in2),mod(len(in0),min(( i0 + int(3.0) ), int(6.0)))) + int(5.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 324}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 1, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(max(( ( i0 + int(3.0) ) + int(7.0) ), int(4.0)),i0)) + divInt(int(8.0),i1) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 4, 3, 0], [0, 0, 1, 0, 2, 2, 0, 2, 1, 2, 1], [0], [3, 2, 3, 3, 2, 3, 3, 2, 0, 1, 1, 2, 0, 1, 1, 0, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 3, 0, 3, 3, 0, 3, 1, 3, 0, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 1, 0, 0, 4, 2, 1, 2, 1, 1], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 11, 1, 37, 7, 11, 4, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2[( len(in2) - max(( min(min(divInt(i0,int(3.0)), int(7.0)), ( i0 + int(4.0) )) + int(8.0) ), i1) ):int(7.0)]) \\le i0\\ni2 = mod(divInt(int(7.0),i2),( saveOrd((in0 + (s2[int(4.0):][:i0] + in1))[abs(i2):max(abs(i1), max(int(3.0), max(i2, i1)))]) - int(0.0) ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 2, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 17, 7, 3, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s0) \\le ( divInt(len(in2),divInt(abs(( ( i1 + int(3.0) ) + int(7.0) )),divInt(i0,( int(5.0) + i1 )))) * int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1], [3, 3, 8, 8, 7, 7], [0, 1, 1, 0, 2], [1], [3, 2, 2, 2, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 1, 13, 5, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(mod(( len(in2) - len(in0) ),divInt(i0,int(3.0))),int(3.0)) + int(8.0) )\\ni1 += int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 1, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s1) \\le ( divInt(len(in2),( len(in1) * min(( i0 - int(3.0) ), ( int(2.0) + i0 )) )) * mod(int(5.0),i1) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 1, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le divInt(divInt(len(in2),divInt(len(in0),( divInt(i0,int(3.0)) + int(7.0) ))),int(5.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [2, 1, 2, 2, 1, 1, 2, 1], [2, 2, 0, 2], [0, 1, 0, 1, 2], [0], [0, 0], [], [], [1, 3], [4, 4, 2, 1], [1, 1, 2, 0, 0, 1, 1], [0, 0, 0, 0], [3], [3, 1], [0], [1], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 2, 7, 8, 3, 5, 5, 1, 4, 0, 4, 3, 3, 3, 4, 1, 3, 3, 2], [2, 2, 1, 0, 2, 2, 1, 2, 0, 2, 1, 0, 2, 2, 2], [1, 0], [1, 1, 2, 3, 0, 2, 1, 1, 0, 1, 1, 0, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 3, 3, 2, 1, 1, 0, 0, 0, 0, 1, 3, 2, 1, 2, 1, 3, 0, 0, 1, 0, 0, 3, 1, 3, 2, 1, 3], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3, 2, 1, 1, 2, 4], [2, 0, 0, 2, 1, 2, 0], [0, 1, 1, 0, 0, 1, 1, 1], [2, 5, 3, 4, 4, 0, 5, 2, 0, 3, 4], [1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [3], [], [], [], [26]], "fitness": 31, "mapping_values": [1, 8, 8, 4, 4, 1, 0, 0, 0, 2, 4, 7, 4, 1, 2, 1, 1, 0, 14, 14, 9, 2, 26, 6, 1, 3, 4, 7, 0, 1, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(8.0) \\le int(2.0):{:\\nb1 = ( saveOrd(s2) * i2 ) \\le divInt(int(7.0),int(8.0))\\nloopBreak% = 0\\nwhile in2 != in0:{:\\nloopBreak% = 0\\nfor in1 in (in1 + (s0[i2:][int(3.0):int(5.0)] + in2))[i1:]:{:\\ni0 += mod(mod(int(5.0),i2),int(140.0))\\nres0 = ( False and i2 == ( i1 + int(4.0) ) )\\nloopBreak% = 0\\nwhile int(3.0) \\g divInt(int(3.0),i2):{:\\ni0 = int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 0, 1], [2, 2, 0], [0, 2, 2], [0], [0, 0], [], [], [3, 1], [4, 5, 5], [0, 1, 1], [0, 0, 0], [4], [0], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 3, 4, 7, 0, 8], [1, 0, 1, 0, 0], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 0, 2, 0, 1, 1, 3, 0, 0, 3, 2, 3, 0, 0], [1, 1, 1, 0, 1, 0, 0], [3, 3, 2, 2, 2, 3], [0, 1, 0], [1, 1, 1, 0, 1], [1, 5, 3, 5, 4, 2, 2, 1, 3, 2], [1], [0], [0, 0, 0, 2, 0, 1, 4, 4, 1, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 0, 0, 2, 2, 3, 2, 0, 1, 0, 0, 0, 5, 5, 2, 0, 12, 3, 3, 0, 3, 6, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nloopBreak% = 0\\nwhile len(s1) \\le mod(mod(len(in2),mod(abs(int(31.0)),int(0.0))),i1):{:\\nloopBreak% = 0\\nfor in0 in in2:{:\\nb1 = int(8.0) != int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = s2[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 4, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 1, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [0, 0, 1], [4, 0, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 0, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(14.0):]) \\l int(6.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 0], [3, 2, 6, 8], [2, 0, 1], [], [3, 0, 2, 0, 2, 3, 1, 2, 3, 1, 1, 1, 3], [1, 1, 1, 1], [4, 3, 3, 0], [0, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [0, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 5], [0, 1, 1], [0, 0, 0], [4], [3], [0], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 0, 2, 3, 1, 3, 1, 1, 0, 1, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 3, 3, 3], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 2, 0, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 4, 4, 1, 0, 8, 1, 3, 0, 1, 10, 0, 2, 10, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2:{:\\nloopBreak% = 0\\nfor in0 in in0:{:\\nres0 = ( saveOrd(in1) \\le i0 and mod(len((s1 + s2)[int(31.0):]),len(getCharFromString(in0, int(0.0)))) != int(8.0) )\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [1, 1], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 0, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( i2 - len(in2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [4, 4], [0, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [3, 2, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 2, 1, 1, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 3, 2, 3, 2, 2, 3, 3, 0, 1, 0, 1, 3, 3], [1, 0, 1], [2, 3, 3, 0, 0, 2, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 14, 3, 7, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l divInt(len(in2),( mod(min(min(i2, int(2.0)), i1),int(4.0)) + abs(len(in0)) ))\\n", "test_case_results": [0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 232}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 4], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [7, 1, 0, 8, 7, 1, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 2, 3, 3, 1, 0, 1, 1, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 3, 3], [1, 0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 4, 4, 3, 1, 1, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 9, 9, 2, 0, 19, 5, 6, 1, 4, 8, 0, 1, 10, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in2),divInt(len(in0),abs(int(71.0)))),i0):{:\\nloopBreak% = 0\\nwhile int(0.0) \\le int(8.0):{:\\nloopBreak% = 0\\nfor in0 in (in1 + s1)[( divInt(len(getCharFromString(s2, int(7.0))),int(13.0)) - len(s2) ):]:{:\\nres0 = int(54.0) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 1], [2, 2, 1], [0, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 1, 2], [0, 0, 0], [4], [], [], [], [0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 9, 4, 7, 0, 8], [1, 0, 1, 1, 0], [1], [3, 2, 2, 3, 2, 3, 1, 0, 0, 1, 1, 2, 2, 1, 1, 1, 3, 1, 0, 0, 2, 3, 0, 0], [1, 1, 1, 1, 1, 0, 0], [4, 3, 3, 2, 2, 3], [0, 1, 0], [1, 1, 0, 0, 1], [1, 5, 5, 5, 4, 2, 2, 1, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 0, 0, 0, 0, 1, 3, 4, 3, 1, 0, 0, 0, 1, 9, 9, 5, 1, 20, 5, 4, 1, 5, 6, 0, 0, 9, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le mod(mod(len(in2),divInt(len(in2),int(3.0))),i1):{:\\nloopBreak% = 0\\nwhile i0 \\le int(1.0):{:\\nif int(0.0) != divInt(mod(int(8.0),int(7.0)),int(83.0)):{:\\nres0 = (in2 + in1)[abs(int(59.0)):].startswith(getCharFromString(s2, i1))\\n:}\\ni1 += i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [0, 1, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1], [2, 3, 3, 0, 0, 1, 3], [0, 1], [1, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 9, 3, 3, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( mod(len(in0),mod(len(in2),int(24.0))) + int(8.0) )) \\l i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1, 0, 1], [1], [0, 2, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [6, 5, 6, 8], [1, 1, 2, 0, 2], [0, 1], [3, 1, 0, 3, 0, 3, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 1, 3, 1, 4], [0, 1, 1], [0, 1, 0], [3, 4, 5, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(6.0):]) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1], [4, 2, 3, 0], [0, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 11, 3, 3, 1, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0[( divInt(abs(mod(len(in2),int(3.0))),int(1.0)) + i2 ):int(6.0)]) \\le int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [2, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [9, 1, 0, 8, 7, 8, 3, 5, 4, 9, 7, 0, 8], [0, 0, 1, 1], [1], [3, 1, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 1, 0, 0, 1], [5, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 12, 12, 3, 1, 19, 4, 5, 2, 3, 7, 0, 1, 10, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in2) == int(91.0):{:\\nloopBreak% = 0\\nwhile mod(len(in2),mod(len(in0),int(0.0))) \\le int(8.0):{:\\nloopBreak% = 0\\nfor in0 in (in1 + s1)[i0:]:{:\\nres0 = int(7.0) != int(83.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += divInt(( abs(int(54.0)) + int(97.0) ),len(getCharFromString(s2[int(0.0):], i1)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 318}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [1, 1, 1, 0, 1], [3, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 3, 3, 3, 3], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 2, 6, 0, 2, 11, 0, 2, 11, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(s2) \\le len(in2):{:\\nloopBreak% = 0\\nfor in0 in in0:{:\\nloopBreak% = 0\\nfor in1 in (s1 + s2)[mod(len(getCharFromString(in0, mod(abs(abs(len(in0))),i0))),int(31.0)):]:{:\\nres0 = i2 \\l int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 0, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 3, 4, 1, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = abs(i0) \\le ( len(s2[divInt(len(in2),min(mod(i0,int(3.0)), int(3.0))):]) + int(5.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 1, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [8, 4, 7, 8, 3, 5, 9], [1, 1, 1, 2, 0, 0, 0], [0], [3, 3, 2, 2, 2, 3, 1, 2, 0, 0, 0, 1, 3, 3, 0, 1, 2, 3, 3, 0, 3, 1, 0, 3, 1, 2, 0, 1], [0, 1, 1, 0, 1, 0], [2, 1, 3, 0, 1, 3, 4, 1, 2], [1, 1, 2], [0, 0, 0], [4, 5, 3, 4, 4, 5, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 7, 0, 28, 6, 9, 3, 3, 7, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( divInt(divInt(len(in1),int(84.0)),( i1 - i1 )) - i1 ), int(7.0))) \\l min(max(i2, int(8.0)), divInt(len(in2),saveOrd(in0)))\\nin1 = (in1 + (in2[:i0][max(int(3.0), i0):] + in2))[abs(int(5.0)):( i0 * int(9.0) )]\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 6, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( i0 + len(s0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( ( i0 * int(3.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 1, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 0, 1, 0, 1, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 1, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 3, 3, 3], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 3, 0, 18, 5, 5, 0, 5, 10, 0, 2, 10, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in2),divInt(len(in0),i0)),int(31.0)):{:\\nloopBreak% = 0\\nfor in0 in (in1 + s1)[i2:]:{:\\nloopBreak% = 0\\nfor s2 in getCharFromString(in0, int(0.0)):{:\\nres0 = i1 \\l divInt(mod(abs(int(8.0)),int(7.0)),abs(int(83.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 0], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1], [1, 4, 8, 8], [2, 1, 1], [0], [2, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 2, 1], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [2, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 4], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [7, 1, 0, 8, 7, 1, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 2, 2, 1, 1, 0, 1, 1, 2, 2, 1, 1, 1, 3, 1, 3, 1], [1, 1, 1, 0, 1, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 4, 4, 3, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 12, 12, 1, 0, 18, 6, 3, 1, 5, 8, 0, 1, 9, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in2),divInt(( int(71.0) + int(0.0) ),i0)),int(8.0)):{:\\nloopBreak% = 0\\nwhile int(7.0) \\le divInt(mod(int(13.0),int(54.0)),int(47.0)):{:\\nloopBreak% = 0\\nfor in0 in in0:{:\\nin1 = (s1 + s2)[len(getCharFromString(s2, int(0.0))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 1, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(s1),divInt(len(in0),int(3.0))) + ( i0 + int(7.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in2),( ( i0 - int(3.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [2, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 2, 2, 3, 0, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 0, 0, 0, 2, 4], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 1, 2, 3, 2, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [2, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [0, 1, 1], [0], [3, 3, 2, 1, 2, 3, 3, 3, 0, 1, 0, 0, 3], [0, 0, 1], [2, 3, 4, 0, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 1], [2, 2, 0], [0, 2, 2], [0], [0, 0], [], [], [3, 3], [4, 4, 5], [1, 1, 0], [0, 0, 0], [4], [0], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 9, 4, 7, 0, 8], [1, 0, 1, 1, 0], [0, 1], [3, 2, 2, 3, 2, 1, 1, 2, 0, 1, 1, 2, 2, 2, 1, 1, 3, 1, 3, 0, 2, 1, 0, 0], [1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 2, 4, 3], [0, 1, 0], [1, 1, 0, 0, 1], [1, 5, 3, 5, 4, 2, 2, 1, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 1, 0, 0, 0, 2, 2, 3, 2, 0, 1, 0, 0, 0, 9, 9, 2, 0, 20, 7, 4, 3, 4, 8, 0, 1, 8, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le mod(mod(len(in2),divInt(int(31.0),int(0.0))),( i1 + int(8.0) )):{:\\nloopBreak% = 0\\nwhile int(7.0) \\le divInt(( ( int(83.0) - int(5.0) ) + len(in0) ),int(9.0)):{:\\nloopBreak% = 0\\nfor in2 in (in1 + s2)[abs(i0):]:{:\\nres0 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [7, 1, 2, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 0, 0, 1, 2, 2, 3, 1, 2, 1, 1, 0, 1, 0], [1, 1, 1, 0, 1, 0], [4, 3, 3, 2, 3, 3], [0, 0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 4, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 4, 4, 3, 1, 1, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 11, 11, 4, 0, 21, 6, 4, 2, 4, 7, 0, 1, 10, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in2),divInt(len(in0),int(71.0))),int(2.0)):{:\\nloopBreak% = 0\\nwhile i0 \\le i0:{:\\nloopBreak% = 0\\nfor in0 in (in1 + getCharFromString(s1.rstrip(s2), int(8.0)))[( divInt(abs(int(7.0)),( int(83.0) + int(54.0) )) + i1 ):]:{:\\nres0 = int(47.0) != i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 4], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [7, 1, 0, 8, 7, 1, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 2, 3, 3, 1, 0, 1, 1, 3, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 0, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [2, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 4, 4, 3, 1, 1, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 6, 6, 1, 0, 16, 4, 6, 1, 3, 8, 0, 1, 10, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(divInt(len(in2),divInt(len(in0),abs(int(71.0)))),i0):{:\\nloopBreak% = 0\\nwhile int(0.0) \\le int(8.0):{:\\nloopBreak% = 0\\nfor in0 in (in1 + s1)[len(s2.capitalize()):]:{:\\nres0 = ( len(s2) + int(7.0) ) \\le int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1], [1, 7, 8, 8], [2, 1, 1], [0], [3, 3, 2, 3, 2, 3, 2, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 2, 4], [2, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 3, 5, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( len(in2) * ( min(divInt(abs(i2),int(17.0)), i1) - int(88.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1], [2, 2, 2, 1, 0, 0, 0], [2, 1, 0], [0, 1, 2, 2], [0], [0, 0, 0], [], [], [3, 3], [4, 5, 5], [1, 1, 0], [0, 0, 0], [4], [0], [], [], [1], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [7, 1, 5, 8, 7, 2, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 1, 3, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 1, 0, 0, 1], [0, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 7, 7, 3, 4, 1, 3, 0, 0, 2, 2, 3, 2, 0, 1, 0, 0, 1, 11, 11, 2, 1, 16, 4, 4, 1, 3, 10, 0, 1, 10, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le mod(mod(len(in2),divInt(len(in0),int(71.0))),int(5.0)):{:\\nif i0 != int(8.0):{:\\nloopBreak% = 0\\nfor in0 in (in1 + s1)[int(7.0):]:{:\\nres0 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = ( int(23.0) + abs(int(54.0)) )\\n:}else:{:\\ns2 = getCharFromString(s2, int(47.0))\\nin0 = s2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 0, 8, 8], [0, 0, 1, 0, 2], [1], [3, 0, 0, 3, 2, 1, 3, 2, 0, 3, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 4, 0, 2, 2, 4, 0, 0], [0, 3, 2], [4], [2, 1, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s2[i0:]) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [8, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 2, 3], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 4, 1, 4, 0], [0, 2], [], [2], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 9, 2, 3, 0, 2, 2, 1, 0, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(8.0):]) \\le abs(divInt(mod(int(0.0),len((in2 + getCharFromString(\"\"F\"\", i0)))),int(6.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s2) != ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 2, 5, 8, 8, 3], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 1, 2, 3, 2, 2, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 2, 0, 17, 7, 2, 4, 3, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(in1, ( divInt(int(3.0),mod(len(in2),( ( divInt(int(2.0),int(5.0)) + int(8.0) ) * i0 ))) + ( int(8.0) * i0 ) ))) \\le int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0, 0], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 2, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [1, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0, 0], [1, 5, 5, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 8, 0, 32, 12, 5, 4, 8, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(len(s1),mod(divInt(len(in2),int(8.0)),i2)) + ( min(divInt(divInt(( int(13.0) + i2 ),int(8.0)),i1), mod(i0,int(7.0))) + ( divInt(int(1.0),int(8.0)) * min(i2, i1) ) ) ), int(16.0)) \\le divInt(i0,i0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [2, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1], [1, 1, 5, 8, 7], [2, 2, 1, 0, 2], [1], [3, 2, 2, 3, 1, 1, 3, 0, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [1, 0, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 1], [0, 1, 0, 0, 0], [1, 2, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s2\\ni2 += saveOrd(in1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 2], [4, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1], [6, 1, 5, 9, 5, 9, 1, 3, 9, 2, 9, 5, 9], [2, 1, 1, 1, 2, 0, 0, 0, 2, 2, 1], [1], [3, 2, 2, 0, 0, 2, 3, 1, 2, 1, 0, 2, 2, 2, 1, 1, 1, 0, 2, 3, 1, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 2, 2, 0, 0, 1], [0, 0, 0, 0, 0], [2, 5, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\ni2 += saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 0, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [1], [4, 4, 4], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [3, 1, 0, 8, 8, 1, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 3, 1, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 1, 0, 1, 1], [3, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 1, 0, 18, 5, 6, 1, 4, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in0) \\le mod(mod(len(in2),divInt(len(in0),int(31.0))),int(0.0)):{:\\nloopBreak% = 0\\nwhile abs(int(8.0)) \\le i0:{:\\nb1 = ( mod(len(in0[int(8.0):]),int(1.0)) + len(in1) ) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3, 2], [4, 4, 5], [0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0], [4], [3, 0, 2, 3, 1], [1, 0], [1], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [7, 1, 0, 8, 7, 5, 3, 5, 5, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 2, 0, 3, 3, 2, 1, 1, 0, 1, 1, 2, 2, 3, 1, 1, 3, 1, 3, 1], [1, 1, 1, 0, 1], [2, 3, 3, 2, 2, 3], [0, 0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [2, 3, 2], [4], [0, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 0, 0, 2, 3, 8, 3, 0, 5, 2, 1, 0, 10, 10, 3, 1, 18, 4, 5, 1, 3, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( abs(mod(i0,len(s2))) \\le len(in2) or mod(int(71.0),int(0.0)) \\le i0 ):{:\\nloopBreak% = 0\\nwhile res0:{:\\nloopBreak% = 0\\nfor in0 in in0:{:\\nb2 = not ( int(8.0) != int(7.0) and False )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = divInt(( abs(int(53.0)) + int(55.0) ),abs(int(4.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [0], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 1, 2, 3, 3, 2, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 1, 1, 2, 1], [1, 1, 0], [2, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 11, 4, 3, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( int(3.0) - mod(len(in2),len(in1)) ) + ( i0 - i0 ) )\\ni1 -= int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in0),divInt(len(in0),( min(i0, int(3.0)) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [2], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 2, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 4, 3, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 7, 2, 5, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s2) \\l ( divInt(saveOrd(in2),mod(( ( ( i2 + int(3.0) ) + int(7.0) ) + int(4.0) ),i0)) * ( int(8.0) * i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 7, 5, 8, 8, 3], [0, 0, 1, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [2, 5, 5, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 5, 0, 21, 6, 4, 2, 4, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(getCharFromString(s2, len(in2))) \\le ( len((in2 + (s2[divInt(min(divInt(divInt(i0,int(3.0)),int(7.0)), int(5.0)),i0):][( int(8.0) + i1 ):int(8.0)] + in1))[i0:]) + mod(i2,int(3.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [0, 1], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [8, 1, 5, 5, 7, 9, 8, 2, 4, 7, 9, 4, 2, 3, 4, 6, 5], [2, 0, 2, 2, 2, 2, 2, 1, 2, 2], [0], [3, 3, 2, 2, 2, 3, 1, 2, 0, 1, 3, 1, 3, 1, 0, 0, 0, 0, 2, 1, 0, 2, 3, 1, 2, 1, 2, 1, 1, 0, 0, 1, 3, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0], [0, 3, 0, 4, 4, 1, 1], [1, 1, 1, 1, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 17, 17, 10, 1, 35, 8, 7, 5, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = min(len(in1[( ( mod(min(int(81.0), mod(i2,int(5.0))),saveOrd(in2)) - int(5.0) ) - saveOrd((in0 + (s2[int(79.0):i0][i2:i2] + in1))[i2:( int(82.0) - i2 )]) ):( max(int(47.0), divInt(int(9.0),( int(4.0) - int(2.0) ))) * i2 )]), i1) \\l int(346.0)\\ni2 = max(int(5.0), i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [0, 0], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(max(divInt(len(in2),( ( i0 + int(3.0) ) + int(7.0) )), int(4.0)),i0) + divInt(int(8.0),i1) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 5, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( divInt(len(s2),divInt(len(in2),( ( i0 + int(3.0) ) + int(7.0) ))) + int(5.0) )) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 2, 4, 8, 7, 7], [2, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 0, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 14, 4, 4, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( min(divInt(len(in2),min(( i2 - int(3.0) ), int(2.0))), int(4.0)) + int(8.0) ) + int(7.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 2, 6, 8], [2, 0, 1], [], [3, 2, 1, 3, 2, 0, 1, 2, 3, 1, 1, 1, 3], [1, 1, 1, 0, 1], [4, 3, 3, 0], [0, 0], [1, 0, 0], [0, 5, 1, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le mod(int(3.0),len(in2))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [2, 4, 4, 8], [2, 1, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3, 0, 3, 1, 1], [0, 0, 1], [1, 3, 3, 0, 2, 4, 2, 1, 0], [0, 0], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 12, 2, 6, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(len(in0), ( len(in2) + ( min(abs(saveOrd(in0)), i2) + int(2.0) ) )) \\le i1\\ni1 = int(4.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [2, 1], [], [0, 0], [], [], [3], [4, 4], [2, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [2, 0, 2, 0, 2], [1], [3, 3, 2, 3, 2, 3, 3, 3, 3, 3, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [5, 4, 6, 8, 3, 5, 5], [2, 2, 1, 2, 0], [0], [3, 3, 3, 2, 3, 1, 1, 2, 0, 1, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0], [1, 1, 0], [3, 2, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 11, 2, 4, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(len(in0), mod(min(int(5.0), int(4.0)),mod(i2,int(6.0))))) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [1], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 4, 7, 8, 3, 5], [1, 2, 2, 2], [0], [3, 1, 2, 3, 3, 3, 1, 2, 0, 0, 0, 2, 3, 3, 0, 1], [0, 1, 1], [2, 1, 1, 0, 2, 3, 2], [0], [1, 1, 0], [4, 5, 3, 4, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 16, 3, 6, 1, 2, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = abs(int(44.0)) \\g ( max(max(min(int(7.0), mod(i1,i2)), i2), mod(abs(len(in1)),i2)) + int(8.0) )\\nin2 = in0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1], [5, 3, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [1, 0, 1], [], [0, 0], [], [], [3, 0], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 1, 1], [6, 5, 4, 8, 7, 7, 4, 6], [2, 0, 1, 0, 2], [0], [3, 2, 2, 3, 2, 3, 1, 3, 0, 3, 1, 1, 2, 2, 1, 1, 1, 0, 2, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0], [2, 0, 4, 4, 0], [0, 2, 0, 1, 0, 2, 0], [1, 1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 3, 1, 18, 5, 5, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(( ( min(mod(saveOrd(s2),int(6.0)), saveOrd(in2)) + i0 ) * min(int(54.0), int(8.0)) ))\\nres0 = ( mod(int(7.0),int(74.0)) + int(6.0) ) \\le i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [2, 3, 3, 0, 0, 1, 3], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 4, 0, 3, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(166.0)) \\l len(in0[len((in2 + in1)):])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [2], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 2, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 2, 3, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 3, 0], [2, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),int(3.0))) * ( min(int(2.0), int(6.0)) - int(8.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 1, 3, 8, 7], [2, 2, 1, 0, 2], [0], [3, 2, 2, 3, 2, 1, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\ni2 = saveOrd(in0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [0, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1], [1, 6, 6, 8, 2], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 2, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [4, 1, 3, 2], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 0, 0, 10, 2, 4, 1, 1, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s1[int(16.0):]) \\l max(len((in2 + in1)), ( int(6.0) + abs(divInt(int(8.0),int(2.0))) ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [2, 4, 4], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [7, 1, 2, 8, 7, 1, 3, 5, 4, 4, 1, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 2, 3, 1, 3, 0, 0, 1, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 1, 1, 0, 1], [2, 5, 3, 3, 1, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 4, 4, 3, 1, 1, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 3, 0, 19, 5, 6, 1, 4, 8, 0, 1, 10, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) == mod(mod(len(in2),mod(len(in0),int(71.0))),abs(i0)):{:\\nloopBreak% = 0\\nwhile i0 \\le int(2.0):{:\\nloopBreak% = 0\\nfor in0 in (s1 + s1)[( divInt(len(getCharFromString(s2, int(8.0))),int(7.0)) + len(s2) ):]:{:\\nres0 = int(13.0) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 1, 2], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1, 0, 1], [8, 0, 6, 8, 5, 6], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 2, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 0, 3], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 4, 1, 4, 0], [0, 2], [], [2], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 1, 0, 12, 3, 3, 0, 3, 2, 1, 0, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(8.0):]) \\le min(divInt(mod(divInt(len((in2 + getCharFromString(\"\"F\"\", i0))),int(0.0)),int(6.0)),int(8.0)), int(56.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [1, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 4, 8, 8, 5, 5, 3, 1, 9, 8, 4, 4, 4, 0, 8, 0], [1, 0, 1, 2, 2, 1, 1, 1], [0], [3, 3, 2, 3, 2, 3, 2, 0, 1, 0, 0, 1, 3, 3, 1, 0, 1, 0, 0, 1, 0, 1, 3, 1, 0, 1, 3, 0, 2, 2, 0, 2, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1, 1, 1, 0], [2, 0, 3, 0, 1, 3, 3, 1, 4], [1, 0, 2, 2], [0, 1, 0, 0, 1, 1], [4, 5, 5, 2, 1, 5, 4], [], [], [0, 0, 2, 4, 3, 0, 3, 0, 1, 0, 1, 0, 0], [0, 3, 2], [4], [0, 0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 1, 12, 3, 4, 0, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = abs(min(divInt(len(in1),mod(min(divInt(i0,int(3.0)), i1),i2)), int(48.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1, 0, 1, 0, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1, 1, 1], [9, 0, 6, 8, 9, 2], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [0, 5, 4, 1], [1], [], [2, 4, 3, 0, 0, 1, 3, 0, 2, 2, 0], [0], [], [2, 0, 0], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 1, 0, 12, 2, 3, 0, 2, 4, 1, 0, 11, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString((s0 + in2), int(9.0))[len(\"\"F\"\"):]) \\le divInt(mod(int(0.0),len((in1 + s1[i0:int(6.0)][int(8.0):int(9.0)]))),int(2.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1, 2, 2, 1, 1, 2, 1], [2, 2, 0], [0, 1, 0, 1, 2], [0], [0, 0], [], [], [3, 3], [4, 4, 2, 1], [1, 1, 0, 1, 0, 1], [0, 0, 0, 0], [], [3, 1], [0], [1], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 6, 7, 8, 3, 5, 5, 1, 4, 0, 4, 3, 3, 3, 4, 1, 3, 3, 2], [2, 1, 1, 0, 2, 2, 1, 2, 0, 2, 1, 0, 2, 2, 2], [1, 0], [3, 0, 2, 3, 2, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 2, 2, 0, 0, 0, 1, 1, 2, 1, 0, 1, 3, 3, 2, 1, 1, 0, 0, 0, 0, 1, 3, 2, 1, 2, 1, 3, 0, 0, 1, 0, 0, 3, 1, 3, 2, 1, 3], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3, 2, 1, 1, 2, 4], [0, 0, 2, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1], [2, 5, 3, 4, 4, 0, 5, 2, 0, 3, 4], [1], [], [0, 4, 0, 2, 3, 0, 3, 0, 2, 0, 0, 3, 0, 1, 0, 0], [0, 3, 2], [4], [2, 0, 2], [3], [], [], [], [26]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1], [3, 3, 8, 8, 7, 7], [0, 1, 1, 0, 2], [1], [3, 2, 2, 2, 2, 3, 3, 2, 0, 2, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 1, 15, 6, 3, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le mod(( mod(( len(in2) - len(in0) ),divInt(i0,mod(int(3.0),int(3.0)))) + int(8.0) ),int(8.0))\\ni1 += int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [2], [2, 1], [], [0, 0], [], [], [1, 1], [0, 1], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [4, 8, 3, 8, 7, 3, 1, 3, 6, 7], [2, 1, 1, 2, 1, 2], [0], [3, 3, 2, 2, 2, 3, 1, 1, 0, 1, 3, 1, 3, 1, 0, 0, 2, 2, 2, 1, 0], [1, 0, 0, 1, 0], [3, 3, 0, 3, 2, 1], [0, 1], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\ni2 = len(in0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1, 0, 1], [1], [1, 2, 1], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [4], [], [], [], [1], [1, 1, 1, 1], [6, 5, 6, 8], [1, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 1, 3, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 1, 3, 1, 4], [0, 1, 1], [0, 1, 0], [3, 4, 5, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(in0[int(6.0):])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [5, 1, 2, 8, 3, 5, 5], [2, 2, 1, 2, 0], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1], [2, 1, 3, 0, 3, 3, 1, 0, 1], [0], [1, 1, 0], [3, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 11, 2, 5, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in0),min(len(in1), int(51.0))), mod(i2,int(2.0)))) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [1, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 0, 1], [3, 1, 6, 8, 0, 1], [2, 0, 1], [0, 0], [3, 2, 2, 3, 2, 2, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1, 1], [4, 2, 3, 0], [0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 3, 2, 11, 4, 2, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = saveOrd(s0)\\ni0 = ( divInt(abs(mod(divInt(int(31.0),int(6.0)),i1)),int(8.0)) + int(01.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1, 2, 2, 1, 1, 2, 1], [2, 2, 0], [0, 1, 0, 1, 2], [], [0, 0], [], [], [3, 3], [4, 4, 2, 1], [1, 1], [0, 0, 0, 0], [], [3, 1], [0], [1], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 2, 7, 8, 3, 5, 5, 1, 4, 0, 4, 3, 3, 3, 4, 1, 3, 3, 2], [2, 2, 1, 0, 2, 2, 1, 2, 0, 2, 1, 0, 2, 2, 2], [1, 0], [3, 2, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 3, 3, 2, 1, 1, 0, 0, 0, 0, 1, 3, 2, 1, 2, 1, 3, 0, 0, 1, 0, 0, 3, 1, 3, 2, 1, 3], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3, 2, 1, 1, 2, 4], [2, 0, 0, 2, 1, 2, 0], [0, 1, 1, 0, 0, 1, 1, 1], [4, 5, 3, 4, 4, 0, 5, 2, 0, 3, 4], [1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [3], [], [], [], [26]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 8, 3, 3, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le ( divInt(len(in2),i2) * mod(len(in0),int(1.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [5, 2, 6, 8, 3, 5, 5], [2, 2, 1, 2, 0], [0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 1, 0, 0, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0], [0, 0, 0], [4, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i2, divInt(i2,int(52.0))), i1)), i2)) \\l len(in1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 0, 3, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 4, 3, 0, 0], [2, 1, 1, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(saveOrd(in2),mod(i0,len(in0))) * ( i0 - int(3.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [3, 1, 5, 8, 8, 6, 6, 1, 7, 2, 7, 4, 6, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 3, 1, 2, 1, 1, 0, 1, 1, 1, 0, 2, 0, 1, 2, 3, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 3, 3, 0, 1], [0, 1, 0, 2, 1, 2, 0], [0, 1, 0], [0, 1, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 4, 0, 26, 7, 6, 4, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = max(( divInt(len(s0),mod(len(getCharFromString(s1, len((in0 + (s2[( min(int(3.0), ( int(1.0) + int(5.0) )) - i0 ):][:int(8.0)] + in1))[int(8.0):]))),int(66.0))) + i0 ), divInt(i1,int(17.0))) \\le ( max(int(27.0), i0) * int(461.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1], [4, 0, 3, 0], [0], [0, 1, 0], [0, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 3, 3, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(min(mod(len(in2),int(3.0)), int(1.0)),i2) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 6, 7, 8, 3, 5], [1, 0, 2], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3], [0, 0, 1], [2, 1, 3, 0, 4, 3], [0, 2], [1, 1, 0], [4, 5, 4, 3, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 11, 2, 5, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(saveOrd(in2), int(46.0)) ), ( i1 * i0 ))) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 2, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [2, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 2, 1, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 2, 2], [1, 1, 1], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= saveOrd(s0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 3, 2, 3, 1, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 1, 3, 8, 7], [2, 2, 1, 0, 2], [1], [3, 2, 1, 3, 2, 2, 3, 0, 1, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le divInt(int(8.0),len(in2))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 1, 1, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 4, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(int(3.0),int(7.0))) + ( i0 + int(4.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [1, 0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 1, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 4, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(in0[int(10.0):])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 2, 4, 8, 7, 7], [2, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [1, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 2, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 14, 4, 3, 3, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( ( len(s2[divInt(len(in2),i2):( i0 - int(3.0) )]) + int(2.0) ) + int(4.0) ), int(8.0)) \\le int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [5, 2, 6, 8, 3, 5, 5], [2, 2, 1, 2, 0], [0], [3, 3, 2, 1, 3, 3, 1, 2, 0, 1, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1], [2, 1, 3, 0, 0, 1, 1, 0, 1], [0], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 11, 2, 4, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(int(52.0),len(in1)), min(int(6.0), mod(i2,int(8.0))))) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [1], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [0, 1, 1, 1, 1, 1], [9, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [3, 5, 3, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(in0[int(90.0):]) \\le len((in2 + in0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [8, 1, 3, 8, 7, 2, 6, 2, 7, 8], [0, 2, 1, 0, 2, 0, 2, 2, 0, 0, 1], [0], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 0, 1, 0, 2, 1, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0], [4, 3, 1, 0, 0], [0, 1, 0, 1], [0, 1, 0, 0, 0, 1], [2, 5, 3, 2, 4, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 0], [0, 3, 2], [4], [0, 2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 6, 3, 2, 4, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(divInt(max(int(8.0), i0),int(1.0)),int(3.0))) + i2 )\\nloopBreak% = 0\\nwhile ( divInt(int(8.0),i1) - int(7.0) ) \\le i0:{:\\nin0 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 0, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0], [2, 2, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 3, 3, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(s2),divInt(len(in0),i0)) + i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 2, 2, 1, 0, 0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [8, 8, 7, 8, 3, 5], [1, 1, 1, 2], [0], [3, 2, 0, 2, 3, 3, 1, 1, 0, 0, 2, 1, 3, 3, 0], [0, 1, 1], [2, 1, 4, 0, 1, 3], [0], [1, 0, 0], [4, 2, 3, 4, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 9, 2, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( i1 + mod(max(saveOrd(in1), int(88.0)),int(7.0)) )) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [3, 4, 6, 8, 3, 5], [0, 1, 1], [0], [3, 3, 2, 0, 3, 3, 1, 2, 0, 1, 0, 1, 3, 3], [0, 0, 1], [2, 1, 3, 0, 0, 3], [0, 2], [1, 1, 0], [4, 5, 5, 1, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 11, 2, 4, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( i0 + len(in1) ), min(int(34.0), ( i1 * int(6.0) )))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 7, 3, 8, 7], [2, 2, 1, 0, 2], [0], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 0, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1], [4, 3, 2, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 3, 5, 8, 8, 2, 1, 5, 4, 0, 8, 5, 4, 1, 5, 4], [0, 0, 1, 0, 2, 0], [1], [3, 2, 3, 3, 2, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 3, 1, 1, 2, 3, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0, 2], [0, 2, 0, 2, 1, 2, 0, 0], [0, 1, 0], [2, 5, 2, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 16, 16, 6, 1, 31, 9, 6, 8, 2, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(s2, ( len(in2) + len((s2 + (s2[:( divInt(min(( i0 * int(3.0) ), int(3.0)),int(5.0)) + i0 )][( int(8.0) * i1 ):int(8.0)] + in1))[i0:]) ))) \\le mod(i2,int(2.0))\\ni0 -= ( ( int(154.0) * min(int(085.0), int(4.0)) ) + ( abs(int(15.0)) + int(4.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 6, 7, 8, 3, 5], [1, 0, 2], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3], [0, 0, 1], [2, 1, 3, 0, 0, 3], [0, 1], [1, 1, 0], [4, 4, 4, 3, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(int(46.0), ( i1 - i0 )), i2) ), int(7.0))) \\l len(in1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [2, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [2, 0], [], [0, 0], [], [], [3], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1], [9, 9, 6, 8], [2, 0, 1], [1], [3, 2, 2, 3, 2, 1, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1], [4, 3, 4, 0], [0, 1], [0, 1, 0], [0, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 8, 3, 2, 1, 2, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\nres0 = saveOrd(s2) == ( divInt(len(s2),mod(int(9.0),int(9.0))) + int(68.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [5, 2, 7, 8, 3, 5, 5], [2, 2, 1, 2, 0], [0], [3, 3, 2, 3, 3, 3, 2, 1, 0, 3, 0, 3, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1], [2, 1, 3, 2, 0, 3, 1, 0, 1, 3], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 18, 2, 10, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),abs(min(mod(int(52.0),i2), len(in2)))), i2)) \\l max(min(max(len(in0), int(7.0)), i1), i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 1, 8, 8, 7], [2, 2, 1, 0, 2], [1], [3, 2, 2, 3, 2, 0, 3, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 1, 11, 3, 3, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(max(mod(i2,len(in2)), int(8.0)),int(1.0)) + int(8.0) )\\ni2 += int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 3], [4, 4], [0, 1], [0, 0], [], [0], [], [], [], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 1, 5, 4, 5, 9, 1, 3, 9, 2, 9, 5, 9], [2, 1, 1, 0, 2, 0, 1, 0, 2, 2, 1], [1], [3, 2, 2, 2, 1, 2, 3, 1, 2, 0, 2, 2, 2, 2, 1, 2, 1, 0, 2, 3, 1, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3], [0, 0, 0, 2, 2, 0, 0, 0, 1], [0, 1, 0, 0, 0], [2, 5, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 3, 3, 8, 7, 4, 7, 8, 3], [2, 2, 1, 0, 2], [1], [3, 2, 2, 3, 2, 2, 3, 3, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 1], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 4, 0, 24, 9, 4, 2, 7, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(max(mod(divInt(len(in2),min(i2, int(8.0))),int(3.0)), ( divInt(divInt(int(3.0),i2),int(8.0)) + i1 )),divInt(i0,int(7.0))) + divInt(int(4.0),int(783.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [8, 1, 5, 8, 7, 6, 6, 8, 6, 0, 1, 1, 0, 9, 4, 6, 0], [2, 0, 1, 0, 0, 1, 1, 1, 1], [1], [3, 2, 2, 2, 2, 2, 3, 1, 0, 3, 1, 2, 2, 2, 1, 0, 1, 0, 0, 0, 3, 2, 3, 0, 3, 1, 0, 3, 1, 0, 1, 1, 2, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [0, 3, 3, 0, 0, 4, 1], [0, 0, 0, 1, 1, 2, 0], [0, 1, 0, 0, 0], [1, 5, 3, 4, 4, 5], [], [], [0, 4, 0, 0, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 9, 1, 30, 9, 7, 5, 5, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( ( divInt(mod(( len(s1) + int(8.0) ),i2),len(getCharFromString(in2, int(1.0)))) + divInt(divInt(( int(5.0) + i0 ),int(8.0)),i1) ) - i0 ), i0) \\l min(divInt(min(i1, saveOrd(in0)),int(7.0)), i1)\\ni1 -= max(int(6.0), i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 0, 2, 2, 0], [2, 0, 1], [0, 2, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 2, 1], [0, 0, 0], [4], [], [], [], [0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 0, 8, 1, 8, 0, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [1], [3, 0, 2, 3, 2, 3, 1, 1, 0, 1, 1, 3, 2, 3, 1, 0, 3, 1, 0, 0], [1, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 5, 3, 0, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 1, 0, 8, 2, 3, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le i0:{:\\nres0 = mod(len(in2),mod(len(in0),int(3.0))) \\le int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 8, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 3, 2, 3, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s0) \\g len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [0, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [0, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 \\l int(10.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [2], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [1, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(3.0) \\le ( divInt(saveOrd(s0),mod(len(in2),len(in0))) + ( i2 - int(7.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 2, 6, 8, 3, 5, 5], [2, 2, 1, 2, 0], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 1, 0, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 13, 2, 5, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(min(int(22.0), mod(i2,int(6.0))), i2)), int(8.0))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1], [3, 3, 8, 8, 7, 7], [0, 1, 1, 0, 2], [1], [3, 2, 2, 2, 2, 1, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 1, 13, 5, 2, 4, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s2) \\le ( ( mod(( int(3.0) - len(in2) ),mod(i0,int(3.0))) + int(8.0) ) + int(8.0) )\\ni1 -= int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 1, 3], [0, 1, 1, 0], [4, 1, 4, 0], [0, 0], [0, 1, 0], [0, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 4, 3, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(max(mod(saveOrd(in2),int(3.0)), ( i2 + int(1.0) )),int(6.0)) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [2], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 1, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 2, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s0) \\le ( divInt(len(s2),mod(len(in0),max(( i2 + int(3.0) ), int(7.0)))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [2], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 6, 7, 8, 3, 5], [1, 0, 2, 1], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3, 3, 2, 1, 0], [0, 1, 1], [2, 1, 3, 0, 0, 1, 2, 3], [0], [1, 1, 0, 0, 1], [4, 5, 4, 3, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = abs(max(( len(in1) + min(min(int(46.0), mod(i1,i0)), i2) ), int(7.0))) \\l max(abs(len(in2)), mod(int(8.0),i1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 0, 8, 7, 2, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 0, 2, 3, 3, 1, 0, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 0, 0, 4], [0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 0, 3, 3, 3, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 4, 6, 1, 3, 11, 0, 2, 11, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in2),divInt(len(in0),int(0.0))),int(1.0)):{:\\nloopBreak% = 0\\nfor in0 in (in1 + s1)[i0:]:{:\\nloopBreak% = 0\\nfor s0 in getCharFromString(in0, int(0.0)):{:\\nres0 = i2 \\l ( min(min(int(8.0), i1), saveOrd(in0)) + int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [0, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 2, 3, 0, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [4, 4, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(in0[int(16.0):]) \\l saveOrd((in2 + in1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 1, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s2) \\le ( divInt(int(3.0),divInt(len(in2),( ( i0 + int(7.0) ) + int(4.0) ))) * int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 4, 0], [0, 0], [1, 1, 0], [0, 2, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 8, 3, 3, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(len(s2),mod(saveOrd(in2),int(3.0))) + int(1.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 0, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 0, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 2, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 4, 0], [0, 0], [0, 1, 0], [0, 5, 1, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 8, 3, 3, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(saveOrd(s1),int(3.0))) + int(1.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 6, 8], [0, 1, 1, 2], [0], [0, 3, 2, 3, 2, 3, 0, 3, 0, 1, 0, 1, 0], [0, 0, 1], [2, 3, 3, 0, 0, 1, 3], [0, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 11, 2, 4, 2, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\l abs(( len(s0) + ( len(in2[i1:min(i1, int(24.0))]) - i2 ) ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1], [3, 9, 2, 8, 7, 9, 4, 8, 0, 1, 7, 6, 8, 1, 2], [1, 0, 1, 0, 2, 1, 0, 2], [1], [3, 2, 2, 3, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 0, 2, 0, 1, 0, 0, 2, 3, 1, 0, 0, 3, 1, 2, 1, 3, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [4, 4, 4, 0, 0], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 0], [2, 5, 2, 2, 4, 5], [], [], [4, 4, 0, 2, 3, 0, 2, 2, 2, 2, 0, 0, 0], [0, 3, 2], [4], [1, 2, 0, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 15, 15, 8, 0, 35, 11, 5, 7, 4, 5, 0, 0, 13, 2, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(s2.rstrip((in2 + s2[( ( saveOrd(s2) + ( int(3.0) + ( mod(int(9.0),int(2.0)) + int(8.0) ) ) ) + int(7.0) ):][:( ( ( int(94.0) + int(8.0) ) * i1 ) + mod(i0,int(0.0)) )][i1:i0][divInt(saveOrd(in1),int(1.0)):])[:i2]), i1)) \\le min(int(768.0), divInt(int(12.0),min(i0, i2)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [1, 2, 2, 0], [2, 1], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1, 0], [0, 0], [], [1], [], [0], [0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 6, 5, 9, 5, 9, 1, 3, 9, 2, 9, 5, 9], [2, 1, 1, 0, 2, 0, 0, 0, 2, 2, 1, 0], [1], [3, 2, 2, 3, 0, 2, 2, 1, 2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 3, 1, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [1, 3, 3, 0, 0, 3], [0, 0, 0, 2, 2, 1, 0, 0, 1], [0, 0, 0, 0, 0], [2, 5, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 0, 1, 1, 11, 11, 12, 1, 35, 12, 5, 9, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( ( len(s2) + i2 ) + divInt(( int(6.0) + ( i1 * divInt(divInt(( divInt(int(6.0),i1) * int(59.0) ),i0),( len(in2) - int(5.0) )) ) ),i2) ), i0) \\le i0\\nloopBreak% = 0\\nwhile min(i0, min(( int(9.0) + int(1392.0) ), i2)) \\le ( i2 + i1 ):{:\\nif True:{:\\ni0 -= int(9.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 4, 8, 8, 3, 5], [2, 0, 2, 0], [0], [3, 3, 2, 2, 3, 0, 1, 2, 0, 0, 0, 1, 3, 3], [0, 0, 1], [2, 1, 3, 0, 2, 3], [1, 1], [1, 1, 0], [4, 0, 3, 4, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 11, 3, 3, 2, 1, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( ( len(in1) - i2 ) - int(44.0) ), mod(i0,i2))) \\l i0\\ns0 = in0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [1, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [0, 1, 1, 1], [8, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 1], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 4, 1, 4, 0], [0, 2], [], [2], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(in0[int(80.0):])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 1, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(int(3.0),divInt(len(s0),( ( i0 + int(7.0) ) + int(4.0) ))) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2, 0], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 2, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1, 3, 2, 0, 0, 3, 1, 3], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 0, 0, 0, 0, 0, 4], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 6, 0, 28, 8, 8, 6, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(min(min(( i2 + ( int(3.0) + int(7.0) ) ), min(i0, int(4.0))), int(8.0)),( i2 + ( i0 * int(7.0) ) ))) * min(( i2 * i0 ), min(int(71.0), saveOrd(in0))) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 1, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 0, 2, 2, 3, 1, 1, 1, 1, 0, 1], [1, 1, 0, 0, 1], [4, 2, 3, 2, 2, 3], [0, 1], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 3, 3, 4], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 2, 0, 18, 5, 4, 2, 3, 9, 0, 2, 9, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(abs(( len(in2) + int(31.0) )),int(1.0)),i0):{:\\nloopBreak% = 0\\nfor in0 in in0:{:\\nloopBreak% = 0\\nfor in1 in (s1 + s2)[int(8.0):]:{:\\nres0 = i2 \\le ( divInt(abs(int(7.0)),int(83.0)) - int(5.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = getCharFromString(in0, int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [0, 1, 1, 1], [8, 8, 6, 8], [2, 2, 1], [0, 1], [3, 1, 3, 3, 2, 3, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 0, 0], [0], [0, 1, 0], [3, 5, 0, 1], [1], [], [2, 0, 4, 0, 0, 1], [0], [], [2], [0], [25], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 3, 0, 0, 3, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(88.0):]) \\le len(getCharFromString(in2, len(s0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [2, 0, 4, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 3, 0, 0, 3, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(10.0):]) \\l len(getCharFromString(in2, len(in1)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 1, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(s1),divInt(len(in0),( i0 + i0 ))) + int(3.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 7, 5, 4, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 2, 2, 1, 1, 1, 3, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 5, 4, 3, 2, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(getCharFromString(in2, i0)),len((in0 + (s2[divInt(( int(8.0) + int(7.0) ),int(5.0)):][min(i0, ( int(4.0) + i1 )):] + in1))[int(8.0):])) + i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 9, 5, 8, 8, 2], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 1, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 4, 1, 17, 5, 3, 4, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( divInt(max(int(3.0), mod(len(in2),( i0 + int(9.0) ))),int(5.0)) + int(8.0) ):{:\\nres0 = i0 \\le ( int(8.0) + i1 )\\ni0 *= int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8], [1, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 1, 2, 3], [0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 3, 3, 3], [1], [0, 0], [0, 2, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 3, 0, 20, 5, 5, 1, 4, 10, 0, 2, 11, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in2[divInt(len((in0 + in0)[int(31.0):]),int(0.0)):]),i1),int(8.0)):{:\\nloopBreak% = 0\\nfor in1 in getCharFromString(s1, i2):{:\\nloopBreak% = 0\\nfor s2 in in0:{:\\nres0 = ( divInt(max(int(7.0), int(8.0)),abs(int(3.0))) + i1 ) \\l int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 0, 2, 1, 0], [2, 0, 0], [2, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [2, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 5, 1, 3, 4, 1, 2, 3, 5, 4], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s2.startswith(in2):{:\\ns1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [7, 1, 3, 8, 7], [0, 2, 1, 0, 2], [0], [2, 2, 2, 3, 0, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [1, 0, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 11, 4, 2, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = divInt(( mod(saveOrd(s2),i0) + divInt(len(in2),int(7.0)) ),i2) \\le int(1.0)\\ni1 = int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [7, 1, 0, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8, 7, 3, 4, 0, 7, 8], [0, 0, 2, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 2, 3, 1, 1, 3, 1, 0, 1, 1, 1], [1, 1, 1, 0, 0], [4, 3, 0, 2, 3, 3], [0, 0], [1, 1, 0, 0, 1], [2, 3, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [4, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 19, 19, 3, 1, 22, 5, 5, 2, 3, 7, 0, 1, 10, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(getCharFromString(s2, mod(mod(len(in0),divInt(min(int(71.0), int(0.0)),i0)),int(8.0)))) \\le int(7.0):{:\\nloopBreak% = 0\\nwhile ( ( abs(int(83.0)) + int(54.0) ) + len((in0 + in0)[int(47.0):]) ) \\le i0:{:\\nloopBreak% = 0\\nfor in1 in s1.rstrip(s2):{:\\nres0 = int(0.0) != int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(734078.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 1, 2, 2, 1, 1, 2, 1], [2, 2, 2], [0, 2], [], [0, 0], [], [], [3], [4, 4, 4], [1, 1, 0, 0, 1, 2], [0, 0, 0], [4], [1, 3], [0], [1], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4, 8, 1, 9], [2, 2, 1, 0, 2, 1, 0, 2, 1, 2, 0], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0, 0, 2, 3, 3, 1, 1, 3, 1, 0, 3, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [4, 3, 3, 0, 0, 2, 0, 3, 2], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [2, 5, 3, 4, 4, 0, 5, 2, 0, 3, 4], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 0, 0, 0, 0, 1, 3, 6, 3, 1, 2, 1, 1, 0, 15, 15, 11, 0, 43, 12, 9, 5, 7, 9, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( ( len(in2) + divInt(mod(len(in0),int(8.0)),i2) ) + int(13.0) ):{:\\nres0 = min(( divInt(divInt(int(8.0),i2),int(7.0)) + i1 ), ( i0 * int(1.0) )) \\le divInt(( int(8.0) - int(16.0) ),min(i2, i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nwhile ( int(5.0) \\le mod(i0,i2) and (in1 + in1)[i1:divInt(abs(min(int(74.0), int(81.0))),len(getCharFromString(s0[int(9.0):i2], abs(i0))))].startswith(in2) ):{:\\ns2 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [2, 1], [0, 0], [1], [], [], [], [], [0, 1, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 0, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 0, 0, 0, 4], [0, 3, 2], [], [2], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0[saveOrd(in2):] not in in1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 344}, {"genotype": [[0], [1, 1, 0, 1, 1], [0, 2, 1], [2], [0, 1], [], [0, 0], [], [], [3], [2, 4], [1, 2], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [8, 1, 3, 8, 7, 2, 6, 8, 7, 8], [0, 2, 1, 0, 2, 0, 2, 0, 0, 2, 1], [0], [0, 2, 2, 3, 2, 2, 3, 1, 0, 0, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 0, 2, 0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0], [4, 3, 1, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1], [2, 5, 3, 2, 4, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 0], [0, 3, 2], [4], [0, 2, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 10, 4, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 == ( ( saveOrd(s2) + divInt(mod(len(in2),int(8.0)),i2) ) + i1 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [8, 1, 3, 8, 7, 1], [2, 2, 1, 0, 2], [0], [2, 2, 2, 3, 2, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 5, 1, 21, 9, 2, 3, 6, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( divInt(mod(saveOrd(s2),divInt(( len(in2) + int(8.0) ),i2)),int(1.0)) + int(3.0) ) \\le divInt(divInt(divInt(int(8.0),i2),int(7.0)),i1)\\ni0 = ( i2 + int(1.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [1, 0, 1, 0, 2], [1], [3, 0, 2, 2, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 0, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 4, 0, 0], [0, 3, 2], [4], [1, 2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 17, 5, 3, 2, 3, 5, 0, 0, 12, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s2[:i1]) \\le divInt(mod(divInt(len(in2),len((in0 + (getCharFromString(s2, ( i0 * int(3.0) ))[int(3.0):][int(5.0):] + in1))[i1:])),( i0 + i2 )),int(8.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 0, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 2, 2, 0, 2, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [5, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2) \\le ( int(3.0) + len(in2) )\\n", "test_case_results": [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 315}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 1, 5, 9, 5, 9, 1, 3, 9, 2, 9, 5, 9], [2, 1, 0, 0, 2, 0, 0, 0, 2, 2, 1], [1], [3, 2, 2, 3, 0, 2, 3, 1, 2, 0, 2, 1, 2, 2, 2, 0, 1, 0, 2, 3, 1, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [4, 1, 3, 0, 0, 3], [0, 0, 0, 2, 2, 2, 0, 0, 1], [0, 0, 0, 0, 0], [2, 5, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 13, 13, 10, 1, 31, 10, 6, 6, 5, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( max(i2, divInt(len(in2),int(61.0))) + ( i1 + divInt(int(595.0),divInt(divInt(( i0 + int(9.0) ),i0),divInt(min(int(1392.0), i2),i0))) ) ) * i0 )\\nloopBreak% = 0\\nwhile min(i0, len(in0)) \\le ( int(9.0) * int(59.0) ):{:\\ni2 *= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1], [3, 2, 4, 8, 7, 7], [2, 0, 1, 0, 2], [1], [3, 1, 1, 3, 2, 3, 3, 2, 0, 1, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + min(i0, divInt(int(4.0),i1)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [2, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [2, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [2, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 1, 4, 0], [0, 2], [], [1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2[:int(2.0)]) == len((in2 + in1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 332}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 2, 2, 3, 0, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 0, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) == ( divInt(len(in2),divInt(divInt(len(s0),i2),i2)) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 324}, {"genotype": [[0], [1, 1], [0, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [9, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [3, 5, 5, 1], [1], [], [0, 0, 3, 0, 0, 1, 0], [0], [4], [1], [0], [5], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le int(9.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 1], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [5, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [3, 0, 0, 8, 5, 8, 3, 5, 9, 0, 7, 0, 8], [1, 0, 1, 1, 0], [1], [3, 3, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 2, 2, 1, 1, 3, 1, 0, 0, 2, 3, 0, 0], [1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 2, 2, 3], [0, 1, 0], [1, 1, 0, 0, 1], [1, 5, 3, 5, 4, 2, 2, 1, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 32, "mapping_values": [1, 5, 5, 3, 2, 1, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 10, 10, 4, 1, 20, 5, 5, 2, 4, 6, 0, 1, 7, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) != len(in2):{:\\nloopBreak% = 0\\nwhile mod(len(in0),mod(abs(int(30.0)),int(0.0))) \\le i1:{:\\nloopBreak% = 0\\nfor in2 in (in1 + s2)[int(8.0):]:{:\\nres0 = int(5.0) != divInt(( divInt(int(83.0),int(59.0)) + abs(int(0.0)) ),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 313}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 3, 4, 1], [1], [], [2, 0, 0, 2, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(3.0):]) \\l len(in0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 346}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 8, 8, 8], [1, 0, 1, 0, 2], [1], [3, 2, 2, 3, 0, 2, 3, 2, 0, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\l ( divInt(len(in2),i1) + divInt(len(in0),( i0 + i1 )) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 555}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [0, 0], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 5, 1], [1], [], [3, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd((in0 + (in2 + in2))) \\l int(10.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) * int(4.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 443}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 1, 3, 8, 7], [2, 2, 1, 0, 2], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [0, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 1, 11, 4, 3, 1, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le divInt(mod(len(in1),divInt(divInt(len(in0),int(8.0)),i2)),int(1.0))\\ni2 += int(3.0)\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 334}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 2, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in1),( ( i0 + divInt(int(3.0),int(7.0)) ) + i0 ))) + ( int(5.0) * i1 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 332}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [2, 3, 0, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd((in0 + in2)[int(3.0):]) \\l len(in1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 335}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le ( divInt(len(in2),mod(len(in0),int(2.0))) + ( i0 + int(7.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 331}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in1),divInt(( i0 + int(3.0) ),int(7.0)))) + int(5.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 333}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 1], [], [0, 0], [], [], [3], [4, 4], [0, 1], [0, 0], [], [2], [], [], [], [0, 1, 1, 1], [4, 4, 8, 8], [2, 1, 1], [0], [3, 3, 0, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 1, 3, 0, 2, 4], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 2, 0, 10, 1, 6, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not abs(max(i2, len(in0))) \\le ( min(abs(saveOrd(in2)), i1) + int(44.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], "other_info": {}, "test_fitness": 369}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 3, 1, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) == len(in1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 321}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 2, 1, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [5, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 8, 3, 3, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2) \\le ( divInt(len(in2),mod(int(8.0),len(in0))) + int(13.0) )\\n", "test_case_results": [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 313}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [3, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 3, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( len(in2) + len(in0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 566}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [2, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 0, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 0], [2, 3, 3, 2, 2, 3], [0, 1, 1, 2], [1, 1, 0, 0, 1], [3, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 33, "mapping_values": [1, 7, 7, 3, 4, 2, 2, 0, 0, 2, 3, 3, 3, 0, 0, 0, 0, 0, 9, 9, 3, 0, 21, 5, 6, 4, 1, 12, 0, 2, 11, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(( mod(len(in0),( len(in2) + int(3.0) )) - int(0.0) )) \\le i0:{:\\nloopBreak% = 0\\nfor in0 in in0:{:\\nloopBreak% = 0\\nfor in1 in (s1 + s2)[int(0.0):]:{:\\nres0 = abs(( ( abs(int(8.0)) - int(7.0) ) * len(getCharFromString(in0, int(83.0))) )) \\l i2\\nin0 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = in2\\nres0 = int(34.0) != i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 350}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 2, 2, 3, 1, 1, 2, 0, 2, 3, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),i0) + len(in0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 566}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 8, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),i1) + len(in0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 566}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 3, 8, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 0, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),i0) + mod(len(in0),( i0 + int(0.0) )) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 566}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [2, 1, 1, 0, 2, 0, 0, 0, 2, 2, 1], [0, 1], [3, 2, 2, 3, 0, 3, 2, 0, 0, 3, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),i2) + len(in0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 566}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 3, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 3, 5, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) == ( ( len(in2) + divInt(len(in0),min(min(i2, int(3.0)), int(7.0))) ) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 332}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1], [1, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 34, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(106.0):]) \\l len((in2 + in1))\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 525}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [8, 0, 6, 8], [1, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 34, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(80.0):]) \\l len((in2 + in1))\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 525}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1], [2, 6, 8, 8], [2, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 2, 4], [2, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 34, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 10, 2, 6, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\le ( len(in2) * ( min(abs(saveOrd(in0)), i2) - int(2.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1, 2, 2, 1, 1, 2, 1], [2, 2, 0], [0, 1, 0, 1, 2], [], [0, 0], [], [], [3, 3], [4, 4, 2, 1], [0, 1, 2], [0, 0, 0, 0], [2], [3, 1], [0], [1], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 2, 7, 8, 3, 5, 5, 1, 4, 0, 4, 3, 3, 3, 4, 1, 3, 3, 2], [2, 2, 1, 0, 2, 2, 1, 2, 0, 2, 1, 0, 2, 2, 2], [0], [0, 2, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 3, 3, 2, 1, 1, 0, 0, 0, 0, 1, 3, 2, 1, 2, 1, 3, 0, 0, 1, 0, 0, 3, 1, 3, 2, 1, 3], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3, 2, 1, 1, 2, 4], [2, 0, 0, 2, 1, 2, 0], [0, 1, 1, 0, 0, 1, 1, 1], [2, 5, 3, 4, 4, 0, 5, 2, 0, 3, 4], [1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [3], [], [], [], [26]], "fitness": 35, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 3, 3, 4, 0, 12, 3, 2, 0, 3, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( i2 \\le divInt(mod(saveOrd(s2),i2),mod(len(in2),int(8.0))) and in0 == (in1 + (in1[i1:][int(2.0):int(7.0)] + s0))[i0:] )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 323}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [2, 2, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 0, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 36, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 9, 3, 3, 0, 3, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = divInt(mod(saveOrd(in0[len(in2):]),divInt(int(26.0),len(in1))),i0) \\l int(6.0)\\n", "test_case_results": [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 458}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 3, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [1, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [2, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [3, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 36, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 9, 3, 3, 0, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(mod(mod(len(in0),divInt(len(in2),int(31.0))),int(3.0))) \\le i1\\n", "test_case_results": [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 413}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [3, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [3, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 36, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 4, 3, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in0) \\le mod(mod(len(in2),divInt(len(in0),int(31.0))),( i0 + int(0.0) ))\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 278}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 0, 1, 1, 1, 0, 1], [9, 5, 0, 8, 7, 7, 4], [2, 0, 1, 0, 2], [0], [3, 2, 2, 3, 2, 3, 1, 3, 0, 1, 1, 1, 2, 2, 1, 1, 1, 0, 2, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0], [2, 3, 4, 4, 0], [0, 2, 0, 1, 0, 2, 0], [1, 1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0], [4], [0], [], [], [], [], []], "fitness": 36, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 1, 0, 11, 3, 4, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( ( len(s2) + mod(saveOrd(in2),int(9.0)) ) * saveOrd(in0) )) \\le i2\\nb1 = int(50.0) \\le int(8.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 351}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4, 2], [1, 1, 1], [0, 0, 0], [], [], [], [], [1], [0, 1, 1, 1, 1, 0, 0, 1], [1, 0, 6, 8, 8, 3, 7, 1], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [2, 3, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 37, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 2, 3, 3, 3, 0, 0, 0, 0, 1, 8, 8, 1, 0, 11, 1, 4, 0, 1, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(int(10.0)) \\l len(in0[len((in2 + in1)):]):{:\\nres0 = divInt(int(6.0),abs(i0)) \\le int(8.0)\\n:}else:{:\\nb1 = int(8.0) == int(371.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], "other_info": {}, "test_fitness": 366}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 0, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 0, 0, 2, 4], [0, 2], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 37, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 12, 2, 5, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) == ( min(( min(abs(i2), i1) + int(248.0) ), i1) * int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 296}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [0, 1, 2], [0, 0], [3], [3], [1], [], [], [0, 1, 1, 1, 1], [2, 6, 6, 8, 4], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 2, 4, 1, 2], [1], [], [2, 0, 3, 0, 0, 4, 4, 2, 2, 2, 0, 0, 1], [0, 3], [1], [2, 1, 2, 1], [0], [5], [], [], []], "fitness": 37, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 5, 5, 1, 0, 10, 1, 4, 0, 1, 5, 1, 0, 13, 2, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(in0[int(26.0):]) \\l len((s2 + in1)) or getCharFromString(s1[:len(s2)][divInt(int(6.0),abs(i0)):][:int(8.0)].rstrip(), int(4.0)) != \"\"F\"\" )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 375}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [8, 1, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [2, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [3, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 37, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 9, 3, 3, 0, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(mod(mod(len(in0),divInt(len(in2),int(81.0))),int(0.0))) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 296}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 3, 2, 3, 2, 0, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 2, 4], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 2, 5, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\le ( len(in2) + ( i2 - min(abs(i1), int(24.0)) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 353}, {"genotype": [[0], [1, 1], [0, 1, 0, 1], [1], [0, 2, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [6, 5, 6, 8], [1, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 0, 3, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 1, 3, 1, 4], [0, 1, 1], [0, 1, 0], [3, 4, 5, 1], [1], [], [2, 4, 3, 0, 0, 1, 0], [0], [], [2, 2, 2], [0], [5], [], [], []], "fitness": 38, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 8, 0, 5, 0, 0, 3, 1, 0, 7, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString((in0 + in1), int(6.0))[max(len(\"\"F\"\"), i1):]) \\l max(saveOrd(in2), i1)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 507}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 2, 2], [0, 2], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 11, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\le ( len(in2) + ( min(abs(abs(i2)), int(248.0)) * i1 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 353}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [1, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 4, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 39, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(saveOrd(in2),divInt(min(( ( i1 + int(1.0) ) + int(7.0) ), int(4.0)),i0)) + divInt(int(8.0),i1) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], "other_info": {}, "test_fitness": 443}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 39, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + divInt(len(in0),divInt(( i0 + int(3.0) ),int(7.0))) ) + int(4.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 597}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 0, 1, 0], [4, 3, 4, 0], [0, 0], [0, 1, 0], [0, 0, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 40, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 8, 3, 3, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( ( len(s0) + divInt(saveOrd(in2),int(3.0)) ) + int(1.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1], "other_info": {}, "test_fitness": 458}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [1, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 0, 1, 0, 1], [3, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [3, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 41, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 8, 3, 3, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in0) \\le mod(( len(in2) + mod(len(in0),int(31.0)) ),int(08.0))\\n", "test_case_results": [0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 264}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [7, 6, 7, 8, 3, 5], [1, 1, 1], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 1, 1, 3, 3], [0, 1, 1], [2, 1, 3, 0, 0, 3], [1], [0, 0, 0, 0, 0], [2, 5, 2, 0, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 13, 2, 6, 1, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(s2) - min(min(int(76.0), divInt(i1,i1)), int(7.0)) ), int(8.0))) \\l len(in2)\\ns2 = s0\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 561}, {"genotype": [[0], [0, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 11, 3, 4, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - divInt(len(in0),min(i0, i0)) ) + int(33.0) )\\ni1 += int(4.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], "other_info": {}, "test_fitness": 373}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 3, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 3, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 0, 0, 1], [2, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [3, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 41, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 10, 3, 4, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(mod(mod(len(in0),( len(in2) + abs(int(33.0)) )),i0)) \\le int(08.0)\\n", "test_case_results": [1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 265}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [5, 2, 6, 8, 3, 5, 5], [2, 2, 1, 2, 0], [0], [3, 3, 2, 3, 3, 3, 1, 2, 1, 1, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1], [1, 3, 3, 0, 0, 3, 1, 0, 1], [0], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 12, 2, 5, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(len(in1), mod(len(in2),min(min(int(52.0), mod(int(6.0),int(8.0))), i2))) \\l int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 325}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 0, 0], [0, 0, 2], [0, 0], [0, 0], [], [], [3, 1], [3, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 0, 3, 1, 1, 0, 1, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 3, 2, 3], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 42, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 2, 3, 3, 3, 0, 0, 0, 0, 0, 8, 8, 3, 0, 18, 4, 5, 1, 3, 8, 0, 2, 9, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\ge mod(mod(len(in2),i0),len(in0)):{:\\nloopBreak% = 0\\nfor in0 in (in1 + s1)[int(31.0):]:{:\\nloopBreak% = 0\\nfor s2 in getCharFromString(in0, int(0.0)):{:\\nres0 = i2 \\l int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = i1 != divInt(( abs(int(7.0)) + int(83.0) ),abs(int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 462}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [8, 1, 5, 8, 7, 6, 6, 8, 6, 0, 1, 1, 0, 9, 4, 6, 0], [2, 2, 1, 0, 2, 0, 1], [1], [3, 2, 2, 3, 2, 1, 3, 1, 0, 3, 1, 2, 2, 2, 1, 2, 1, 0, 2, 0, 1, 2, 3, 0, 3, 1, 0, 3, 1, 0, 1, 1, 2, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [4, 3, 3, 0, 0, 1, 1], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [1, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 2], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 6, 0, 30, 9, 7, 5, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\l ( ( len(in1) + divInt(int(8.0),len(in0)) ) + int(1.0) )\\nb1 = i2 \\le min(int(5.0), mod(( divInt(int(8.0),( int(7.0) + i2 )) * ( i1 - int(6.0) ) ),divInt(min(i0, max(int(6.0), i2)),max(int(86.0), i0))))\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 461}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [2, 1], [0, 0], [2], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 1, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0 == in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [2, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [2, 3, 3, 2, 2, 3], [0], [0, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2.startswith(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [2], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 == in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [5], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 0, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0.endswith(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [2, 1], [0, 0], [4], [], [], [], [], [1, 1, 1, 1, 1], [8, 4, 3, 8, 7], [0, 2, 1, 0, 2], [0], [3, 2, 2, 3, 0, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2.startswith(in2)\\ni0 = saveOrd(in0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0, 0], [0, 0], [0, 0, 0], [], [], [3, 3, 2], [1, 0, 5, 3], [1, 1, 1, 1], [0, 0, 0, 0], [4], [], [], [], [], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 1, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8, 6, 0, 1, 9, 8, 6, 3, 9], [0, 2, 1, 1, 0, 0, 2], [1], [3, 2, 2, 3, 2, 0, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1, 2, 3, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 3, 0, 0, 1, 0, 2, 1, 0, 1], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], [2, 3, 3, 2, 2, 3, 1], [0, 1, 2, 2, 0, 0], [1, 0, 0, 0, 1, 0, 1], [0, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 42, "mapping_values": [1, 7, 7, 2, 5, 1, 3, 0, 0, 3, 4, 4, 4, 0, 0, 0, 0, 0, 21, 21, 7, 0, 41, 13, 7, 6, 7, 10, 0, 1, 10, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(mod(divInt(len(s0),divInt(i0,int(31.0))),int(08.0))) \\g i2\\nloopBreak% = 0\\nwhile int(7.0) \\l len(in2):{:\\nloopBreak% = 0\\nfor in0 in in0:{:\\nin1 = (s1 + s2)[( divInt(abs(int(83.0)),int(34.0)) + abs(int(47.0)) ):]\\nin0 = getCharFromString(in0, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = int(0.0) != ( len(s2) - int(8.0) )\\nb2 = ( int(60.0) * mod(int(1.0),divInt(int(9.0),( ( ( max(i1, i0) * int(8.0) ) + i0 ) + mod(int(63.0),i2) ))) ) \\ge int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 574}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [4], [], [], [], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 4, 8, 8, 5, 7, 3, 2, 1, 8, 4, 4, 4, 0, 8, 0], [2, 1, 1, 2, 2, 1, 1, 1], [0], [3, 3, 2, 3, 1, 3, 2, 2, 1, 3, 1, 1, 3, 3, 1, 1, 1, 0, 0, 1, 0, 1, 3, 1, 0, 1, 3, 0, 2, 2, 0, 2, 0, 0, 0], [0, 1, 1, 0, 0, 1, 1, 1, 1, 0], [2, 3, 3, 0, 1, 3, 3, 1, 4], [1, 0, 2, 2], [1, 1, 0, 0, 1, 1], [1, 5, 5, 2, 1, 0, 4], [], [], [0, 0, 2, 2, 3, 0, 3, 0, 2, 0, 0, 0, 0], [0, 3, 2], [4], [0, 1, 1, 2], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1.startswith(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [2], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 2, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 == in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [2, 1], [0, 0], [0], [], [], [], [], [0, 0, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [0, 3, 2, 3, 3, 3, 3, 3, 0, 1, 0, 1, 3], [1, 0, 1], [2, 3, 3, 0, 2, 1], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0 in in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 392}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 0, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [2, 3, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2, 2, 2], [], [5], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(i0) \\l len(in0[len((in2 + in1)):])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], "other_info": {}, "test_fitness": 423}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 1, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( len(s1) + len(in0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 571}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 4, 7, 8, 3, 5], [1, 2, 2, 0, 2, 2], [0], [3, 3, 2, 3, 3, 3, 2, 2, 0, 0, 0, 2, 3, 3, 0, 2, 3, 1, 1, 0, 3, 1, 0, 1, 1], [0, 1, 1, 0, 1], [2, 1, 3, 0, 2, 3, 2, 3, 2], [0, 2], [1, 1, 0], [4, 5, 3, 4, 4, 5, 0], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 0], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 6, 0, 25, 5, 9, 2, 3, 7, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(abs(mod(mod(i1,i2),i2)), ( len(in2) * abs(i0) )) ), divInt(len(in0),int(44.0)))) \\g int(7.0)\\nin1 = (in1 + (in2[i2:abs(int(8.0))][i2:] + s0))[int(3.0):int(5.0)]\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 572}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [2, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 8, 3, 3, 5, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( divInt(mod(saveOrd(s1),mod(( len(in2) + int(8.0) ),i2)),int(13.0)) + len(in0) ) \\le divInt(divInt(( int(8.0) + i2 ),int(7.0)),i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le len(in0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 571}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),int(3.0)) + len(in0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 634}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 2, 2, 3, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),int(3.0)) + len(in0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 634}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [7, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 4, 3, 2], [0], [0, 0, 0], [3, 5, 2, 1, 0], [1], [], [2, 0, 3, 3, 0, 4, 2, 0, 2, 0, 4, 0], [0, 2], [], [2, 1, 0], [], [5], [], [], []], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 10, 1, 4, 0, 1, 5, 0, 0, 12, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(7.0):]) \\l saveOrd(((in2 + getCharFromString(s2[:len(s1[divInt(int(0.0),abs(i0)):int(6.0)])], int(8.0))) + s0.capitalize()))\\n", "test_case_results": [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], "other_info": {}, "test_fitness": 485}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 4, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [2, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 44, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 8, 3, 3, 5, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( divInt(mod(saveOrd(s1),divInt(( len(in2) + int(8.0) ),i2)),int(14.0)) + len(in0) ) \\le divInt(divInt(( int(8.0) + i2 ),int(7.0)),i1)\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 315}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 4, 8, 8, 5, 5, 3, 1, 9, 8, 4, 4, 4, 0, 8, 0], [1, 0, 1, 2, 2, 1, 1, 1], [0], [3, 3, 2, 3, 2, 3, 2, 0, 1, 0, 0, 1, 3, 3, 1, 0, 1, 0, 0, 1, 0, 1, 3, 1, 0, 1, 3, 0, 2, 2, 0, 2, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0], [3, 3, 3, 0, 1, 3, 3, 1, 4], [1, 0, 2, 2], [0, 1, 0, 0, 1, 1], [4, 5, 5, 2, 1, 5, 4], [], [0, 0], [0, 0, 2, 4, 3, 0, 3, 0, 1, 0, 1, 0, 0], [3, 3, 2], [4], [0, 0, 0, 2], [], [], [], [], []], "fitness": 44, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in1) == len(in2)\\n", "test_case_results": [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 438}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 0, 2, 3, 2, 3, 3, 3, 3, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 2, 4], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 44, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 2, 6, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(i2) \\le ( len(in0) + ( len(in2) - min(abs(saveOrd(in0)), int(24.0)) ) )\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 617}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [7, 1, 0, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [3, 3, 3, 2, 3, 3], [0, 0], [0, 1, 0, 1], [2, 5, 3, 2, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 44, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 11, 11, 3, 1, 20, 5, 5, 1, 4, 7, 0, 1, 9, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(s2) \\le divInt(mod(len(in2),divInt(len(in0),int(7.0))),int(1.0)):{:\\nloopBreak% = 0\\nwhile i0 \\le int(0.0):{:\\nloopBreak% = 0\\nfor s2 in (in1 + s1)[int(8.0):]:{:\\nres0 = ( mod(abs(int(7.0)),int(83.0)) + len(getCharFromString(s2, int(54.0))) ) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(47.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 567}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1, 0, 1, 0, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 1, 5, 5, 5, 9, 1, 3, 9, 2, 9, 5, 9], [1, 1, 1, 0, 2, 0, 0, 0, 2, 2, 1], [1], [3, 2, 2, 3, 0, 2, 3, 1, 2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 3, 1, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3], [0, 0, 0, 2, 2, 2, 0, 0, 1], [0, 0, 1, 0, 0], [2, 3, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 45, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 7, 1, 23, 9, 4, 6, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in0) + i1 ) + divInt(len(in0),int(6.0)) )\\ni1 += ( i1 * ( divInt(mod(( int(1.0) * i0 ),int(55.0)),i2) * divInt(min(int(5.0), i0),i0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 623}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 0, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 2, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2, 2], [], [], [], [], []], "fitness": 45, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 3, 4, 1, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2[i0:]) \\le ( abs(divInt(len(in2),min(mod(i0,int(3.0)), int(3.0)))) * int(5.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 587}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [2, 3, 2, 2, 2, 3], [0], [1, 1, 0, 0, 1], [3, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 45, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 10, 3, 3, 0, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(mod(mod(len(in0),divInt(abs(int(31.0)),int(0.0))),i0)) \\le int(8.0)\\n", "test_case_results": [1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0], "other_info": {}, "test_fitness": 392}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 2, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 2, 4], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 45, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 3, 5, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( ( len(in0) + divInt(len(in2),min(abs(i2), int(24.0))) ) - i1 )) \\le int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 332}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [7, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 4, 3, 2], [0], [0, 0, 0], [3, 1, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 45, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(7.0):]) \\l saveOrd((s1 + in1))\\n", "test_case_results": [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0], "other_info": {}, "test_fitness": 460}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1, 1], [9, 0, 6, 8, 7], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [3, 3, 3], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 2, 1, 2, 4, 0], [0], [], [2, 0, 1], [0], [5], [], [], []], "fitness": 45, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 11, 2, 3, 0, 2, 3, 1, 0, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in0[int(9.0):]) \\le len((in2 + \"\"F\"\"[divInt(mod(int(0.0),len(getCharFromString(in1, i0)[:int(6.0)])),int(8.0)):int(7.0)]))\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], "other_info": {}, "test_fitness": 471}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 46, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + divInt(len(in0),( ( i0 + int(0.0) ) + int(7.0) )) ) * int(4.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 611}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 8, 8, 6, 3, 8, 4, 2, 6, 9, 8], [0, 1, 1, 0, 1, 0, 0, 2], [0], [3, 3, 2, 1, 2, 3, 3, 3, 0, 1, 0, 3, 3, 3, 2, 3, 2, 2, 0, 2, 1, 2, 1, 1, 0, 2, 3, 0, 2, 2, 1, 3, 0, 2, 1, 1, 1, 2, 2, 0, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1], [2, 3, 0, 0, 0, 1, 3, 0, 3, 0, 1], [0, 1, 2, 2, 1], [0, 1, 0, 0, 0, 1, 1, 1], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 47, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 8, 0, 43, 13, 11, 5, 8, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( int(24.0) + ( min(min(min(i0, int(8.0)), i1), max(len(in2), min(divInt(len(in0),mod(divInt(i1,divInt(int(8.0),divInt(int(6.0),int(3.0)))),i0)), ( min(i1, ( mod(int(8.0),max(i0, ( int(4.0) - int(2.0) ))) * int(6.0) )) * mod(mod(i0,int(9.0)),int(8.0)) )))) - i2 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], "other_info": {}, "test_fitness": 327}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 0, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 4, 0], [0, 0], [0, 1, 0], [4, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 47, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le ( divInt(len(in2),i2) + saveOrd(in2) )\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1], "other_info": {}, "test_fitness": 585}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 0, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 1, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 4, 1, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 47, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( int(8.0) + len(in1) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 510}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 2, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 0, 3, 1, 2, 3, 1, 1, 2, 3], [0, 1, 1, 0], [4, 3, 3, 0], [2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 48, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),i2) * len(in0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 671}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 2, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 48, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 17, 7, 3, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(abs(divInt(len(in2),( ( i0 - int(8.0) ) + int(7.0) ))),divInt(i0,( int(7.0) + i1 ))) * int(8.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 632}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [1, 4], [2, 1], [0, 0], [1], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 6, 9, 8, 3, 5], [1, 0, 2], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 3, 3, 3], [0, 1, 1], [2, 1, 3, 0, 0, 3], [0], [1, 1, 0, 0, 1], [4, 5, 4, 3, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1 not in in2\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 560}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [1], [], [], [], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 4, 8, 8, 5, 7, 3, 2, 1, 8, 4, 4, 4, 0, 8, 0], [2, 1, 1, 2, 2, 1, 1, 1], [0], [3, 3, 2, 3, 0, 3, 2, 2, 1, 3, 1, 1, 3, 3, 1, 1, 1, 0, 0, 1, 0, 1, 3, 1, 0, 1, 3, 0, 2, 2, 0, 2, 0, 0, 0], [0, 1, 1, 0, 0, 1, 1, 1, 1, 0], [2, 3, 3, 0, 1, 3, 3, 1, 4], [1, 0, 2, 2], [1, 1, 0, 0, 1, 1], [4, 5, 5, 2, 1, 0, 4], [], [], [0, 0, 2, 2, 3, 0, 3, 0, 2, 0, 0, 0, 0], [0, 3, 2], [4], [0, 1, 1, 2], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1 not in in2\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 560}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [], [1, 2, 2, 3, 1, 3, 1, 3, 2, 1, 1, 1, 3], [0, 1, 1, 1], [4, 3, 0, 0], [0, 0], [1, 1, 0], [0, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 6, 2, 2, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(3.0) \\le ( mod(saveOrd(s0),int(1.0)) + len(in1) )\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 623}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1], [8, 1, 5, 8, 7, 6, 0, 9, 6, 0, 1, 1, 0, 9, 7, 6, 0], [2, 0, 1, 0, 2, 1, 1], [1], [3, 2, 2, 2, 1, 2, 3, 1, 0, 3, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 0, 3, 1, 0, 3, 1, 1, 1, 1, 2, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [4, 3, 3, 0, 0, 4, 1], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 0, 0, 0], [0, 3, 2], [4], [2, 1, 0], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 7, 3, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\l ( ( divInt(int(8.0),mod(len(in2),int(1.0))) + i2 ) + len(in0) )\\nb1 = int(5.0) \\le ( divInt(divInt(int(8.0),i0),int(7.0)) + i1 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 660}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [2, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( divInt(divInt(saveOrd(s2),( len(in2) + ( divInt(i0,int(3.0)) + int(7.0) ) )),int(4.0)) + i0 ) \\le ( int(8.0) * i1 )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 659}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [5, 4, 7, 8, 3, 5], [1, 1, 1], [0], [3, 3, 2, 3, 0, 3, 1, 0, 1, 0, 1, 1, 3, 3], [0, 1, 1], [2, 1, 3, 0, 0, 3], [1], [0, 0, 0, 0, 0], [4, 5, 3, 5, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 52, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 9, 1, 4, 1, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) - i1 ), min(int(54.0), i1))) \\l int(7.0)\\nin2 = in0\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 420}, {"genotype": [[0], [1, 1, 1, 1, 1], [0, 1], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 4], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [7, 1, 0, 8, 7, 1, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 1, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 1, 1, 0, 1], [4, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 52, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le int(71.0)\\n", "test_case_results": [0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], "other_info": {}, "test_fitness": 503}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 4, 7, 8, 3, 5], [1, 1, 1], [0], [3, 3, 2, 3, 3, 3, 1, 3, 0, 0, 1, 1, 3, 3], [0, 1, 1], [2, 1, 3, 0, 0, 3], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0, 0], [4, 5, 3, 0, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 52, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 11, 1, 6, 1, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(int(44.0), len(in2)), i1) ), i1)) \\l int(7.0)\\nin0 = s0\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 420}, {"genotype": [[0], [0, 1], [0, 1], [2], [1, 0], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1], [4, 0, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [3, 4, 1, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 53, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 1, 15, 4, 5, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= saveOrd(in0)\\nres0 = ( ( len(in1) + divInt(len(s1),min(( min(int(4.0), int(0.0)) + i0 ), int(4.0))) ) - int(8.0) ) \\le int(7.0)\\n", "test_case_results": [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 468}, {"genotype": [[0], [0, 1, 1], [0, 2, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 2], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [8, 1, 3, 8, 7, 2, 6, 8, 7, 8], [0, 2, 1, 0, 2, 0, 2, 0, 0, 2, 1], [0], [1, 2, 2, 3, 2, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 2, 0, 2, 0, 1, 2, 0, 2, 0, 0, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [4, 3, 1, 0, 0], [0, 0, 0, 2, 1, 0, 0], [0, 1, 0, 0, 0, 1], [2, 5, 3, 2, 4, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 0], [0, 3, 2], [4], [0, 2, 0, 0], [], [], [], [], []], "fitness": 53, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 10, 10, 11, 1, 30, 11, 2, 6, 5, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(8.0) \\le ( divInt(saveOrd(s2),mod(( len(in2) + int(1.0) ),i0)) + int(3.0) )\\nloopBreak% = 0\\nwhile in0 in (s2 + (in1[int(8.0):( divInt(( int(7.0) + i2 ),( i1 * ( i0 - int(2687.0) ) )) + divInt(i2,divInt(i0,i2)) )][i0:] + in2))[i0:i2]:{:\\ni1 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 401}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 2, 6, 8], [2, 0, 1], [], [3, 2, 2, 1, 2, 3, 1, 2, 3, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 3, 4], [0, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 54, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(int(3.0),mod(len(in2),int(2.0))) + ( len(in0) + int(6.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 687}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [2, 1], [0, 0], [1], [], [], [], [], [0, 1, 1, 1], [1, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [1, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [2, 0, 0, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 55, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0[int(10.0):] not in in2\\n", "test_case_results": [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 673}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 2, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 2, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [2, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [3, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 56, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 11, 4, 3, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(mod(mod(divInt(( len(in0) + int(32.0) ),int(0.0)),i0),int(8.0))) \\le len(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 641}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 5, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 9, 0, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 3, 3, 1, 1, 0, 1, 1, 2, 2, 3, 2, 1, 3, 1, 0, 3], [0, 1, 1, 1, 1, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 1, 3, 3, 2], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 1, 0, 1], [1, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 57, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 1, 0, 11, 2, 4, 1, 1, 9, 0, 2, 9, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( mod(len(in2),len(in0)) + abs(int(39.0)) ):{:\\nloopBreak% = 0\\nfor in0 in (in1 + s1)[int(0.0):]:{:\\nloopBreak% = 0\\nfor s1 in saveChr(i0):{:\\nres0 = int(8.0) != int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 7, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [2, 0, 1], [1], [3, 2, 0, 3, 0, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [0, 1, 0, 0, 1], [2, 1, 3, 2, 2, 3], [0], [0, 1, 0], [3, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 7, 1, 3, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( i2 + max(i0, len(in0)) )) \\le int(31.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], "other_info": {}, "test_fitness": 429}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 4, 7, 8, 3, 5], [1, 1, 1], [0], [3, 3, 0, 0, 3, 3, 1, 2, 0, 0, 1, 1, 3, 3], [0, 1, 1], [2, 1, 3, 0, 0, 3], [1], [0, 0, 0, 0, 0], [4, 5, 3, 0, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 3, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(i1, i1)) \\l len(in1)\\nin2 = in0\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [3, 4, 0, 8, 3, 5], [1, 1, 1, 2], [0], [3, 3, 3, 2, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3, 0], [0, 1, 1], [2, 1, 3, 0, 1, 3], [0], [1, 0, 0], [1, 5, 5, 4, 4, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(len(s1), ( min(max(int(34.0), mod(i1,i1)), i1) + int(0.0) ))) \\l len(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [8, 4, 7, 8, 3, 5], [1, 1, 1, 2], [0], [3, 3, 2, 2, 1, 3, 1, 2, 0, 0, 3, 1, 3, 3, 0, 3, 0], [1, 1, 1], [2, 0, 3, 0, 1, 1, 3], [1], [1, 0, 0], [4, 5, 3, 4, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 17, 3, 7, 0, 3, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(min(mod(divInt(int(84.0),len(in1)),int(7.0)), divInt(i1,i1))) \\l min(int(8.0), max(max(i1, len(in2)), i2))\\nin0 = in1\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 4, 8, 8], [2, 2, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 2, 2], [0, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 11, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(s0)) \\l ( len(in2) + ( min(abs(abs(i2)), int(14.0)) - i2 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1], [0, 1, 0, 1], [1], [0, 2, 1], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [3], [], [], [], [1], [1, 1, 1, 1], [6, 5, 6, 8], [1, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 1, 3, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 1, 3, 1, 4], [0, 1, 1], [0, 1, 0], [3, 4, 5, 1], [1], [], [2, 0, 4, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0[saveOrd(getCharFromString(in1, int(6.0))):] != in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [3, 9, 6, 8, 3, 5], [2, 1, 1], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 1, 3, 3], [0, 0, 1], [3, 1, 3, 0, 0, 3], [0, 2], [1, 1, 0], [5, 5, 5, 1, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 2, 5, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in2) \\l max(( len(in2) + min(min(int(39.0), ( i2 * int(6.0) )), i1) ), int(8.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 426}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [3], [], [], [], [], [1, 1, 1, 1, 1], [3, 6, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 != in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [2, 1], [0, 0], [3], [], [], [], [], [1, 1, 1, 1], [3, 8, 6, 8], [2, 2, 1, 0, 2, 2, 1, 2, 0, 2, 1, 0, 2, 2, 2], [1], [3, 0, 2, 3, 3, 2, 1, 1, 0, 1, 1, 1, 3], [0, 1, 0], [4, 3, 3, 0], [0, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 != in2\\ni2 += saveOrd(in0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [2, 1], [0, 0], [1], [], [], [], [], [0, 0, 1, 1], [1, 4, 8, 8], [0, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 2, 4], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0 not in in2\\ni0 = abs(len(in0))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 608}, {"genotype": [[0], [1, 1], [0, 1, 0, 1], [1], [0, 2, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [6, 5, 6, 8], [1, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 3, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 1, 4, 1, 4], [0, 1, 1], [0, 1, 0], [3, 4, 5, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 9, 1, 5, 0, 1, 3, 1, 0, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(6.0):]) \\l max(saveOrd((in1 + in2)), divInt(max(saveOrd(\"\"F\"\"), i1),int(5.0)))\\n", "test_case_results": [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0], "other_info": {}, "test_fitness": 477}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [3], [], [], [], [], [1, 1, 1, 1, 1], [2, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 3, 2, 3, 2, 2, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 != in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [2, 0], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 1, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 != in2\\ni0 -= saveOrd(in0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [8, 4, 7, 8, 3, 5], [1, 1, 1, 2], [0], [3, 3, 2, 2, 3, 3, 1, 3, 0, 0, 0, 1, 3, 3, 0], [0, 1, 1], [2, 1, 3, 0, 1, 3], [0], [1, 0, 0], [4, 5, 3, 4, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 60, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 2, 6, 1, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( mod(len(in1),min(int(84.0), max(i1, i1))) + i1 ), int(7.0))) != len(in2)\\nin0 = in1\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 573}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 1, 2], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [8, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [2, 3, 3], [0], [1, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 4, 2, 4, 0], [0, 2], [], [2, 1], [0], [5], [], [], []], "fitness": 60, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 10, 2, 3, 0, 2, 3, 0, 0, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(8.0)) \\le len(in0[mod(mod(int(0.0),len((in2 + getCharFromString(in1.capitalize()[:i0], int(6.0))))),int(8.0)):])\\n", "test_case_results": [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 750}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [5, 1], [2, 1], [0, 0], [3], [], [], [], [], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1], [7, 8, 3, 8, 7, 9, 9, 2, 6, 7], [2, 2, 1, 2, 1, 2], [0], [3, 3, 2, 2, 0, 3, 1, 2, 0, 3, 3, 1, 3, 1, 0, 0, 2, 2, 2, 1, 0], [1, 0, 0, 1, 0], [3, 3, 3, 3, 2, 1], [1, 1], [1, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 60, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1 != in2\\ni2 = len(in0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 582}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1], [1, 6, 6, 8, 1], [2, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 3, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [4, 1, 1, 2, 4], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 60, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 0, 0, 10, 1, 5, 1, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\l max(max(( int(6.0) + abs(saveOrd((in2 + in1))) ), int(8.0)), int(1.0))\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], "other_info": {}, "test_fitness": 487}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [0], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [0, 0, 1, 0, 2], [0], [3, 2, 2, 2, 2, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 4, 3, 0, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 61, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 1, 13, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( mod(( saveOrd(in2) - len(in0) ),mod(int(3.0),int(3.0))) + int(4.0) ) + int(8.0) )\\ni0 = int(7.0)\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 576}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [0, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3, 0], [1, 0, 1], [2, 1, 3, 2, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 61, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 14, 2, 7, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in0),( abs(min(max(i0, int(24.0)), i1)) + int(8.0) )), len(in2))) != i1\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 680}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [3, 7, 8, 8], [0, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 2, 1, 0, 1, 3, 0, 0], [0, 0, 1], [2, 3, 3, 0, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 62, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 15, 3, 7, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\g ( len(in2) + ( min(min(max(divInt(int(37.0),i0), int(8.0)), len(in0)), i1) - i1 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0], "other_info": {}, "test_fitness": 647}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [0, 1, 1], [0, 0, 0], [4], [2], [], [], [], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 2, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 0, 1, 0, 1], [2, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [3, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 62, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 4, 4, 1, 0, 9, 3, 3, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not abs(mod(( len(in0) + mod(len(in2),int(312.0)) ),int(8.0))) \\le i0\\n", "test_case_results": [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 622}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [2, 1], [0, 0], [3], [], [], [], [], [1, 1, 1, 1, 1], [2, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [0, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 62, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0[i0:] != (in2 + in1)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 63, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\ge ( divInt(len(in0),divInt(len(in0),( ( int(3.0) + int(7.0) ) + int(5.0) ))) + int(8.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 623}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [0, 3, 2, 3, 2, 3, 3, 3, 0, 1, 3, 1, 3], [0, 0, 1], [3, 2, 3, 0, 0, 1, 3], [2, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 63, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i2 \\l len(in0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 704}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 3, 3, 8, 8], [0, 0, 1, 0, 2], [1], [2, 2, 2, 3, 2, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 5, 2, 4, 5], [], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 63, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( divInt(mod(saveOrd(s2),( ( len(in2) + divInt(i0,int(0.0)) ) + int(3.0) )),int(3.0)) + i0 ) \\le ( int(8.0) * i1 )\\n", "test_case_results": [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], "other_info": {}, "test_fitness": 464}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [3, 9, 6, 8, 3, 5], [2, 1, 1], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 1, 3, 3], [0, 0, 1], [2, 1, 3, 0, 0, 3], [0, 2], [0, 0, 0], [3, 5, 5, 1, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 64, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in0) + min(min(int(39.0), ( i2 * int(6.0) )), i1) ), int(8.0))) != len(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 587}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1], [3, 2, 2, 8], [2, 0, 1], [], [2, 1, 2, 3, 2, 3, 1, 2, 3, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 3, 0], [0, 0], [0, 1, 0], [0, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 64, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( int(3.0) + divInt(saveOrd(s0),mod(len(in2),int(2.0))) ) != ( len(in1) + int(28.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 675}, {"genotype": [[0], [0, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1, 1], [8, 1, 3, 8, 7, 3, 3, 3, 1], [0, 2, 1, 0, 2, 2, 1, 1, 2, 0], [0], [2, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 3, 0, 2, 3, 0, 0, 0, 2, 2, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [4, 3, 3, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1], [2, 5, 3, 2, 0, 5, 4], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 66, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 10, 0, 35, 12, 5, 3, 9, 7, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( divInt(mod(saveOrd(s2),divInt(( len(in2) + int(8.0) ),i0)),int(1.0)) + len(in0) ) != divInt(divInt(mod(int(3.0),i2),int(8.0)),i1)\\ns2 = (s0 + (in2[( i0 + int(7.0) ):min(i2, mod(min(i2, i1),i1))][:divInt(mod(int(3.0),i2),int(33.0))] + in1))[i0:int(1.0)]\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [1, 2, 1, 0, 2, 1, 0, 2], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0, 1], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 4, 3, 2, 2, 5, 2], [], [], [0, 3, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 66, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 8, 0, 33, 11, 5, 4, 7, 5, 0, 0, 10, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len((in1 + (in0 + s2)[mod(divInt(len(getCharFromString(s2[int(8.0):i1], int(13.0))),min(( divInt(divInt(int(8.0),i2),int(7.0)) + i1 ), ( i0 + int(1.0) ))),mod(( int(8.0) + int(16.0) ),min(i2, i1))):int(5.0)])),divInt(i0,i2)) * int(74.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [0, 0], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 4, 7, 8, 3, 5], [2, 2, 1], [0], [3, 1, 3, 2, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3], [0, 0, 1], [2, 1, 3, 0, 2, 3], [0, 1], [1, 1, 0], [4, 5, 3, 4, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 67, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 11, 2, 4, 2, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(44.0)) \\g max(( len(in1) + min(int(7.0), ( i2 - i2 )) ), i1)\\nin2 = in0\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 621}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1], [3, 3, 8, 8, 7, 7], [0, 1, 1, 0, 2], [0], [3, 2, 2, 2, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 4, 3, 3, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 1, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 68, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( mod(( saveOrd(in2) - len(s1) ),mod(i0,int(3.0))) + int(3.0) ) + int(8.0) )\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [7, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 4, 3, 2], [0], [0, 0, 0], [5, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 68, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2[int(7.0):]) \\l saveOrd((in2 + in1))\\n", "test_case_results": [1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0], "other_info": {}, "test_fitness": 569}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [7, 1, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 1, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 4, 0], [0, 0], [0, 1, 0], [0, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 68, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),int(7.0)) + saveOrd(in2) )\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 6, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [0, 2, 2, 3, 2, 3, 2, 2, 0, 2, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le ( divInt(saveOrd(s2),divInt(len(s0),( ( i0 + divInt(int(3.0),int(6.0)) ) + i1 ))) + ( int(4.0) * i0 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 6, 8, 8], [0, 1, 2, 0, 2], [0, 1], [0, 1, 3, 3, 2, 3, 3, 0, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [4, 1, 3, 2], [0], [0, 1, 0], [3, 3, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\l int(16.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [7, 0, 6, 8, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [0, 0, 3], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 11, 2, 3, 0, 2, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(int(7.0), min(divInt(mod(int(0.0),len(in0[i0:])),int(6.0)), int(8.0))) != int(8.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 0], [1, 1], [2], [0, 0], [], [0, 0], [], [], [3], [4, 4], [2, 1], [0, 0], [2], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [1], [2, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1], [3, 3, 3, 0], [0, 1], [0, 1, 0], [2, 1, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 == s1\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 0, 3, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [2, 3, 0, 2, 2, 3], [0], [0, 1, 0], [3, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 1, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 9, 2, 3, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(divInt(i0,len(in0))) \\le mod(min(int(3.0), int(1.0)),i2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 0, 1], [3, 2, 6, 8, 9, 8, 1], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 2, 1, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 1, 0], [0, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 0, 0, 12, 4, 3, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(max(int(32.0), ( int(6.0) + int(8.0) )),int(9.0))) + int(81.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [0], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], [3, 3, 4, 8, 7, 7, 7, 0, 9, 9, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 0, 3, 4, 0], [1, 0, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 1, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 4, 1, 18, 4, 4, 4, 1, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2[( ( min(mod(len(in2),saveOrd((in0 + (s2[:( i0 - int(3.0) )][:int(3.0)] + in1))[int(4.0):])), int(8.0)) + int(7.0) ) + int(7.0) ):i0]) \\le int(70998.0)\\ni1 -= i0\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 7, 6, 8], [2, 0, 1], [1], [3, 0, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [1, 1, 1], [0, 3, 3, 0], [0, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 9, 2, 3, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(i2, divInt(len(s0),mod(len(in2),int(3.0)))) \\le int(7.0)\\ni0 += i1\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1], [8, 1, 5, 8, 7, 6, 6, 8, 6, 0, 1, 1, 0, 9, 4, 6, 0], [2, 0, 1, 0, 2, 1, 1], [1], [0, 2, 2, 3, 2, 2, 3, 1, 3, 0, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 1, 3, 1, 0, 3, 1, 0, 1, 2, 2, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [4, 3, 3, 0, 0, 4, 3], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [1, 5, 3, 2, 4, 1], [], [], [0, 0, 0, 2, 2, 0, 3, 1, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 7, 3, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i2 \\l divInt(( saveOrd(s1) + mod(( len(in2) + int(8.0) ),len(in0)) ),i0)\\nb1 = int(1.0) \\le ( divInt(divInt(int(5.0),i1),int(8.0)) + i0 )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 1], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1], [7, 6, 5, 8, 7, 9, 1, 2, 6, 7], [1, 0, 1, 2, 1, 2, 2, 0, 0, 0, 0, 1], [0], [3, 3, 2, 2, 2, 3, 1, 2, 0, 1, 3, 1, 3, 1, 0, 0, 2, 2, 2, 1, 0, 0, 0, 0, 0, 3, 2, 3, 1, 0, 0, 0], [1, 1, 0, 1, 0, 1, 1, 1], [3, 3, 0, 2, 3, 1, 2], [0, 1], [1, 0, 0, 0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1, 0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 12, 1, 32, 8, 7, 2, 6, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in1[len(in2):mod(divInt(( min(int(7.0), divInt(i1,int(6.0))) + abs(int(5.0)) ),len((in0 + (s2[int(8.0):i0][:i1] + in1))[( divInt(mod(int(7912.0),i2),i1) - i2 ):i2])),i0)]) \\l max(divInt(abs(int(67.0)),i0), i0)\\ni0 = i1\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [2, 1], [0, 0], [0], [], [], [], [], [1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0, 0], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 2, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 8, 0, 32, 11, 5, 4, 7, 6, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1 in in2[saveOrd((in0 + s2)[( divInt(len(getCharFromString(s2[mod(divInt(len(in2),int(8.0)),i2):], int(138.0))),min(( divInt(divInt(int(7.0),i2),int(1.0)) + i1 ), ( i0 + int(8.0) ))) + mod(( int(16.0) * int(5.0) ),min(i2, i1)) ):int(74.0)]):divInt(i0,i0)]\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [1], [], [0], [], [1, 1, 1, 1, 1], [3, 7, 5, 5, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 1, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0, 1], [2, 3, 3, 2, 4, 5], [], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 1, 5, 9, 5, 9, 1, 3, 9, 2, 9, 5, 9], [2, 1, 1, 0, 2, 0, 0, 0, 2, 2, 1], [1], [3, 2, 2, 3, 0, 2, 3, 1, 1, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 3, 1, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [4, 3, 3, 3, 0, 3], [2, 0, 0, 2, 2, 2, 0, 0, 1], [0, 0, 0, 0, 0], [2, 5, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 9, 3, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\g divInt(( len(in2) * i2 ),divInt(len(in0),int(6.0)))\\ni1 += int(1.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 5, 3, 4, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( divInt(len(s0),( len(in2) + ( ( i0 + int(3.0) ) + int(7.0) ) )) * int(5.0) )) \\ge i0\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [0, 2, 2, 3, 2, 2, 0, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 0, 0, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 12, 5, 1, 4, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le ( ( saveOrd(s2) + mod(( i0 + ( i1 + int(9.0) ) ),int(3.0)) ) * int(5.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(len(s2),divInt(len(in2),( ( i0 + int(3.0) ) + int(7.0) ))) + int(4.0) ), i0) \\le divInt(int(8.0),i1)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [5], [], [], [], [], [1, 1, 1, 1, 1], [0, 7, 7, 8, 8], [0, 2, 1, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 3, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2.endswith(s0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1], [2, 4, 8, 8], [1, 1, 1], [0], [2, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 4, 2, 4], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 3, 5, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( abs(( len(in0) + divInt(len(in2),saveOrd(in0)) )) - abs(i1) ) \\le int(248.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0, 0], [], [], [3], [5, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [8, 0, 6, 8], [2, 2, 1], [0, 1], [3, 1, 3, 3, 2, 3, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 0, 0], [0], [0, 1, 0], [3, 0, 0, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [25], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(8.0):]) != len((s0 + s0))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 0, 2, 3, 0, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 3, 4], [0, 2], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(i2) \\le ( len(in0) + i1 )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 0, 0, 2], [0, 0], [5], [3, 2, 2], [1], [], [], [1, 1, 1, 1, 1, 1, 1], [3, 7, 5, 8, 8, 6, 6], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 5, 1, 1, 3, 1, 0, 0, 7, 7, 5, 0, 22, 6, 4, 3, 3, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( max(( divInt(len(s2),divInt(len(in2),min(( i0 + int(3.0) ), int(7.0)))) + int(5.0) ), i0) \\le ( int(8.0) + i1 ) or not not in0.endswith((s2 + (in1[:int(8.0)][i0:divInt(i2,int(6.0))] + in2))[int(6.0):]) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 2, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 6, 0, 28, 10, 5, 3, 7, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\ge divInt(mod(len(in2),divInt(divInt(len(in0),int(8.0)),i2)),int(23.0)):{:\\nres0 = min(( divInt(mod(int(8.0),i2),int(7.0)) + i1 ), ( i0 + int(1.0) )) \\le divInt(( int(8.0) + int(16.0) ),min(i2, i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [0, 2, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [0, 2], [0, 0], [0], [1], [], [0], [], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [8, 1, 3, 8, 7, 2, 6, 8, 7, 8], [0, 2, 1, 0, 0, 0, 2, 0, 0, 2, 1], [0], [2, 2, 2, 3, 2, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 3, 1, 2, 0, 2, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1], [2, 5, 3, 2, 4, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 0], [0, 3, 2], [4], [0, 2, 0, 0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [2, 1], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 2, 2, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 2, 2], [1, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0 in in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1, 1], [0, 2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 3], [1, 1, 0], [0, 0], [], [1], [], [0], [], [1, 1, 1, 1, 1, 1], [9, 5, 0, 8, 8, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 2, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 3, 0, 0, 1, 0, 2, 2, 0, 4, 1], [0, 1, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [1, 2, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 3, 1, 17, 5, 4, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s2) \\le ( divInt(len(in2),mod(len(in2),min(( i0 + int(9.0) ), int(5.0)))) - int(0.0) )\\nloopBreak% = 0\\nwhile ( int(8.0) + int(8.0) ) \\ge i0:{:\\ni1 = int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [0, 1], [0, 0], [], [1], [], [0], [], [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 1, 5, 9, 5, 9, 1, 3, 9, 2, 9, 5, 9], [2, 1, 0, 0, 2, 0, 0, 0, 2, 2, 1], [1], [2, 2, 2, 3, 3, 2, 3, 1, 2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 3, 1, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [4, 3, 3, 0, 0, 3], [0, 0, 0, 2, 2, 2, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1], [2, 5, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 6, 6, 6, 1, 23, 10, 4, 4, 7, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\ni2 += divInt(divInt(divInt(saveOrd(s2),len(in2)),( len(in0) + int(61.0) )),divInt(i1,( divInt(( mod(int(59.0),i0) + int(5.0) ),i0) * mod(min(int(9.0), i2),i0) )))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [0, 1], [0, 0], [], [1], [], [0], [], [1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [3, 1, 6, 8, 0, 9, 9, 5, 0, 6, 6, 1, 1, 4, 1, 7, 7, 6, 3, 6, 0, 8, 0, 1, 6, 8, 9, 5, 7, 4, 7, 7, 9, 6, 1], [2, 0, 1, 2, 2, 0, 1, 1, 1, 0, 0, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 0, 1, 0, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3, 0, 2, 1, 2, 3, 1, 0, 2, 1, 2, 3, 2, 1, 0, 3, 0, 3, 1, 0, 2, 3, 3, 0, 0, 3, 2, 2, 0, 3, 0, 1, 3, 1, 3, 2, 1, 1, 3, 3, 0, 3, 3, 2, 2, 3, 1, 3, 0, 1, 0, 0, 2, 0, 1, 1, 2, 3, 3, 1, 0, 1, 0, 3, 1, 2, 2, 0, 2, 2, 2, 0, 2, 3, 3, 1, 2, 0, 2, 3, 1, 2, 2, 1, 1, 0, 3, 3, 1, 0, 3, 2, 2, 1, 1, 3, 0, 0, 1, 3], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [4, 3, 3, 0, 2, 2, 1, 4, 1, 1, 4, 4, 4, 0, 1, 2, 4, 0, 0, 0, 1, 0, 1, 2, 3, 3, 1, 1, 4, 2, 1, 4], [0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [0, 5, 3, 2, 4, 5, 3, 5, 0, 5, 2, 4, 4, 0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 3, 4, 4, 2, 1, 3, 2, 2, 1, 0, 0, 4, 1, 3, 1, 3, 0, 1, 0, 3, 2, 2, 3, 1, 0, 2, 2, 2, 4, 0, 4, 0, 4, 2, 4, 0, 1, 4, 0], [0, 3, 2, 3, 0, 1, 2], [4], [0, 0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0], [0, 0, 2, 3, 2, 2, 3, 0, 0, 2, 2, 3, 0, 2, 3], [11, 24, 17, 11, 11, 13], [], [0, 1, 9, 3], [31, 27, 26, 11, 10]], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 9, 9, 4, 1, 20, 5, 5, 1, 4, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\ni2 = saveOrd(s0[( divInt(len(in2),mod(len((in0 + (s2[:int(3.0)][int(1.0):] + in1))[i0:int(6.0)]),int(8.0))) + int(09.0) ):min(i1, divInt(int(9.0),divInt(abs(int(50.0)),i2)))])\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1], [3, 3, 5, 8, 8], [0, 0, 1, 0, 2], [1], [1, 2, 2, 1, 2, 1, 0, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [0, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 10, 4, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(3.0) \\le ( divInt(int(3.0),mod(int(58.0),i0)) + ( i0 + int(8.0) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [1, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 1], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [8, 1, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 2, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1, 1], [2, 3, 3, 2, 2, 3], [0], [0, 1, 0, 0, 1], [0, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 0, 0, 17, 6, 6, 1, 5, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(divInt(mod(len(s0),divInt(len(in2),int(81.0))),int(0.0))) \\le ( int(8.0) + abs(divInt(mod(abs(int(7.0)),int(83.0)),len(in0))) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 4, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 1, 3, 2, 4, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 6, 0, 24, 8, 3, 6, 2, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(s1) + divInt(saveOrd((in0 + (s2[:( ( i0 + int(3.0) ) + int(7.0) )][int(4.0):i0] + in1))[divInt(int(8.0),i1):int(7.0)][i0:]),( i2 * int(7.0) )) ) - ( i1 * int(1.0) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [0, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le ( divInt(saveOrd(s2),divInt(len(in2),( ( i0 + int(3.0) ) + int(7.0) ))) * int(4.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1], [3, 1, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [0, 3, 4, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 14, 4, 4, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( ( len(s2) - divInt(saveOrd(in2),min(( i0 + int(3.0) ), int(1.0))) ) + int(4.0) ), int(8.0)) \\le int(7.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 2, 6, 8, 2, 3, 7], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 2, 3, 1, 1, 1, 3, 0, 1, 1], [0, 1, 1, 0], [4, 3, 3, 3, 2], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 1, 0, 16, 4, 5, 2, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(len(in2),divInt(len(in2),int(3.0))) + ( len((s2 + (in1[int(2.0):int(6.0)][int(8.0):] + in2))[abs(i2):int(2.0)]) + int(37.0) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 0, 1, 1], [0, 1], [2], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 9, 0, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 1, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 2, 3, 2, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1, 1], [4, 3, 3, 2, 2, 3], [0], [1, 0, 0, 0, 1], [2, 5, 3, 3, 4, 1, 1, 3, 3, 2], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le int(39.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [1], [], [0], [], [1, 1, 1, 1, 1], [3, 2, 5, 2, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 2, 1, 1, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 0, 0, 0, 1], [2, 6, 6, 8, 6, 0, 2, 4, 3], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 5, 0, 1], [1], [], [4, 2, 2, 0, 0, 4, 4, 3, 0, 4, 4, 1], [0, 0, 0, 3, 3], [1, 2], [2, 0], [3], [5], [], [], [14]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 1, 0, 11, 1, 4, 1, 0, 3, 1, 0, 12, 5, 2, 2, 1, 0, 0, 0, 1], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(in0[int(26.0):len(in2)][len(getCharFromString(getCharFromString((s0 + \"\"+\"\".strip().rstrip()), ( int(6.0) + abs(i0) )), int(8.0))):], int(6.0))) \\l int(0243.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [2, 2, 1, 2, 2, 3, 2, 0, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 5, 1, 3, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( divInt(int(3.0),divInt(( saveOrd(s2) + ( i0 + i0 ) ),int(2.0))) + int(5.0) ) \\le int(8.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [2], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [1, 0, 1, 0, 2], [1], [3, 2, 1, 3, 0, 0, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 2, 0, 6, 1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not saveOrd(s2) \\le ( int(3.0) + max(i1, i0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [2], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 0, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 4, 4, 4, 0, 16, 6, 2, 3, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not saveOrd(s2) \\le ( divInt(i0,mod(min(( ( i0 + int(3.0) ) + int(7.0) ), int(5.0)),i1)) + divInt(int(8.0),i0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 4, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 6, 0, 28, 10, 5, 4, 6, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(len(s1),mod(divInt(len(in2),int(8.0)),i2)) + int(13.0) ), min(( divInt(divInt(int(8.0),i2),int(7.0)) + i1 ), ( i0 + int(1.0) ))) \\le mod(( int(8.0) * int(16.0) ),min(i2, i1))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [2, 1], [0, 0], [0], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 0, 2, 2, 3, 3, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1 in in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 0, 1, 0, 1], [8, 1, 5, 8, 7, 9, 7], [1, 1, 1, 0, 2], [1], [3, 2, 2, 3, 2, 2, 3, 1, 1, 1, 1, 1, 2, 2, 1, 0, 1, 3, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [1, 5, 3, 2, 4, 5, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 0, 0, 12, 4, 3, 1, 3, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(max(mod(divInt(len(in2),int(8.0)),int(1.0)), int(5.0)),int(87.0)) + int(97.0) )\\nin0 = s2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1, 2, 2, 1, 1, 2, 1], [2, 2, 0], [0, 1, 0, 1, 2], [], [0, 0], [], [], [3, 3], [4, 4, 2, 1], [1, 1], [0, 0, 0, 0], [], [3, 1], [0], [1], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 2, 7, 8, 3, 5, 5, 1, 4, 0, 4, 3, 3, 3, 4, 1, 3, 3, 2], [2, 2, 1, 0, 2, 2, 1, 2, 0, 2, 1, 0, 2, 2, 2], [1, 0], [3, 2, 2, 3, 2, 1, 0, 1, 0, 1, 1, 0, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 3, 3, 2, 1, 1, 0, 0, 0, 0, 1, 3, 2, 1, 2, 1, 3, 0, 0, 1, 0, 0, 3, 1, 3, 2, 1, 3], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [1, 3, 3, 0, 0, 3, 2, 1, 1, 2, 4], [2, 0, 0, 2, 1, 2, 0], [0, 0, 1, 0, 0, 1, 1, 1], [2, 1, 3, 4, 4, 0, 5, 2, 0, 3, 4], [1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [3], [], [], [], [26]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 10, 3, 2, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(len(s2),divInt(int(8.0),i2)) * int(2.0) ), i2) \\le int(7.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [2, 1], [0, 0], [0], [], [], [], [], [0, 1, 1, 1, 1, 1], [1, 0, 6, 8, 8, 8], [0, 1, 2, 0, 2], [0, 1], [3, 2, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1, 2, 3], [1], [], [2, 0, 3, 0, 0, 4, 4, 2, 3, 0, 3, 2, 4, 4, 4, 0, 0], [0, 1, 1, 2, 3], [0], [2, 0, 1], [], [5], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 1, 0, 12, 2, 4, 0, 2, 6, 0, 0, 17, 5, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0[saveOrd((in2 + in1)):] in getCharFromString(saveChr(divInt(len((s1 + (saveChr(len(s2.lstrip().capitalize()))[:divInt(int(10.0),abs(i0))] + in0))[int(6.0):int(8.0)]),int(8.0))), int(8.0))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 653}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [2, 1], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1], [2, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 4, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0 in in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [5, 2, 6, 8, 3, 5, 5], [2, 2, 1, 2, 0], [0], [3, 3, 0, 3, 3, 0, 1, 2, 0, 1, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1], [2, 1, 3, 2, 0, 3, 1, 0, 1], [0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 7, 0, 4, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(i2, len(getCharFromString(in1, abs(i2))))) \\l int(52.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 1, 6, 8, 5], [2, 0, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1], [0, 3, 1, 0], [1, 0], [0, 1, 0], [0, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 12, 3, 3, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( divInt(len(s0),mod(max(int(3.0), int(1.0)),i2)) - int(6.0) ), int(8.0)) \\le int(5.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [0, 2, 2, 3, 2, 3, 3, 2, 0, 1, 2, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le ( divInt(saveOrd(s0),mod(len(in2),len(in0))) + ( i0 + int(3.0) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 3, 8, 8], [0, 0, 1, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 2, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 5, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(3.0) \\le ( divInt(saveOrd(s2),divInt(len(in2),( ( i0 + int(7.0) ) + abs(int(3.0)) ))) + i0 )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [1, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [0, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 10, 3, 3, 0, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(mod(mod(len(s0),divInt(len(in2),int(31.0))),int(0.0)), i0) \\le int(8.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 1, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s2) \\le ( divInt(len(in2),divInt(( ( divInt(int(3.0),int(7.0)) + int(5.0) ) + int(8.0) ),i0)) + ( int(8.0) * i1 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 2, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( divInt(len(s2),divInt(abs(( ( i0 + int(3.0) ) + int(7.0) )),int(4.0))) + i0 )) \\le divInt(int(8.0),i1)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 4, 7, 8, 3, 5], [1, 1, 1], [0], [3, 3, 2, 0, 3, 3, 1, 2, 0, 0, 1, 1, 3, 3], [0, 1, 1], [2, 1, 3, 0, 0, 3], [1], [0, 0, 0, 0, 0], [4, 5, 3, 0, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 11, 2, 4, 1, 1, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( i1 - len(in1) ), min(int(44.0), divInt(i1,i1)))) \\l int(7.0)\\nin2 = in0\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [8, 1, 5, 8, 7, 6, 9, 8, 6, 0, 1, 1, 0, 9, 4, 6, 0], [2, 0, 1, 0, 0, 1, 1], [1], [1, 2, 2, 3, 2, 2, 3, 1, 0, 3, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 0, 3, 1, 0, 3, 1, 0, 1, 1, 2, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [4, 3, 1, 0, 0, 3, 1], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 4, 4, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 3, 0, 18, 6, 3, 4, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(8.0) \\l ( ( saveOrd(s1) + divInt(( len(in2) + int(1.0) ),i2) ) + max(int(5.0), ( int(8.0) * mod(int(7.0),i0) )) )\\nb1 = int(6.0) \\le i1\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 0, 3, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [2, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [3, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 7, 2, 3, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(mod(i0,len(in0))) \\le mod(len(in2),int(01.0))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1], [1, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [0, 1, 1, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\l int(106.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1, 0, 1], [1], [0, 2, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [6, 5, 6, 8], [1, 1, 2, 0, 2], [0, 1], [2, 1, 3, 3, 0, 3, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 1, 3, 1, 4], [0, 1, 1], [0, 1, 0], [3, 4, 5, 1], [1], [], [2, 2, 3, 0, 0, 1], [0], [4], [2, 0], [0], [5], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 11, 1, 4, 0, 1, 2, 1, 0, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = divInt(int(6.0),saveOrd((in0 + in1)[max(i1, len(\"\"F\"\")):max(i1, int(5.0))][int(6.0):])) \\l int(8.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [], [1, 2, 2, 0, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 4, 0], [0, 0], [0, 1, 0], [0, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 8, 3, 1, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(3.0) \\le ( divInt(i2,mod(saveOrd(s0),int(1.0))) + int(6.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 1, 5, 9, 5, 9, 1, 3, 9, 2, 9, 5, 9], [2, 1, 1, 0, 2, 0, 0, 0, 2, 2, 1], [1], [3, 2, 2, 3, 0, 2, 3, 0, 2, 0, 2, 2, 1, 2, 1, 0, 1, 0, 0, 3, 2, 0, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0], [4, 2, 3, 0, 0, 3], [0, 0, 0, 2, 2, 0, 0, 0, 1], [0, 0, 0, 0, 0], [2, 5, 3, 2, 1, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 6, 1, 18, 7, 3, 6, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( abs(i2) + divInt(len(in2),i1) ) + ( i1 + ( ( int(6.0) * divInt(int(1.0),i0) ) * int(59.0) ) ) )\\ni2 += i0\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 0, 1, 1], [0, 2, 2, 1, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 0, 8, 3, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [0, 0, 2, 3, 2, 3, 1, 1, 0, 1, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 0, 2, 3], [2], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 3, 3, 2], [1], [0, 0], [0, 1, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le i2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 0, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 1, 2, 4], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 11, 2, 5, 2, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(i2) \\le ( len(in0) + ( len(getCharFromString(in2, max(abs(i1), int(24.0)))) - i1 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [0, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\l int(16.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [1, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 6, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [1, 2, 1, 1], [1], [3, 3, 2, 3, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [2, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [1, 5, 3, 2, 4, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 8, 2, 4, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(s1)) \\le mod(len(in2),mod(abs(int(3.0)),int(1.0)))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [0, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le ( divInt(saveOrd(s2),divInt(len(in2),( ( i0 * int(3.0) ) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [0, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 6, 0, 28, 10, 5, 5, 5, 6, 0, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( ( len(in2) + divInt(mod(len(in0),int(8.0)),i2) ) + int(138.0) )\\ns2 = (s2 + in2)[min(( divInt(divInt(int(7.0),i2),int(1.0)) + i1 ), ( i0 * int(8.0) )):divInt(( int(16.0) - int(5.0) ),min(i2, i1))]\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [8, 1, 5, 8, 7, 2, 6, 8, 4, 3, 1, 8, 2], [2, 2, 1, 0, 2, 2, 2], [0], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [4, 1, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 7, 1, 27, 10, 3, 5, 5, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(max(mod(divInt(min(int(8.0), i2),int(1.0)),int(5.0)), ( divInt(divInt(int(8.0),i2),int(7.0)) + i1 )),( i0 + int(26.0) )) + ( ( int(84318.0) * int(2.0) ) - i2 ) )\\ni2 = i2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [0, 2, 2, 3, 2, 0, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 4, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 12, 4, 2, 2, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i2 \\le ( divInt(saveOrd(s0),mod(i0,len(in2[( i2 + int(3.0) ):int(7.0)]))) + int(4.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [2, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 4, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [4, 0, 3, 0, 0, 4, 2, 0], [0, 0], [], [2], [], [5], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 9, 2, 3, 0, 2, 4, 0, 0, 8, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = divInt(int(1.0),saveOrd(getCharFromString(in0, saveOrd((in2 + in1))))) \\le mod(int(66.0),len(getCharFromString(s1[i0:], int(8.0))))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 0, 1], [3, 1, 6, 8, 7, 5], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3, 3, 0], [0, 1, 1, 0], [4, 3, 4, 0, 3], [0, 0], [0, 1, 0], [0, 5, 5, 2, 4, 5], [1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 1, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 2, 0, 15, 3, 5, 1, 2, 6, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) != ( divInt(len(getCharFromString(in2, mod(saveOrd((in2 + (s2[int(3.0):][:int(1.0)] + in1))[i2:int(6.0)]),int(8.0)))),int(75.0)) + min(len(in2), i0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 1, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [4, 2, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\g int(6.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [1, 1], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [5, 6, 5, 8, 7, 9, 1, 2, 6, 7, 4, 4, 1, 3, 3, 0, 2, 1, 6], [1, 0, 1, 2, 1, 2, 0, 0, 1], [0], [3, 3, 2, 2, 2, 3, 0, 2, 0, 1, 3, 1, 3, 1, 0, 0, 2, 2, 2, 1, 0, 2, 2, 1, 1, 2, 1, 2, 2, 0, 0, 0, 3, 1, 3, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [3, 1, 0, 2, 2, 1, 2], [0, 1, 1, 0, 2, 1, 0], [0, 0, 0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 19, 19, 9, 1, 37, 12, 7, 7, 5, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(getCharFromString(in1, max(divInt(divInt(( min(i1, divInt(i0,int(5.0))) + abs(int(6.0)) ),abs(int(5.0))),i1), i2))) \\g ( ( ( int(8.0) - i1 ) - ( ( int(7912.0) + int(67.0) ) * ( int(4.0) - mod(divInt(i2,i0),i0) ) ) ) + max(int(4.0), abs(int(133.0))) )\\ni1 = int(0216.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 0], [2], [0, 0], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [8, 1, 5, 8, 7, 6, 6, 8, 6, 0, 1, 1, 0, 9, 3, 6, 0], [2, 0, 1, 0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 3, 1, 2, 2, 2, 1, 0, 1, 0, 0, 0, 1, 2, 3, 0, 3, 1, 0, 3, 1, 0, 1, 1, 2, 1, 1], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0, 4, 1], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0, 0], [1, 3, 3, 2, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 1, 0, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 5, 0, 20, 7, 4, 2, 5, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) != divInt(( len(in0) + divInt(divInt(len(in0),int(8.0)),i2) ),min(int(1.0), ( divInt(divInt(int(5.0),i0),int(8.0)) + i1 )))\\nb1 = i0 \\le i2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 669}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 3, 0, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 0, 2, 4], [1, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\ge i2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 7, 8, 8], [0, 0, 1, 0, 2], [1], [1, 2, 2, 3, 2, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 0, 2, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 16, 6, 2, 3, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(3.0) \\le ( divInt(saveOrd(in1),divInt(( min(( i0 + int(3.0) ), int(7.0)) + int(8.0) ),i0)) + divInt(int(8.0),i1) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 2, 3, 0, 2, 4], [2, 1], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 11, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(abs(( len(s1) * ( min(abs(saveOrd(in2)), i2) - int(24.0) ) ))) \\le i1\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 2, 1, 3, 2, 1, 0, 1, 0, 2, 0, 1, 3, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 1, 0, 0, 2], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 5, 0, 23, 7, 6, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\ge ( divInt(len(in2),mod(max(min(( i0 + int(3.0) ), ( int(0.0) + min(divInt(int(5.0),i0), int(8.0)) )), i1),( i0 + int(8.0) ))) * abs(i2) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 3, 4, 3, 7, 7, 3, 5, 9, 3], [0, 1, 2, 0, 2, 0, 1], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [3, 5, 4, 1, 0], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 7, 1, 24, 6, 4, 4, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le ( ( len(getCharFromString(in2, divInt(len((in1 + (s1[min(( i0 - int(3.0) ), int(3.0)):int(4.0)][int(3.0):int(7.0)] + s0))[int(7.0):i1]),int(3.0)))) + i2 ) + mod(divInt(int(593.0),i0),i2) )\\ni0 -= i1\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [0, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 7, 3, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( divInt(len(s2),divInt(len(in2),( ( i0 + int(3.0) ) + int(7.0) ))) + divInt(i0,( int(7.0) * i1 )) ), int(8.0)) \\le i0\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [3, 1, 5, 4, 8, 7, 4, 7], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 0, 0, 1, 1], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 3, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s2) \\le ( divInt(len(in2),mod(min(( ( i0 + int(31.0) ) + int(5.0) ), int(4.0)),i0)) + divInt(int(8747.0),i1) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 2], [0, 0], [4], [3], [1], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 4, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [1, 2, 3, 2, 4, 5, 0], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 1, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 4, 4, 2, 0, 13, 4, 3, 2, 2, 7, 0, 0, 12, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( mod(len(s2),divInt(saveOrd(in0),i0)) + ( int(3.0) + int(7.0) ) ) or (s2 + (in1[int(5.0):][:int(8.0)] + in2))[i0:].startswith(s0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [2, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [3, 3, 3, 0, 2, 4], [0, 1], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s1) \\le len(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 0, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 4, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(3.0) \\le ( divInt(saveOrd(s2),divInt(len(in2),( i0 + ( int(7.0) + int(5.0) ) ))) + int(8.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [3, 4, 7, 8, 3, 5], [1, 1, 2, 2, 1, 1, 2, 2, 1, 0, 0], [0], [3, 3, 0, 0, 2, 3, 1, 2, 3, 0, 3, 1, 3, 2, 0, 0, 0, 2, 0, 3, 3, 0, 1, 2, 0, 2, 0, 0, 1], [0, 1, 1, 1, 0, 1], [2, 1, 3, 0, 2, 3, 2, 1], [0, 1], [0, 1, 0, 0], [4, 5, 3, 4, 4, 5, 4], [], [], [3, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 11, 0, 29, 6, 8, 2, 4, 7, 0, 0, 13, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(i1, i1)) \\l ( len((in1 + in2)) + int(34.0) )\\nin0 = (in1 + (in1[divInt(min(i2, abs(int(7.0))),len(in2)):mod(i2,i1)][:i1] + getCharFromString(in1, divInt(i2,abs(max(i2, int(8.0)))))))[( i1 - divInt(i0,i0) ):int(3.0)]\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 1, 3, 8, 7], [2, 2, 1, 0, 2], [0], [3, 3, 2, 3, 2, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 1], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 11, 3, 4, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(s0)) \\le ( len(in2) + divInt(mod(min(int(8.0), i2),int(1.0)),int(3.0)) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1, 2, 2, 1, 1, 2, 1], [2, 2, 0], [0, 1, 0, 1, 2], [0], [0, 0], [], [], [3, 3], [4, 4, 2, 1], [1, 1, 0, 1, 0, 1], [0, 0, 0, 0], [], [3, 1], [0], [1], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 9, 7, 8, 3, 5, 5, 1, 4, 0, 4, 3, 3, 3, 4, 1, 3, 3, 2], [0, 1, 2, 0, 2], [1, 0], [0, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 2, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3, 2, 1, 1, 2, 4], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0, 0, 1, 1, 1], [2, 5, 3, 4, 5, 0, 5, 2, 0, 3, 4], [1], [], [0, 4, 4, 2, 3, 0, 3, 2, 2, 0, 0, 3, 0, 1, 0, 0], [0, 3, 2], [4], [2, 0, 2], [3], [], [], [], [26]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le saveOrd(s2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 1, 2], [], [0], [], [], [3], [4, 4], [0, 1], [0, 0], [], [1], [], [0], [1], [1, 1, 1, 1], [8, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 4, 1, 4, 0], [0, 2], [], [2], [0], [5], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 2, 4, 8, 7, 7], [2, 0, 1, 0, 2], [1], [3, 2, 2, 3, 3, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [3, 3, 3, 0, 0], [0, 2, 0, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 3, 5, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s2) \\le ( ( len(in2) + len(in0) ) * min(min(mod(i2,int(3.0)), int(2.0)), int(4.0)) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 1, 2, 3, 2, 3, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 0, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) != int(8.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [2, 0, 2, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [4, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 9, 3, 2, 0, 3, 3, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = divInt(i0,mod(saveOrd(getCharFromString(in0, divInt(int(1.0),len((in2 + in1))))),i1)) \\le int(6.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1, 0, 1], [1, 2, 1, 0], [2], [0, 0, 1], [], [0, 0], [], [], [3, 1, 3], [0, 4], [0, 1, 0, 1], [0, 0], [], [2, 0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [8, 1, 5, 8, 7, 6, 6, 8, 6, 0, 1, 1, 0, 9, 4, 6, 0], [1, 0, 1, 0, 1, 1, 1], [1], [3, 0, 2, 3, 1, 2, 3, 3, 0, 3, 1, 1, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 0, 3, 1, 0, 3, 1, 0, 1, 1, 2, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [4, 3, 3, 0, 0, 4, 1], [0, 0, 0, 2, 2, 2, 0], [0, 1, 0, 0, 0], [1, 5, 3, 2, 2, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 4, 4, 1, 3, 0, 1, 0, 0, 3, 2, 4, 2, 0, 2, 0, 0, 0, 5, 5, 4, 1, 17, 4, 5, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not saveOrd(s1) \\l i1\\nloopBreak% = 0\\nwhile b1:{:\\nres0 = ( len(in2) + int(8.0) ) \\le ( len(in0) + min(i0, min(int(1.0), int(5.0))) )\\ni1 += divInt(mod(int(8.0),i0),int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 4, 8, 7, 7], [0, 2, 1, 0, 2], [0], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [0, 3, 3, 0, 0], [1, 0, 1, 0, 2, 1], [1, 1, 0], [5, 2, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 1, 15, 4, 4, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( ( len(in2) - mod(len(s2),min(( i0 + int(1.0) ), int(3.0))) ) - int(4.0) ), i2) \\le int(8.0)\\ni1 = int(7.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [3, 2, 6, 8, 1, 9, 6], [2, 0, 1], [], [3, 2, 2, 1, 1, 2, 2, 2, 3, 1, 1, 1, 3], [0, 1, 1, 0, 1], [4, 3, 3, 0], [0, 0], [1, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 0, 0, 12, 5, 2, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(int(32.0),int(68.0)) + mod(( divInt(len(in2),int(1.0)) + int(9.0) ),int(6.0)) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [3, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [1, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [2, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [3, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], [12]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 9, 3, 3, 0, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(mod(mod(len(in0),divInt(len(in2),int(3.0))),int(1.0))) \\ge i0\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 0, 0], [0, 0], [], [3, 2, 0], [0], [], [], [1, 1, 1, 1, 1], [3, 9, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [0, 2, 2, 3, 2, 2, 3, 2, 0, 1, 0, 1, 0, 2, 1, 2, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 1], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 1, 4, 1, 0, 3, 1, 0, 0, 4, 4, 5, 0, 18, 7, 2, 3, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( i0 \\le ( divInt(saveOrd(s0),mod(divInt(max(( i0 + int(3.0) ), i1),int(9.0)),i0)) + mod(int(5.0),( int(8.0) + i2 )) ) and not b1 )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [4, 4], [0, 1], [0, 0], [], [1], [], [0], [], [1, 1, 1, 1], [1, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [5], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [1, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0], [3, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 1, 13, 4, 4, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s2) \\le ( divInt(len(s0),mod(len(in0),min(( i1 - int(3.0) ), int(3.0)))) + int(4.0) )\\ni0 += int(8.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1, 0, 1], [1], [0, 2, 1], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [6, 5, 6, 8], [1, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 0, 3, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 1, 3, 1, 4], [0, 1, 1], [0, 1, 0], [3, 4, 5, 1], [1], [], [2, 0, 3, 4, 0, 1, 4], [0, 1], [], [2], [0], [5], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 9, 0, 5, 0, 0, 2, 1, 0, 7, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(6.0):]) \\g max(len((getCharFromString(in1, i1) + \"\"F\"\")), max(saveOrd(saveChr(i1)), int(5.0)))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [8, 8, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4], [2, 2, 1, 0, 2, 1, 0], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [0, 1, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 0], [1, 3, 0, 2, 2, 5, 2], [], [], [0, 0, 0, 2, 3, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 4, 3, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in0),mod(divInt(len(s0),int(8.0)),i2)) + int(83.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [0, 2, 2, 3, 2, 2, 2, 2, 0, 1, 1, 2, 0, 2, 3, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 2, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 18, 8, 2, 5, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le ( divInt(saveOrd(s2),divInt(( ( divInt(i0,int(3.0)) + int(7.0) ) + ( i1 + ( len(in2) * i0 ) ) ),int(7.0))) - i2 )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [1], [], [0], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 1, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [0, 3, 3, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 4, 5, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( divInt(len(s0),mod(len(in2),min(( i2 + int(3.0) ), int(7.0)))) + int(4.0) ), min(i0, int(8.0))) \\le int(7.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 4, 8, 8], [0, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [4, 3, 3], [0, 1], [0, 1, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2) != len(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 684}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 5, 6, 8], [2, 0, 1], [], [3, 2, 1, 3, 2, 3, 1, 2, 0, 1, 1, 1, 3], [0, 1, 1, 1], [3, 3, 3, 0], [0, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s0) \\le ( int(3.0) + len(in2) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [0, 1, 0, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 2], [0, 0, 0, 2, 2, 2, 0, 0, 1], [0, 1, 0], [3, 5, 4, 1], [1], [], [4, 0, 3, 0, 0, 4], [0], [], [2], [], [5], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\l int(26.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [6, 4, 8, 8], [2, 0, 2, 0, 2], [1], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3], [0, 0, 1], [2, 3, 3, 1, 0, 1, 3], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 70, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 2, 7, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\ge ( len(in2) + ( max(min(max(i2, int(64.0)), i0), int(8.0)) - len(in0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 810}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 1, 0], [2], [0, 1, 0], [], [0, 0], [], [], [3, 2], [5, 4, 1], [1, 1, 1], [0, 0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [3, 1, 6, 8, 1, 4, 4, 7, 1, 9, 2, 4, 5, 6], [2, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3, 1, 3, 0, 1, 3, 2, 1, 0, 0, 1], [0, 1, 1, 0], [4, 3, 3, 0, 3, 2], [0, 1, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 71, "mapping_values": [1, 4, 4, 1, 3, 0, 1, 0, 0, 2, 3, 3, 3, 0, 0, 0, 0, 0, 14, 14, 5, 1, 23, 4, 6, 3, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) != ( divInt(len(in2),mod(len(in0),int(3.0))) + int(1.0) ):{:\\nres0 = i2 \\le int(6.0)\\ni0 -= int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = int(1.0) \\g min(int(447.0), len((s2 + (in1[:i1][int(1924.0):abs(( int(5.0) - i0 ))] + in2))[i2:int(6.0)]))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 684}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0, 0], [], [], [3], [0, 4], [0, 1], [0, 0], [], [2], [], [], [1], [0, 1, 1, 1], [8, 8, 6, 8], [2, 2, 1], [0, 1], [3, 1, 3, 3, 2, 3, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 0, 0], [0], [0, 1, 0], [3, 5, 0, 1], [1], [], [2, 0, 3, 0, 0, 1], [0], [], [2], [0], [25], [], [], []], "fitness": 84, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not saveOrd(in0[int(88.0):]) \\l len((in2 + s0))\\n", "test_case_results": [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "other_info": {}, "test_fitness": 707}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1], [1, 1, 6, 8], [2, 0, 1], [], [3, 3, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 4, 0], [0, 0], [0, 1, 0], [0, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 85, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\g len(in2)\\n", "test_case_results": [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], "other_info": {}, "test_fitness": 698}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 3, 0], [0, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 88, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\g ( divInt(len(in2),mod(len(in0),int(3.0))) + ( i2 + int(1.0) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 704}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 4, 8, 8, 6, 5, 7], [0, 1, 1, 1, 2, 0, 2, 0, 0], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 2, 3, 3, 3, 3, 2, 3, 0, 0, 1, 1, 3, 2, 1, 0, 0, 2, 2, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1], [2, 1, 3, 0, 0, 1, 3, 4, 1, 4, 4, 4], [0, 1, 0, 2], [0, 1, 0], [3, 5, 3, 2, 4, 5, 4], [1, 1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 0, 4, 1, 0], [0, 3, 2], [4], [0, 0, 0], [2, 0], [16], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 9, 0, 34, 7, 12, 4, 3, 7, 2, 0, 16, 2, 1, 3, 2, 1, 0, 1, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(\"\"5\"\") + ( min(min(max(i0, int(24.0)), i1), divInt(len(in0),saveOrd(in2))) - max(saveOrd((in0 + (s2[( saveOrd(in1) + i1 ):i1][int(8.0):int(8.0)] + getCharFromString(in2, saveOrd(\"\"Q\"\".rstrip(in1)))))[mod(int(6.0),i2):i0]), ( divInt(int(5.0),int(7.0)) * i2 )) ) ), i0)) \\l i0\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [0, 0], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [0], [1], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"B\"\") \\le ( divInt(len(s0),divInt(len(in2),( ( i0 + int(6.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 6, 8, 9, 3, 5, 9, 9, 1, 1, 2, 9, 0, 5, 0, 5, 6, 3, 0, 2, 3, 4, 3, 1, 5, 4, 5, 1], [2, 0, 1, 1, 2, 0, 0, 1, 1, 2, 0, 2, 1, 1, 1, 1, 0, 0, 1], [1], [3, 2, 2, 3, 1, 3, 2, 1, 2, 1, 1, 1, 3, 3, 2, 3, 1, 2, 2, 0, 1, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 2, 3, 2, 1, 3, 0, 2, 3, 2, 3, 0, 2, 3, 1, 1, 1, 1, 1, 1, 0, 2, 0, 2, 3, 1, 3, 0, 3, 2, 3, 3, 3, 3, 3, 0, 3, 1, 2, 0, 3, 3, 0, 0, 2, 2, 0, 3, 2, 0, 1, 0, 1, 0, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0], [4, 3, 3, 0, 4, 0, 4, 0, 4, 1, 2, 3, 4, 4, 4, 1, 4, 0, 2, 3, 3, 2, 3, 1, 4, 1], [0, 1, 1, 2, 1, 2, 2, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], [0, 5, 3, 2, 4, 5, 2, 4, 3, 4, 3, 1, 4], [1, 0, 1, 1, 1, 1, 1, 1, 1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 1, 2, 0, 4, 1, 1, 4, 2, 4, 2, 0, 2, 0, 2, 1, 2, 1, 0, 3, 4, 1, 4, 4, 0, 4, 2, 4, 2, 3, 4, 3, 2, 4, 0, 2, 4, 2, 0, 1, 0], [0, 3, 2, 3, 2, 1, 3, 2, 0, 2, 1, 3], [4, 3, 0, 4], [0, 0, 2, 0, 2, 0, 0, 1, 2, 1, 0, 2, 2, 1], [2, 1, 2, 1, 3, 3, 3, 1, 3], [], [0, 24, 11], [6, 1], [17, 12, 10, 7]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 29, 29, 19, 1, 96, 25, 26, 10, 16, 13, 9, 0, 52, 12, 4, 14, 9, 0, 3, 2, 4], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(len(getCharFromString(in2, int(3.0))),len((in0 + (s2[mod(int(1.0),divInt(int(6.0),int(8.0))):][int(9.0):min(saveOrd(in1), divInt(min(int(3.0), divInt(divInt(i2,int(5.0)),divInt(i0,mod(int(9.0),i1)))),divInt(saveOrd(\"\"6\"\"),int(9.0))))] + \"\"a1\"\"))[i1:min(int(11.0), divInt(saveOrd(in2[( int(2.0) + max(i2, divInt(abs(( len(\"\"y\"\".rstrip(\"\".\"\")) - i0 )),divInt(saveOrd(s2[int(9.0):int(0.0)].lstrip(in1[int(5.0):int(0.0)])[int(5.0):].capitalize()),int(6.0)))) ):i0]),mod(i1,( saveOrd(\"\")\"\"[:int(3.0)]) - saveOrd(\"\"\"\\\\\"\"\"[i1:]) ))))])) * max(( saveOrd(in0) - min(abs(len((\"\"l\"\".capitalize() + saveChr(len(in1.lstrip()))))), i2) ), abs(int(02.0))) )\\ni0 *= ( i2 * len(getCharFromString(((saveChr(max(i1, i1))[( ( i1 + saveOrd(in0) ) - mod(i1,int(3.0)) ):] + s1[:i0].rstrip(\"\"$\"\")[int(4.0):]).capitalize() + in1)[i0:max(divInt(mod(i1,int(3.0)),int(1.0)), int(5.0))], int(4.0))[:( int(5.0) - int(1.0) )].capitalize()) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 0, 3, 3, 3, 2, 1, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [0, 0, 1], [], [0, 1, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [3, 1, 3], [], [12], [], [14, 5]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 1, 3, 0, 2, 0, 0, 0, 3, 0, 1, 0, 2], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( i0 + len(\"\"+m\"\"\") )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 8, 8, 4, 9, 0, 2, 0, 8, 8], [1, 1, 1, 2, 0, 2], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3, 3, 3, 2, 3, 3, 1, 2, 2, 1, 3, 1, 1, 1, 2, 0, 3, 0, 1, 0, 1, 3, 1, 0], [0, 0, 1, 0, 1, 0], [2, 3, 3, 4, 1, 4, 2, 4, 0, 4, 1, 3, 1, 0], [0, 1, 1, 0], [0, 1, 0], [3, 5, 3, 2, 4, 5, 3, 3, 0], [0, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 2, 0, 2, 2, 0, 0, 4, 1], [0, 3, 2], [4], [0, 2, 2, 2, 0, 0], [3, 0], [24], [], [], [30]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 6, 0, 36, 6, 14, 4, 2, 9, 2, 0, 20, 1, 0, 6, 2, 1, 0, 0, 1], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\le ( len(in2) + ( saveOrd(in0) - max(saveOrd((s2 + (in1[i1:][int(24.0):] + in2))[i1:int(8.0)]), abs(saveOrd((in0[min(divInt(saveOrd(in0[max(int(8.0), ( mod(int(4.0),len(s0)) - int(9.0) )):int(0.0)][int(2.0):( i1 + max(i2, int(0.0)) )]),i0), int(8.0)):] + getCharFromString(\"\"_Y\"\", min(int(8.0), i2)))))) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 0, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [2], [], [], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\g ( divInt(len(\"\"3\"\"),i0) * mod(len(in2),( i0 + int(3.0) )) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 8, 8, 8], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 1, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [0, 0, 0, 1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [0, 3, 3, 1], [22], [17], [], [9, 29]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 2, 4, 0, 3, 0, 0, 0, 4, 1, 1, 0, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + divInt(mod(len(\"\"W&^r\"\"),divInt(i0,int(3.0))),int(3.0)) ) + int(8.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 1, 2, 4, 5], [0, 1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [3, 1], [], [6], [], [4]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 2, 2, 0, 3, 0, 0, 0, 2, 0, 1, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( mod(len(in2),divInt(len(\"\"!g\"\"),( ( i0 + int(3.0) ) + int(7.0) ))) + int(4.0) ):{:\\nres0 = i0 \\le divInt(int(8.0),i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [2, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 0, 2, 1], [0, 0], [4], [3, 2], [1], [], [], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 3, 1, 8, 8, 8, 7, 1, 4, 3, 2, 5, 1, 7, 9, 6, 3, 0], [1, 0, 1, 0, 2, 0, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 0, 2, 2], [1], [3, 2, 2, 3, 2, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 3, 3, 3, 3, 1, 2, 1, 0, 0, 3, 0, 0, 1, 1, 1, 0, 3, 0, 2, 3, 0, 3, 3, 3, 2, 0, 2, 2, 1, 1, 2, 1, 0, 3, 0, 1, 0, 0, 0, 0, 2, 3, 3, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0], [4, 3, 3, 0, 0, 4, 0, 3, 0, 4, 0, 1, 0, 4, 4, 1], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 1, 0, 0, 0], [2, 5, 3, 2, 4, 5, 0, 5, 3], [1, 1, 1, 1, 0, 1, 0, 0, 1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 1, 2, 4, 1, 3, 1, 2, 2, 4, 2, 2, 0, 4, 4, 0, 4, 2, 4, 2, 4, 3, 1, 1, 0], [0, 3, 2, 0, 0, 1, 1], [4], [2, 0, 1, 0, 1, 1, 2, 0, 0, 1, 2], [0, 2, 2, 2, 0, 3, 0, 1, 0], [10, 5, 10, 22], [16], [2, 6, 5], [17]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 4, 1, 1, 2, 1, 0, 0, 18, 18, 20, 0, 66, 14, 16, 7, 7, 9, 9, 0, 36, 7, 1, 11, 9, 4, 1, 3, 1], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( not s2.startswith(in2[saveOrd((in0 + (s2[( divInt(len(in1),mod(( len(\"\"K\"\") + ( i1 + int(3.0) ) ),int(3.0))) + int(1.0) ):i0][:divInt(int(8.0),i1)] + \"\"2\"\"))[int(8.0):i0]):]) or ( i2 * int(871.0) ) \\le min(min(saveOrd(getCharFromString(\"\"6\"\", min(int(4.0), ( int(3.0) - i0 )))[:i0]), len((\"\"5\"\" + in2[i1:i2][int(2.0):int(5.0)].rstrip(getCharFromString(s0, int(1.0)).capitalize())[i0:][:min(i1, mod(saveOrd(getCharFromString(saveChr(i1)[:min(max(min(divInt(i1,divInt(divInt(int(7.0),int(9.0)),( int(6.0) * i0 ))), saveOrd(saveChr(i1)[int(3.0):])), i2), i0)], i0)),i2))]))), ( saveOrd((\"\"F.\"\" + \"\"KqW\"\")) + max(int(0.0), i2) )) ):{:\\nin2 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1], [1, 1, 5, 8, 7], [2, 2, 1, 0, 2], [1], [3, 2, 1, 3, 2, 1, 3, 0, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 1], [0, 1, 0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 1, 3, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [2], [], [], [7], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( int(1.0) + len(\"\"7\"\") )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [2, 1, 1, 1, 2, 1, 2, 0, 1, 2, 0, 0], [2, 1, 0, 1], [0, 1, 1, 0, 0, 1, 1, 2], [0], [0, 0, 0], [], [], [3, 1, 1, 0], [4, 4, 2, 4], [1, 1, 0, 0, 0, 1, 2, 0, 0, 0, 2, 0, 2, 1, 0, 2, 2], [0, 0, 0, 0], [1, 1, 2, 0, 3], [1, 2, 3, 3, 3, 3, 3, 0], [0, 0, 1, 1, 0], [1], [0, 0], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [3, 3, 5, 8, 8, 6, 1, 2, 4, 6, 5, 2, 6, 3, 3, 1, 8, 7, 4, 8, 6, 5, 9, 8, 4, 7, 0, 3, 0, 0, 1, 3, 0, 9, 3, 1, 1, 6, 6, 5, 0, 1, 0, 7, 7, 7, 1, 1, 6, 3, 5, 5, 7, 4, 9, 3, 3, 8, 3, 3, 8, 5, 3, 7, 8, 9, 8, 1, 6, 7, 5, 6, 5, 9, 7, 5, 6, 8, 2, 3, 3, 6, 8, 9, 7, 8, 7, 0, 2, 7, 7, 8, 4, 1, 8, 0, 5, 6, 7, 7, 1, 9, 8, 6, 7, 6, 0, 6, 2, 4, 2, 4, 6, 9, 4, 5, 5, 9, 4, 5, 7, 3, 6, 6, 1, 3, 5, 1, 5, 1, 3], [0, 0, 1, 0, 2, 1, 0, 0, 1, 0, 2, 1, 2, 2, 2, 0, 2, 0, 0, 2, 2, 0, 1, 0, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 0, 2, 1, 0, 2, 1, 1, 0, 0, 1, 2, 1, 1, 2, 0, 2, 2, 2, 2, 1, 2, 0, 0, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 1, 2, 0, 0, 1, 2, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 2, 0, 0, 0, 2, 2, 1, 1, 2, 2, 0, 2, 1, 1, 2, 2, 2, 2, 2], [1, 0, 1, 1], [3, 2, 2, 3, 2, 2, 3, 2, 0, 1, 1, 3, 0, 1, 1, 0, 1, 0, 2, 0, 1, 0, 3, 2, 0, 2, 1, 1, 1, 1, 0, 3, 3, 2, 3, 1, 3, 3, 0, 0, 1, 0, 1, 1, 2, 0, 3, 3, 2, 1, 1, 0, 1, 2, 3, 1, 2, 2, 3, 1, 1, 2, 0, 0, 2, 1, 0, 0, 0, 3, 3, 2, 0, 3, 2, 2, 0, 1, 1, 0, 1, 3, 0, 0, 1, 0, 2, 0, 2, 0, 3, 1, 2, 1, 3, 3, 2, 2, 0, 2, 3, 1, 1, 0, 0, 2, 3, 2, 0, 2, 1, 3, 1, 3, 3, 0, 0, 2, 1, 1, 2, 3, 2, 0, 1, 1, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 2, 3, 3, 0, 2, 2, 2, 0, 1, 3, 2, 3, 3, 3, 1, 3, 0, 1, 3, 3, 3, 0, 2, 3, 3, 1, 1, 0, 3, 0, 1, 3, 2, 0, 0, 0, 1, 3, 2, 3, 3, 0, 3, 1, 0, 1, 2, 1, 2, 1, 3, 0, 2, 1, 0, 0, 2, 3, 3, 1, 0, 3, 2, 2, 1, 3, 2, 2, 1, 3, 3, 0, 3, 2, 1, 2, 1, 0, 1, 0, 0, 1, 2, 0, 0, 3, 2, 1, 2, 2, 2, 3, 0, 0, 2, 1, 2, 2, 2, 1, 2, 3, 0, 3, 1, 1, 0, 0, 2, 2, 0, 3, 2, 2, 3, 3, 2, 1, 0, 0, 3, 0, 0, 2, 3, 3, 2, 1, 3, 1, 1, 3, 2, 2, 3, 2, 3, 2, 3, 3, 3, 0, 3, 1, 0, 2, 3, 2, 2, 1, 3, 1, 2, 1, 1, 0, 2, 3, 3, 1, 1, 2, 2, 3, 2, 2, 1, 3, 0, 3, 2, 3, 3, 0, 0, 3, 0, 3, 3, 0, 3, 2, 3, 1, 2, 3, 0, 2, 0, 0, 3, 3, 0, 0, 2, 1, 1, 1, 1, 2, 1, 2, 3, 0, 0, 2, 0, 3, 0, 0, 0, 2, 2, 2, 0, 3, 2, 3, 3, 1, 2, 3, 1, 3, 2, 2, 1, 0, 1, 2, 1, 2, 3, 3, 1, 3, 1, 3, 3, 0, 3, 3, 0, 3, 1, 2, 3, 0, 1, 1, 2, 1, 3, 3, 2, 0, 3, 3, 2, 1, 1, 3, 3, 2, 3, 0, 0, 1, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 0, 0, 3, 3, 2, 3, 2, 3, 1, 1, 1, 0, 1, 2, 3, 2, 2, 2, 3, 1, 1, 1, 2, 2, 2, 1, 2, 3, 0, 1, 2, 1, 0, 1, 3, 2, 1, 0, 3, 3, 0, 2, 2, 3, 3, 3, 3, 0, 3, 3, 0, 3, 3, 1, 3, 2, 0, 0, 0, 3, 2, 3, 3, 0, 0, 0, 0, 1, 2, 3, 1, 2, 3, 1, 0, 1, 1, 1, 1, 0, 1, 3, 3, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0, 0, 3, 0, 1, 1, 2, 0, 3, 3, 2, 0, 2, 0, 1, 2, 3, 1, 3, 1, 4, 2, 0, 2, 0, 0, 4, 2, 1, 1, 4, 3, 3, 2, 3, 1, 1, 4, 4, 4, 2, 2, 4, 3, 3, 2, 1, 0, 3, 1, 3, 0, 1, 3, 4, 1, 1, 2, 3, 3, 0, 2, 2, 1, 0, 1, 0, 2, 3, 4, 1, 2, 2, 3, 1, 4, 3, 2, 4, 4, 1, 1, 4, 2, 0, 2, 0, 1, 0, 4, 4, 0, 3, 1, 2, 0, 0, 1, 0, 1, 4, 2, 2, 0, 0, 4, 4, 3, 2, 3, 1, 0, 1, 0, 2, 1, 0, 4, 2, 0, 4, 0, 3, 4, 3, 0, 2, 3, 3, 0, 1, 1, 1, 0, 1, 0, 4, 0, 2], [0, 0, 0, 2, 1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 0, 2, 1, 2, 2, 0, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 0, 2, 0, 1, 2, 1, 2, 0, 2, 0, 1, 1, 0, 2, 2, 2, 0, 0, 2, 0, 1, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 2, 0, 0, 1, 1, 1, 0, 1, 2, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [2, 5, 3, 2, 4, 5, 4, 4, 2, 2, 5, 2, 1, 2, 1, 2, 2, 0, 0, 0, 3, 5, 1, 4, 1, 4, 4, 3, 5, 5, 4, 4, 4, 1, 0, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [0, 4, 2, 2, 3, 0, 3, 2, 2, 0, 0, 1, 1, 3, 2, 2, 2, 0, 4, 2, 4, 0, 1, 4, 0, 3, 2, 1, 2, 2, 1, 2, 0, 4, 2, 1, 4, 2, 4, 4, 4, 1, 2, 2, 1, 2, 1, 0, 2, 2, 2, 1, 0, 0, 2, 4, 4, 1, 4, 1, 2, 2, 1, 2, 4, 2, 4, 4, 0, 0, 2, 2, 4, 2, 2, 2, 4, 4, 4, 0, 0, 2, 0, 1, 4, 2, 4, 0, 0, 0, 1, 2, 4, 4, 4, 4, 4, 4, 1, 1, 4, 1, 4, 4, 4, 2, 0, 4, 2, 0, 2, 2, 1, 1, 0, 4, 2, 2, 2, 1, 4, 0, 0, 0, 0, 1, 1, 4, 2, 2, 2, 0, 2, 0, 0, 0, 2, 0, 1, 4, 1, 1, 2, 0, 0, 1, 1, 0, 2, 2, 1, 4, 4, 4, 2, 2, 4, 1, 2, 1, 3, 4, 1, 2, 2, 1], [0, 3, 2, 3, 1, 2, 2, 2, 3, 0, 1, 0, 1, 2, 3, 2, 3, 3, 3, 2, 1, 3, 0, 1, 1, 0, 2, 1, 2, 0, 3, 1, 3, 0, 2, 2, 3, 2, 3, 3, 3], [4, 1, 5, 4, 3, 4, 0, 2, 3, 3, 2, 1, 3, 0], [2, 2, 2, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1, 1, 2, 2, 0, 2, 0, 2, 1, 1, 1, 1, 1, 2, 0, 2, 2, 1, 2, 1, 0, 2, 0, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 0, 2, 1, 1, 1, 1, 0, 0], [2, 3, 0, 2, 0, 1, 3, 2, 0, 1, 2, 2, 2, 3, 3, 1, 0, 1, 0, 2, 3, 0, 2, 3, 1, 0, 3, 1, 1, 0, 1, 1, 2], [17, 21, 2, 12, 6, 5, 13, 2], [7, 23, 8, 13, 24, 2, 14, 10, 17], [2, 4, 8, 6, 2, 6, 1, 0, 7], [9, 13, 3, 26, 27, 16, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 12, 12, 4, 8, 1, 3, 0, 0, 4, 4, 17, 4, 5, 8, 5, 1, 2, 131, 131, 119, 4, 502, 125, 143, 77, 51, 36, 33, 1, 166, 41, 14, 53, 33, 8, 9, 9, 7], "tree_depth": 105, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( divInt(len(getCharFromString((in2 + (in0[mod(( len(s2) + ( i0 + int(3.0) ) ),int(3.0)):][min(i0, int(5.0)):] + \"\"2\"\"))[int(8.0):][i1:], int(8.0))),i0) + divInt(i2,int(61.0)) ):{:\\nres0 = i1 \\le min(( i0 * ( int(2.0) - int(4.0) ) ), int(65263.0))\\ni0 *= int(31874.0)\\ni1 = i0\\nif False:{:\\nb1 = not ( min(len(\"\"&\"\"), ( min(int(8.0), max(max(i2, i1), int(6.0))) + i2 )) == int(5.0) and (in1[int(9.0):][( i2 * abs(min(mod(int(8.0),int(4.0)), i2)) ):int(7.0)][( len(in2.capitalize()[:int(0.0)].rstrip(\"\"R\"\")) - divInt(( len(in1.rstrip()) - int(3.0) ),int(0.0)) ):] + (\"\"4\"\"[:divInt(i0,i2)] + \"\"V\"\"[( int(0.0) - i0 ):i0][i2:])) not in in1[abs(min(( i2 + abs(( ( i0 * int(1.0) ) + int(3.0) )) ), i1)):int(0.0)] )\\n:}\\nloopBreak% = 0\\nfor s2 in saveChr(min(i0, i2)):{:\\nb1 = ( ( ( \"\"h\"\"[:int(9.0)] not in \"\"*\"\".strip(\"\"8\"\"[i2:][divInt(i1,( i1 + max(int(3.0), mod(int(1.0),abs(len(\"\"C\"\"[mod(( i2 * divInt(max(int(1.0), int(6.0)),i1) ),i2):divInt(len(s2),( i1 - mod(int(6.0),max(int(5.0), saveOrd(\"\"x\"\"[abs(i1):][i1:( int(0.0) * int(1.0) )][( min(( i1 * int(0.0) ), int(7.0)) + abs(min(min(saveOrd(in2), ( ( ( int(7.0) - int(7.0) ) * int(1.0) ) - ( abs(max(i2, ( divInt(( i0 * int(1.0) ),max(divInt(saveOrd(s2),len(getCharFromString(saveChr(len(\"\"6\"\")), int(6.0))[:abs(i2)])), int(3.0))) - len(getCharFromString(\"\"2\"\", max(max(i1, ( saveOrd(\"\"6\"\"[:saveOrd(saveChr(int(5.0))[:int(5.0)])][:i0]) - saveOrd(s1.rstrip(s2).capitalize()[:i2]) )), int(7.0)))) ))) - abs(divInt(i1,i1)) ) )), i0)) ):]))) ))])))) )):]).capitalize().capitalize()[:int(4.0)].capitalize() and ( s1.lstrip().rstrip(s2).lstrip(s2[abs(( saveOrd(\"\"\"\") * len(saveChr(i0)[:len(s0)].capitalize()) )):])[:int(9.0)][i1:][int(3.0):].capitalize()[mod(int(3.0),( int(8.0) - abs(i2) )):mod(int(3.0),i1)][i1:] == s0 or ( max(min(int(3.0), i2), len(s0)) * ( mod(int(8.0),max(divInt(( int(5.0) - len(\"\"[\"\") ),min(i0, max(( int(3.0) * mod(int(7.0),i2) ), int(8.0)))), i2)) + i2 ) ) \\le int(9.0) ) ) or b0 ) and getCharFromString(saveChr(( i2 * i1 )), len(saveChr(( int(8.0) + mod(( mod(saveOrd(getCharFromString(\"\"i\"\".capitalize(), i2)),i0) - ( int(1.0) * mod(mod(divInt(int(6.0),divInt(max(i0, max(int(7.0), int(5.0))),i2)),i1),mod(divInt(i2,abs(( ( len(\"\"M\"\") - len(saveChr(divInt(int(6.0),i1))) ) * i1 ))),min(i2, i2))) ) ),( abs(abs(( int(5.0) + max(int(9.0), int(7.0)) ))) * min(divInt(( max(( min(( abs(len(\"\"n\"\")) + saveOrd(getCharFromString(in0[i2:].lstrip(saveChr(max(int(5.0), i1))), ( abs(( ( int(6.0) - abs(int(8.0)) ) - ( int(2.0) + int(3.0) ) )) * i2 )).capitalize()) ), mod(len(in2[max(int(3.0), int(6.0)):divInt(mod(saveOrd(\"\"G\"\"[:mod(mod(int(8.0),len(\"\"1\"\")),i2)][abs(( saveOrd(s1) * saveOrd(\"\"\\\\\\\\\"\"[i1:i1][max(i1, max(saveOrd(getCharFromString(in1, i0)), abs(( min(int(9.0), ( abs(i2) * divInt(i0,i0) )) + min(max(i0, i0), ( int(7.0) + int(8.0) )) )))):][int(7.0):int(0.0)].lstrip(s1)) )):( int(2.0) * ( min(i2, i1) + ( i2 - saveOrd(in1) ) ) )]),i0),i0)]),i1)) - mod(( divInt(i2,saveOrd(in1)) * ( min(len(\"\"F\"\"), int(7.0)) + divInt(max(int(7.0), abs(( ( int(8.0) - i0 ) + int(4.0) ))),mod(int(1.0),mod(min(min(int(8.0), max(int(0.0), min(max(i0, saveOrd(\"\"0\"\")), abs(i0)))), abs(int(5.0))),divInt(min(i2, int(6.0)),int(7.0))))) ) ),divInt(int(7.0),min(saveOrd(in0[( i0 - saveOrd(in2[:len(in2)]) ):][mod(int(1.0),int(9.0)):][:abs(len(in1))].capitalize()), ( max(i0, i1) + int(8.0) )))) ), int(6.0)) * i1 ),i1), i0) )) )))).strip()[( int(7.0) * min(( max(i0, ( i1 + i0 )) * i1 ), min(abs(( max(mod(min(int(6.0), int(0.0)),int(6.0)), i2) * int(2.0) )), ( saveOrd(in1[:divInt(( mod(abs(int(4.0)),int(2.0)) + int(4.0) ),mod(( ( int(6.0) + ( min(i0, int(9.0)) - ( int(4.0) - i0 ) ) ) - int(5.0) ),saveOrd(\"\"-\"\")))]) + ( int(5.0) - i0 ) ))) ):min(len(\"\"y\"\".capitalize()), i2)] in \"\"N\"\" )\\ni2 *= ( divInt(saveOrd(in1[len(s1):min(abs(i1), len(\"\"`\"\"))]),len(\"\"c\"\")) + i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif s0 != \"\"o\"\"[:min(max(int(9.0), max(( i2 + i2 ), i0)), max(divInt(min(max(i2, i1), i1),i2), int(457.0)))][( min(int(3.0), mod(saveOrd(\"\"C\"\".lstrip(\"\"k\"\"[:int(6.0)])[:i2][:int(6.0)].rstrip().capitalize().strip()),int(13.0))) - int(5.0) ):]:{:\\ni2 += int(1.0)\\nin0 = (\"\"r\"\".lstrip() + \"\"7\"\"[i2:int(5.0)][min(abs(int(1.0)), int(3.0)):i2])\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [3, 3, 5, 8, 8, 1, 4, 2, 2, 7, 0, 2, 6, 3, 0, 8, 5, 2, 8, 6, 2, 9, 5, 1, 1, 4, 0, 1, 5, 8, 8, 4, 7, 3, 0, 4, 5, 4], [0, 1, 1, 0, 2, 0, 1, 2, 1, 0, 2, 1, 1, 1, 2, 0, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2], [1], [3, 2, 2, 3, 2, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 3, 0, 0, 3, 3, 3, 2, 2, 3, 2, 3, 1, 3, 0, 2, 3, 0, 3, 3, 3, 3, 2, 3, 0, 3, 2, 3, 0, 3, 3, 2, 2, 0, 2, 1, 3, 0, 3, 1, 1, 3, 2, 1, 3, 3, 1, 3, 0, 3, 3, 3, 1, 0, 2, 0, 3, 2, 3, 1, 2, 0, 2, 0, 1, 1, 1, 1, 3, 3, 2, 2, 1, 1, 0, 0, 1, 2, 0, 1, 2, 3, 2, 0, 3, 3, 3, 2, 1, 3, 2, 2, 3, 1, 1, 2, 0, 3, 3, 0, 3, 1, 3, 3, 1, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1], [4, 3, 3, 0, 0, 1, 0, 2, 1, 0, 4, 3, 1, 2, 2, 3, 3, 1, 2, 1, 2, 1, 4, 0, 3, 3, 0, 3, 2, 4, 1, 1, 0, 3, 1, 1, 2, 0, 0, 4, 4, 0, 2, 3], [0, 0, 0, 2, 1, 2, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 2, 2, 0, 2, 1], [0, 1, 0, 0, 1, 1, 0, 1, 1], [2, 5, 3, 2, 4, 5, 2, 4, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 2, 1, 1, 4, 1, 2, 1, 1, 2, 2, 0, 1, 2, 4, 0, 4, 1, 0, 1, 2, 2, 4, 0], [0, 3, 2, 1], [4], [2, 2, 1, 0, 1, 1, 0, 0, 1, 2, 0], [2, 0, 2, 1, 0, 1, 3, 1, 1], [18, 24], [10, 25, 22, 7], [9, 7], [29]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 38, 38, 26, 0, 129, 30, 44, 21, 9, 9, 9, 0, 35, 4, 1, 11, 9, 2, 4, 2, 1], "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( divInt(len(in2[mod(( len((in0 + (s2[( i0 + int(33.0) ):int(5.0)][:int(8.0)] + in1))[i1:]) + divInt(int(81.0),i1) ),int(42.0)):]),i0) + ( i2 * int(2702.0) ) ):{:\\nres0 = min(i0, i1) \\le min(max(min(( divInt(abs(( max(int(6.0), min(i2, ( saveOrd(\"\"9\"\") - i1 ))) * len(\"\"S\"\"[:max(abs(abs(( len(\"\"7\"\") + i0 ))), len(getCharFromString(\"\"k\"\", ( max(i2, abs(max(( ( i1 + ( int(3.0) + abs(i1) ) ) - max(int(0.0), int(8.0)) ), saveOrd(\"\"Y\"\"[:( int(5.0) - min(len(\"\"z\"\"), int(2.0)) )])))) + len(in2[i1:min(len(\"\"^\"\"), abs(int(8.0)))][i2:( i0 + saveOrd(s2.rstrip(\"\"w\"\".capitalize())[:( max(int(6.0), ( i2 + ( i2 - int(2.0) ) )) - int(9.0) )]) )]) ))))]) )),int(5.0)) * int(11.0) ), max(min(mod(mod(int(4.0),int(0.0)),i1), i1), int(1.0))), ( i2 * int(588.0) )), divInt(len(in1),( i1 + max(max(abs(mod(int(4.0),min(( ( min(int(7.0), int(3.0)) * mod(i2,saveOrd(\"\"h\"\")) ) - saveOrd(saveChr(i2)[min(int(0.0), abs(len(in2))):int(4.0)][i2:]) ), int(5.0)))), int(4.0)), i2) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 1], [2, 2, 0], [0, 2, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 9, 4, 7, 0, 8], [1, 0, 1, 1, 0, 1, 0, 1, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 2, 2, 2, 2, 1, 1, 3, 1, 0, 0, 2, 3, 0, 0, 2, 0, 2, 2, 0, 2, 3, 0, 1, 2, 1, 1, 0, 3], [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0], [4, 3, 3, 2, 2, 3, 3], [0, 1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1, 1, 0], [1, 5, 3, 5, 4, 2, 2, 1, 3, 2], [1], [0], [0, 0, 1, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [3], [], [], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 3, 2, 1, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 11, 11, 9, 0, 38, 14, 7, 6, 8, 9, 1, 1, 11, 1, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le mod(mod(len(in2),( len(\"\")\"\") + int(31.0) )),( i1 - int(0.0) )):{:\\nloopBreak% = 0\\nwhile divInt(( ( divInt(int(8.0),int(7.0)) + abs(int(83.0)) ) - i0 ),i1) \\le mod(abs(i1),i0):{:\\nloopBreak% = 0\\nfor in0 in (in2 + in1)[mod(i1,( mod(i0,divInt(len(getCharFromString(s2, i1)),int(59.0))) - ( int(4.0) + int(7.0) ) )):]:{:\\nres0 = i2 != len(s2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [8, 4, 5, 8, 7, 9, 7, 5, 6, 4, 8], [2, 1, 1, 0, 2, 0], [1], [3, 2, 2, 3, 2, 2, 3, 1, 1, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 0, 0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 3, 3, 0, 0, 0, 2, 4, 4, 1, 2, 4], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1], [1, 5, 3, 2, 4, 5, 5, 2, 3, 0], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 0, 0, 0, 1], [0, 3, 2], [4], [0, 2, 1], [3], [], [], [], [24]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 6, 0, 36, 10, 12, 1, 9, 10, 1, 0, 16, 0, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(divInt(len(in0),int(8.0)),int(4.0))) + int(5.0) )\\ns2 = (in1 + (in2[:int(8.0)][divInt(divInt(divInt(int(7.0),i2),int(9.0)),i1):] + in2))[mod(i1,int(7.0)):mod(min(min(min(abs(saveOrd((s2 + in0))), saveOrd(s0)), i0), max(mod(abs(saveOrd(\"\"?\"\")),i2), i0)),int(5648.0))]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1, 1], [1, 2, 2, 1, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 1, 1, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 1, 3], [0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 3, 3, 3], [1], [0, 0], [2, 1, 0, 2, 3, 0, 4, 4, 0, 2, 0, 1], [0, 3, 2], [4], [2, 2, 2], [1], [], [11], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 2, 0, 19, 5, 5, 1, 4, 4, 1, 0, 11, 2, 1, 3, 1, 0, 1, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"l\"\"[mod(mod(len(s2),divInt(len((in2 + getCharFromString(in0.rstrip(in0[int(3.0):]), int(1.0)))[int(0.0):]),int(8.0))),i0):]) \\le ( divInt(abs(int(7.0)),int(83.0)) + max(int(5.0), i2) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [0], [21], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 4, 3, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(len(in2),divInt(len(\"\"V\"\"),( ( i0 + int(3.0) ) + int(7.0) ))) + divInt(i0,( int(7.0) * i1 )) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [0], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 6, 8, 6, 6, 8, 4, 5, 0, 6, 7, 9, 0, 7, 0, 3], [2, 0, 1, 0, 0, 2, 2, 2, 2], [], [3, 2, 2, 3, 2, 1, 1, 1, 3, 1, 1, 1, 3, 2, 1, 2, 0, 2, 2, 3, 0, 0, 0, 0, 2, 0, 3, 1, 2, 2, 0, 2, 2, 3, 1, 3, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0, 2, 4, 3], [1, 0, 2, 1, 2, 0, 0, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1, 1], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 2, 1], [0, 3, 2], [4], [0, 2, 0, 0], [0, 1], [22], [23], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 17, 17, 9, 0, 39, 12, 8, 9, 3, 5, 2, 0, 14, 1, 0, 4, 2, 1, 1, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(getCharFromString(s0, ( divInt(len(in2),mod(int(3.0),int(2.0))) - int(6.0) ))) \\le len((in0 + (s2[int(8.0):int(6.0)][int(6845.0):] + in1))[min(( int(0.0) + ( i2 * ( divInt(min(i0, i1),i0) - i0 ) ) ), ( i2 * abs(int(679.0)) )):( ( i2 + ( ( saveOrd(\"\"W\"\") + int(070.0) ) * len(\"\"x\"\"[int(3.0):i2]) ) ) + i2 )])\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1], [2, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [2, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1, 0, 0, 0, 0, 1], [], [4, 0, 3, 0, 0, 4, 3, 1, 0, 4, 1], [0, 3, 0], [3], [2], [0, 1, 1, 1, 1, 1], [5], [0, 7, 15, 0, 25], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 8, 2, 3, 1, 1, 4, 6, 0, 11, 3, 1, 0, 6, 1, 5, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( int(2.0) + saveOrd(getCharFromString(in0, len((in2 + in1)))) ) \\l divInt(int(66.0),len((\"\"F\"\" + s1).lstrip(getCharFromString(\"\"ahpaz\"\", i0))))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [2], [2, 0], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 0, 4, 8, 7, 7, 6, 2, 7, 9, 1, 8, 7, 9, 1, 9, 2, 2, 8, 0, 9, 6, 4, 7, 8, 1, 5, 4, 1, 6, 3, 4, 1, 0, 4, 2, 3, 2, 4, 5, 2], [0, 0, 1, 0, 2, 1, 2, 1, 1, 1, 2, 0, 2, 0, 0, 0, 2, 1, 0, 2, 2, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 2, 1, 2, 0, 2, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 1, 1, 1, 1, 0], [1], [3, 2, 2, 3, 2, 3, 3, 2, 2, 1, 1, 2, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0, 1, 3, 1, 2, 1, 0, 3, 2, 3, 3, 0, 0, 0, 3, 3, 1, 0, 0, 0, 3, 3, 0, 2, 0, 1, 2, 3, 2, 1, 3, 3, 2, 0, 0, 3, 2, 2, 0, 3, 2, 2, 2, 3, 2, 0, 1, 3, 2, 1, 0, 1, 2, 3, 1, 0, 2, 3, 3, 3, 2, 2, 3, 3, 1, 2, 0, 0, 3, 0, 1, 2, 0, 0, 1, 3, 2, 3, 0, 0, 1, 1, 1, 3, 0, 3, 0, 1, 0, 1, 3, 0, 1, 0, 1, 2, 0, 3, 0, 0, 3, 0, 0, 2, 3, 2, 1, 1, 2, 3, 2, 2, 2, 3, 1, 3, 0, 3, 3, 3, 2, 0, 1, 0, 2, 1, 2, 3, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 1, 1, 0, 2, 3, 0, 2, 0, 0, 1, 3, 0, 2, 2, 3, 3, 1, 1, 3, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0], [4, 3, 3, 1, 0, 0, 2, 1, 3, 4, 0, 3, 3, 2, 4, 2, 3, 0, 4, 2, 0, 4, 0, 3, 4, 1, 4, 4, 4, 0, 1, 1, 3, 2, 0, 0, 2, 4, 2, 1, 1, 4, 1, 4, 2, 0], [2, 0, 0, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 0, 0, 1, 0, 0, 2, 2, 0, 1, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], [2, 5, 3, 2, 4, 5, 5, 1, 5, 0, 2, 3, 0, 3, 3, 4, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 2, 2, 2, 3, 0, 1, 0, 3, 2, 2, 2, 4, 4, 4, 1, 0, 0, 4, 2, 4, 2, 4, 1, 2, 1, 4, 4, 1, 2, 0, 2, 4, 2, 2, 4, 4, 2, 0, 0, 0, 4, 2, 0, 0, 3, 4, 2, 4, 1, 4, 2, 1, 4, 2, 1, 1, 4, 4, 4, 2, 2, 2, 0, 1], [0, 3, 2, 1, 3, 0, 1, 2, 3, 2, 0, 0, 2, 0, 3, 0, 1, 0, 3], [4, 5, 5, 3, 0], [0, 0, 2, 0, 0, 0, 2, 2, 2, 1, 1, 1, 0, 1, 0, 0, 2, 2, 0, 2, 1, 1, 1, 1, 0], [3, 1, 3, 3, 1, 1, 0, 2, 1, 2], [12], [21, 15, 8, 13], [9, 0], [11, 2, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 41, 41, 52, 0, 185, 47, 46, 26, 21, 18, 10, 0, 76, 19, 5, 25, 10, 1, 4, 2, 3], "tree_depth": 64, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\nres0 = saveOrd(in0) \\le ( ( len(s2) * divInt(len((in1 + (in2[max(( mod(int(3.0),int(0.0)) + divInt(int(4.0),int(8.0)) ), int(7.0)):][i0:int(7.0)] + in2))[i0:( ( int(6.0) + i1 ) - int(2.0) )]),min(int(7.0), ( int(9.0) * i0 ))) ) - min(( abs(max(i2, i1)) * i2 ), len((s1 + \"\"(\"\")[saveOrd(in2):][int(18.0):i1][i1:i1][min(len((getCharFromString(\"\"v\"\".capitalize().rstrip(s0), i2)[:( i0 * int(7.0) )][mod(len(s2),( int(9.0) - abs(saveOrd(saveChr(mod(i2,i0)))) )):][abs(mod(( i0 * len(getCharFromString(\"\"\\\\\\t\"\", mod(mod(( min(divInt(i0,int(1.0)), saveOrd(\"\"_\"\"[( int(9.0) - i2 ):int(2.0)])) * ( abs(int(2.0)) * i1 ) ),mod(min(saveOrd(saveChr(min(( ( len(\"\"p\"\".capitalize()) - saveOrd(in0[:int(8.0)]) ) - ( i0 + i2 ) ), max(i2, int(0.0))))), mod(i1,i1)),int(9.0))),saveOrd(getCharFromString(s0[mod(saveOrd(in0),i0):], i0).capitalize()[int(6.0):][int(4.0):int(7.0)].strip(in0)[saveOrd(getCharFromString(in1[i0:min(i1, int(8.0))], i1)):int(1.0)])))[:max(i0, int(5.0))].strip(in2)[:i1]) ),int(4.0))):] + (getCharFromString(\"\"i\"\", mod(i0,max(i0, i2)))[len(\"\"M\"\"[:i1].lstrip(getCharFromString(\"\"9\"\"[:i2], ( abs(( int(1.0) + int(6.0) )) - ( min(divInt(( divInt(min(int(3.0), abs(i0)),saveOrd(\"\"n\"\")) + abs(max(( i2 + int(4.0) ), i2)) ),( int(1.0) * ( max(int(0.0), int(4.0)) * int(2.0) ) )), i0) + divInt(mod(mod(mod(( i2 - i0 ),int(3.0)),int(2.0)),i2),mod(saveOrd(saveChr(i2)),( i2 + i1 ))) ) )))):].capitalize() + getCharFromString(s1[int(4.0):max(i2, divInt(( saveOrd(\"\"0\"\") - abs(int(5.0)) ),int(2.0)))][:min(i0, i1)][:i1].lstrip(), i1)))), i1):i0])) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0, 0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], [1, 6, 6, 8, 9, 9, 3, 1, 2, 7, 4, 7, 7, 1], [0, 1, 2, 0, 2], [0, 1], [2, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3, 0, 3, 1, 3, 2, 3, 2, 2, 3, 3, 1, 0, 0, 0, 3, 2, 1, 1, 1], [1, 1, 1, 0, 0, 0], [4, 3, 3, 2, 2, 2, 1, 4, 0, 1], [0, 0, 2], [0, 1, 0], [3, 5, 4, 1, 4, 1, 4, 0], [1, 0, 1, 1], [], [2, 0, 3, 0, 0, 4, 2, 3, 3, 2, 3, 3, 1, 2, 0, 3, 0, 0, 2, 0, 4, 0, 1, 1], [0, 3], [5], [2, 1, 0, 0, 0], [3, 3, 1, 1], [5], [1, 8], [], [9, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 5, 0, 32, 6, 10, 3, 3, 8, 4, 0, 24, 2, 1, 5, 4, 0, 2, 0, 2], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = divInt(int(16.0),saveOrd(in0[len((in2 + in1)):])) \\l mod(int(6.0),len(getCharFromString(((((\"\"&\"\" + s1[i0:int(8.0)]) + (in1 + s1))[int(9.0):int(9.0)] + in1[int(31.0):abs(i1)]) + s0.strip(\"\"]b\"\"))[:abs(int(2.0))], abs(divInt(max(( ( saveOrd(\"\"i\"\") + min(int(7.0), i2) ) + i0 ), i2),max(( int(4.0) * int(7.0) ), int(71.0)))))))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 4], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 9, 0, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 1, 3, 1, 1, 0, 1, 1, 2, 2, 3, 1, 2, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 1, 0, 0, 1], [4, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 1, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [1], [], [15], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 3, 1, 1, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 1, 0, 11, 2, 3, 0, 2, 5, 1, 1, 7, 0, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in1) \\le mod(mod(len(\"\"p\"\"),int(49.0)),len(in2)):{:\\nloopBreak% = 0\\nwhile int(0.0) \\le int(8.0):{:\\nloopBreak% = 0\\nfor in0 in (in0 + in1)[i0:]:{:\\nres0 = int(7.0) \\le int(83.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 8, 8, 8, 8, 1, 7, 4, 8, 6, 4, 2, 7, 0, 9, 9, 9], [0, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 0], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 2, 0, 1, 3, 2, 0, 3, 3, 3, 2, 0, 1, 0, 0, 3, 3, 3, 1, 0, 0, 0, 0, 2, 2, 0, 1, 2, 3, 1, 1, 2, 3, 1, 3, 0, 1, 2, 1, 1, 3, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 3, 3, 0, 0, 1, 3, 3, 4, 1, 2, 0, 1, 4, 2, 0, 1], [0, 1, 1, 0], [0, 1, 0, 0, 1, 0], [3, 5, 3, 2, 4, 5, 2], [1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 4, 4, 1, 0, 3, 4, 4, 2, 1, 1], [0, 3, 2, 0, 0], [4], [0, 2, 0, 0], [3, 2, 1], [], [24], [5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 18, 18, 12, 0, 51, 10, 17, 4, 6, 7, 3, 0, 22, 5, 1, 4, 3, 0, 1, 1, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( len(in2) + ( min(min(max(i0, divInt(i1,int(24.0))), len(in0)), mod(i1,len((s2 + (in1[saveOrd(in2):max(( i2 - int(8.0) ), i1)][i2:] + getCharFromString(\"\";\"\".capitalize().rstrip(s2), abs(min(max(int(8.0), i1), i2)))))[i1:i1]))) - divInt(( i1 + int(881748.0) ),divInt(saveOrd((getCharFromString(getCharFromString(\"\"5\"\"[int(6.0):int(4.0)], mod(abs(int(2.0)),min(i0, int(7.0)))), divInt(int(0.0),int(9.0))) + \"\"y\"\")),max(int(9.0), int(9.0)))) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 1, 5, 8, 7, 2, 2, 1, 1, 4, 0, 5, 5, 3, 9], [2, 2, 1, 0, 2, 0, 2, 1, 2], [0], [3, 2, 2, 3, 2, 1, 3, 0, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 3, 3, 1, 3, 0, 2, 1, 1, 0, 3, 2, 0, 3, 1, 0, 3], [1, 0, 1, 1, 0, 1, 1, 0, 1], [4, 3, 2, 0, 0, 2, 2, 0, 4], [0, 1, 1], [0, 1, 0, 0, 0, 1], [1, 5, 3, 2, 4, 5, 1], [0, 0, 1, 0, 0, 1], [], [3, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 2, 2, 1, 4, 0, 1], [0, 3, 2], [4], [0, 1, 2, 1, 0], [1, 3, 3, 3, 0, 0], [25, 1], [8], [], [16, 5, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 15, 15, 9, 0, 37, 9, 9, 3, 6, 7, 6, 0, 18, 1, 0, 5, 6, 2, 1, 0, 3], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd((s1 + in2)) \\le divInt(( len((in0 + (s2[mod(int(1.0),abs(i2)):][:i2] + in1))[int(1.0):int(58.0)]) + divInt(( divInt(int(7.0),i1) - int(22.0) ),i0) ),divInt(i2,int(1.0)))\\nin2 = (\"\"i-\"\"\"[min(min(int(1.0), abs(i0)), ( int(405.0) - int(5.0) )):i2][:abs(mod(i1,min(int(39.0), i2)))] + getCharFromString(s1, saveOrd(\"\"?ZB\"\")))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 4, 7, 8, 3, 5], [2, 1, 1], [0], [3, 3, 2, 2, 3, 3, 1, 2, 1, 0, 0, 1, 3, 3], [0, 0, 1], [2, 1, 3, 0, 2, 3], [2, 1], [1, 1, 0], [2, 5, 3, 4, 4, 5], [0, 0, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [0, 2, 2], [16], [], [5, 7], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 14, 3, 6, 2, 1, 3, 3, 0, 3, 0, 0, 0, 3, 1, 0, 2, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( ( len(s2) * min(int(44.0), mod(int(7.0),i2)) ) - i1 ), int(8.0))) \\l abs(len(\"\"Q57\"\"))\\nin2 = in0\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1], [2, 1, 2, 1, 2, 2, 0, 0, 1, 2, 0, 2, 2, 0, 1, 0, 1, 2, 1, 1, 0, 0], [2, 1, 0, 1, 0, 1, 2, 2], [2, 0, 2, 1, 0, 1, 0, 2, 0, 0, 1, 1, 0, 1], [0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [3, 2, 2, 0, 1, 0], [4, 4, 3, 3, 3], [1, 1, 2, 1, 1, 2, 2, 2, 2, 0, 0, 2, 2, 2, 1, 0], [0, 0, 0, 0, 0], [0, 2, 2, 4, 1, 0, 5, 3], [3, 3, 1], [0, 0], [1], [1, 1, 1], [1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [3, 1, 6, 8, 3, 6, 8, 3, 7, 0, 1, 0, 4, 3, 9, 0, 3, 8, 4, 5, 8, 9, 9, 0, 6, 3, 2, 0, 8, 6, 4, 2, 0, 2, 2, 3, 6, 6, 9, 3, 7, 3, 8, 7, 5, 6, 9, 1, 1, 3, 0, 6, 1, 1, 3, 5, 6, 1, 4, 9, 4, 0, 8, 9, 7, 9, 5, 5, 6, 8, 9, 0], [2, 2, 1, 1, 2, 2, 0, 2, 2, 0, 2, 0, 0, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 1, 0, 2, 1, 0, 0, 2, 2, 1, 0, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 1, 3, 1, 2, 1, 3, 2, 0, 0, 1, 2, 3, 2, 2, 2, 3, 1, 3, 0, 3, 3, 0, 1, 2, 2, 1, 2, 3, 0, 0, 2, 0, 2, 0, 0, 3, 3, 3, 2, 2, 0, 1, 3, 1, 1, 0, 3, 1, 0, 1, 1, 3, 3, 1, 1, 0, 1, 0, 1, 1, 3, 2, 2, 3, 3, 0, 0, 2, 1, 1, 2, 0, 0, 2, 0, 1, 1, 2, 1, 0, 1, 1, 3, 1, 3, 1, 3, 3, 1, 3, 2, 3, 1, 3, 0, 2, 2, 1, 2, 2, 2, 2, 3, 1, 3, 2, 3, 2, 2, 1, 3, 1, 2, 2, 3, 3, 2, 3, 3, 2, 2, 2, 0, 3, 1, 1, 0, 2, 0, 2, 0, 0, 1, 3, 0, 1, 3, 2, 1, 3, 0, 2, 1, 0, 2, 3, 0, 0, 0, 2, 3, 0, 1, 1, 2, 0, 0, 0, 2, 3, 3, 2, 0, 0, 1, 1, 2, 1, 3, 2, 0, 1, 2, 3, 2, 3, 1, 1, 1, 2, 3, 0, 3, 3, 1, 3, 3, 1, 1, 2, 0, 3, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [4, 3, 3, 0, 2, 4, 1, 0, 3, 4, 1, 3, 3, 2, 1, 3, 0, 0, 1, 1, 1, 0, 3, 2, 2, 3, 4, 3, 2, 4, 3, 2, 0, 3, 2, 4, 2, 2, 4, 1, 4, 2, 0, 2, 1, 2, 4, 4, 3, 0, 3, 0, 0], [0, 2, 2, 2, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 2, 1, 0, 0, 2, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 5, 3, 2, 4, 5, 1, 4, 2, 0, 2, 4, 5, 3, 0, 4, 4, 3, 3, 1, 0, 4, 3, 5, 2, 0, 3, 3, 3, 0, 5, 1, 2, 3, 3, 1, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 0, 2, 2, 4, 2, 0, 0, 1, 2, 4, 2, 1, 1, 4, 4, 0, 1, 2, 4, 0, 3, 0, 2, 1, 1, 0, 4, 4, 1, 1, 0, 2, 1, 1, 2, 4, 0, 1, 0, 1, 2, 0, 1, 0, 1, 0, 2, 2, 4, 2, 2, 0, 2, 4, 4, 0, 2, 0, 1, 1, 1, 2, 4, 0, 1, 0, 4, 0, 3, 3, 1, 4, 1, 2, 0, 0, 0, 3, 0, 0, 0, 0], [0, 3, 2, 3, 3, 3, 2, 0, 0, 3, 0, 2, 1, 3], [4, 4, 0, 1, 0, 1], [0, 2, 2, 0, 0, 1, 1, 1, 1, 0, 2, 1, 0, 0, 2, 2, 0, 1, 2, 1, 0], [1, 0, 1, 2, 2, 2, 0, 1, 0, 3, 2, 2, 0, 0, 1, 1, 3, 0, 1, 1, 0], [8, 8, 11, 2, 13, 0, 21], [25, 22, 10, 7, 23, 10, 4], [5, 4, 5, 9, 1], [9, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 22, 22, 8, 14, 2, 7, 0, 0, 6, 5, 16, 5, 8, 3, 2, 1, 3, 72, 72, 48, 5, 205, 54, 53, 26, 29, 37, 21, 2, 94, 14, 6, 21, 21, 7, 7, 5, 2], "tree_depth": 74, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),int(3.0))) + ( i2 * int(1.0) ) ):{:\\ns2 = (in1 + (in2[int(6.0):][int(8.0):] + s1))[min(int(3.0), ( int(683.0) * abs(divInt(i2,i1)) )):int(70104.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif mod(saveOrd((in1 + getCharFromString(s2[:( mod(( max(int(3.0), min(i1, len(s0))) * saveOrd(\"\"z\"\") ),i2) - int(9.0) )], divInt(divInt(int(0.0),divInt(max(i2, i0),divInt(i2,divInt(i2,i0)))),len(\"\"I\"\"[:len(\"\"w\"\")].rstrip(s2.rstrip(\"\"5\"\").capitalize())[:abs(mod(mod(i2,int(3.0)),max(int(8.0), int(4.0))))])))[i0:len(in1.lstrip()[:int(5.0)])][i0:int(899.0)])),int(0.0)) \\le min(min(int(63.0), int(208.0)), i1):{:\\nres0 = (in2 + \"\"45\"\"[int(6.0):i1]) in \"\"I\"\"\\n:}else:{:\\nloopBreak% = 0\\nfor in0 in s0:{:\\nif int(4.0) \\ge int(2.0):{:\\nin1 = \"\"k\"\".capitalize().rstrip()\\n:}else:{:\\ni1 = max(divInt(( max(max(i1, i1), ( int(0.0) * int(2.0) )) + ( i1 * i2 ) ),mod(i0,int(2.0))), int(3.0))\\nb2 = divInt(int(6.0),i0) \\ge int(6.0)\\nloopBreak% = 0\\nfor in1 in \"\"L\"\":{:\\ni0 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif in0 == \"\"&\"\"[min(int(3.0), len(\"\"9\"\")):]:{:\\nloopBreak% = 0\\nwhile getCharFromString(in0, int(7.0))[:abs(abs(int(3.0)))] == \"\"1\"\":{:\\nb2 = s1.startswith(\"\"C\"\")\\ns0 = in1[len(\"\"N\"\"):( saveOrd(in0) * int(8.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = \"\"h\"\" not in in2\\n:}\\nb1 = ( ( getCharFromString(s2[len(getCharFromString(s0, i1).lstrip()[:( mod(int(7.0),( mod(( ( abs(int(5.0)) + saveOrd(in0[mod(len(\"\"x\"\"),mod(( int(6.0) - abs(int(9.0)) ),mod(mod(min(len(\"\";\"\"), ( abs(saveOrd(\"\"A\"\")) * ( ( mod(i0,abs(int(1.0))) + int(1.0) ) - i2 ) )),mod(i1,( i0 * i0 ))),int(3.0)))):]) ) + abs(i2) ),int(0.0)) - saveOrd(in0.capitalize()[:( int(6.0) * max(i2, mod(int(1.0),i1)) )]) )) + ( saveOrd(\"\"k\"\") * i0 ) )]):i1][i1:], divInt(abs(i2),int(1.0)))[int(3.0):][divInt(i1,i1):i1] in in0 and saveChr(( min(abs(( i2 - i2 )), int(5.0)) + int(6.0) )).endswith(s0) ) and ((\"\"e\"\" + \"\"V\"\".rstrip()) + in2[( int(1.0) + max(mod(i1,int(4.0)), ( abs(mod(saveOrd(s1),int(9.0))) * int(4.0) )) ):int(0.0)]) != s2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( saveOrd((in0 + in0)) - i1 ) \\ge len(s1):{:\\ni1 = min(int(8979.0), len(s0))\\ni0 = min(int(55.0), int(68.0))\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= mod(i0,min(i0, int(90.0)))\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 1, 2, 2, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [0, 1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [0, 3], [8], [], [], [30]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 4, 2, 1, 3, 1, 2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"I_\"\") \\le divInt(divInt(len(s2),int(3.0)),divInt(( int(7.0) + i0 ),int(5.0)))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [2], [0, 1], [0], [0, 0], [], [], [3, 1, 2], [4, 4], [2, 0], [0, 0], [0], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 2, 1, 2, 1], [1, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 1, 0], [0, 3, 2], [4], [0, 1, 2], [2], [], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 6, 6, 3, 1, 16, 4, 4, 4, 1, 6, 1, 0, 13, 1, 0, 3, 1, 0, 0, 1, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s2 in in2:{:\\nres0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 -= saveOrd(getCharFromString((in0 + (s2[( ( len(in1) + mod(len(\"\"8\"\"),min(( i0 * int(3.0) ), int(3.0))) ) - int(4.0) ):][:int(8.0)] + in2))[int(7.0):int(7.0)], i1))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 5, 8, 8, 8], [0, 0, 1, 0, 2, 0], [1], [3, 3, 1, 3, 2, 3, 3, 2, 0, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [1, 1], [], [2, 0, 2, 4, 3, 0, 3, 2, 2, 0, 0, 3, 1, 3, 4, 4, 2, 1, 0, 0], [0, 3, 2], [4], [2, 0, 2, 2, 1], [1, 2], [], [0], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 6, 0, 21, 4, 5, 3, 1, 6, 2, 0, 20, 3, 1, 5, 2, 0, 1, 1, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s1[len(getCharFromString((in2 + (in0[int(3.0):][len(s2):] + (\"\"a\"\" + (\"\"9\"\"[:( min(min(( i0 + i0 ), int(3.0)), int(5.0)) + i1 )].capitalize().rstrip(in1) + in2)))), divInt(int(8.0),i0))[int(8.0):i2]):]) \\le ( i0 + int(8.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [0], [0, 1], [0], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [2], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [3, 3, 5, 8, 8, 4, 4, 1, 2, 5, 3], [0, 0, 1, 0, 2, 0, 1, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1, 1, 3, 1, 2, 1, 2, 0, 3, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0, 4], [0, 0, 0, 2, 1, 2, 0], [1, 1, 0], [2, 5, 3, 2, 4, 5], [1, 1, 1], [0], [4, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0, 4, 4, 1, 2, 2, 1, 0], [0, 3, 2], [4], [2, 2, 0, 0, 0], [2, 3, 2], [], [], [5, 4], [5]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 11, 11, 8, 0, 31, 8, 6, 5, 3, 6, 3, 1, 18, 3, 1, 5, 3, 0, 0, 2, 1], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in getCharFromString(in2, saveOrd(\"\"5\"\")):{:\\nres0 = not ( mod(len((in0 + (s2[mod(len(in1),min(( i0 + int(3.0) ), int(35.0))):i0][i1:] + \"\"\"\"\".capitalize().rstrip(\"\"4\"\"[( int(8.0) + i0 ):int(8.0)][i2:divInt(i0,int(4.0))])))[int(4.0):]),min(int(12.0), ( int(5.0) + ( i1 * saveOrd(in2) ) ))) - int(3.0) ) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 2, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 3, 3, 1, 0, 1, 3, 0], [0, 1, 1, 0], [4, 3, 3, 0, 4, 4], [1, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [0, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [0, 2, 1], [3, 2], [], [], [5], [7]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 14, 3, 6, 1, 2, 6, 2, 0, 12, 0, 0, 3, 2, 0, 0, 1, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),int(3.0))) - min(saveOrd((s2 + (in1[:int(2.0)][i2:] + in2))[int(6.0):saveOrd(\"\"$5\"\")]), i0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [0, 4], [2, 1], [0, 0], [1], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [2, 1, 5, 8, 7, 6, 6, 8, 6, 0, 1, 1, 0, 9, 4, 6, 0, 0, 2], [2, 0, 1, 0, 2, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1], [3, 2, 2, 3, 2, 3, 3, 1, 0, 3, 1, 2, 3, 2, 1, 0, 1, 0, 2, 2, 1, 2, 3, 0, 3, 1, 0, 3, 1, 0, 1, 1, 2, 1, 1, 1, 3, 2, 0, 0, 0, 1, 2, 2, 3, 0, 3, 2, 2, 0, 3, 3, 0, 3, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0], [4, 3, 3, 0, 0, 4, 1, 1, 2, 3, 3, 4, 2, 1, 2], [0, 0, 0, 2, 1, 2, 0, 1, 2], [1, 1, 0, 0, 0], [1, 5, 3, 1, 4, 5, 2, 1, 0, 3, 4], [1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 2, 1, 3, 2, 1, 3, 4, 1, 0, 2, 3, 2, 4, 0, 1, 2, 0, 1, 3, 4, 0, 0], [0, 3, 2, 2], [4], [0, 1, 0, 0, 0, 1, 2, 0], [3, 1, 0, 3, 2], [3], [15], [5], [16, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 1, 2, 1, 1, 0, 0, 0, 0, 19, 19, 14, 0, 57, 14, 15, 9, 5, 11, 5, 0, 34, 4, 1, 8, 5, 1, 1, 1, 2], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1 not in in2\\nb1 = saveOrd(in0) \\l ( ( len((s1 + (in1[mod(len(in2),min(int(2.0), i2)):min(int(1.0), mod(saveOrd(getCharFromString(\"\"-\"\"[( int(5.0) + i0 ):int(8.0)], i1)),divInt(divInt(int(7.0),( max(i0, max(int(6.0), i2)) + abs(int(6.0)) )),i1)))][:int(86.0)] + (\"\"p\"\"[int(01.0):( int(1.0) + int(0946.0) )] + (\"\"D\"\".rstrip(s2) + (s1.capitalize()[int(0.0):] + \"\"!\"\")[:len(s0[( i1 * i0 ):i0])]))))[int(0.0):( ( len(\"\"5\"\") - i1 ) * saveOrd((in0.capitalize() + in1)) )]) + divInt(( i1 - abs(max(i1, abs(int(2.0)))) ),i0) ) * i1 )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1], [0, 2, 2, 1, 0], [2, 2], [0, 1, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 2], [0, 0], [2], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 1, 3, 8, 7, 1, 9, 7, 7, 9, 4, 4, 6, 1, 1, 6, 7, 8, 1], [2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 1, 0, 1, 2], [0], [3, 2, 2, 3, 0, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 2, 3, 2, 0, 3, 1, 0, 1, 0, 1, 3, 1, 0, 2, 3, 1, 1, 1, 0, 3, 0, 2, 2, 1, 1, 1, 0, 2, 1, 3, 0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [4, 3, 3, 0, 0, 2, 3, 2, 0, 2], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 0, 1], [2, 5, 3, 2, 4, 5, 5], [1, 0, 1, 1, 1], [], [1, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0, 1, 4, 3, 1, 0, 3, 4, 2, 1, 4, 4, 4], [0, 3, 2, 0, 1, 1], [4], [0, 2, 0, 0], [1, 0, 3, 0, 0], [13, 20, 8], [16], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 2, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 19, 19, 14, 1, 51, 13, 10, 6, 7, 7, 5, 0, 24, 6, 1, 4, 5, 3, 1, 0, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"q\"\") \\le ( divInt(len(s2),i2) + mod(len(getCharFromString((in2 + (in0[int(8.0):i0][int(1.0):] + s2))[min(divInt(( divInt(int(3.0),i2) + int(8.0) ),i2), divInt(i2,( min(( i1 + abs(int(7.0)) ), i2) * int(1.0) ))):i0], int(9.0))),len(in1)) )\\nloopBreak% = 0\\nwhile int(77.0) \\le i0:{:\\nloopBreak% = 0\\nwhile \"\"N)\"\" == (\"\"U\"\" + in2).rstrip((\"\"I\"\"[( abs(int(9.0)) - int(44.0) ):int(61.0)].capitalize() + getCharFromString(saveChr(i2), min(i1, ( divInt(int(1.0),int(6.0)) * int(78.0) ))))):{:\\ni0 = i1\\nin2 = saveChr(mod(int(1.0),abs(i2)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [2], [0, 1], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 4, 8, 8, 1, 0, 4, 4, 3, 2, 6, 7, 9, 4, 4], [2, 0, 1, 1, 1, 1, 1, 0, 1, 1, 2, 2, 1, 2], [0], [3, 2, 3, 3, 2, 3, 1, 3, 0, 1, 2, 1, 3, 2, 2, 3, 1, 0, 0, 2, 3, 1, 0, 2, 3, 2, 1, 0, 0, 1, 3, 3, 3, 3, 2, 3, 3, 0, 1, 2, 2, 2, 1, 0, 3, 1, 2, 0, 2, 3, 3, 2, 1, 1, 3, 0, 2, 0, 3, 3, 0, 2, 3, 0, 3], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0], [4, 3, 4, 0, 3, 0, 0, 1, 2, 1, 4, 3, 4, 4, 1, 0, 3, 0, 3, 4, 2, 2, 3], [1, 2, 2, 1, 2, 2, 2], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0], [0, 5, 3, 2, 4, 5, 4, 2, 5, 3, 4], [1, 1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 1, 0, 0, 2, 2, 1, 0, 4, 0, 3, 4, 4, 1, 0, 1, 3, 1, 1], [0, 3, 2], [4], [0, 1, 1, 1, 0, 1], [2, 1, 3, 3, 2, 0], [15], [10], [1, 2], [19, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 15, 15, 14, 1, 65, 17, 23, 7, 10, 11, 6, 0, 30, 3, 1, 6, 6, 1, 1, 2, 2], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\g divInt(len(in2),saveOrd(in0))\\ni2 = mod(min(int(04.0), len((s2 + (in1[:i0][:int(8.0)] + in2))[divInt(int(8.0),min(mod(divInt(min(int(10.0), i1),i1),( max(int(4.0), i1) - ( abs(divInt(int(4.0),i1)) * i1 ) )), int(32.0))):max(saveOrd(\"\"1\"\"[:len(in1)]), saveOrd(s2))])),mod(saveOrd(\"\"k\"\"[:max(i0, int(6.0))][( ( mod(int(7.0),i1) * min(int(9.0), mod(i1,( len(in2) - min(( int(4.0) * int(4.0) ), len(getCharFromString(in0, i2))) ))) ) * divInt(i2,saveOrd((\"\":\"\".capitalize().rstrip(in1) + \"\".\"\"))) ):abs(i1)]),( abs(i2) * len((\"\"2\"\" + \"\"P\"\")) )))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 6, 8, 3, 2, 9, 5, 7, 0, 6, 4, 5, 7, 2, 2, 4, 0, 0, 9, 7, 2], [2, 0, 1, 0, 1, 1, 2, 1, 0, 1, 0, 0, 2, 0, 2, 1, 2, 1, 0, 2, 1, 0, 1, 2, 0, 1, 0, 0, 2, 2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 2, 3, 3, 1, 1, 3, 2, 3, 0, 0, 3, 0, 0, 3, 1, 1, 1, 3, 0, 2, 2, 1, 3, 2, 2, 2, 2, 0, 1, 2, 3, 0, 1, 1, 2, 1, 3, 2, 3, 3, 2, 2, 3, 2, 3, 2, 1, 0, 1, 1, 0, 3, 3, 1, 0, 0, 0, 1, 2, 0, 0, 0, 2, 3, 0, 0, 2, 0, 1, 2, 2, 0, 1, 3, 2, 0, 2, 3, 1, 2, 0, 2, 0, 0, 0, 2, 0, 3, 0, 2, 0, 3, 2, 2, 3, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [4, 3, 3, 0, 4, 3, 0, 1, 0, 4, 0, 1, 4, 1, 4, 1, 2, 2, 4, 1, 4, 4, 1, 4, 1], [0, 0, 0, 0, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 5, 3, 2, 4, 5, 2, 2, 0, 3, 1, 0], [1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 2, 3, 2, 4, 0, 0, 1, 2, 4, 2, 4, 2, 0, 2, 4, 4, 4, 4, 1, 1, 2, 2, 0, 0], [0, 3, 2, 2, 2, 3, 1], [4, 2], [0, 0, 2, 0, 2, 2, 0, 0, 1, 0, 1], [1, 3, 2], [], [13], [7], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 22, 22, 32, 0, 107, 31, 25, 15, 16, 12, 3, 0, 36, 7, 2, 11, 3, 0, 1, 1, 1], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),int(32.0))) + ( min(saveOrd((s2 + (in1[int(6.0):][int(8.0):len(in2)] + s2))[( min(i2, i0) + max(i1, i0) ):min(int(3.0), int(295.0))]), int(7.0)) + saveOrd((getCharFromString(s2, i1)[( divInt(int(0.0),min(mod(( ( ( i1 + int(6.0) ) * divInt(max(i2, int(4.0)),int(5.0)) ) - ( int(7.0) * saveOrd(s0) ) ),( max(saveOrd(\"\"n\"\"), divInt(mod(max(( abs(( int(2.0) * i1 )) * int(2.0) ), int(4.0)),i0),abs(saveOrd(in0[int(0.0):i1].capitalize()[i0:i0].rstrip(saveChr(int(0.0)).strip().capitalize().capitalize()[:divInt(i2,i0)])[i2:])))) - divInt(max(i1, i2),mod(i1,int(9.0))) )), divInt(mod(i0,int(7.0)),saveOrd(\"\"#\"\")))) * mod(i2,( saveOrd(\"\"7\"\") - int(2.0) )) ):] + s1[:( i1 * divInt(i0,i1) )][i2:divInt(i0,max(i1, ( i0 - saveOrd(s0) )))])[( mod(max(i0, i2),i2) + i0 ):i1]) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [1, 1, 1], [0, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [8, 1, 5, 1, 7, 6, 6, 8, 6, 0, 1, 1, 0, 9, 4, 6, 0], [2, 0, 1, 0, 2, 1, 1, 1], [1], [3, 2, 2, 3, 1, 2, 3, 1, 0, 3, 1, 2, 2, 0, 1, 0, 1, 0, 2, 0, 1, 2, 0, 0, 3, 1, 0, 3, 1, 0, 1, 1, 2, 2, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [3, 3, 3, 0, 0, 4, 1], [0, 0, 1, 2, 1, 2, 0], [0, 1, 0, 0, 0], [1, 5, 3, 0, 4, 5], [1], [], [0, 2, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0, 0], [0], [24], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 7, 7, 8, 0, 27, 7, 5, 4, 3, 4, 1, 0, 11, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = len(s1) \\l ( ( len(in2[int(8.0):divInt(len((\"\"Y\"\" + (in0[int(1.0):i2][min(int(5.0), ( ( i0 + int(1.0) ) + i1 )):int(7.0)] + s0))[:i0]),mod(i2,int(6.0)))]) - divInt(i1,i1) ) * min(int(6.0), i1) )\\nb1 = b1\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [1, 6, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [2, 1, 3, 0, 0, 4], [0], [], [2], [2], [5], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 1, 0, 5, 0, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"5\"\"[int(16.0):]) \\l len((in0 + in2))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 0, 0, 2, 0, 2, 2, 2, 2, 1, 0, 1, 1, 2, 0, 2, 2, 0, 2, 1, 1, 0, 2, 1, 1, 1], [2, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0], [2, 2, 2, 0, 2, 2, 1, 1, 2, 2, 1, 0, 2, 0, 0], [0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [3, 2, 2, 0, 3], [0, 4, 2, 5, 3, 2, 3], [1, 1, 0, 1, 0, 0, 2, 0, 0, 2, 0, 1, 1, 1, 2, 1, 2], [0, 0, 0, 0, 0, 0, 0], [3, 1, 4, 3], [0, 2, 1, 1, 3, 2], [0], [0, 0], [1, 1, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 7, 8, 3, 5, 9, 2, 2, 5, 7, 5, 8, 8, 2, 2, 9, 7, 2, 1, 5, 7, 0, 2, 0, 2, 0, 9, 8, 7, 7, 9, 1, 9, 8, 2, 7, 8, 2, 2, 5, 2, 4], [2, 1, 1, 2, 2, 2, 1, 1, 0, 1, 1, 2, 2, 0, 2, 0, 2, 1, 0, 2, 0, 1, 0, 1, 1, 1, 1, 0, 2, 2, 2, 0, 1, 2, 2, 1, 2, 1, 0, 1, 2, 2, 0, 0, 0, 0, 2, 1], [0, 0, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1, 0, 0, 1, 3, 3, 3, 1, 3, 1, 0, 0, 2, 2, 2, 3, 3, 2, 2, 0, 0, 0, 3, 1, 0, 0, 2, 3, 3, 2, 1, 1, 2, 2, 3, 2, 3, 0, 2, 3, 0, 2, 2, 2, 1, 0, 3, 0, 1, 2, 2, 1, 0, 2, 2, 3, 0, 3, 0, 1, 2, 0, 3, 0, 2, 2, 2, 1, 3, 3, 1, 3, 3, 1, 0, 3, 0, 3, 0, 3, 1, 0, 1, 3, 1, 0, 1, 1, 1, 3, 3, 0, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 0, 1, 3, 2, 0, 0, 1, 0, 0, 3, 3, 1, 1, 3, 1, 1, 3, 0, 0, 0, 1, 1, 3, 0, 2, 3, 1, 1, 0, 3, 1, 3, 1, 0, 3, 2, 0, 3, 2, 0, 1, 2, 1, 2, 1, 3, 0, 3, 2, 3, 2, 0, 1], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1], [2, 1, 3, 0, 2, 3, 0, 4, 0, 4, 2, 4, 3, 1, 2, 0, 3, 0, 0, 1, 2, 2, 2, 2, 3, 1, 4, 3, 1, 1, 0, 4, 0, 1, 2, 1, 1, 1, 2, 4, 1, 3, 4], [0, 1, 2, 1, 0, 2, 2, 2, 1, 2, 1, 0, 2, 0, 2, 0, 1, 1, 1, 2, 0], [1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [4, 5, 3, 4, 4, 5, 3, 1, 3, 1, 2, 1, 3, 2, 4, 1, 4, 4, 4, 2, 3, 3, 2, 5, 5, 4, 1, 4, 2, 3, 5, 3], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 4, 4, 0, 1, 2, 4, 0, 2, 0, 2, 1, 4, 2, 4, 0, 1, 4, 2, 0, 2, 1, 0, 1, 2, 0, 4, 1, 4, 2, 2, 1, 1, 2, 1, 4, 1, 0, 1, 0, 0, 2, 4, 1, 2, 4, 4, 1, 4, 0, 4, 2, 2, 0, 2, 4, 0, 3, 3, 0, 1, 4, 0, 4, 4, 1, 0, 1], [0, 3, 2, 2, 2, 0, 0, 2, 3, 2, 1, 1, 0, 2, 3, 1, 3, 3, 3], [4, 4, 2, 4, 3, 3], [0, 2, 1, 2, 0, 0, 1, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 1], [1, 3, 3, 1, 3, 0, 0, 1, 2, 0, 2, 3, 2, 0, 2, 3, 0], [0, 20, 24, 23, 20], [8, 11, 0], [8, 1, 5, 9], [3, 12, 17, 9, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 26, 26, 11, 15, 2, 7, 0, 0, 5, 7, 17, 7, 4, 6, 1, 2, 8, 43, 43, 48, 3, 163, 34, 43, 21, 14, 32, 17, 2, 79, 19, 6, 18, 17, 5, 3, 4, 5], "tree_depth": 70, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(( ( len(in1) + i2 ) - int(44.0) ), mod(int(7.0),i1))) \\l i1:{:\\nin2 = in0\\nin1 = in1\\nif int(8.0) \\le min(abs(len((in2 + (in0[:int(3.0)][min(int(5.0), i2):] + s1))[i2:mod(divInt(( saveOrd(getCharFromString(in0.capitalize().rstrip(\"\"i\"\"), min(divInt(( i2 * i1 ),i1), saveOrd(s1.capitalize()[int(9.0):])))) - i0 ),i1),( abs(saveOrd(s2[( int(2.0) + int(2.0) ):mod(divInt(len(\"\"\"\"[( max(i1, ( abs(i2) * mod(( ( int(5.0) * i2 ) * min(i0, int(7.0)) ),divInt(( int(5.0) - i2 ),( ( len(getCharFromString(s1, i0)[:min(i2, int(8.0))].capitalize()) * mod(i1,min(i0, ( ( divInt(int(8.0),max(abs(int(2.0)), abs(abs(int(2.0))))) - i2 ) + abs(i0) ))) ) * len(\"\")\"\") ))) )) + i1 ):max(int(9.0), i0)]),int(7.0)),saveOrd(getCharFromString(in0[int(2.0):i1], int(1.0))))])) * int(5.0) ))])), int(7.0)):{:\\ns2 = \"\"l.\"\"[len(in1):]\\n:}else:{:\\nif res0:{:\\nif max(i1, int(0.0)) == int(20.0):{:\\nif not True:{:\\nloopBreak% = 0\\nfor s1 in \"\"A\"\":{:\\nb2 = in1[:divInt(i1,int(2.0))] != \"\"U\"\".capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = \"\"a\"\"[i1:][i0:int(0.0)].rstrip(\"\"8\"\")\\n:}\\n:}else:{:\\nin1 = \"\"Y\"\"[:i2]\\ni2 = i2\\n:}\\n:}else:{:\\nif True:{:\\ni0 = i1\\nif ( \"\"1\"\".capitalize() not in s2 and not int(9.0) != max(mod(i2,i2), int(8.0)) ):{:\\nif i1 \\ge i2:{:\\nin0 = \"\"&\"\"\\n:}else:{:\\nif min(saveOrd(in0), int(7.0)) == int(7.0):{:\\ns2 = in2\\n:}else:{:\\ni1 += min(int(9.0), int(1.0))\\n:}\\n:}\\n:}\\nb2 = saveChr(max(i0, i1))[:i2].startswith(\"\"5\"\")\\n:}\\nloopBreak% = 0\\nfor in2 in saveChr(int(9.0))[:int(8.0)]:{:\\nin1 = getCharFromString(\"\"X\"\", abs(i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( max(int(2.0), int(7.0)) - i0 ) \\ge max(int(8.0), max(int(2.0), i0))\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = s1.capitalize() != in1[:abs(( i0 - saveOrd(saveChr(( i0 - int(2.0) ))[:( int(5.0) * mod(int(2.0),max(i2, len(s2))) )]) ))][:( saveOrd(((in0 + \"\"9\"\") + in2.rstrip(\"\"`\"\".lstrip(in0).lstrip(\"\"U\"\")))) + mod(i1,int(4.0)) )].strip()\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1], [2, 4, 8, 8, 9, 7, 3, 0, 3, 8, 7, 5, 0, 9, 4, 3], [0, 1, 1, 1, 1, 2, 1, 0, 2, 0, 2, 2, 2, 1, 1, 0, 2], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3, 2, 3, 2, 1, 2, 0, 2, 0, 3, 1, 3, 2, 0, 2, 1, 3, 1, 0, 0, 0, 2, 3, 2, 1, 3, 2, 3, 2, 3, 2, 0, 3, 2, 0, 1, 0, 2, 1, 2, 2, 3, 1, 0, 3, 1, 3, 0, 3, 2, 0, 1, 2, 0, 2, 3, 0, 0, 1], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], [2, 3, 3, 0, 0, 1, 3, 4, 2, 1, 2, 1, 3, 4, 4, 4, 0, 4, 4, 0, 0], [0, 1, 1, 1, 2, 1, 1, 1, 2], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1], [3, 5, 3, 2, 4, 5, 5, 3, 0, 4], [1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 2, 0, 1, 1, 1, 4, 4, 4, 1, 1, 3, 4, 0, 0, 2, 0], [0, 3, 2, 2, 3], [4, 5], [0, 1, 2, 1, 0], [1, 2, 3, 1, 1], [], [17, 20, 19], [3], [5]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 16, 16, 17, 0, 71, 20, 21, 9, 11, 10, 5, 0, 28, 5, 2, 5, 5, 0, 3, 1, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(in0)) \\l divInt(len(in2),( min(min(max(i0, int(24.0)), i1), int(8.0)) + len(in0) )):{:\\nres0 = mod(saveOrd((s2 + (in1[divInt(int(8.0),divInt(i1,divInt(i1,abs(int(9.0))))):][:max(( i1 - ( int(7.0) - abs(int(3.0)) ) ), i2)] + in2))[i1:i0]),mod(max(( int(0.0) - len(getCharFromString(in2[:mod(saveOrd(\"\"r\"\"),divInt(saveOrd(\"\"3\"\"),divInt(i2,saveOrd(\"\"\"\"\"))))], ( i0 * int(3.0) ))) ), i2),divInt(int(8.0),( ( min(int(7.0), i2) - saveOrd(\"\"u\"\".capitalize().capitalize().rstrip(\"\"t\"\")) ) - int(50.0) )))) \\le saveOrd((in0.strip(s0) + in1[i2:min(( i1 - int(94.0) ), ( i1 * mod(min(i0, i2),int(3.0)) ))]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 6, 7, 8, 3, 5], [1, 0, 2], [0], [3, 3, 0, 3, 2, 3, 1, 2, 0, 0, 0, 1, 3, 3], [0, 1, 1], [2, 3, 3, 0, 0, 3], [0], [1, 1, 0, 0, 1], [4, 5, 4, 3, 4, 5], [0, 1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [0, 1], [21], [2], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"Vc\"\"\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0, 0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [8, 2, 8, 4, 5, 7, 2, 0, 0, 8, 4, 4, 4, 0, 8, 0], [2, 0, 2, 2, 2, 1, 1, 1, 2, 0, 0], [0], [3, 3, 3, 3, 2, 3, 2, 2, 1, 2, 1, 2, 2, 3, 1, 0, 1, 1, 0, 1, 2, 0, 3, 3, 2, 3, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [2, 3, 3, 4, 1, 3, 3, 1, 4], [1, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1], [4, 5, 3, 2, 4, 5, 4, 1, 1, 5], [1, 0, 1], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0, 0, 0, 3, 3, 0, 4, 4, 0, 4, 4, 1, 0, 1], [0, 3, 2, 3], [4, 4], [0, 1, 0, 0], [3, 1, 3], [], [20], [], [3, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 11, 1, 38, 11, 9, 5, 6, 10, 3, 0, 24, 4, 2, 4, 3, 0, 1, 0, 2], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in1)) \\l len(in2)\\ni2 = saveOrd((in0 + (s2[( max(( ( int(82.0) - ( int(8.0) - ( mod(len(in1),int(4.0)) + i0 ) ) ) + int(5.0) ), int(7.0)) + i2 ):int(20.0)][mod(i2,len(in2)):max(divInt(saveOrd(in1),i2), i1)] + ((s1 + getCharFromString(s1.rstrip(\"\"\"\".rstrip(in2).capitalize()), divInt(mod(i1,mod(i1,i2)),i0))) + \"\"u/\"\")))[:i0][int(0.0):int(8.0)])\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1, 4, 6, 5, 3, 4], [2, 0, 2, 0, 2, 1, 1, 2, 0, 2, 2, 2, 1], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 2, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1, 0, 2, 2, 3, 0, 2, 1, 0, 2, 3, 2, 0, 0, 2, 1, 3, 3, 0, 3, 1, 2, 3, 1, 1, 0, 1, 0, 0, 3], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], [2, 3, 3, 0, 0, 0, 0, 0, 3, 3, 0, 3], [0, 0, 0, 2, 2, 2, 1, 0], [0, 1, 0, 1, 0, 0], [0, 5, 3, 2, 4, 5], [1, 1], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 3, 1, 0], [0, 3, 2], [4], [0, 0, 2, 0], [2, 0], [9], [], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 13, 0, 50, 14, 12, 8, 6, 6, 2, 0, 15, 0, 0, 4, 2, 1, 0, 1, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( divInt(len(s0[mod(len(in2),min(( i2 + ( int(3.0) + int(7.0) ) ), min(i0, int(4.0)))):int(8.0)]),divInt(i2,( i0 + int(7.0) ))) * i2 )) \\le ( ( min(i1, ( int(71.0) * i1 )) * mod(min(( i2 - i0 ), divInt(int(4.0),min(len((in0 + (s2[i2:len(in1)][int(6.0):] + \"\"6\"\"))[divInt(min(int(5.0), int(3.0)),i2):int(4.0)]), i2))),i1) ) + len((\"\"J\"\" + in2)) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 8, 8, 5, 3, 7, 8, 5, 2, 2, 5, 3, 8, 2, 1], [0, 1, 1, 0, 2, 0, 0, 1, 1, 0, 1, 2, 2, 1, 2], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 3, 3, 3, 3, 2, 2, 1, 2, 3, 0, 2, 1, 2, 1, 0, 0, 1, 0, 3, 2, 0, 3, 1, 2, 0, 0, 2, 0, 2, 2, 2, 3, 1, 3, 3, 1, 1, 1, 1, 3, 2, 2, 3, 1, 0, 2, 2, 2, 1, 0, 2, 3, 0, 2, 0, 1, 1, 2, 3, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [2, 3, 3, 0, 0, 1, 3, 0, 0, 2, 4, 4, 2, 4, 1, 0, 4, 0, 4, 3], [0, 1, 1, 1, 1, 0, 1, 2, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 5, 3, 2, 4, 5, 2, 0], [1, 1, 0, 0, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 2, 4, 4, 0, 1, 4, 1, 4, 0, 4, 1], [0, 3, 2, 0, 2, 1], [4], [0, 2, 2, 2], [3, 0, 2, 0, 2], [24, 14], [], [2, 3], [10]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 16, 16, 15, 0, 71, 21, 20, 10, 11, 8, 5, 0, 23, 6, 1, 4, 5, 2, 0, 2, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( len(in2) + ( min(min(max(i0, int(24.0)), i1), len(in0)) - min(min(abs(divInt(mod(int(8.0),( saveOrd((s2 + (in1[i1:][divInt(int(8.0),mod(int(5.0),i0)):] + in2))[i2:int(3.0)]) - i0 )),saveOrd(getCharFromString(s2.capitalize().rstrip(\"\"\"\\\\\"\"\")[divInt(i0,abs(int(7.0))):], ( i1 - i1 ))))), ( i0 - divInt(( divInt(saveOrd(getCharFromString(\"\"Y\"\", int(8.0))),max(min(int(5.0), int(2.0)), int(2.0))) + int(5.0) ),saveOrd(s0.capitalize())) )), divInt(divInt(min(int(3.0), i1),( divInt(divInt(int(8.0),i2),( saveOrd(saveChr(i2)) - ( i1 * int(2.0) ) )) + int(1.0) )),( len(\"\"2O3\"\") + i2 ))) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [2, 1, 2, 0], [2, 0], [0, 2], [0], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [4, 6, 7, 8, 3, 5, 8, 3, 6, 7, 0, 5, 4, 0, 7, 9, 1, 5, 4, 7, 7, 2, 1, 6, 0, 8, 6, 2], [1, 0, 2, 0, 0, 1, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 2, 1, 2, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0], [0], [0, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3, 1, 3, 2, 0, 2, 0, 0, 3, 3, 3, 3, 3, 3, 1, 2, 2, 2, 3, 1, 0, 1, 1, 0, 2, 3, 1, 1, 0, 0, 2, 1, 2, 1, 2, 2, 2, 0, 2, 3, 0, 3, 2, 1, 3, 1, 2, 3, 2, 2, 2, 3, 1, 2, 3, 2, 3, 0, 1, 0, 2, 3, 3, 1, 2, 2, 2, 1, 3, 0, 0, 1, 2, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 2, 2, 0, 0, 1, 1, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 3, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 3, 3, 0, 0, 3, 4, 4, 2, 3, 1, 1, 1, 0, 1, 1, 0, 3, 1, 1, 2, 3, 3, 4, 0, 3, 0], [0, 0, 2, 1, 0, 0, 1, 0, 0, 2, 0, 2, 1, 2, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0], [2, 5, 4, 3, 4, 5, 0, 4, 2, 0, 1, 3], [1, 1, 1, 1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 4, 0, 2, 4, 4, 4, 1, 0, 1, 2, 2, 0, 4, 4, 4, 2, 1, 1, 4, 0], [0, 3, 2, 1, 0, 0, 2, 1], [4], [0, 2, 0, 0, 0, 0, 1, 0], [2, 2, 1, 3], [], [0], [9, 6], [31]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 28, 28, 31, 0, 116, 32, 27, 16, 16, 12, 4, 1, 32, 8, 1, 8, 4, 0, 1, 2, 1], "tree_depth": 77, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 \\l abs(( len(s2) + len(in2) )):{:\\nres0 = min(int(46.0), mod(i0,i2)) \\le i0\\nloopBreak% = 0\\nfor in1 in in0:{:\\nin1 = (in2 + (s0[int(7.0):min(len(in1), int(8.0))][saveOrd(getCharFromString(s2, mod(i0,( i1 + i2 )))[saveOrd(saveChr(abs(len(\"\"9\"\"))).capitalize().rstrip(s0)[max(max(max(int(3.0), divInt(divInt(( min(int(5.0), i1) * int(8.0) ),int(3.0)),i0)), ( max(int(6.0), int(7.0)) - i1 )), i2):( int(0.0) + ( int(5.0) + ( divInt(divInt(i1,( max(i0, min(mod(int(4.0),len(\"\"6\"\")), int(0.0))) - divInt(max(mod(( ( max(int(7.0), ( abs(divInt(len(s1[:i2][int(9.0):i0]),( len(getCharFromString(getCharFromString(\"\"a\"\"[saveOrd(\"\"`\"\"):int(1.0)].capitalize(), divInt(( ( int(5.0) + min(i1, i2) ) + int(4.0) ),( ( len(saveChr(i1)) * i2 ) + divInt(int(7.0),i2) ))), i0)) * mod(i0,mod(divInt(i2,i1),int(7.0))) ))) - int(2.0) )) * int(1.0) ) - int(6.0) ),i0), divInt(i1,i1)),i0) )),int(0.0)) + i2 ) ) )]):i0]):] + in0))[int(8.0):min(int(62.0), i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 0, 0], [0, 0, 0], [0, 2, 2], [0, 0, 0], [0, 0], [], [], [2], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [0, 2, 2, 3, 2, 3, 1, 1, 0, 1, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1], [0, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 1, 4, 3, 4, 1, 2, 3, 3, 3], [1], [0, 0, 0], [0, 1, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [0], [4], [], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 3, 2, 3, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 10, 3, 2, 1, 2, 10, 1, 3, 10, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s1:{:\\nloopBreak% = 0\\nfor in1 in \"\"E\"\":{:\\nloopBreak% = 0\\nfor in0 in in1:{:\\nb2 = i0 \\le ( mod(saveOrd((s1 + s2)[mod(len(getCharFromString(in0, int(31.0))),int(0.0)):]),i2) + int(8.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1], [2, 7, 8, 8], [2, 1, 1, 0, 0], [0], [3, 3, 2, 3, 2, 3, 0, 3, 0, 1, 0, 1, 3, 0, 0], [0, 0, 1], [2, 3, 4, 4, 2, 4], [0, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [1, 1], [], [2, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 1, 1], [0, 3, 2], [4], [0, 2, 0, 1], [0, 3], [24], [], [], [10]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 15, 2, 6, 2, 0, 4, 2, 0, 13, 1, 0, 4, 2, 1, 0, 0, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0[( saveOrd(getCharFromString((in2 + (in0[:( saveOrd(s2) + i2 )][abs(i1):int(27.0)] + \"\"Y\"\"))[i1:], int(8.0))) - saveOrd(\"\"\"\\\\\"\"\") ):i0])) \\l i0\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 4], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [7, 1, 0, 8, 7, 1, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 1, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [1, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [3], [], [], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 3, 1, 1, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 11, 11, 2, 0, 19, 5, 5, 0, 5, 6, 1, 1, 9, 1, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(\"\")\"\") \\le mod(mod(len(s2),divInt(len(in2),int(71.0))),int(0.0)):{:\\nloopBreak% = 0\\nwhile i0 \\le int(8.0):{:\\nloopBreak% = 0\\nfor in0 in (in0 + in1)[int(7.0):]:{:\\nres0 = divInt(mod(abs(int(13.0)),int(54.0)),len(getCharFromString(s1, int(47.0)))) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 3, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 3, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [0], [11], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 1, 15, 4, 5, 4, 1, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - divInt(len(\"\"L\"\"),min(( i0 + int(3.0) ), int(3.0))) ) + min(int(4.0), int(8.0)) )\\ni0 -= int(7.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 1, 6, 8, 5, 8, 5, 6, 5, 9, 2, 5, 7, 2], [2, 0, 1, 2, 1], [0], [3, 2, 2, 3, 2, 3, 1, 3, 0, 1, 1, 1, 3, 3, 1, 1, 0, 3, 3, 0, 3, 1, 2, 1, 1, 3, 1, 0, 3, 3, 1, 0, 1, 1], [0, 0, 0, 0], [4, 3, 3, 0, 4, 0, 1, 1, 4, 0, 3, 2], [0, 1, 1, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5, 5, 5, 3], [0, 0, 1], [], [1, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 4, 0, 4, 4, 2, 0, 4, 2, 4, 0, 2, 4, 0, 0], [0, 3, 2, 3, 0, 2, 2], [4, 3], [0, 0, 0, 0, 1, 2, 2], [0, 2, 3], [2], [], [9], [16]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 5, 0, 34, 4, 12, 4, 0, 9, 3, 0, 26, 7, 2, 7, 3, 1, 0, 1, 1], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"C9-\"\") \\le ( ( len(s0[( len((in2 + (in0[int(3.0):min(i2, int(1.0))][int(6.0):int(8.0)] + s2))[saveOrd(getCharFromString(in1.rstrip(in2[:min(int(5.0), int(8.0))].lstrip(getCharFromString(in2.capitalize()[i0:], max(max(i1, saveOrd(in2.capitalize()[int(5.0):])), ( int(6.0) + int(5.0) )))).capitalize()), min(int(9.0), i2))):len(in0)]) - abs(int(2.0)) ):i1]) - int(57.0) ) - int(2.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 1], [2, 2, 0], [0, 2, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [3, 1, 0, 8, 7, 0, 3, 5, 9, 4, 7, 0, 8], [1, 0, 1, 2, 0], [1], [3, 2, 2, 0, 0, 3, 1, 1, 0, 1, 1, 2, 2, 2, 1, 1, 3, 1, 0, 0, 0, 3, 0, 0], [1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 2, 2, 3], [0, 0, 0, 2, 1, 2, 0], [1, 1, 0, 0, 1], [1, 5, 3, 5, 4, 3, 2, 1, 3, 2], [1], [0], [0, 0, 0, 2, 1, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [0, 2, 2], [2], [], [], [1], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 3, 2, 1, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 9, 9, 3, 0, 18, 5, 3, 1, 4, 6, 1, 1, 6, 0, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le mod(mod(i1,i0),len(in2)):{:\\nloopBreak% = 0\\nwhile int(31.0) \\le int(0.0):{:\\nloopBreak% = 0\\nfor in0 in in2:{:\\nres0 = i1 != int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = \"\"1\"\"[int(7.0):divInt(( divInt(int(03.0),int(5.0)) + len(in0) ),int(9.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [3, 4, 4, 8, 7, 7], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [0, 0, 0, 0, 1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [3, 3, 2, 1, 0], [1], [9], [6], [23, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 1, 13, 4, 4, 4, 1, 2, 5, 0, 3, 0, 0, 0, 5, 1, 1, 1, 2], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\">&6jB\"\") \\le ( ( len(s2) - divInt(len(in2),min(( int(3.0) + int(4.0) ), int(4.0))) ) + int(8.0) )\\ni0 -= int(7.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 1], [2, 1, 1, 2, 1], [2, 1], [0, 1, 1], [], [0, 0], [], [], [3, 1], [0, 1, 0], [1, 1, 0, 1], [0, 0, 0], [], [2], [], [], [0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [8, 1, 3, 8, 7, 9, 8, 2, 6, 7, 0, 1, 5, 3, 9], [2, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2], [0, 0], [3, 3, 2, 2, 2, 3, 3, 2, 0, 3, 3, 1, 3, 1, 0, 0, 3, 0, 2, 1, 0, 1, 3, 1, 3, 1, 1, 2, 1, 0, 0, 0, 3, 0, 1], [0, 0, 1, 1, 0, 1], [3, 3, 3, 0, 1, 1, 0, 4, 3, 2, 0], [2, 0, 0], [1, 0, 0], [4, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [0, 2, 1], [3], [], [], [], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 0, 0, 0, 1, 3, 4, 3, 0, 1, 0, 0, 1, 15, 15, 11, 2, 35, 6, 11, 3, 3, 6, 1, 0, 12, 0, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l len(in2):{:\\nres0 = ( ( mod(len(in0),min(divInt(i2,max(max(int(8.0), min(int(1.0), i0)), i2)), saveOrd((s2 + (in1[:i2][( int(3.0) * i2 ):] + in2))[int(8.0):len(\"\"\"\")]))) + int(7982.0) ) + abs(int(67.0)) ) \\g int(0.0)\\ni2 = divInt(int(15.0),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not i1 \\l i0:{:\\ni2 = min(i2, int(39.0))\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2, 2, 0], [0, 0], [], [0, 0], [], [], [0, 3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [8, 1, 5, 9, 7, 5, 1, 9, 5, 1, 5, 4, 6, 1, 4, 4, 4, 8, 9], [2, 2, 2, 0, 2, 2, 1, 1, 0, 1, 2], [1], [1, 2, 2, 3, 2, 2, 3, 2, 0, 1, 2, 2, 2, 2, 1, 0, 3, 2, 1, 0, 1, 1, 3, 0, 2, 0, 2, 3, 1, 1, 1, 1, 2, 3, 2, 2, 3, 0, 1, 3, 1, 0, 3, 2, 3, 2, 3, 3, 3, 3, 2, 2, 3, 1, 0, 0, 0, 0, 2, 3, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1], [4, 3, 3, 0, 4, 2, 3, 4, 0, 1, 2, 4, 0, 4, 2, 4], [1, 2, 2, 2, 1, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 5, 3, 2, 4, 5, 5], [1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 2, 4, 1, 1, 1, 0], [0, 3, 2], [4], [0, 1, 1, 2], [2, 1, 1, 0], [7], [18, 17], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 19, 19, 11, 0, 61, 20, 16, 10, 10, 7, 4, 0, 18, 1, 0, 4, 4, 1, 2, 1, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(8.0) \\le ( divInt(saveOrd(s0),divInt(( len(in2) - ( i2 * int(15.0) ) ),divInt(( ( ( int(9.0) * i2 ) * len(in0) ) - divInt(int(7.0),i2) ),int(519.0)))) + int(51.0) )\\nres0 = min(i0, divInt(i2,divInt(saveOrd((s2 + (in1[:int(5.0)][:int(46.0)] + in2))[int(1.0):int(4.0)]),( abs(mod(divInt(len(\"\"2\"\"),i2),int(4.0))) + saveOrd(getCharFromString(\"\"s\"\", int(4.0))[i1:]) )))) \\le min(( max(mod(abs(saveOrd(\"\"r\"\")),min(saveOrd(\"\"H\"\"), ( ( abs(int(8.0)) * i1 ) * i0 ))), i1) * i2 ), mod(saveOrd(in2),int(9.0)))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [8, 1, 5, 8, 5, 6, 6, 8, 6, 0, 1, 1, 0, 9, 4, 6, 0], [2, 0, 1, 0, 2, 1, 1], [1], [2, 2, 2, 3, 2, 2, 3, 1, 1, 3, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 0, 3, 1, 0, 3, 1, 0, 1, 1, 2, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [4, 3, 3, 2, 3, 4], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [0, 1, 0], [3], [], [], [], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 6, 0, 30, 10, 6, 6, 4, 6, 1, 0, 12, 0, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( ( saveOrd(s1) + divInt(( len(in2) + int(8.0) ),int(1.0)) ) + len(in0) ) * int(5.0) ) \\l divInt(divInt(( int(8.0) - i2 ),int(5.0)),i0)\\nb1 = divInt(i1,int(6.0)) \\le ( abs(i0) * len((s2 + (in1[int(6.0):i2][:saveOrd(in2)] + \"\"[\"\"))[int(86.0):i1]) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [2], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [3, 1, 5, 0, 5, 9, 1, 3, 9, 2, 9, 5, 9], [2, 1, 1, 0, 2, 0, 0, 0, 2, 2, 1], [1], [3, 0, 2, 3, 0, 2, 3, 1, 2, 0, 3, 2, 2, 2, 1, 0, 1, 0, 2, 3, 1, 0, 2, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3], [0, 0, 0, 2, 2, 2, 0, 0, 1], [0, 0, 0, 1, 0], [2, 2, 3, 2, 1, 5], [0, 1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [2, 3], [], [], [9], [4]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 2, 2, 0, 2, 0, 0, 0, 2, 0, 0, 1, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(\"\"9!\"\") \\le i2\\ns2 = s2\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 0, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [2, 2, 4, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [0], [0], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 4, 0, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"A\"\") \\le ( ( len(s2) + ( len(s2) + min(( i2 + int(3.0) ), int(7.0)) ) ) * int(4.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [2], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 5, 8, 8, 5, 9, 3, 1, 7, 8, 2, 2, 6, 1, 1, 3, 6, 3], [0, 0, 1, 0, 2, 1, 1, 1, 2, 2, 1, 0, 2, 0, 2], [0, 1], [3, 2, 3, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0, 0, 3, 2, 2, 2, 3, 3, 0, 1, 0, 0, 1, 1, 2, 3, 2, 2, 3, 2, 1, 3, 3, 1, 2, 3, 2, 2, 1, 0, 0, 1, 3, 1, 0, 3, 2, 2, 2, 0, 1, 1, 2, 2, 0, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0, 4, 4, 2, 2, 1, 4, 3, 1, 3, 3], [0, 0, 0, 2, 1, 2, 0, 2, 0, 2, 2], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [2, 5, 3, 2, 4, 5, 4, 5, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 1, 2, 4, 3, 2, 2, 4, 4, 4, 0, 2, 1, 4, 2, 1, 0, 1, 2, 4, 3, 3, 1, 3, 2, 1, 1, 3, 4, 2, 1, 3, 4, 0, 0, 1, 1], [0, 3, 2, 3, 1, 0, 1, 2, 3], [4, 2, 4], [2, 0, 2, 2, 2, 0, 2, 2, 2, 1, 2, 1], [1, 2, 2, 2, 1, 1, 2, 2, 0, 0, 1], [3, 8], [3, 9, 14, 5], [0, 6, 9, 1, 6], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 19, 15, 0, 70, 21, 15, 11, 10, 9, 11, 0, 48, 9, 3, 12, 11, 2, 4, 5, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = getCharFromString(s2, saveOrd(in2)) == (in0 + (s2[( len(in1) + len(\"\"d\"\"[divInt(min(divInt(( i0 + int(6.0) ),int(0.0)), int(5.0)),i0):]) ):][( int(8.0) + i1 ):int(8.0)] + (saveChr(i0).strip().capitalize()[divInt(i2,int(5.0)):][i1:i1] + in2).rstrip(\"\"0\"\"[min(( ( mod(saveOrd(getCharFromString(\"\"6\"\"[saveOrd(in1):], i1)),int(9.0)) * i2 ) - i2 ), int(3.0)):])[int(1.0):]))[divInt(abs(( ( abs(divInt(int(7.0),max(saveOrd(\"\"9\"\"), int(8.0)))) * mod(len(saveChr(mod(( int(2.0) + i1 ),i0))[:int(2.0)]),max(int(6.0), i2)) ) * len(((\"\"jo\"\" + (\"\"1\"\"[( mod(mod(i0,int(1.0)),int(1.0)) + ( ( i2 * int(3.0) ) * int(6.0) ) ):] + \"\"6\"\")) + (\"\"D\"\"[:int(3.0)].capitalize() + (in2.rstrip(s0) + \"\"I\"\")))) )),len(\"\"f\"\")):]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [2], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [2, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 0, 3, 1, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 0, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 4, 1], [0, 3, 2], [4], [2, 1, 0, 1], [1], [], [21], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 4, 0, 16, 4, 3, 2, 2, 6, 1, 0, 14, 1, 0, 4, 1, 0, 1, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s2 == in2:{:\\nres0 = saveOrd(s0) \\le divInt(mod(len((s2 + (in1[( i2 + len(in2) ):int(3.0)][:i0] + getCharFromString(\"\"v\"\", int(3.0))[:int(5.0)]))[int(8.0):]),i1),( int(8.0) + i0 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [2, 2, 2, 1, 0, 2, 2, 2, 1, 0, 0, 2, 0, 0, 2, 1, 0], [2, 1, 0, 0, 0, 2, 1, 0], [0, 2, 2, 0, 0, 1, 1, 1, 2], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [], [], [3, 1, 1], [4, 0, 5, 1, 3], [1, 1, 1, 2, 2, 0, 0, 1, 1], [0, 0, 0, 0, 0], [4, 0], [2, 2], [], [], [1, 1], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 0, 8, 7, 7, 3, 5, 4, 5, 7, 0, 8, 0, 2, 2, 0, 5], [0, 2, 1, 1, 0, 0, 2, 2, 0, 2, 0, 0, 0, 1, 2, 0, 0, 0, 1], [1, 1, 1], [3, 2, 2, 3, 2, 3, 1, 0, 0, 1, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1, 2, 1, 2, 1, 2, 1, 3, 0, 3, 2, 3, 2, 0, 0, 2, 2, 3, 0, 2, 2, 0, 2, 3, 2, 0, 0, 3, 1, 1, 2, 2, 1, 1, 1, 0, 1, 0, 3, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [4, 3, 3, 2, 2, 3, 0, 2, 3, 2, 0, 4], [0, 2, 1, 1, 1, 0, 1, 2, 2, 0, 2, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1], [2, 5, 3, 3, 4, 1, 2, 3, 3, 3, 1, 2, 2, 5, 5, 2, 1, 1], [1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 2, 3, 0, 2, 4, 0, 0, 0, 1, 4, 4, 1, 1, 0, 2, 1, 1, 0, 0, 0, 1, 1, 1], [0, 3, 2], [4], [2, 2, 2], [0, 3, 1, 1, 1, 3, 0, 2, 2], [2, 4], [6, 13, 10], [2, 9], [12, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 17, 17, 8, 9, 4, 6, 0, 0, 3, 5, 9, 5, 2, 2, 0, 0, 2, 18, 18, 19, 3, 61, 18, 12, 13, 8, 18, 9, 4, 26, 3, 1, 3, 9, 2, 3, 2, 2], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in2),divInt(len(in0),int(37.0))),i0):{:\\nif i2 \\l int(0.0):{:\\nloopBreak% = 0\\nfor in0 in (in1 + getCharFromString(s1, i1)[( ( abs(int(8.0)) + int(7.0) ) * abs(int(73.0)) ):])[i1:]:{:\\nres0 = int(5.0) != ( int(4.0) - ( int(57.0) - divInt(int(0.0),len(s2)) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in0\\n:}else:{:\\nloopBreak% = 0\\nfor in0 in \"\"C\"\":{:\\nloopBreak% = 0\\nfor s1 in \"\")\"\".capitalize().rstrip(\"\"g\"\"):{:\\nloopBreak% = 0\\nwhile s2.startswith(\"\"n\"\"[i0:]):{:\\ns2 = \"\"k\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = in2 in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = not not min(mod(abs(( i0 - i2 )),( ( len(s2) + i2 ) - mod(( i0 * mod(abs(( i2 * i0 )),min(int(8.0), int(0.0))) ),( mod(int(2.0),int(2.0)) + int(0.0) )) )), i0) \\g int(5.0)\\nif i0 \\ge saveOrd(\"\"\"\\\\\"E\"\"):{:\\ni1 *= i2\\n:}else:{:\\ni0 -= i0\\n:}\\nloopBreak% = 0\\nfor s1 in \"\"2\"\":{:\\ni0 -= i1\\ns1 = \"\"9\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [4, 4, 7, 8, 3, 5, 3, 6], [2, 1, 1, 1, 0, 2, 1, 1, 2], [0], [3, 0, 2, 2, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3, 2, 3, 3, 2, 1, 0, 2, 3, 3, 3, 3, 2, 3, 1, 1, 3, 3, 0, 3, 3, 0, 0, 3, 2, 3, 0, 2, 3, 1, 3, 1, 3], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 1, 3, 0, 2, 3, 4, 4, 4, 3, 3, 4, 3, 2, 2, 4, 3, 1, 2, 2, 4], [0, 1, 0, 1, 1], [1, 1, 0, 1], [5, 5, 3, 4, 4, 5, 1, 0, 5, 3], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 2, 4, 1, 0, 2, 4, 1, 4, 2, 2, 0, 1, 1, 1, 1, 2, 3, 0, 0, 1], [0, 3, 2], [4], [0, 1, 2, 0, 2, 0, 0, 1, 1], [2, 3, 0, 3, 3, 2, 0, 1, 2, 3, 2], [7, 24], [13], [9, 3, 8, 4], [5, 20, 30, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 9, 0, 46, 9, 21, 5, 4, 10, 11, 0, 32, 3, 1, 9, 11, 2, 1, 4, 4], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(i2) \\l ( ( max(len(in2[int(44.0):mod(i1,i1)]), i1) + int(7.0) ) - min(abs(( len(in2) + saveOrd((in0 + (in1[( int(8.0) - i0 ):( saveOrd(in1) - saveOrd(\"\"9\"\") )][len(getCharFromString(\"\"\"\"\", len(in2))[mod(saveOrd(\"\"H\"\".rstrip(s1[:int(3.0)][int(5.0):len(\"\";\"\")].capitalize())[abs(i2):abs(saveOrd(\"\"_\"\"))]),i1):]):] + \"\"3\"\"))[:i1]) )), len(\"\"Y\"\")) )\\ns0 = (in2 + in0)[:divInt(max(i2, mod(abs(int(3.0)),abs(int(6.0)))),saveOrd(\"\"n84\"\"))]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 0, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1], [1], [], [2, 0, 3, 2, 0, 4, 1, 2, 2, 0], [0], [], [2, 1, 1, 0], [2], [5], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 11, 1, 4, 0, 1, 3, 1, 0, 10, 1, 0, 4, 1, 0, 0, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[i0:]) \\l len((in2[:len(getCharFromString(\"\"1\"\", divInt(int(3.0),abs(i1))))] + in1[int(0.0):int(6.0)][:int(8.0)]))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1], [1, 1, 2, 2, 1, 1, 2, 1], [2, 2, 0], [0, 1, 0, 1, 2], [0], [0, 0], [], [], [3, 3], [4, 4, 2, 1], [1, 1, 1, 0, 1, 2], [0, 0, 0, 0], [0], [3, 1], [0], [1], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 2, 6, 8, 3, 0, 2, 7, 4, 7, 2, 8, 4, 7, 4, 4, 5, 1], [2, 2, 1, 0, 2, 2, 1, 2, 0, 2, 1, 0, 2, 2, 2], [1, 0], [3, 2, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 3, 3, 2, 1, 1, 0, 0, 0, 0, 1, 3, 2, 1, 2, 1, 3, 0, 0, 1, 0, 0, 3, 1, 3, 2, 1, 3], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [4, 3, 0, 0, 0, 3, 2, 1, 1, 2, 4], [2, 0, 0, 2, 1, 2, 0], [0, 1, 1, 0, 0, 1, 1, 1], [2, 1, 3, 4, 4, 0, 5, 2, 0, 3, 4], [1, 1, 1, 0, 0, 0, 1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 3, 2, 1, 3, 1, 4, 1, 2, 0, 1, 0], [0, 3, 2], [4], [2, 0, 2, 2, 0], [3, 3, 3, 2, 2, 0, 3], [7], [], [9, 1], [26, 11, 12, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 1, 0, 0, 0, 2, 4, 6, 4, 1, 1, 1, 0, 0, 18, 18, 15, 2, 45, 10, 7, 4, 7, 10, 7, 1, 23, 2, 1, 5, 7, 1, 0, 2, 4], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(s1),i2) * mod(min(int(3.0), i2),int(2.0)) )\\ni1 += int(6.0)\\nloopBreak% = 0\\nwhile i0 \\le mod(( int(8.0) + i2 ),int(3.0)):{:\\nloopBreak% = 0\\nwhile i2 == divInt(i1,int(0.0)):{:\\nres0 = ( int(2.0) \\g divInt(int(747.0),i2) and in0 in (in1 + (in1[int(2.0):][min(min(mod(int(8.0),int(4.0)), i0), i2):i1] + s0))[i0:] )\\ni2 = int(7.0)\\nloopBreak% = 0\\nfor in2 in getCharFromString((\"\"[\"\"[len((\"\"(\"\" + \"\")\"\".rstrip(s2[( int(44.0) * mod(int(5.0),abs(i2)) ):i2]))):] + \"\"91H+\"\"), int(1.0)):{:\\ns0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 7, 5, 8, 8, 8, 7, 7, 4, 3, 2, 1, 0, 7, 7, 5, 6, 3, 6, 0, 9], [0, 0, 1, 0, 2, 0, 0, 1, 2, 2, 0, 2, 0], [1], [3, 2, 2, 3, 2, 2, 3, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1, 3, 2, 2, 3, 2, 3, 2, 2, 2, 2, 3, 0, 1, 3, 1, 1, 0, 3, 1, 3, 2, 0, 3, 2, 3, 3, 3, 1, 0, 1, 3, 0, 1, 1, 1, 3, 2, 3, 2, 0, 3, 3, 3, 3, 1, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0, 1, 2, 1, 1, 2, 1, 3, 2, 1, 3, 1, 2, 3, 4, 0, 0], [0, 2, 0, 2, 1, 2, 0, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0], [2, 5, 0, 2, 4, 5, 1], [1, 1, 1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0, 4, 2, 1, 1, 0, 4, 1], [0, 3, 2], [4], [2, 1, 2, 0], [1, 2, 2], [], [15], [8, 0], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 21, 21, 13, 0, 70, 19, 21, 13, 6, 7, 3, 0, 19, 3, 1, 4, 3, 0, 1, 2, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(( len(getCharFromString((s0 + (s2[( i0 + int(3.0) ):][:int(7.0)] + in1))[divInt(i0,( int(5.0) * i1 )):], int(8.0))) + i0 ),( i2 * int(8.0) ))) - min(( ( min(( max(divInt(mod(( ( abs(i0) * int(8.0) ) + max(int(7.0), int(7.0)) ),i0),max(int(4.0), abs(( i1 - max(divInt(len(in2),abs(max(int(3.0), i2))), int(2.0)) )))), len(\"\"p\"\"[i2:int(1.0)].rstrip(\"\"8\"\"))) + int(077.0) ), int(563.0)) - max(( abs(( i0 - len(s1) )) - saveOrd(\"\"0\"\".capitalize()) ), min(min(int(6.0), int(0.0)), i2)) ) - int(9.0) ), i0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 0, 1, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 0, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [0, 0, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [3, 3, 1], [], [7], [], [26, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 4, 4, 3, 1, 2, 3, 0, 3, 0, 0, 0, 3, 0, 1, 0, 2], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( ( len(\"\"[_h\"\") + divInt(len(in2),min(( i2 + int(3.0) ), i0)) ) + int(7.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 4, 8, 8, 5, 5, 3, 1, 9, 8, 4, 4, 4, 0, 8, 0], [1, 0, 1, 2, 2, 1, 1, 1], [0], [3, 3, 2, 3, 2, 3, 2, 0, 1, 0, 0, 1, 3, 3, 1, 0, 1, 0, 0, 1, 0, 1, 3, 1, 0, 1, 3, 0, 2, 2, 0, 2, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0], [2, 3, 3, 0, 1, 3, 3, 1, 4], [2, 0, 2, 2], [0, 1, 0, 0, 1, 1], [4, 5, 5, 2, 1, 5, 4], [1, 1], [], [1, 0, 2, 4, 3, 0, 3, 0, 1, 0, 1, 0, 0], [3, 3, 2], [4], [0, 0, 0, 2], [3, 3], [], [], [], [7, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 17, 3, 6, 2, 1, 4, 2, 0, 10, 1, 1, 1, 2, 0, 0, 0, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(\"\"$\"\")) \\l ( len(in1) * divInt(min(( i1 + int(3.0) ), i0),i1) ):{:\\nres0 = int(48.0) \\le max(len((in2 + (in2 + \"\"\"\\\\\"\"\")).rstrip(s2)[int(8.0):i2]), int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [0, 1, 1], [0, 0], [], [3], [1], [], [], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [6, 1, 5, 9, 5, 9, 1, 3, 9, 2, 9, 5, 9, 1, 7, 1, 3, 1, 6, 8, 7, 3, 6, 0, 4, 4, 3, 7, 1, 1, 8, 7, 9, 5, 2, 2], [2, 1, 1, 0, 2, 0, 0, 0, 2, 2, 1, 2, 2, 2, 0, 1, 0, 0, 0, 2, 1, 2, 0, 1, 0, 2], [1], [3, 2, 1, 3, 0, 2, 3, 1, 2, 0, 2, 2, 2, 2, 2, 0, 1, 0, 2, 3, 1, 3, 0, 0, 3, 0, 3, 2, 1, 1, 0, 2, 0, 0, 1, 1, 3, 1, 1, 2, 1, 2, 2, 2, 3, 0, 0, 3, 1, 1, 1, 1, 0, 3, 2, 2, 0, 2, 2, 1, 2, 0, 2, 0, 2, 3, 1, 2, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 0, 1, 3, 0, 3, 3, 3, 2, 1, 1, 2, 1, 2, 0, 0, 1, 0, 2, 3, 0, 2, 1, 1, 3, 3, 0, 2, 3, 1, 2, 2, 0, 3, 2, 3, 3, 3], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [4, 3, 1, 0, 0, 3, 4, 4, 1, 1, 0, 0, 3, 3, 1, 4, 2, 0, 1, 1, 4, 0, 0, 3, 3, 3, 2, 4, 2, 4, 3, 4], [0, 0, 0, 1, 0, 2, 0, 0, 1, 0, 1, 0, 2, 2, 1, 0, 2, 2, 2, 2, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [2, 5, 3, 2, 1, 5, 4, 2, 2, 0, 1, 5, 4, 0], [1, 1, 1, 1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0, 2, 2, 2, 2, 4, 4, 1, 4, 4, 1, 1, 0, 0, 0, 4, 2, 0, 0, 4, 4, 3, 0, 0, 0, 1], [0, 3, 2, 3, 2, 1, 1, 3], [4, 1, 0], [0, 1, 1, 1, 2, 1, 0, 2], [0, 0, 1, 2], [1, 5], [2], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 36, 36, 26, 1, 119, 36, 32, 22, 15, 14, 4, 0, 37, 8, 3, 8, 4, 2, 1, 1, 0], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s2) \\le ( int(6.0) + len(in2) ) or i2 \\le ( max(int(1.0), divInt(i1,( ( mod(divInt(mod(i1,int(59.0)),i0),divInt(min(int(5.0), min(i2, i0)),len(getCharFromString((in0 + (s2[:i0][:saveOrd(s1)] + in2))[( int(9.0) + int(1392.0) ):i0], ( i2 + i2 ))))) - int(9.0) ) + int(59.0) ))) * saveOrd(\"\"B\"\".capitalize().rstrip(\"\"F\"\".capitalize().rstrip())[int(1.0):int(7.0)][:( int(1.0) + mod(( ( max(i1, i2) + max(int(3.0), int(1.0)) ) - int(6.0) ),int(8.0)) )][i2:][:min(divInt(divInt(i2,( ( int(7.0) + ( i0 - ( i1 + divInt(min(int(3.0), ( i0 * int(6.0) )),mod(divInt(len(\"\"c\"\"),len(in1)),max(saveOrd(s2), abs(min(max(mod(( max(i0, int(0.0)) * saveOrd(s2) ),i0), min(min(len(saveChr(( int(4.0) - int(4.0) ))), ( int(3.0) + mod(i2,i1) )), int(7.0))), i2))))) ) ) ) * ( len(s0[i0:]) * ( int(1.0) * int(1.0) ) ) )),len(s1)), abs(i1))]) ) )\\ni0 *= ( saveOrd(saveChr(int(879522.0))) + divInt(( i2 - abs(mod(saveOrd((in2 + in1).lstrip()),len(s0))) ),saveOrd(\"\"6\"\")) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 1, 3, 1, 3, 2, 2, 0, 1, 1, 2, 0, 3, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [2], [], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( int(3.0) + len(\"\"5\"\") )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [3, 1, 6, 8, 5, 0, 9, 7, 5, 1, 2, 7, 6, 2, 9, 6, 1, 8, 5, 9, 3, 6, 1, 9, 6, 4, 1, 8, 6], [2, 0, 1, 0, 1, 2, 2, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0, 0, 1, 0, 1, 0, 0, 2, 2], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3, 1, 2, 3, 0, 3, 3, 3, 2, 0, 0, 0, 0, 2, 2, 1, 2, 3, 2, 2, 3, 2, 1, 1, 2, 0, 3, 1, 2, 3, 2, 1, 3, 3, 2, 0, 2, 0, 0, 1, 0, 2, 0, 2, 0, 1, 1, 2, 1, 1, 1, 3, 3, 2, 0, 0, 0, 0, 2, 3, 0, 2, 3, 1, 2, 2, 3, 3, 2, 0, 2, 3, 0, 1, 3, 2, 3, 3, 1, 1, 0, 1, 0, 3, 1, 1, 1, 0, 2, 1, 3, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [4, 3, 4, 0, 4, 1, 1, 2, 4, 4, 3, 2, 2, 1, 4, 1, 0, 0, 3, 4, 2, 0, 0, 0, 2, 0], [0, 1, 1, 1, 2, 2, 0, 0, 2, 2, 1, 0, 1, 2, 2, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [0, 5, 3, 2, 4, 5, 0, 1, 3, 2], [1, 1, 1, 1], [], [0, 3, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 0, 4, 0, 2, 4, 2, 2, 0, 0, 4, 1, 1, 3, 2, 4, 2, 2, 0, 2, 1, 1], [0, 3, 2, 0, 1], [4], [0, 0, 0, 0, 1, 0, 1, 1, 2, 0], [0, 2, 3, 1], [12], [9], [3], [24]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 29, 29, 26, 1, 105, 28, 26, 17, 12, 10, 4, 0, 33, 5, 1, 10, 4, 1, 1, 1, 1], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( ( len((in2 + (in0 + (s2[( saveOrd(in1) + int(3.0) ):int(1.0)][i2:int(6.0)] + getCharFromString(in2, int(8.0))))[int(5.0):min(int(09.0), ( saveOrd(s0.rstrip(s1[i0:max(max(abs(( i1 - i0 )), i1), i2)][:divInt(mod(int(7.0),( saveOrd(in0) - ( ( saveOrd(getCharFromString(\"\"M\"\", divInt(int(5.0),int(1.0)))) - divInt(i2,len(\"\"3\"\")) ) * int(2.0) ) )),( abs(mod(int(7.0),abs(max(divInt(i2,( i1 * i1 )), int(6.0))))) + i1 ))].capitalize()[mod(i1,divInt(i0,int(2.0))):int(9.0)])) + divInt(int(6.0),int(1.0)) ))])) * int(8.0) ) * saveOrd((saveChr(max(divInt(i1,i0), i2))[:i2] + s2[( min(i0, divInt(min(int(5.0), ( mod(len(\"\"?\"\"[saveOrd(\"\"j\"\"):( i0 - ( abs(i1) + int(9.0) ) )]),min(( min(min(int(3.0), int(6.0)), i0) - int(1.0) ), i1)) * abs(int(9.0)) )),int(6.0))) * int(418.0) ):][:i0])) )\\ni0 += ( int(6.0) + min(i2, i2) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 5, 5, 8, 8], [0, 0, 1, 0, 2, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 2, 1, 1, 0, 3, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 2], [1], [], [12], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 2, 4, 2, 1, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(\"\"m\"\"),divInt(( i0 * mod(int(3.0),int(5.0)) ),i0))) + min(int(5.0), i1) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 2, 5, 8, 8, 2], [0, 0, 1, 0, 2, 1], [1], [3, 0, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 1], [2, 5, 3, 2, 4, 5, 2], [1], [], [2, 0, 2, 2, 3, 4, 3, 2, 2, 0, 0, 2, 1, 2, 0, 4, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2, 2, 2, 2, 0], [1], [], [25], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 6, 0, 21, 5, 4, 1, 4, 7, 1, 0, 19, 2, 1, 7, 1, 0, 1, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2[saveOrd((getCharFromString((in2[i0:][divInt(len(in0),mod(len(\"\"z\"\"[min(divInt(i0,int(3.0)), int(2.0)):]),int(5.0))):] + s2[i1:( int(8.0) + i0 )]), int(8.0)) + in1.rstrip(in2))[i2:][mod(i1,int(2.0)):]):] in s2\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 4, 3, 2, 4, 5], [0, 0, 1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [3, 1, 3], [], [6], [], [18, 19]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 2, 3, 0, 3, 0, 0, 0, 3, 0, 1, 0, 2], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"/g:\"\") \\le ( divInt(len(s2),divInt(len(in1),( ( i0 + int(3.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 0, 1, 0, 1], [2, 6, 6, 8, 7, 5, 4, 5], [0, 1, 2, 0, 2], [0], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 0, 3, 2], [0], [0, 1, 0], [3, 5, 0, 1], [1], [], [2, 0, 3, 2, 1, 4, 0], [0], [], [2, 2], [3], [5], [], [], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 2, 1, 11, 1, 4, 0, 1, 2, 1, 0, 7, 1, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(26.0):]) \\l min(len((\"\"#\"\"[divInt(int(6.0),abs(i0)):] + getCharFromString(in2, int(8.0)))), int(75.0))\\ni1 = int(45.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [2, 1], [0, 0], [5], [], [], [], [1], [0, 1, 1, 1, 1], [2, 3, 6, 8, 3], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [4, 1, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1], [], [4, 0, 3, 0, 0, 4, 0, 1], [0, 0], [], [2], [1], [5], [25], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 5, 5, 2, 1, 10, 1, 4, 1, 0, 4, 1, 0, 8, 2, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif getCharFromString(in0, saveOrd((in2 + in1))).endswith(getCharFromString(s1, int(23.0))):{:\\nres0 = max(len(\"\"z\"\"), ( int(6.0) + abs(i0) )) \\l int(8.0)\\n:}else:{:\\ni1 = int(3.0)\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1], [2, 2, 2, 1, 0, 0, 0, 2, 1, 1, 1], [2, 1, 2, 2], [0, 1, 0, 0, 2, 0, 2], [], [0, 0, 0], [], [], [3, 1, 2, 1], [0, 4, 0, 5, 1, 2, 3], [1, 1, 0, 0, 2, 1, 1, 1, 1, 1, 2], [0, 0, 0, 0, 0, 0, 0], [3, 4], [2, 3, 1], [0], [1], [0], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [2, 4, 8, 8, 6, 8, 7, 6, 9, 1, 9, 3, 4, 0, 1, 4, 6, 3, 5, 3], [0, 1, 1, 1, 2, 0, 0, 0, 2, 2, 1, 1, 2, 1, 2, 2], [0], [3, 3, 2, 3, 2, 3, 3, 0, 0, 1, 0, 1, 3, 0, 2, 3, 2, 2, 0, 2, 1, 0, 1, 1, 2, 0, 1, 1, 2, 1, 0, 2, 3, 0, 3, 2, 0, 3, 0, 1, 0, 0, 3, 1, 0, 1, 0, 2, 3, 3, 1, 1, 1, 3], [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1], [0, 3, 3, 0, 0, 1, 3, 3, 2, 3, 0, 3, 0, 3], [0, 1, 2, 2, 1], [1, 1, 0, 1, 1, 0], [2, 5, 3, 2, 4, 5, 3, 0, 0, 1, 3, 0, 0], [1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1, 4, 1, 4, 4, 1, 4, 0, 0, 4, 1, 0], [0, 3, 2, 0, 2, 2], [4], [0], [3, 0, 0, 1], [16, 7], [18], [6], [27]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 4, 7, 0, 3, 0, 0, 4, 7, 11, 7, 2, 2, 1, 0, 1, 16, 16, 16, 1, 54, 11, 14, 5, 6, 13, 4, 0, 23, 6, 1, 1, 4, 2, 1, 0, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(len(s2), ( len(in2) + ( min(min(i0, i1), int(2.0)) - i1 ) )) \\l int(4.0):{:\\nif max(i1, mod(len(in0),mod(divInt(i2,mod(int(8.0),i0)),int(8.0)))) \\le int(6.0):{:\\nloopBreak% = 0\\nwhile not ( (s2 + in1)[mod(i0,int(8.0)):int(76.0)] != getCharFromString(in2, ( int(91.0) * i0 )) and ( len(in0) * i2 ) \\l abs(( i2 - len(s0) )) ):{:\\nres0 = i1 != int(9.0)\\ni1 = i2\\nb1 = i1 \\g min(int(3.0), i2)\\nb2 = int(4.0) == i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile divInt(len(\"\"\\\\\\\\\"\"),min(int(0.0), int(1.0))) \\ge int(4.0):{:\\ns0 = \"\"Q\"\".rstrip(getCharFromString(\"\"H\"\", len(s1.capitalize())).capitalize())\\nb1 = in0.startswith(\"\"s\"\".capitalize())\\ns0 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 1, 6, 8], [2, 0, 1], [], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 1, 3], [0, 1, 1, 0], [4, 3, 3, 0], [0, 1], [0, 1, 0], [0, 5, 0, 2, 4, 5], [0, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [3, 1], [], [15], [], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 2, 2, 0, 3, 0, 0, 0, 2, 0, 1, 0, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(\"\"#p\"\"),mod(len(in2),int(3.0))) + ( i2 - int(1.0) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [2], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 1, 1], [2, 5, 3, 3, 4, 1, 2, 3, 3, 3], [1], [0, 0], [0, 0, 0, 1, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [1], [], [8], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 2, 0, 11, 3, 3, 0, 3, 9, 1, 2, 9, 1, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in2),divInt(len(in0),int(31.0))),int(0.0)):{:\\nloopBreak% = 0\\nfor in0 in \"\"i\"\":{:\\nloopBreak% = 0\\nfor in1 in (s1 + s2):{:\\nb2 = i0 \\l int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = getCharFromString(in0, i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 5, 8, 8, 6, 6, 1, 4, 2, 6, 2, 4, 0, 8, 2, 8, 0, 7, 8, 8, 5, 4, 1], [0, 0, 1, 0, 2, 0, 1, 1, 1, 2, 2, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 3, 1, 2, 3, 3, 1, 3, 3, 3, 1, 2, 1, 2, 0, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 1, 2, 3, 3, 1, 2, 3, 1, 0, 0, 3, 1, 0, 1, 2, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [4, 3, 3, 0, 0, 1, 1, 2, 1, 3, 4, 4, 2, 4, 0, 3, 0, 4, 0, 0, 1, 3, 2, 0], [0, 0, 0, 2, 1, 2, 0, 0, 0, 1], [0, 0, 0], [2, 5, 3, 2, 4, 5, 2, 1, 4, 3, 1], [1, 0, 1, 1, 0, 1], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0, 1, 1, 3, 2, 3, 0, 4, 0, 0, 0, 3, 0, 2, 2, 0, 2, 2, 1, 1], [0, 3, 2], [4], [2, 0, 1, 2, 1, 2, 1, 0, 2], [2, 0, 1, 1, 1, 2], [0], [21, 8, 16], [9, 9], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 24, 24, 12, 0, 67, 13, 24, 10, 3, 11, 6, 0, 30, 1, 0, 9, 6, 1, 3, 2, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( divInt(len(in2),( len((in0 + (s2[( ( i0 + int(3.0) ) + int(7.0) ):][:int(5.0)] + in1))[i0:divInt(int(8.0),i1)][int(8.0):]) + i0 )) * ( i2 - int(661.0) ) ):{:\\nres0 = min(int(42624.0), ( min(max(int(0.0), max(abs(max(int(8.0), ( int(2.0) * ( i0 + len(\"\"9\"\") ) ))), i1)), i1) + saveOrd(\"\"Av\"\") )) \\le saveOrd(((in2 + getCharFromString(s2, abs(saveOrd(s1))))[:min(len(in1), min(saveOrd((in0 + s1[:i1][min(min(int(8.0), ( max(len(\"\"i\"\"[int(0.0):][divInt(abs(int(7.0)),i2):i2]), min(int(8.0), i2)) + int(8.0) )), ( int(5.0) - int(4.0) )):])), int(1.0)))] + \"\"q9\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1, 1], [8, 1, 3, 8, 7, 3, 3, 3, 1], [2, 2, 1, 0, 2, 2, 1, 1, 2, 0], [0], [3, 2, 2, 3, 2, 2, 2, 1, 0, 1, 2, 2, 2, 2, 1, 0, 1, 0, 3, 0, 1, 3, 0, 2, 3, 0, 0, 0, 2, 2, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0], [4, 3, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 1, 0], [2, 5, 4, 2, 4, 5, 4], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [0, 2, 0], [1], [], [11], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 9, 0, 33, 12, 5, 4, 8, 7, 1, 0, 12, 0, 0, 3, 1, 0, 1, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\l ( divInt(len(in2),mod(divInt(( int(8.0) + i2 ),int(1.0)),divInt(divInt(mod(( int(3.0) + i2 ),int(8.0)),i1),len(in1)))) + i0 )\\ns2 = (in1 + (in2[int(7.0):len(in1)][i2:] + \"\"l\"\"))[mod(min(i2, i1),i1):divInt(( int(3.0) * i2 ),int(33.0))]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 1], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [8, 1, 3, 8, 7, 9, 8, 2, 6, 7], [2, 0, 2, 2, 2, 2], [0], [3, 3, 2, 2, 1, 3, 1, 2, 0, 1, 3, 1, 0, 1, 0, 0, 3, 0, 2, 1, 0], [0, 0, 1, 1, 0], [3, 3, 0, 0, 1, 1], [2, 1, 0], [1, 0, 0], [4, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [0], [22], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 3, 1, 13, 3, 4, 2, 1, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(\"\"W\"\") \\l len(in1)\\ni2 = ( ( int(81.0) * min(int(3.0), mod(i0,int(8.0))) ) - min(int(7982.0), i2) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 1], [1, 1, 2, 2, 1], [2, 2], [0, 0, 1], [], [0, 0], [], [], [3, 1], [4, 4, 1, 1], [1, 2, 0, 1, 1], [0, 0, 0, 0], [1], [2], [], [], [], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [8, 1, 5, 8, 7, 8, 4, 9, 0, 4, 5, 8, 1, 6, 3, 9, 0, 3, 6, 7, 5, 2, 7, 5, 5, 8, 7, 5, 7, 4, 8, 7, 5, 3, 3, 5, 7, 6, 6], [2, 1, 2, 0, 2, 2, 0, 2, 1, 0, 0, 2, 0, 0, 1, 1], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 2, 1, 1, 2, 2, 2, 0, 1, 3, 2, 0, 1, 1, 2, 1, 0, 1, 2, 1, 1, 3, 3, 1, 3, 2, 1, 2, 3, 0, 3, 1, 1, 2, 1, 3, 0, 0, 3, 2, 2, 2, 3, 0, 1, 0, 1, 1, 0, 0, 0, 1, 2, 3, 3, 0, 3, 0, 1, 3, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 3, 3, 0, 0, 2, 2, 4, 4, 3, 4, 0, 2, 1, 2, 2], [0, 0, 0, 2, 1, 2, 0, 2, 2], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1], [1, 5, 1, 2, 4, 5, 4, 4, 5, 2, 1, 0, 2], [0, 1, 1, 0, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 3, 4, 3, 2, 2, 0, 1, 3, 4, 4, 0, 0, 4, 4, 1, 0, 2, 1, 3, 3, 4, 1, 4, 2, 1, 4, 4, 2, 0, 2, 3, 4, 0], [0, 3, 2, 2, 3, 0, 0, 3, 2, 1], [4, 4, 2], [0, 0, 2, 1, 2, 1, 2, 1, 1], [2, 3, 1, 2, 3, 0, 0], [11, 5], [0], [0, 4], [4, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 0, 0, 0, 2, 3, 5, 3, 1, 1, 0, 0, 0, 39, 39, 16, 1, 71, 18, 16, 9, 10, 13, 7, 0, 45, 10, 3, 9, 7, 2, 1, 2, 2], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( ( len(in2) + divInt(mod(len(s1),int(8.0)),i2) ) + ( int(15.0) + int(8.0) ) )\\nb1 = (s2 + (in1[divInt(divInt(( i1 * int(7.0) ),min(( i2 - int(84.0) ), int(90458.0))),divInt(int(16.0),i0)):][int(3.0):( int(9.0) * int(0.0) )] + in2))[min(abs(int(367.0)), abs(( int(5.0) + divInt(saveOrd(in1),i2) ))):saveOrd((getCharFromString((in1[int(2.0):][:int(755.0)] + \"\"0!\"\"), ( int(87.0) * len((in2.capitalize().rstrip(s2) + \"\"a\"\".rstrip(s1).capitalize())) )) + \"\"4<\"\"[:i2]))] not in ((getCharFromString(\"\"L\"\", i0) + getCharFromString(\"\"F\"\"[saveOrd(s0[:mod(divInt(divInt(min(i2, int(5.0)),i1),int(7.0)),int(4.0))].capitalize().strip()):], i0)) + (saveChr(i0) + s2)[:i2])\\nloopBreak% = 0\\nwhile not int(8753.0) \\le mod(abs(max(i0, abs(i0))),int(357.0)):{:\\nloopBreak% = 0\\nwhile abs(int(6.0)) \\g int(6.0):{:\\ni1 *= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 8], [0, 2, 1, 0, 2], [1], [3, 0, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 4, 3, 4, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [3, 5, 3, 2, 4, 5], [0, 1], [], [2, 0, 0, 1, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2, 2], [2, 2], [], [], [6, 6], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 11, 3, 4, 1, 2, 5, 2, 0, 11, 0, 0, 3, 2, 0, 0, 2, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[i0:]) \\le ( saveOrd(in2) + divInt(len(\"\"66\"\"),saveOrd((in0 + (s2[divInt(i2,int(3.0)):][int(3.0):] + in1)))) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 6, 8, 2, 9, 3, 2, 0, 0, 8, 0, 6, 8, 7, 6, 8, 8], [0, 1, 2, 0, 2, 1, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3, 0, 0, 3, 2, 2, 1, 0, 1, 1, 1, 2, 3, 2, 1, 1, 2, 1, 0, 2, 1, 3, 0, 0, 1, 0], [1, 1, 1, 0, 1, 1, 1], [4, 3, 3, 2, 2, 2, 4, 0], [0], [0, 1, 0, 0, 1, 0], [3, 5, 4, 1, 2, 5], [1, 0, 1, 1, 1], [], [2, 0, 3, 0, 4, 4, 1, 0, 3, 2, 1, 3, 4, 2, 4, 4, 2, 0, 1, 3, 3, 4, 2, 2, 2, 4, 0, 2, 2, 4, 1, 2, 0], [0, 3, 3, 1, 3, 2, 3, 1], [5, 4, 4, 1], [2, 0, 1, 1, 0, 1, 0, 1, 2, 0], [1, 2, 3, 2, 2], [5], [15], [7, 1, 2], [2]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 18, 18, 8, 0, 38, 7, 8, 1, 6, 6, 5, 0, 33, 8, 4, 10, 5, 0, 1, 3, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(266.0):]) \\l len((in2 + getCharFromString(\"\"p\"\".strip(in1), len((\"\"7\\\\\\t\"\"[divInt(int(8.0),abs(i0)):int(2.0)] + (saveChr(int(9.0))[:int(3.0)].rstrip(s1[:int(2.0)].rstrip(\"\"1\"\")) + ((s2.rstrip()[abs(i1):i2][:abs(mod(divInt(int(0.0),i0),int(0.0)))][int(8.0):int(0.0)].capitalize() + saveChr(( saveOrd(\"\"2\"\") + divInt(int(6.0),int(8.0)) ))[mod(int(7.0),i2):][:divInt(int(6.0),min(i1, i0))]) + in2[int(88.0):i2])))))))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], [3, 1, 6, 8, 7, 2, 2, 9, 1, 6, 3, 6, 0, 2, 9, 5, 4, 5, 2, 8, 3], [2, 0, 1, 0, 0, 0, 2, 1, 1, 1, 0], [], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3, 3, 2, 0, 3, 3, 3, 2, 1, 1, 1, 3, 2, 2, 1, 0, 3, 0, 3, 3, 2, 3, 1, 0, 3, 2, 0, 0, 0, 2, 0, 2, 1, 2, 3, 3, 2, 2, 3, 2, 2, 3, 0, 1, 1, 3, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [4, 3, 4, 0, 0, 2, 0, 4, 1, 1, 0, 4, 1, 2, 3, 4, 2, 4, 4], [0, 0, 2, 1, 2, 2, 2, 2, 1, 0, 0], [0, 1, 0, 1, 0], [0, 5, 5, 2, 4, 5, 0, 0, 3, 2], [0, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 4, 4, 0, 4, 4, 2, 0, 4, 2, 0, 1, 1, 1], [0, 3, 2, 0, 2], [4], [0, 0, 2, 2, 2], [0, 1, 0, 1, 2], [17, 1], [25, 15], [7], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 21, 21, 11, 0, 60, 16, 19, 11, 5, 10, 5, 0, 25, 5, 1, 5, 5, 2, 2, 1, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),( saveOrd(in2) + int(3.0) )) + int(1.0) )\\ns2 = (in1 + (in2[i2:][int(6.0):int(8.0)] + s0))[int(7.0):min(min(( i0 * abs(min(saveOrd(\"\"Rz\"\"), ( int(229.0) - int(1.0) ))) ), int(63.0)), max(( ( int(6.0) * i1 ) * max(i0, min(saveOrd(getCharFromString(s0.rstrip(getCharFromString(in0[mod(max(int(0.0), i0),abs(( i0 * i2 ))):], i1).capitalize()), ( i1 * ( int(2.0) - ( len(s2[saveOrd(\"\"B\"\"):].capitalize()) + ( divInt(abs(mod(divInt(saveOrd(\"\"p\"\"),i1),int(9.0))),int(5.0)) + saveOrd(\"\"7\"\") ) ) ) ))), int(45283.0))) ), i0))]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 6, 6, 8, 3, 0, 5, 3, 0, 2, 6, 6, 5], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 2, 1, 1, 1, 1, 3, 2, 3, 3, 1, 0, 1, 3, 3, 3, 3, 1, 2, 1, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1, 1], [4, 4, 3, 2, 3, 0, 1, 2, 2, 1, 4], [0, 2], [0, 1, 0], [3, 5, 4, 1, 3, 4], [1], [], [2, 2, 3, 0, 0, 4, 4, 2, 0, 2, 2, 0, 0, 0, 2, 1], [0, 3], [4], [2, 0, 1, 0, 0, 0], [3], [5], [], [], [2]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 3, 0, 30, 4, 11, 2, 2, 6, 1, 0, 16, 2, 1, 6, 1, 0, 0, 0, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd((in0 + in2)[int(16.0):saveOrd(getCharFromString(in1[:len(s1[( int(6.0) + abs(divInt(int(8.0),int(3.0))) ):int(0.0)][int(5.0):len(in0)])].rstrip(in1), mod(min(max(int(3.0), i0), int(0.0)),abs(abs(max(saveOrd(\"\"\\\\\\t\"\"[int(2.0):( int(6.0) * i1 )]), int(6.0)))))))][int(5.0):]) \\l i2\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1, 1], [8, 1, 3, 8, 7, 3, 3, 0, 1], [0, 2, 1, 0, 2, 2, 1, 1, 2, 0], [0], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 3, 0, 3, 3, 3, 0, 0, 2, 2, 1, 0, 0, 0, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0, 0, 4, 4], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 1, 0], [4, 5, 3, 2, 4, 2, 4], [0, 1], [], [0, 0, 0, 2, 3, 0, 3, 0, 1, 0, 0], [0, 3, 2], [4], [0, 2, 0], [2, 0], [19], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 7, 0, 28, 8, 8, 1, 7, 6, 2, 0, 10, 0, 0, 1, 2, 1, 0, 1, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le divInt(mod(len(in2),divInt(divInt(len(in0),int(8.0)),i0)),int(1.0))\\nres0 = min(( divInt(mod(int(3.0),i2),int(8.0)) + i1 ), mod(i0,int(7.0))) \\le min(i2, min(saveOrd((s2 + (in1 + \"\"8T\"\"))[saveOrd(s2):i2]), i1))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1, 1], [8, 1, 3, 8, 7, 3, 3, 3, 1], [0, 2, 1, 0, 2, 2, 1, 1, 2, 0], [0], [3, 2, 2, 3, 2, 2, 3, 0, 0, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 3, 0, 2, 2, 0, 0, 0, 2, 2, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [4, 2, 3, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 1, 0], [2, 5, 3, 2, 4, 5, 4], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [1, 2, 0], [1], [], [3], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 21, 8, 4, 3, 5, 3, 1, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"d\"\") \\le ( divInt(abs(mod(( len(s2) + i0 ),i2)),int(8.0)) + min(( divInt(divInt(int(1.0),i1),int(3.0)) + i0 ), divInt(i2,int(8.0))) )\\nin2 = in0\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [2, 4, 8, 8], [2, 1, 1, 0], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3, 1, 1, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0, 4, 1], [0, 1], [0, 1, 0], [3, 3, 3, 2, 4, 5], [0, 0, 1], [], [3, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [0, 1, 2], [0, 1, 0], [6, 23], [2], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 17, 2, 7, 1, 1, 5, 3, 0, 12, 0, 0, 3, 3, 2, 1, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len((in0 + in0))) \\le ( len((in0 + (s2[divInt(min(min(saveOrd(in1), i2), int(2.0)),i1):][:int(4.0)] + \"\"GcX\"\"))[max(int(8.0), int(8.0)):i1]) + i0 )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0], [0, 0], [0, 0], [], [], [3, 3], [4, 0, 5], [2, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [2, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [0, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5], [1], [0, 0], [1, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [3], [], [], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\")\"\".startswith(s0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 6, 7, 8, 3, 5], [1, 0, 2], [0], [3, 3, 2, 3, 0, 3, 2, 2, 0, 0, 3, 1, 3, 3], [0, 1, 1], [2, 1, 3, 0, 4, 3], [0], [1, 1, 0], [4, 5, 4, 3, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [3], [], [], [], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 13, 3, 6, 1, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(\"\"&\"\") + i1 ), min(mod(mod(i0,i2),saveOrd(in1)), int(46.0)))) \\l len(in2)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 0, 1], [2, 2, 2, 1, 2, 1, 0, 0, 0], [2, 0, 0, 1], [0, 1, 0, 0, 2], [0, 0], [0, 0, 0], [], [], [0, 0, 1, 3], [4, 0, 5, 5], [1, 1, 1, 1, 0], [0, 0, 0, 0], [4], [1, 0], [], [0], [0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 7, 0, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8, 1], [0, 1, 1, 1, 1, 1, 2], [0], [3, 2, 2, 3, 2, 3, 1, 3, 0, 1, 1, 2, 2, 3, 1, 1, 3, 1, 0, 1, 2, 3, 0, 0, 1, 2, 0, 0, 1, 1], [1, 1, 1, 0, 0, 0, 0], [4, 3, 3, 2, 2, 3, 1], [0, 0, 0, 2], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 2, 1, 2, 5], [1], [0, 0], [0, 4, 0, 2, 3, 0, 0, 2, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [0], [16], [], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 4, 5, 2, 3, 0, 0, 3, 4, 5, 4, 0, 1, 0, 1, 1, 14, 14, 7, 1, 30, 7, 7, 4, 3, 10, 1, 2, 12, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(getCharFromString(in2, divInt(len((in0 + in0)[int(37.0):]),abs(i0)))),int(0.0)),int(8.0)):{:\\nloopBreak% = 0\\nfor in1 in s1[( ( abs(int(7.0)) + int(83.0) ) + len(s2) ):]:{:\\nloopBreak% = 0\\nfor s2 in s1:{:\\nb0 = int(54.0) \\l i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(47.0) != ( max(i1, i1) + int(0.0) ):{:\\ni1 = ( i1 * i2 )\\nb0 = int(8.0) != int(1.0)\\nb1 = True\\ns2 = \"\"Q\"\"\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 1, 2], [], [0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [8, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3], [0], [0, 1, 0], [3, 5, 4, 1], [1, 0, 1, 1], [], [2, 0, 3, 0, 4, 1, 4, 4, 3, 1, 4, 1, 0], [0, 2, 2, 3], [5], [2], [0, 2, 3, 1], [5], [22], [7], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 3, 0, 0, 3, 4, 0, 13, 4, 1, 1, 4, 1, 1, 1, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(8.0):]) \\le len((in2 + getCharFromString(\"\"F\"\", len((\"\"7@\"\" + \"\"w\"\".strip(in1)).capitalize().capitalize()))))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 0, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 0, 5, 1, 0, 8, 5, 8, 0, 2], [0, 2, 1, 1, 2, 1, 1, 0, 1, 2], [1], [3, 2, 2, 3, 1, 3, 1, 1, 0, 1, 1, 2, 2, 3, 1, 1, 3, 1, 0, 1, 1, 3, 2, 2, 0, 0, 0, 3, 0, 1, 0, 1, 2, 2, 0, 1, 3, 1, 1, 1, 2, 1, 0], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [4, 3, 3, 2, 2, 3, 4, 4], [0, 2, 1], [1, 1, 0, 0, 1, 0, 1, 0], [2, 5, 3, 4, 4, 0, 2, 3, 3, 3, 5, 5], [1, 1, 0, 1, 1, 0, 0, 0, 1], [0, 0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 4, 3, 4, 2, 1, 2, 2, 4, 0, 1, 0, 1, 2, 4, 2, 4, 4, 4, 3, 0, 1], [0, 3, 2, 0, 1], [4], [2, 2, 1, 0, 1, 2, 1, 0, 0], [0, 2, 0, 3, 0, 0, 3, 0, 0], [4, 17, 17, 24, 0, 6], [], [0], [12, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 3, 2, 2, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 13, 13, 5, 0, 27, 6, 6, 1, 5, 11, 4, 2, 24, 3, 1, 7, 4, 2, 0, 1, 1], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in2),int(31.0)),len(in0)):{:\\nloopBreak% = 0\\nfor in1 in (in1 + (s0[:int(0.0)][int(8.0):] + s2))[i0:]:{:\\nloopBreak% = 0\\nfor in0 in getCharFromString((\"\"E\"\"[:int(7.0)].rstrip(in0.capitalize()[:int(83.0)][divInt(( abs(int(5.0)) + int(0.0) ),abs(int(51.0))):]) + \"\"0\"\"), i2)[int(0.0):int(8.0)]:{:\\nres0 = len(in0) \\l divInt(mod(i1,i1),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = \"\"R)\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1], [1, 0, 6, 8, 2, 5, 1, 3], [0, 1, 2, 0, 2], [0, 1], [3, 1, 2, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 4, 1], [1, 1], [], [2, 0, 3, 3, 0, 4, 2, 4, 2, 1, 2, 1, 0], [0, 2], [], [0, 1, 2, 2], [2, 1], [5], [17], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 1, 0, 12, 2, 3, 0, 2, 3, 2, 0, 13, 2, 0, 4, 2, 0, 1, 1, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(10.0):divInt(len(((in2 + getCharFromString(\"\"4\"\"[divInt(int(6.0),len(\"\"r\"\"[i0:])):].capitalize()[:int(8.0)], int(2.0))) + in1)),int(51.0))]) \\l int(3.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 0, 2, 2, 1], [2, 2, 0], [0, 2, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [3, 1, 0, 1, 7, 8, 2, 5, 9, 4, 7, 0, 8], [1, 0, 1, 1, 0], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 2, 1, 2, 2, 2, 1, 1, 3, 1, 0, 0, 2, 3, 0, 0], [1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 2, 2, 3], [0, 1, 0], [1, 1, 0, 0, 1], [1, 1, 3, 5, 4, 2, 2, 1, 3, 2], [1], [0], [0, 1, 0, 2, 3, 2, 0, 1, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [1], [], [16], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 2, 0, 19, 7, 4, 3, 4, 2, 1, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le mod(mod(len(\"\"q\"\"),divInt(len(s1),int(31.0))),int(0.0)):{:\\nres0 = i1 \\le ( int(1.0) + divInt(( ( int(7.0) - int(82.0) ) + abs(int(59.0)) ),i0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 1, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 3, 2, 0, 3, 2, 1, 1, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 2, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [0, 0, 1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [1, 2, 3], [], [1], [0], [5]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 13, 5, 4, 3, 2, 2, 3, 0, 3, 0, 0, 0, 3, 0, 1, 1, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(i0,divInt(len(in2),len(\"\"b0\"\"\"))) + ( i0 + abs(( int(3.0) + int(1.0) )) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [2, 1], [0, 0], [2], [], [], [], [], [0, 1, 1, 1, 1], [2, 6, 6, 8, 6], [0, 1, 2, 0, 2], [0, 1], [2, 3, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1], [], [4, 0, 3, 0, 0, 4, 3, 3, 1, 2, 0, 3, 2, 1, 2, 0, 3, 1, 1], [0, 1], [], [2, 1, 0], [3, 1, 3, 2, 1, 1, 2, 3, 1], [5], [0, 9, 11, 6], [3, 6], [26, 27, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 1, 0, 11, 2, 4, 1, 1, 5, 9, 0, 19, 2, 0, 3, 9, 0, 4, 2, 3], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = getCharFromString(in0, ( saveOrd((in2 + in1)) + len(saveChr(len(((\"\"[\"\" + s1[divInt(int(26.0),abs(i0)):]) + (\"\"a\"\"[:int(6.0)] + s0[int(8.0):int(6.0)]))))) )) == (\"\"\\\\\\\\3jl6\"\" + \"\";g\"\")\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 7, 8, 3, 5, 9, 7, 3, 8, 4], [1, 0, 2, 0, 0, 1, 2, 1, 0, 0, 2, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 1, 0], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 0, 3, 3, 2, 2, 2, 3, 0, 3, 3, 0, 0, 2, 3, 0, 1, 1, 3, 0, 3, 2, 2, 3, 0, 3, 3, 3, 3, 1, 3, 0, 3, 3, 0, 2, 2, 2, 0, 1, 2, 0, 3, 2, 1, 3, 3, 3, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 3, 3, 2, 0, 1, 3, 1, 0, 0, 3, 3, 1, 3, 2, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], [2, 1, 3, 0, 0, 0, 2, 1, 1, 4, 0, 1, 2, 0, 2, 0, 0, 4, 1, 0, 4, 0, 1, 2, 4, 3, 2, 0, 2, 2, 0], [0, 0, 0, 2, 2, 0, 0, 1, 1, 2, 0, 1], [1, 1, 0, 0, 1, 1, 0, 1, 0], [4, 5, 4, 3, 4, 5], [1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 1, 2, 1], [0, 3, 2], [4], [0, 2, 2, 2], [2, 0], [10], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 30, 0, 92, 21, 31, 12, 9, 6, 2, 0, 15, 1, 0, 4, 2, 1, 0, 1, 0], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(int(48.0), mod(i1,i0)), i2) ), i0)) \\l min(abs(mod(divInt(( max(i0, max(saveOrd(in2), i1)) + i2 ),( min(i1, int(7.0)) + int(8.0) )),max(i0, abs(( divInt(min(i0, abs(min(min(saveOrd(in1), int(3.0)), max(i2, min(saveOrd((in0 + (in1[i0:][mod(( ( i0 * int(5.0) ) * mod(i1,min(( int(9.0) + max(abs(saveOrd(in2)), i1) ), ( ( i0 + ( ( i0 - i1 ) - i2 ) ) * i0 ))) ),i0):] + getCharFromString(\"\"8\"\", int(7.0))))[i2:i2]), divInt(mod(len(\"\"K\"\"[abs(( i0 + int(3.0) )):]),min(int(8.0), i0)),i2)))))),abs(abs(int(4.0)))) - min(divInt(i0,i0), i1) ))))), i0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 6, 8, 0, 8, 1, 7, 8, 6, 9, 1, 9, 4, 1, 8, 4, 4, 8, 2, 7, 6, 8, 1, 6, 5, 7, 0, 4, 3, 0, 1, 5, 4, 4, 4, 3, 2, 3, 2, 7], [2, 0, 1, 2, 0, 2, 2, 0, 1, 0, 2, 1, 2, 1, 1, 1, 2, 0, 1, 0, 2, 2, 1, 0, 1, 0, 2, 0, 0, 0, 1, 1, 0], [], [3, 2, 2, 3, 2, 3, 2, 2, 3, 1, 1, 1, 3, 3, 2, 1, 0, 0, 0, 3, 0, 3, 2, 0, 3, 3, 2, 2, 0, 1, 2, 2, 1, 3, 2, 2, 0, 2, 3, 2, 1, 0, 0, 1, 3, 3, 2, 0, 1, 1, 0, 3, 1, 2, 1, 2, 0, 0, 3, 3, 1, 2, 2, 1, 3, 3, 3, 0, 2, 2, 1, 2, 3, 1, 3, 3, 0, 2, 2, 0, 3, 2, 3, 0, 3, 2, 3, 1, 0, 0, 1, 2, 2, 2, 1, 0, 1, 0, 1, 3, 0, 3, 3, 2, 3, 3, 1, 3, 2, 0, 2, 1, 3, 1, 2, 1, 3, 2, 2, 3, 0, 1, 0, 1, 1, 2, 3, 2, 1, 2, 3, 1, 2, 1, 2, 2, 0, 0, 1, 0, 1, 1, 2, 3, 0, 2, 3, 2, 2, 3, 1, 3, 0, 3, 1, 3, 0, 3, 2, 3, 0, 2, 2, 1, 1, 1, 1, 2, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 4, 4, 2, 1, 1, 1, 3, 4, 1, 1, 3, 3, 1, 1, 4, 0, 0, 4, 2, 4, 3, 1, 3, 4, 0, 3, 0, 3, 1, 1, 3, 4, 1, 1, 2, 2, 2, 0, 3, 1, 1, 2, 0], [0, 0, 0, 1, 0, 0, 0, 1, 2, 0, 0, 0, 1, 0, 2, 2, 1, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [0, 5, 3, 2, 4, 5, 0, 1, 2, 2, 4, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 2, 0, 4, 2, 1, 1, 4, 2, 2, 2, 4, 1, 1, 1, 4, 2, 1, 2, 4, 4, 0, 2, 0, 1, 4, 0, 2, 2, 0, 0, 1, 0, 1], [0, 3, 2, 3, 2, 0, 1], [4, 5], [0, 1, 0, 1, 1, 0, 0, 2, 2, 1, 0, 0, 1], [0, 2, 0, 1, 1, 3, 3, 1, 3, 1], [22, 15], [8, 25, 22, 17], [2], [7, 1, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 41, 41, 33, 0, 170, 50, 46, 22, 28, 13, 10, 0, 45, 7, 2, 13, 10, 2, 4, 1, 3], "tree_depth": 69, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),( divInt(saveOrd((s2 + (in1[int(2.0):int(2.0)][:int(6.0)] + in2))[saveOrd(\"\"W\"\"):abs(mod(int(8.0),i2))]),i0) + i1 ))) + max(i2, max(divInt(i0,max(len(s0[:divInt(mod(i2,int(0.0)),( mod(int(8.0),saveOrd(getCharFromString(\"\"2\"\"[:divInt(divInt(i2,divInt(max(mod(int(1.0),i0), i1),int(7.0))),max(len(\"\"P\"\"), divInt(i0,int(8.0))))], int(6.0)))) + i2 ))]), len(\"\"i\"\".capitalize()[int(9.0):][( int(1.0) - ( i1 + i2 ) ):max(max(int(9.0), divInt(( int(4.0) + saveOrd(\"\"z\"\") ),min(min(i1, mod(divInt(int(1.0),( saveOrd(\"\"$\"\") + int(8.0) )),abs(saveOrd(\"\"\\\\\\n\"\"[i1:].strip(getCharFromString(s1, ( ( i1 - len(s2[divInt(max(i2, len(\"\"w\"\")),( saveOrd(saveChr(int(4.0))) * i0 )):i1]) ) + int(4.0) )).capitalize()[:( ( mod(int(8.0),i0) + int(2.0) ) + i2 )]))))), int(7.0)))), min(i2, len(s2)))][min(mod(len(in1[:max(int(6.0), max(mod(i1,( int(8.0) - len(s0) )), int(1.0)))][mod(int(6.0),saveOrd(\"\"\\\\\\\\\"\")):divInt(mod(max(i0, int(5.0)),i1),int(7.0))]),int(0.0)), mod(max(mod(int(4.0),( abs(int(3.0)) + ( int(0.0) * ( ( i0 * i2 ) - int(1.0) ) ) )), i0),int(5.0))):int(4.0)].rstrip(s0)))), divInt(abs(i0),( abs(divInt(( min(int(4.0), len(\"\"r\"\")) - i0 ),max(int(4.0), max(i1, abs(( min(i1, mod(( int(3.0) + int(2.0) ),int(3.0))) + int(2.0) )))))) - ( i0 + int(7.0) ) )))) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 9, 1, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 2, 2, 2, 3, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 1, 1], [4, 3, 3, 2, 4, 3], [0], [1, 0, 1, 0, 1], [2, 5, 3, 3, 4, 1, 1, 3, 3, 2], [1], [0, 0], [0, 0, 1, 2, 4, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [0], [22], [], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 2, 0, 19, 6, 4, 1, 5, 9, 1, 2, 10, 2, 1, 1, 1, 1, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(divInt(len(in2),mod(len(\"\"W\"\"),int(3.0))),int(9.0)):{:\\nloopBreak% = 0\\nfor in0 in getCharFromString(in0, i0)[int(1.0):]:{:\\nloopBreak% = 0\\nfor in1 in s1:{:\\nres0 = ( divInt(mod(abs(int(8.0)),int(7.0)),int(83.0)) + int(54.0) ) \\l i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = in0.rstrip(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 2, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [8, 1, 3, 8, 4, 2, 6, 8, 7, 8, 7], [0, 2, 1, 0, 2, 0, 2, 0, 0, 2, 1], [0], [3, 2, 2, 3, 2, 2, 3, 1, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 0, 2, 0, 0, 0, 0, 2, 1, 3, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 1, 1], [2, 5, 3, 2, 1, 5, 2], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 0], [0, 3, 2], [4], [0, 2, 0, 0], [3], [], [], [], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 11, 11, 11, 1, 33, 11, 4, 4, 7, 6, 1, 0, 13, 1, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"[\"\") \\l ( divInt(len(s2),mod(divInt(len(in2),int(8.0)),i0)) + int(1.0) )\\nloopBreak% = 0\\nwhile (in0 + (s2[int(3.0):( divInt(divInt(int(8.0),i2),int(4.0)) + i1 )][mod(i0,int(2687.0)):] + s1))[( i2 + ( i0 * i2 ) ):i0] in getCharFromString(in2, i0):{:\\ni2 = mod(int(8.0),min(i1, int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 7, 8, 3, 5, 9, 8, 6, 1], [2, 2, 1, 2, 1, 2, 2], [0], [3, 3, 2, 2, 3, 3, 1, 2, 2, 2, 0, 1, 3, 3, 2, 2, 0, 3, 2, 0, 2, 1, 3, 0, 1, 3, 0, 1, 3, 2, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0], [2, 1, 3, 0, 2, 3, 2, 3, 2, 3], [2, 1, 1, 2], [0, 1, 0, 0, 0, 1], [4, 3, 4, 4, 4, 5, 2], [0, 0, 0, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [0, 1, 2], [3, 0, 2, 1], [5], [3], [6], [16]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 7, 0, 34, 10, 10, 4, 6, 7, 4, 0, 12, 0, 0, 3, 4, 1, 1, 1, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( ( len(in1) * min(int(44.0), divInt(( mod(i2,int(7.0)) - abs(len(in0)) ),divInt(divInt(i2,abs(divInt(i1,mod(int(8.0),len(in1))))),i2))) ) - int(3.0) ), abs(i1))) \\l int(5.0)\\nin1 = (in1 + (in2[len(s2):][:( i2 * int(9.0) )] + \"\"-F6d\"\"))[int(861.0):i2]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 1, 2, 1, 1], [2, 1], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4, 0], [1, 1, 1], [0, 0, 0], [], [], [], [], [1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 7, 8, 3, 5, 3, 3, 0, 9, 5, 2, 0], [1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 0, 0, 2, 0], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 2, 3, 3, 0, 0, 0, 3, 3, 0, 2, 1, 2, 3, 3, 0, 0, 0, 1, 2, 2, 0, 1, 1, 0, 2, 0, 3, 2, 2, 0, 1, 2, 2, 3, 2, 3, 1, 3, 3, 2, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [2, 1, 3, 0, 2, 3, 2, 0, 4, 3, 3, 1, 1, 0, 4, 3], [0, 2, 2, 2, 2], [1, 1, 0, 0, 1, 1, 1, 1, 0], [4, 5, 3, 4, 4, 5, 2, 4, 0, 3], [1, 1, 1, 0, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 4, 4, 1, 0, 1, 1, 1, 4, 0], [0, 3, 2], [4], [0, 2, 0, 0], [1, 2, 2, 2, 3], [], [12], [8, 0, 5], [16]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 1, 13, 13, 15, 0, 57, 14, 16, 5, 9, 10, 5, 0, 21, 3, 1, 4, 5, 0, 1, 3, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(( len(in1) + min(abs(int(44.0)), mod(i1,i2)) ), i2)) \\l mod(len(in2),abs(i2)):{:\\nres0 = i2 \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif min(saveOrd(in0), i2) \\l divInt(int(7.0),( len((in1 + (in1[len(in2):i1][i2:] + getCharFromString(\"\"m\"\".rstrip(s2), i1)[int(8.0):( ( i0 * int(3.0) ) * int(5.0) )]))[i0:divInt(i0,max(mod(( i2 * int(3.0) ),mod(mod(max(mod(min(int(3.0), saveOrd(\"\"8\"\")),len(\"\"0\"\")), divInt(int(0.0),int(9.0))),i0),int(5.0))), int(2.0)))]) * int(0.0) )):{:\\nin1 = \"\"5-\"\"\\n:}else:{:\\ns0 = in0.capitalize()\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 3, 8, 8, 6, 3, 4, 3, 7, 4, 7, 1, 8, 4, 4, 5, 3, 0, 6, 7, 9, 9, 1], [2, 1, 1, 0, 2, 1, 0, 1, 1, 1, 2, 1, 2], [0], [3, 3, 2, 0, 2, 3, 3, 3, 2, 1, 0, 1, 3, 3, 3, 3, 3, 1, 2, 1, 1, 3, 3, 3, 3, 3, 3, 1, 3, 2, 1, 2, 1, 1, 2, 1, 2, 0, 3, 3, 0, 1, 0, 3, 2, 3, 2, 0, 2, 3, 3, 1, 1, 2, 0, 3, 3, 3, 2, 1, 3, 2, 1, 2, 3, 1, 0, 2, 0, 1, 1, 1, 0, 0, 0, 1, 2, 1, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0], [2, 3, 3, 0, 2, 2, 3, 3, 3, 2, 1, 1, 0, 0, 1, 1, 3, 3, 1, 2, 3, 3, 4, 1, 2, 4, 3, 1], [0, 1, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 5, 3, 2, 4, 5, 4, 0, 5, 5, 4], [1, 1, 1, 1], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 1, 0, 4, 4, 2, 2, 4, 2, 4, 0, 1, 4, 1, 1, 2, 2, 4, 4, 2, 2, 0, 4, 0, 2, 0, 0], [0, 3, 2, 2, 2, 2, 1, 3, 2], [4, 2], [0, 1, 1, 0, 0, 2, 2, 2, 2, 0, 1], [1, 2, 1, 0], [24], [1, 22], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 23, 23, 13, 0, 79, 17, 28, 8, 9, 11, 4, 0, 38, 9, 2, 11, 4, 1, 2, 1, 0], "tree_depth": 67, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(getCharFromString(in0, ( i2 + ( len(in2) - min(abs(divInt(int(23.0),i1)), int(8.0)) ) )))) \\g abs(len((in0 + (s2[:len(in1)][:len((\"\"b\"\" + in2))] + in1.capitalize()[abs(int(8.0)):].capitalize()[mod(int(6.0),int(3.0)):max(max(min(min(max(max(int(4.0), len(\"\"4\"\")), ( int(3.0) + ( int(7.0) - int(4.0) ) )), ( int(7.0) - divInt(i1,len(\"\"w\"\".capitalize())) )), max(i0, int(1.0))), i2), abs(mod(len(\"\"Y\"\"),( i1 + divInt(len(saveChr(saveOrd(s0[int(8.0):int(4.0)][mod(i0,max(abs(saveOrd(in2.capitalize())), divInt(int(4.0),len(in2[:mod(int(5.0),mod(max(int(3.0), i1),( i1 + int(0.0) )))])))):].strip()))[int(6.0):][int(7.0):]),i1) ))))][i2:i1].capitalize().rstrip(in1)))[int(99.0):( int(1.0) + i2 )]))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 6, 8, 0, 7, 0, 5], [2, 0, 1, 2, 2, 2, 2], [], [2, 2, 2, 3, 2, 3, 1, 2, 3, 1, 1, 1, 3, 0, 2, 0, 2, 1, 2, 3, 3, 0, 3, 1, 0, 0, 0, 3, 0, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0], [4, 1, 3, 4, 4, 1, 1, 1], [0, 0, 0, 2], [0, 1, 0, 0], [0, 5, 3, 2, 4, 5, 2], [1, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 1, 0], [0, 3, 2], [4], [0, 0, 1], [3, 0], [15], [], [], [7]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 7, 0, 31, 8, 8, 4, 4, 7, 2, 0, 14, 0, 0, 3, 2, 1, 0, 0, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( divInt(mod(saveOrd(s0),( max(int(3.0), divInt(len(\"\"$\"\"),int(2.0))) + int(6.0) )),int(8.0)) + saveOrd(in2) ) \\le i2\\nin0 = (s2 + (in1[:( i0 + divInt(int(0.0),( saveOrd(in2) * max(i1, max(int(7.0), i2)) )) )][i2:i2] + (\"\"P\"\" + s2)))[max(i2, int(0.0)):int(5.0)]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 0], [0, 0], [], [3, 1], [0], [1], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2, 1, 1], [0, 1], [3, 3, 3, 3, 2, 3, 2, 2, 0, 3, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 3, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0, 4, 4], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1, 1], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 1, 4, 1], [0, 3, 2], [4], [2, 1, 0, 2, 0], [2, 1], [], [9], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 0, 2, 1, 1, 0, 5, 5, 7, 0, 24, 5, 7, 3, 2, 5, 2, 0, 15, 1, 0, 5, 2, 0, 1, 1, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s2[len(in2):]) \\le len((in0 + (s2[min(( min(divInt(divInt(i0,saveOrd(in1)),int(3.0)), int(7.0)) + i0 ), ( int(5.0) + i1 )):][int(8.0):i0] + \"\"6\"\"[( i2 + int(8.0) ):saveOrd(getCharFromString(\"\"j\"\", i1))]))[:i1]) and False )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 2, 3, 2, 4, 5], [0, 0, 0, 1, 1], [], [0, 1, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [3, 1, 2, 0, 1], [16], [7, 16], [5], [18]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 5, 3, 3, 2, 1, 5, 0, 3, 0, 0, 0, 5, 1, 2, 1, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(\"\"/h5Q\"\"),divInt(len(\"\"q\"\"),( ( int(3.0) + int(7.0) ) + int(5.0) ))) + int(8.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 2, 2, 3, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [0, 1], [], [1, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [2, 1], [], [9], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 1, 2, 0, 2, 0, 0, 0, 2, 0, 1, 1, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"0j\"\") \\le ( int(3.0) + len(s2) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 1, 1], [2], [0, 1, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 0, 0, 0, 1, 2], [0, 0], [0], [2, 3, 2], [1], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1], [3, 3, 5, 8, 8, 9, 0, 1, 6, 5, 3, 0], [0, 0, 1, 0, 2, 0], [1], [3, 2, 2, 3, 2, 2, 3, 2, 0, 1, 1, 0, 0, 2, 1, 1, 1, 0, 2, 0, 1, 1, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0], [2, 5, 3, 2, 4, 5, 0, 4], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2, 1], [2], [], [], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 0, 0, 0, 1, 2, 6, 2, 1, 3, 1, 0, 0, 12, 12, 6, 1, 23, 7, 3, 4, 4, 8, 1, 0, 14, 0, 0, 4, 1, 0, 0, 1, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(\"\"4\"\") \\le divInt(mod(len(s2),divInt(( len(in2) + ( i0 + int(3.0) ) ),int(3.0))),i0):{:\\nres0 = not ( not i1 \\le divInt(int(5.0),int(8.0)) or (in0 + (s2[int(8.0):][i0:] + in1))[( i2 + int(90.0) ):] in in2[:int(1653.0)] )\\ni0 *= int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = in1\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 1], [0, 2, 0, 2, 1], [2, 0], [0, 1, 0], [0], [0, 0], [], [], [3, 1], [0, 1, 0], [1, 1, 0, 1], [0, 0, 0], [], [2], [], [], [], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], [8, 7, 6, 5, 7, 9, 8, 2, 6, 7, 7, 8, 8, 3, 3, 4, 1, 4, 7, 7, 6, 5, 3, 8, 4], [2, 1, 2, 2, 2, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 2, 0, 1, 1, 1, 2, 2], [0], [3, 3, 2, 2, 2, 3, 1, 3, 0, 1, 3, 3, 3, 2, 0, 0, 3, 0, 3, 1, 0, 3, 0, 3, 1, 2, 2, 0, 2, 1, 3, 2, 2, 0, 0, 1, 2, 2, 1, 1, 2, 1, 0, 1, 0, 2, 2, 3, 2, 2, 0, 2, 0, 0, 0, 3, 2, 1, 2, 0, 1, 1, 1, 0, 2, 0, 3, 3, 1, 3, 3, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [3, 3, 0, 0, 1, 1, 2, 3, 3, 4, 0, 0, 1, 1, 4, 0, 3, 3], [1, 1, 1, 0, 0, 2, 2, 2, 0, 0], [0, 1, 0, 1, 1, 0, 1, 1, 1, 0], [4, 5, 3, 2, 4, 5, 1, 0, 3, 1, 0, 2, 3, 3], [1, 0, 1, 1, 1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 0, 4, 2, 4, 1, 1, 3, 4, 1, 3, 0, 0, 2, 3, 2, 0, 4, 3, 3, 0, 1, 0, 0], [0, 3, 2, 2], [4], [0, 0, 1, 1, 1, 0, 2], [0, 2, 0, 1, 2], [7, 8], [0], [2, 4], []], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 2, 3, 4, 3, 0, 1, 0, 0, 0, 25, 25, 22, 1, 77, 20, 18, 10, 10, 14, 5, 1, 35, 4, 1, 7, 5, 2, 1, 2, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in1) \\l len(in2)\\nloopBreak% = 0\\nwhile ( ( divInt(min(int(8.0), min(i2, int(7.0))),max(max(abs(mod(i1,i2)), len(in0)), i2)) - len((s2 + (in1[:int(6.0)][i2:saveOrd(in2)] + s1[:i2]))[min(int(5.0), ( divInt(i2,mod(int(7982.0),min(( mod(i1,i0) - int(67.0) ), ( ( int(7.0) - int(8.0) ) + ( int(8.0) + i2 ) )))) * int(3.0) )):i0]) ) * divInt(mod(max(mod(mod(i1,( i1 * i2 )),i0), max(( int(3.0) + ( i2 + int(4.0) ) ), int(1.0))),int(477.0)),i0) ) \\g divInt(i1,saveOrd(getCharFromString(\"\"H\"\".rstrip(\"\"2I\"\")[:min(int(6.0), len((\"\"a\"\".capitalize() + (s0 + in0))))], len((s1[int(5.0):] + ((s0 + \"\"4\"\") + s2).capitalize())[i1:int(3.0)])))):{:\\ni1 = int(84.0)\\nloopBreak% = 0\\nfor in0 in in0:{:\\nb1 = not i2 \\l i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [1, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [7, 1, 0, 8, 7, 8, 3, 5, 4, 4, 7, 5, 8], [1, 0, 1, 1], [0, 0], [3, 2, 2, 3, 2, 3, 1, 1, 2, 1, 1, 3, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 0], [4, 3, 3, 2, 3, 3], [0, 0], [1, 0, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 1, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [0, 2, 2], [1], [], [12], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 11, 11, 3, 2, 20, 5, 6, 2, 3, 7, 1, 1, 10, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(divInt(len(in2),divInt(len(\"\"m\"\"),int(71.0))),int(0.0)):{:\\nloopBreak% = 0\\nwhile ( int(8.0) + int(7.0) ) \\le abs(( len((in0 + in0)[int(8.0):int(3.0)]) + len(getCharFromString(in1, int(54.0))) )):{:\\nloopBreak% = 0\\nfor s1 in s2:{:\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(47.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [4, 6, 7, 8, 3, 5, 7, 9, 3, 2, 5, 2, 0, 0, 2, 3, 4, 5, 0, 4, 9, 6, 5, 6, 0, 1], [1, 0, 2, 2, 1, 2, 2, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0, 1], [0], [3, 3, 2, 3, 3, 3, 1, 3, 0, 0, 0, 1, 3, 3, 0, 0, 2, 2, 3, 2, 0, 1, 2, 2, 0, 3, 2, 3, 1, 1, 2, 0, 1, 0, 3, 0, 3, 1, 3, 1, 0, 1, 2, 0, 3, 3, 2, 3, 1, 0, 3, 1, 0, 1, 1, 0, 2, 0, 3, 2, 1, 2, 3, 0, 2, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [2, 1, 3, 0, 1, 3, 2, 3, 2, 3, 0, 2, 2, 4, 4, 1, 0, 2, 2, 2], [0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 1], [4, 5, 4, 3, 4, 5, 0], [1, 1], [], [2, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0, 2, 0, 2, 4, 2, 0, 2, 4, 2, 1, 2, 1], [0, 3, 2], [4], [0, 2, 0, 0, 1, 0, 1, 0, 2, 1, 2, 0, 0, 2], [1, 2], [], [20], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 26, 26, 18, 0, 72, 14, 20, 5, 9, 7, 2, 0, 27, 2, 1, 14, 2, 0, 1, 1, 0], "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1[min(max(int(46.0), len((in2 + (in1[:i1][i0:i2] + in0))[int(7.0):abs(len(in1[i2:i1][:mod(mod(abs(divInt(i2,int(8.0))),( divInt(i2,len(in2[( min(int(3.0), int(5.0)) + mod(i0,int(7.0)) ):])) + i1 )),abs(i0))][abs(int(9.0)):saveOrd(getCharFromString(s0[int(3.0):], i0)[:int(2.0)])]))])), ( i2 + saveOrd(\"\"u\"\"[max(( min(int(5.0), i0) + abs(int(2.0)) ), i1):int(0.0)].rstrip(\"\"4\"\"[int(0.0):])[i1:mod(i1,abs(divInt(int(2.0),mod(abs(i0),mod(i1,int(3.0))))))]) )):][int(45.0):int(04.0)]) + int(9656.0) ), int(0.0))) \\l int(1.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1], [2, 2, 2, 1, 2, 1, 0], [2, 1, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 4, 5, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 3, 0, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3], [0], [1, 0, 0, 0, 1], [5, 5, 3, 3, 4, 1, 2, 3, 3, 3, 1, 4], [1], [0, 0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [1], [], [19], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 4, 3, 2, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 1, 8, 8, 3, 0, 20, 5, 6, 1, 4, 12, 1, 2, 12, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in2) \\le mod(divInt(len(in2),divInt(len(in0),int(31.0))),int(0.0)):{:\\nif i0 \\l abs(i2):{:\\nloopBreak% = 0\\nfor in0 in (in1 + s1)[( divInt(abs(int(8.0)),int(7.0)) + len(getCharFromString(s2, int(83.0))) ):]:{:\\nres0 = i1 != int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in0 in in0:{:\\nin0 = s1\\nin1 = \"\"t\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [3, 4, 6, 8, 3, 5], [0, 1, 1], [0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 1, 3, 3], [0, 0, 1], [4, 3, 3, 2, 2, 3], [0, 2], [1, 1, 0], [4, 5, 5, 1, 4, 5], [0, 1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1, 1], [], [7, 10], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 1, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"hk\"\") \\l len(in1)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [1, 4, 8, 8, 9, 9, 1, 0, 8, 0, 5, 8, 6], [2, 1, 1, 1, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3, 3, 0, 2, 0, 1, 2, 0, 2, 1, 2, 3, 3, 3, 1, 2, 0, 3, 1, 3, 1, 1], [0, 0, 1, 1, 0, 0, 1], [2, 3, 3, 0, 2, 4, 1, 0, 4, 2, 4, 3, 1], [0, 1, 0, 0], [0, 1, 0], [3, 4, 1, 2, 4, 5, 1, 1, 2], [1], [], [3, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 0, 0, 4, 4, 0, 1, 0], [0, 3, 2], [4], [0, 2, 0, 1], [3], [], [], [], [13]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 6, 0, 34, 7, 13, 4, 3, 9, 1, 0, 19, 2, 1, 4, 1, 0, 0, 0, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len((in0 + in1))) \\le ( len((s1 + (s2[( min(abs(saveOrd(in1)), i2) + int(148.0) ):i1][int(8.0):] + in2[:max(min(i1, divInt(i1,int(9.0))), mod(i1,( int(9.0) - ( saveOrd(s1) + abs(saveOrd(getCharFromString(s1.rstrip(\"\"*\"\"), int(1.0)))) ) )))]))[divInt(i1,len(s2)):int(0.0)]) + max(int(805.0), int(86.0)) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1, 1], [1, 6, 6, 8, 4], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1, 1], [], [2, 0, 3, 0, 0, 4, 3, 1, 2, 3, 1, 0], [0], [], [0, 2], [1, 3], [5], [0], [], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 9, 1, 4, 0, 1, 4, 2, 0, 12, 1, 0, 2, 2, 0, 1, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(166.0):len((in2 + in1))]) \\l len(getCharFromString((\"\"a\"\" + (\"\"@\"\" + s1)[divInt(int(8.0),abs(i0)):]), int(4.0)))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [3, 3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [8, 1, 5, 8, 7, 6, 6, 8, 6, 0, 1, 1, 0, 9, 4, 6, 2], [2, 0, 1, 0, 2, 1, 1], [1], [3, 2, 2, 3, 2, 2, 2, 1, 0, 3, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 0, 3, 1, 0, 3, 1, 1, 1, 1, 2, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [4, 3, 3, 0, 0, 4, 1], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0, 0, 0], [1, 5, 3, 2, 4, 5], [0, 0, 0, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 1, 0, 0], [0, 3, 2], [4], [0, 2, 0], [3, 1, 2, 0], [25], [24], [5], [1]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 11, 11, 6, 0, 31, 10, 6, 5, 5, 5, 4, 0, 10, 0, 0, 2, 4, 1, 1, 1, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\l ( ( len(in2) + divInt(mod(( int(8.0) + i2 ),len(in0)),int(1.0)) ) * divInt(divInt(( int(5.0) * i0 ),int(8.0)),i1) )\\nres0 = divInt(i0,int(7.0)) \\le ( min(i2, min(int(6.0), i1)) - saveOrd((s2 + (\"\"\\\\\\ny5Z\"\"[int(6.0):] + in1))[int(86.0):int(01.0)]) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [4, 4, 4], [1, 0, 1, 0], [0, 0, 0], [4], [2, 1], [], [1], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [7, 1, 0, 8, 7, 1, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 2, 3, 1, 3, 0, 1, 1, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 1, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 2, 0, 1, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [2], [], [], [0], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 3, 1, 1, 0, 0, 0, 1, 2, 4, 2, 0, 2, 0, 1, 0, 7, 7, 1, 0, 16, 5, 5, 0, 5, 5, 1, 1, 6, 0, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in2),divInt(len(in0),int(71.0))),abs(i0)):{:\\nloopBreak% = 0\\nwhile not int(0.0) \\le int(8.0):{:\\nloopBreak% = 0\\nfor in0 in in1[divInt(mod(len(\"\"0\"\"),int(7.0)),int(13.0)):]:{:\\nres0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [2, 1], [0, 0], [3], [], [], [], [], [1, 1, 1, 1], [3, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 1, 4, 1, 1], [1, 1], [], [2, 0, 3, 2, 0, 4, 3, 1, 2, 1, 0, 0, 2, 4, 0], [0, 0], [], [2, 2, 2, 1], [3, 0], [5], [], [], [16]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 9, 1, 4, 0, 1, 5, 2, 0, 15, 2, 0, 4, 2, 1, 0, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0[saveOrd((s1[int(3.0):] + getCharFromString((\"\"-\"\" + \"\"F\"\"[len(in1):]), len(s1)))):] != getCharFromString(s1, divInt(int(0.0),abs(i0)))[:int(6.0)]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 2, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 2, 2], [0, 0, 0], [4, 4], [], [], [], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 0, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8], [1, 0, 1, 1, 1], [1], [3, 3, 0, 3, 1, 0, 1, 1, 0, 1, 1, 2, 2, 2, 1, 1, 3, 1, 0, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 5, 3, 0, 4, 1, 2, 2, 3, 2], [1, 1, 1, 1], [0], [2, 0, 0, 2, 3, 0, 2, 4, 0, 0, 0, 1, 4, 3, 1, 2, 2, 2, 2, 1, 0, 4, 3, 0, 3, 2, 1, 0], [0, 3, 2], [4], [2, 2, 2, 2, 0, 0, 2, 0], [0, 1, 2, 2], [21], [2], [8, 3], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 3, 1, 1, 0, 0, 0, 1, 1, 3, 1, 2, 0, 0, 0, 0, 11, 11, 5, 0, 21, 3, 4, 0, 3, 10, 4, 1, 28, 3, 1, 8, 4, 1, 1, 2, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2[len(in2):]) \\le i1:{:\\nloopBreak% = 0\\nwhile (in0 + getCharFromString(s0, len(in1))[int(610.0):])[i0:].startswith(s1):{:\\nloopBreak% = 0\\nfor s2 in \"\"V\"\":{:\\nres0 = (\"\"c\"\" + \"\"8\"\"[int(8.0):][int(7.0):i1][int(8.0):int(3.0)][mod(mod(divInt(int(5.0),int(4.0)),abs(int(4.0))),i1):]).rstrip(s2).startswith((in0 + (\"\"3\"\"[i1:int(7.0)] + s2)).capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [8, 1, 5, 8, 7, 6, 6, 8, 6, 0, 1, 1, 0, 9, 4, 8, 6, 7, 4, 7, 5, 9, 8, 6, 8, 2, 5, 2, 2, 7, 4, 6, 9, 9, 6, 1], [2, 0, 1, 2, 2, 1, 1, 1, 2, 1, 0, 1, 2, 2, 1, 0, 0, 2, 2, 2, 0, 2, 0, 2, 1, 0, 2, 2, 2], [1], [3, 2, 2, 3, 2, 2, 3, 1, 0, 3, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 0, 3, 1, 0, 3, 1, 0, 1, 1, 2, 3, 1, 3, 0, 2, 1, 0, 2, 2, 3, 1, 0, 2, 3, 3, 1, 0, 1, 3, 2, 2, 1, 2, 3, 1, 2, 0, 2, 0, 3, 0, 2, 1, 2, 2, 3, 2, 3, 1, 2, 2, 3, 2, 0, 3, 0, 1, 3, 0, 0, 3, 0, 2, 3, 1, 0, 0, 1, 1, 1, 2, 2, 3, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 1, 0, 1, 0, 3, 3, 1, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0, 4, 1, 1, 0, 4, 3, 0, 0, 0, 1, 3, 4, 2, 0, 4, 2, 3, 2, 4, 1], [0, 0, 0, 2, 1, 2, 0, 1, 1, 1, 2, 2, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0], [1, 5, 3, 2, 4, 5, 4, 2, 1, 1, 0, 4, 1], [0, 1, 1, 1, 1, 0, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 3, 0, 1, 3, 1, 4, 3, 0, 2, 2, 0, 2, 0, 2, 2, 4, 0, 0, 2, 4, 1, 4, 4, 4, 2, 2, 2, 0, 1, 4, 2, 1], [0, 3, 2, 2, 0, 0, 3], [4, 1], [0, 1, 0, 1, 0, 0, 1, 2, 1, 0, 1, 2, 0], [2, 1, 2, 0, 3, 3, 0], [25, 9], [7], [5, 1], [3, 1]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 36, 36, 29, 0, 115, 32, 25, 17, 15, 13, 7, 0, 44, 7, 2, 13, 7, 2, 1, 2, 2], "tree_depth": 77, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\l ( ( len(in2) + divInt(mod(len(in0),int(8.0)),i2) ) + min(int(1.0), ( divInt(divInt(int(5.0),i0),int(8.0)) + i1 )) )\\nb1 = ( i2 * int(7.0) ) \\le ( min(i2, saveOrd((s2 + (in1[int(6.0):i1][:max(int(6.0), i1)] + in2))[int(86.0):int(01.0)])) - ( max(int(10948.0), min(i1, divInt(int(6.0),i2))) * ( ( saveOrd(((in1 + \"\"5h\"\") + (\"\"1\"\" + getCharFromString((s2 + s1[int(7.0):i1][:( len(s1[min(int(4.0), i0):int(7.0)]) + min(( divInt(int(5.0),divInt(min(int(9.0), mod(i1,( i2 - max(i2, ( int(8.0) - divInt(mod(len(s0.rstrip(in1)[( saveOrd(\"\"Z\"\".capitalize()[:int(6.0)]) - divInt(divInt(abs(( i1 * min(i0, int(8.0)) )),saveOrd(getCharFromString(getCharFromString(s1[i0:][:i2][abs(i2):( len(\"\"\"\") * int(2.0) )], i2), i0).capitalize())),int(5.0)) ):][:int(2.0)]),int(2.0)),divInt(( abs(i2) - mod(i0,i2) ),i1)) )) ))),( int(7.0) - i0 ))) + i2 ), divInt(int(4.0),i2)) )]), int(6.0))))) - i2 ) - saveOrd(\"\"\\\\\\nJ\"\"[max(int(9.0), int(9.0)):int(61.0)].rstrip()) ) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1], [2, 4, 6, 8, 8, 9, 2, 7, 4, 2, 2, 5, 9, 1, 3, 3, 4, 5, 1, 4], [2, 2, 1, 2, 0, 0, 2, 2, 2, 1, 0, 0], [1], [3, 3, 2, 3, 2, 2, 1, 2, 1, 1, 0, 1, 3, 2, 3, 2, 3, 3, 3, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 3, 0, 2, 3, 1, 0, 0, 3, 0, 2, 2, 3, 1, 1, 0, 3, 3, 0, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 4, 2, 0, 4, 2, 4, 4, 1, 2, 2, 1, 1, 4], [2, 2, 1, 2, 1, 2, 0, 1, 0, 2, 2, 0, 2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 4, 2, 2, 1, 1, 1], [0, 3, 3, 0, 3, 3, 2, 1], [4], [0, 1, 1, 0, 2], [3, 1, 1], [], [4, 18], [], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 20, 20, 12, 0, 61, 16, 18, 13, 3, 6, 3, 0, 18, 2, 1, 5, 3, 0, 2, 0, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) * divInt(( int(24.0) * ( int(6.0) - int(8.0) ) ),i2) ), int(89.0))) \\l min(( min(( saveOrd(in2) * abs(min(i2, i1)) ), i2) - int(2.0) ), ( ( mod(( ( ( ( i0 * i0 ) + saveOrd(in0) ) - i2 ) + divInt(abs(int(7.0)),i2) ),i2) * saveOrd((s2 + (in1[:i1][:( ( saveOrd(in2) * int(4.0) ) + int(2.0) )] + getCharFromString(\"\"&\"\"[i0:][max(abs(i0), abs(max(int(2.0), int(5.0)))):max(saveOrd(\"\"e\"\"), int(9.0))].rstrip(\"\"s\"\"), int(1.0))))[int(33.0):int(4.0)]) ) * int(514.0) ))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [2, 1], [], [0, 0], [], [], [1, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 8, 7, 7, 8], [1, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 1, 0, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [0, 0, 2], [3], [], [], [], [27]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 3, 0, 18, 4, 4, 2, 2, 6, 1, 0, 12, 1, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( divInt(len(getCharFromString(in2, mod(len((in0 + (s2[min(( i1 - int(2.0) ), int(2.0)):][int(4.0):int(8.0)] + in1))[int(7.0):int(7.0)]),i0))),int(8.0)) - i1 ):{:\\nin2 = \"\"\\\\\\\\\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 7, 5, 8, 8], [0, 0, 1, 0, 2], [0, 1], [0, 2, 2, 3, 2, 3, 2, 2, 0, 1, 0, 3, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [2], [], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 12, 5, 3, 3, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le ( divInt(saveOrd(s2),divInt(len(\"\"5\"\"),( ( i0 + int(8.0) ) + i1 ))) + len(in2) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [2, 4, 8, 8, 1, 0, 8, 0, 2, 1, 3, 1, 1, 6, 8, 3, 8], [2, 1, 1, 2, 2, 1, 0, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3, 2, 0, 3, 2, 2, 3, 3, 1, 3, 2, 2, 1, 3, 3, 3, 3, 0, 2, 1, 1, 0, 1, 1, 2, 0, 2, 2, 3, 0, 3, 1, 2, 2, 3, 3, 0, 1, 2, 3, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [2, 3, 3, 0, 2, 4, 0, 3, 2, 4, 2, 3, 4, 4, 1, 0, 1, 4, 3, 4], [0, 2, 1, 2, 0, 2], [0, 1, 0, 1, 1, 1, 0, 1], [3, 5, 3, 2, 4, 5, 1, 4, 0, 2, 0], [1, 1, 1, 1], [], [0, 3, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 0, 4, 0, 4, 0, 2, 1, 4, 1, 2, 1, 0, 0, 4, 1], [0, 3, 2, 2], [4], [0, 1, 0, 1, 0], [3, 0, 2, 2], [25], [], [8, 1], [15]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 17, 17, 8, 0, 53, 14, 20, 6, 8, 11, 4, 0, 27, 4, 1, 5, 4, 1, 0, 2, 1], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\ge ( len((in2 + (in0 + (s2[( min(abs(saveOrd(in1)), i2) + int(24.0) ):i1][:int(8.0)] + in2))[min(divInt(i1,len(s1)), ( ( abs(saveOrd(getCharFromString(in1, int(8.0)))) * abs(( mod(int(1.0),len(s0.rstrip(\"\",\"\"[:saveOrd(\"\"Z\"\".capitalize())]))) - saveOrd(\"\"8\"\"[max(i2, divInt(int(0.0),int(8.0))):i2]) )) ) * int(021.0) )):int(311.0)])) + mod(i1,( mod(min(i0, max(int(6.0), mod(divInt(saveOrd(s2),len(s0)),i1))),int(83.0)) * mod(saveOrd(\"\"1\"\".capitalize()),int(8.0)) )) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 4, 8, 8, 1, 7, 1, 2, 1, 3, 0, 8, 9, 9, 5, 4, 2, 2, 9, 7, 0, 1, 9], [0, 1, 1, 0, 0, 0, 2, 2, 0, 1, 1, 0, 2, 1, 0, 0, 1, 1, 2], [0], [3, 3, 2, 3, 2, 3, 3, 3, 3, 1, 2, 1, 2, 1, 0, 1, 3, 0, 1, 3, 0, 3, 3, 0, 2, 3, 2, 2, 0, 1, 0, 2, 1, 0, 0, 3, 0, 0, 1, 1, 3, 1, 1, 2, 1, 2, 1, 1, 0, 0, 0, 2, 1, 0, 3, 1, 1, 1, 0, 0, 0, 2, 3, 3, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0], [2, 3, 3, 0, 0, 1, 3, 0, 3, 1, 2, 0, 4, 3, 0, 4, 4], [0, 1, 2, 0, 2, 0, 2], [0, 1, 0, 1, 1], [3, 5, 3, 2, 4, 5, 2, 0, 0, 1, 3, 5, 5, 5], [1, 1, 1, 1, 0, 1, 0, 1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 4, 3, 3, 0, 3, 4, 0, 4, 4, 4, 4, 4, 2, 2, 4, 4, 1, 1, 4, 4, 0, 4, 2, 0, 4, 4, 0, 4, 4, 2, 4, 2, 1, 0, 1, 1, 3, 1, 2, 4, 4, 0, 4, 0], [0, 3, 2, 2, 2, 3, 0, 0, 3, 3, 0, 0, 3, 0, 3, 0, 0, 3, 0, 0], [4, 3, 4, 4, 5, 0, 4], [0, 0, 1, 1, 0, 0, 1, 0, 2, 0], [3, 1, 0, 3, 1, 2, 0, 0], [5, 15, 11], [6, 4], [1], [20, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 23, 23, 19, 0, 68, 12, 17, 7, 5, 14, 8, 0, 56, 20, 7, 10, 8, 3, 2, 1, 2], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( len(in2[( min(min(max(len((in0 + (s2[:int(24.0)][:divInt(int(8.0),( int(8.0) + i0 ))] + in1))[int(1.0):min(i1, int(7.0))]), len(in2)), i1), max(abs(i0), mod(min(divInt(( i0 - int(1.0) ),i0), ( int(2.0) * i2 )),i2))) + saveOrd(getCharFromString(((s2 + (s0.rstrip(getCharFromString(getCharFromString(\"\";\"\".rstrip(\"\"g\"\"), i0)[i1:int(1.0)][int(3.0):len(getCharFromString(s0, int(0.0)).rstrip(getCharFromString(s1[:int(8.0)], mod(int(9.0),( int(9.0) * int(5.0) )))))], i1).lstrip(getCharFromString(in0, i0).strip(getCharFromString(getCharFromString(\"\"F\"\"[i2:], mod(int(4.0),i1))[min(int(2.0), int(2.0)):int(9.0)], i0).lstrip())).capitalize().capitalize().capitalize()) + in2)) + \"\".\"\"), i0)) ):i1]) + ( saveOrd(\"\"e1\"\") * saveOrd((\"\"PL\"\" + getCharFromString(in2, int(7.0)).rstrip(getCharFromString(in2, i1))[int(019.0):i2])) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [8, 0, 7, 8, 3, 5, 4], [1, 1, 1, 2, 2, 0, 0, 1], [0], [3, 3, 2, 2, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3, 0, 1, 0, 2, 2, 3, 2, 0, 3, 1, 0, 2, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1], [3, 1, 3, 0, 1, 3, 3, 2], [0, 1], [1, 0, 0, 1, 0], [4, 5, 3, 4, 4, 5, 3], [0, 0, 0, 0, 0, 1], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0, 0, 1], [0, 3, 2], [4], [0, 0, 2, 1], [3, 3, 3, 1, 2, 0], [7], [10], [2], [7, 26, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 8, 0, 29, 7, 8, 2, 5, 7, 6, 0, 13, 0, 0, 4, 6, 1, 1, 1, 3], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in1) \\l max(( mod(len(in2),min(int(80.0), divInt(i1,i1))) + i1 ), int(7.0))\\nin0 = (in1 + (in1[:max(len(in2), i2)][int(8.0):] + in0))[i2:divInt(( len(\"\"$[k2H\"\") - mod(i0,abs(int(3.0))) ),i0)][divInt(int(5.0),int(4.0)):i1]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 2], [0, 0], [0], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [3, 7, 5, 8, 8, 0, 2, 3, 1, 2, 6, 0, 8], [0, 0, 1, 0, 2, 0, 0, 1, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 3, 0, 2, 1, 0, 1, 0, 2, 0, 1, 3, 3, 1, 1, 0, 2, 0, 3, 0, 3, 3, 0, 1, 2, 1, 1, 3, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0], [4, 3, 3, 0, 0, 3, 2, 1, 0, 4], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [2, 5, 3, 2, 4, 5, 3], [1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 2, 1, 2, 2, 2, 4, 1, 1, 0], [0, 3, 2], [4], [2, 1, 1, 2, 1, 2, 2], [1, 0, 3], [24], [8], [], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 13, 13, 9, 0, 39, 10, 10, 6, 4, 7, 3, 0, 21, 1, 0, 7, 3, 1, 1, 0, 1], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + divInt(min(i0, ( int(7.0) + i1 )),int(5.0)) ))) * i0 ) and (s2 + (in1[:( i2 - int(8.0) )][:min(len(in2), int(8.0))] + (\"\"i\"\"[int(0.0):] + getCharFromString(\"\"Y\"\", i0)[divInt(i0,abs(i1)):][max(min(i2, int(2.0)), ( int(3.0) * int(1.0) )):][:saveOrd(\"\"%\"\")])))[int(2608.0):] in in0 )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [3, 9, 6, 8, 3, 5, 1, 3, 9, 9, 8, 0, 1, 2], [2, 1, 1, 0, 2, 1, 1, 0, 1, 0, 1, 2], [0], [3, 3, 2, 3, 3, 3, 1, 2, 3, 0, 0, 1, 3, 3, 2, 2, 3, 0, 2, 2, 1, 1, 0, 0, 2, 2, 3, 0, 1, 2, 2, 2, 3, 1, 2, 0, 0, 3, 0, 3, 1, 3, 1, 0, 1, 3, 3, 2, 3, 2, 3, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [2, 1, 3, 0, 0, 3, 2, 3, 4, 1, 2, 2, 2, 4, 2, 0, 3, 4], [0, 2, 0, 2, 1, 0], [1, 1, 0, 0, 1, 0, 0, 0], [4, 5, 5, 1, 4, 5, 3, 4, 4], [1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 2, 2, 4, 0, 1, 4, 0, 4, 4, 0], [0, 3, 2, 0, 3], [4, 0], [0, 1, 2, 0, 0], [1], [], [4], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 12, 0, 56, 14, 18, 6, 8, 9, 1, 0, 22, 5, 2, 5, 1, 0, 1, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(int(39.0), ( len(getCharFromString(in2, i2)) * i1 )), int(6.0)) ), abs(len((in2 + (s1[mod(( saveOrd(in1) + i1 ),( mod(int(8.0),int(3.0)) * i0 )):][:i2] + in2))[divInt(divInt(max(i1, int(5.0)),mod(divInt(( abs(int(1.0)) - divInt(i1,i0) ),abs(i1)),abs(int(3.0)))),saveOrd(in0.rstrip(\"\"e\"\")[int(9.0):i0][int(9.0):abs(min(divInt(len(in1.capitalize()),( saveOrd(getCharFromString(in1.lstrip(), i1)) + int(8.0) )), int(0.0)))])):i2])))) \\l int(12.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [2, 4, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [7, 1, 3, 8, 4, 8, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 1, 1, 1, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 0, 0, 1], [4, 3, 3, 2, 3, 3], [0, 0], [1, 1, 0, 1, 1], [2, 5, 3, 3, 4, 1, 2, 2, 3, 2], [1], [0], [0, 0, 0, 1, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [3], [], [], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 12, 12, 1, 1, 18, 5, 5, 2, 3, 6, 1, 1, 7, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) == mod(mod(len(in2),( len(in0) + int(71.0) )),int(3.0)):{:\\nloopBreak% = 0\\nwhile int(8.0) \\le int(4.0):{:\\nloopBreak% = 0\\nfor in0 in \"\")\"\":{:\\nres0 = int(83.0) != ( divInt(abs(int(54.0)),int(47.0)) + len((in1 + s1)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [0, 2, 0, 0], [2], [0, 2, 2], [], [0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 3, 8, 7, 2, 9, 1], [2, 2, 1, 0, 2, 0], [1], [3, 2, 2, 3, 2, 2, 3, 1, 3, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 0, 3, 0, 2, 3, 1, 1, 3, 0, 3, 3, 3, 3], [0, 1, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0, 1, 2, 3, 3, 4, 3], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [0, 2, 3, 2, 4, 5, 2, 0, 0, 3, 3, 4], [1, 0, 1, 0, 0, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 4, 1, 1, 0, 3, 1, 0, 0, 4, 4, 1, 0], [0, 3, 2], [4], [0, 1, 2], [2, 3, 0, 2, 3, 2, 1], [25], [2], [2, 0, 6], [28, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 3, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 6, 0, 34, 9, 11, 4, 5, 12, 7, 0, 24, 3, 1, 3, 7, 1, 1, 3, 2], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(s2),mod(divInt(len(in0),int(8.0)),min(int(1.0), int(3.0)))) + ( divInt(divInt(int(8.0),i2),int(7.0)) + i2 ) )\\nloopBreak% = 0\\nwhile ( i1 + int(2.0) ) \\le i0:{:\\ns2 = (in1 + (in2[min(i2, ( max(int(9.0), int(1.0)) * abs(i0) )):][:len(s2)] + (getCharFromString(\"\"2\"\", len(\"\"]Z\"\")) + s0)))[saveOrd((\"\"0?6\"\" + s0)):len(in0)]\\nin0 = \"\"c\"\".capitalize().rstrip(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 0, 2, 0, 1], [0, 2, 0, 1, 0, 1], [0, 1, 2, 2, 2, 1, 2, 2], [0, 0], [0, 0], [], [], [3, 1], [4, 3, 5], [1, 1, 0, 0, 0, 1], [0, 0, 0], [], [0, 2, 1], [], [1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1, 4, 9, 3, 3, 8, 3, 8, 1, 3, 1, 2, 6, 2, 3, 0, 6, 4, 1, 4, 2], [0, 0, 1, 0, 2, 2, 0, 0, 1, 2, 1, 0, 1, 0, 0, 1, 1], [0, 1], [2, 2, 1, 3, 0, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0, 0, 3, 2, 0, 2, 3, 3, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 0, 3, 2, 2, 0, 0, 1, 3, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1], [4, 3, 3, 0, 0, 4, 1, 0, 3], [0, 0, 0, 2, 1, 2, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1], [2, 5, 3, 2, 5, 5, 5, 1, 4, 4, 0, 0, 2, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0], [0, 0, 0, 1, 3, 0, 3, 2, 2, 0, 0, 2, 1, 1, 2, 0, 4, 4, 2, 0, 1, 1, 4, 0, 2, 1, 3, 3, 1, 4, 2, 1, 4], [0, 3, 2, 1], [4], [2, 0, 1, 1, 1, 0, 2, 2], [2, 1, 2, 2, 1, 2, 3], [], [7, 15], [8, 5, 5, 8], [1]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 3, 1, 2, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 4, 2, 2, 2, 5, 1, 2, 4, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2:{:\\nloopBreak% = 0\\nwhile ( divInt(int(3.0),saveOrd(in0)) + i0 ) \\le len(s2):{:\\nloopBreak% = 0\\nfor in2 in \"\"8\"\":{:\\nres0 = mod(( i0 + int(7.0) ),int(4.0)) \\ge int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1, 2], [4, 4], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [3, 2, 4, 8, 7, 7, 2, 8, 6, 5, 7, 0, 8, 2, 0], [2, 0, 1, 0, 2, 2], [1], [3, 2, 2, 3, 2, 3, 3, 3, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 2, 1, 2, 1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [2, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 4, 1, 2, 0], [0, 3, 2], [4], [0, 0, 1, 1, 1], [3], [], [], [], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 6, 1, 23, 5, 5, 4, 2, 5, 1, 0, 16, 3, 1, 5, 1, 0, 0, 0, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= saveOrd(getCharFromString(s2, ( ( len((in2 + (in0[:divInt(len(s2),min(min(i0, int(3.0)), int(2.0)))][:int(4.0)] + \"\"]\"\".capitalize().rstrip(in1[:int(8.0)])))[int(7.0):int(7.0)]) + i1 ) * int(28657.0) ))[i0:( mod(int(0820.0),i2) - i2 )])\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [2, 1], [0, 0], [2], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 6, 8, 6, 5, 0, 4], [2, 0, 1], [1], [3, 1, 2, 3, 2, 3, 0, 1, 0, 1, 1, 1, 3, 1, 3, 1, 0, 1], [0, 1, 1], [4, 3, 3, 0, 3], [0, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5, 5, 1], [1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 2, 2, 2, 1, 0, 1], [0, 3, 2], [4], [0, 1, 0, 0, 1, 1], [0, 0], [8, 22], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 3, 0, 18, 2, 5, 1, 1, 8, 2, 0, 18, 1, 0, 6, 2, 2, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0 == in2\\nloopBreak% = 0\\nwhile saveOrd(in0) \\le int(0.0):{:\\ns2 = (in1 + (in2[( len(in2) + divInt(len(getCharFromString(\"\"I\"\"[:i2][:int(1.0)][i0:int(6.0)], int(8.0))),int(6.0)) ):min(int(5.0), len(s1))][:int(0.0)] + \"\"W\"\"))[i1:int(4.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2, 1, 1, 1, 2, 2], [0, 1], [], [0, 0, 0, 0, 0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 3, 0, 3, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0, 0], [0, 0, 0, 2, 2, 2], [0, 0, 0], [0, 5, 3, 2, 4, 5], [0, 0, 1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1, 3, 1], [], [15, 14], [], [29]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 4, 6, 2, 2, 2, 3, 0, 3, 0, 0, 0, 3, 0, 2, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(\"\"p^o\"\"),min(( i2 + int(3.0) ), min(i0, min(i2, int(7.0)))))) + int(4.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [0, 1], [2, 0, 0], [0, 2, 2], [0, 0], [0, 0], [], [], [3], [4, 0, 5], [1, 1, 1], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 6, 0, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8], [0, 2, 1, 1], [1], [3, 2, 2, 3, 3, 0, 1, 1, 0, 1, 1, 2, 2, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 5, 3, 3, 4, 1, 2, 3, 3, 2], [1], [0, 0], [1, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [0], [2], [], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 2, 3, 0, 2, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"C\"\") \\le mod(mod(len(s2),len(in2)),i0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [8, 7, 8, 4, 5, 7, 2, 7, 1, 8, 4, 4, 4, 0, 8, 0], [2, 0, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 0], [0], [3, 3, 0, 3, 2, 3, 2, 2, 1, 2, 2, 1, 2, 3, 1, 0, 1, 0, 0, 1, 2, 0, 2, 3, 2, 3, 0, 0, 2, 2, 0, 2, 0, 0, 0, 1, 2, 3, 3, 0, 0, 2, 1, 0], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0], [3, 1, 3, 4, 1, 2, 3, 1, 4], [1, 1, 0, 2, 1, 0, 2], [1, 0, 0, 0, 1, 1, 1], [4, 5, 3, 2, 4, 5, 4], [1], [], [0, 0, 2, 2, 3, 0, 0, 2, 2, 0, 1, 0, 0], [0, 3, 2], [4], [0, 1, 0, 2], [2], [], [], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 15, 1, 44, 14, 9, 7, 7, 5, 1, 0, 11, 0, 0, 4, 1, 0, 0, 1, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in1) \\l max(i2, len(in2))\\ni0 = ( saveOrd((in0 + s2)[:mod(divInt(int(87.0),( ( int(8.0) - divInt(max(int(4.0), i2),int(5.0)) ) - i2 )),i2)][int(7.0):divInt(i1,( abs(mod(len(in1[i2:][i1:mod(( i2 + mod(i2,i1) ),i1)]),int(27.0))) * ( max(saveOrd(\"\"3\"\"), i1) - i1 ) ))]) + ( int(1.0) * i0 ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 6, 8, 5, 3, 7, 6, 3, 2, 6, 0, 3, 1, 6, 8, 3, 0, 1, 8, 7, 6], [2, 0, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 0, 1, 2, 0, 1, 2, 1, 2, 0, 2, 0, 2, 1, 2, 1, 0, 1, 1, 1], [], [3, 2, 2, 1, 2, 3, 1, 2, 3, 1, 1, 2, 3, 2, 2, 2, 0, 1, 2, 0, 0, 1, 1, 2, 2, 3, 1, 3, 3, 3, 1, 3, 3, 2, 0, 3, 0, 0, 3, 0, 3, 2, 3, 2, 0, 0, 0, 3, 2, 3, 0, 3, 2, 2, 1, 3, 0, 2, 0, 0, 1, 3, 0, 2, 0, 0, 2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 2, 0, 3, 3, 2, 1, 3, 3, 0, 0, 3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 3, 2, 0, 0, 2, 2, 3, 3, 3, 1, 1, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1], [4, 0, 3, 0, 0, 3, 3, 0, 1, 2, 0, 1, 1, 2, 4, 3, 0, 1, 4, 1, 1, 0, 0, 1, 3, 4, 2, 2, 1, 3, 4, 1, 2, 2, 3, 2, 1, 3, 4, 2, 4, 4], [0, 0, 1, 1, 1, 0, 2, 1, 1, 2, 2, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 3, 2, 4, 5, 0, 2, 2, 4, 5, 1, 3], [1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 4, 4, 2, 0, 1, 2, 0, 1, 4, 0, 2, 0, 1, 0, 4, 1, 0, 4, 0, 2, 4, 1, 4, 4], [0, 3, 2, 3, 3, 3, 0, 1, 1], [4, 0, 5, 1], [0, 1, 0, 2, 2, 2, 0], [3, 2, 2, 0, 3], [23], [], [4, 7], [12, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 22, 22, 31, 0, 118, 29, 42, 16, 13, 13, 5, 0, 36, 9, 4, 7, 5, 1, 0, 2, 2], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(int(3.0),divInt(min(int(2.0), ( len(in2) + int(68.0) )),int(53763.0))) + ( min(( ( ( i2 - int(2.0) ) - ( i0 - i1 ) ) + int(6.0) ), int(0.0)) * ( ( min(int(31.0), len(in0)) - len((s2 + (in1[min(int(6.0), max(abs(( i1 - min(i2, i1) )), max(i1, max(divInt(abs(divInt(i2,i2)),i2), saveOrd(in2))))):mod(len(getCharFromString(s0[i2:].capitalize().rstrip(\"\")\"\"), min(mod(( int(8.0) * max(i2, mod(i0,i1)) ),int(3.0)), saveOrd(s2[i2:])))),mod(i0,i1))][:( max(max(min(min(max(len(\"\"4\"\"), divInt(saveOrd(s2.lstrip()),abs(abs(( i2 * max(len(in1[( int(0.0) + saveOrd(\"\"7\"\") ):]), max(i1, i2)) ))))), abs(abs(mod(len(in2),abs(max(i0, mod(int(1.0),i2))))))), len(\"\"X\"\".strip(s1))), mod(i0,i2)), ( ( saveOrd(in0.rstrip()) - abs(saveOrd(getCharFromString(\"\".\"\", int(8.0))[int(7.0):i1])) ) + mod(i2,i1) )) - int(6.0) )] + saveChr(i0)))[saveOrd(saveChr(i1)):i1]) ) - i1 ) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1], [2, 0, 8, 8, 2, 5, 0, 4, 0, 5, 9, 2, 8, 7, 8, 6, 8, 4, 4, 4, 0, 7, 8, 1, 7, 8, 7, 9, 5, 2, 6, 2, 1, 4, 2, 5, 9, 4, 2, 0, 1, 7, 3, 0, 1, 2, 4, 8, 6, 5, 6, 9, 6, 7, 7, 2, 1, 7, 9, 4, 6, 9, 8, 6, 4, 2, 9, 5, 2, 4, 5, 8, 6, 8, 6, 4, 7, 0, 8, 5, 1, 6, 2, 7, 0, 9, 2], [0, 1, 1, 2, 2, 2, 2, 2, 0, 1, 0, 2, 1, 1, 1, 1, 1, 0, 1, 1, 2, 1, 2, 1, 0, 1, 1, 2, 2, 2, 2, 0, 2, 1, 2, 2, 1, 1, 2, 2, 1, 0, 0, 2, 0, 1, 0, 2, 1, 0, 1, 1, 2, 1, 1, 1, 2, 0, 0, 0, 1, 1, 0, 2, 1, 1, 1, 0, 1, 1, 1, 2, 0, 1, 1, 1, 0, 2], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3, 0, 2, 2, 3, 3, 3, 1, 0, 1, 0, 2, 1, 3, 3, 2, 3, 1, 3, 0, 1, 2, 2, 3, 3, 1, 3, 3, 1, 0, 3, 1, 0, 2, 2, 3, 1, 0, 3, 3, 2, 2, 2, 2, 0, 0, 2, 0, 3, 3, 1, 0, 2, 2, 0, 2, 1, 3, 1, 0, 0, 0, 2, 1, 2, 1, 2, 1, 3, 2, 2, 1, 2, 1, 3, 0, 3, 3, 3, 1, 0, 1, 1, 1, 2, 2, 2, 3, 2, 0, 3, 1, 2, 0, 2, 2, 0, 3, 1, 3, 0, 2, 1, 2, 3, 1, 1, 3, 0, 3, 2, 3, 1, 0, 2, 1, 1, 0, 3, 3, 0, 3, 2, 2, 2, 0, 1, 3, 0, 3, 0, 2, 3, 2, 3, 0, 2, 2, 1, 1, 2, 0, 3, 2, 3, 1, 2, 0, 1, 1, 0, 2, 2, 0, 2, 2, 3, 3, 2, 2, 2, 1, 3, 1, 1, 1, 0, 1, 1, 1, 0, 2, 1, 0, 3, 0, 0, 0, 2, 3, 3, 3, 2, 3, 2, 2, 0, 0, 1, 1, 2, 3, 1, 3, 2, 0, 1, 3, 0, 0, 0, 3, 3, 2, 3, 2, 2, 1, 1, 3, 2, 2, 0, 2, 1, 2, 0, 1, 0, 3, 1, 2, 1, 0, 0, 2, 3, 2, 2, 2, 2, 1, 0, 3, 0, 0, 1, 1, 3, 2, 2, 2, 1, 2, 1, 0, 3, 0, 0, 2, 2, 3, 0, 1, 1, 0, 2, 3, 2, 2, 1, 1, 0, 1, 3, 2, 2, 3, 3, 3, 1, 2, 3, 3, 0, 3, 2, 1, 0, 1, 0, 1, 0, 3, 2, 3, 2, 2, 1, 3, 0, 2, 0, 0, 2, 2, 2, 0, 1, 1, 3, 2, 2, 3, 0, 1, 3, 1, 1, 1, 0, 3, 0, 0, 0, 2, 0, 3, 0, 1, 2, 2, 0, 0, 2, 1, 3, 1], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [2, 3, 0, 0, 4, 1, 3, 1, 1, 0, 1, 3, 3, 0, 1, 2, 3, 1, 4, 0, 3, 2, 0, 3, 0, 4, 0, 4, 3, 1, 0, 3, 2, 2, 2, 2, 3, 4, 1, 1, 1, 0, 3, 3, 2, 2, 0, 4, 2, 4, 3, 4, 1, 1, 3, 4, 2, 0, 1, 1, 2, 1, 2, 1, 4, 3, 0, 1, 3, 4, 3, 3, 2, 0, 4, 0, 0, 1, 3, 4, 3, 0, 2, 3, 2], [0, 1, 2, 1, 0, 2, 1, 0, 0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 1, 2, 1, 2, 2, 0, 0, 1, 1, 2, 2, 2, 0, 2, 2, 1, 2, 0, 0, 1, 0, 2, 2, 0, 0, 2], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [3, 5, 3, 2, 4, 5, 5, 3, 2, 4, 3, 3, 2, 5, 4, 2, 5, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0, 1, 0, 1, 4, 1, 3, 3, 4, 2, 1, 0, 2, 4, 0, 2, 1, 4, 4, 2, 2, 0, 2, 2, 2, 1, 2, 4, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 4, 1, 1, 4, 2, 2, 0, 0, 0, 1, 4, 1, 2, 0, 4, 4, 4, 4, 2, 0, 4, 1, 2, 0, 2, 4, 2, 0, 1, 0, 1, 2, 0, 2, 4, 4, 1, 2, 4, 4, 4, 1, 1, 4, 4, 1], [0, 3, 2, 3, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 2, 1, 0, 0, 0, 3, 2, 3], [4, 5, 4, 0], [0, 1, 2, 0, 1, 0, 2, 0, 1, 2, 0, 0, 0, 1, 1, 0, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 0, 2, 1], [0, 1, 3, 2, 2, 0, 0, 1, 0, 3, 0, 0, 3, 2, 3, 2, 2, 3, 0, 3, 1], [15, 2, 6, 25, 15, 7, 21], [25, 11, 17], [6, 3, 4, 7, 6], [17, 12, 14, 30, 17, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 87, 87, 78, 0, 340, 98, 85, 44, 54, 18, 21, 0, 94, 22, 4, 29, 21, 7, 3, 5, 6], "tree_depth": 107, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l ( min(( min(saveOrd(in2), max(i0, int(20.0))) + i1 ), int(8.0)) - len((in0 + (s2[i1:divInt(mod(max(max(min(int(8.0), i2), int(2.0)), i2),divInt(int(5.0),max(len(in1), mod(len(\"\"P\"\"),int(0.0))))),min(i2, int(4.0)))][divInt(mod(max(abs(int(0.0)), len(in2)),max(int(5.0), i2)),saveOrd(\"\"z\"\")):] + getCharFromString(\"\".\"\", int(9.0))))[:i2][( ( min(int(287.0), i0) * len(((\"\"6\"\"[:abs(( mod(mod(( i1 - i0 ),( i2 + min(len(in2), int(8.0)) )),i1) * mod(( i1 - ( int(6.0) + min(int(8.0), i1) ) ),i1) ))].rstrip(in0.capitalize()[i1:divInt(int(4.0),divInt(int(4.0),divInt(int(4.0),saveOrd(\"\"3\"\"[mod(( int(0.0) + ( int(7.0) - min(i0, saveOrd(getCharFromString(s2[:len(\"\"C\"\"[max(int(8.0), i1):int(1.0)][int(7.0):int(8.0)][( ( divInt(min(mod(i1,len(getCharFromString(\"\"G\"\"[:int(7.0)], ( i2 + ( divInt(i1,abs(int(9.0))) - abs(i2) ) ))[( int(5.0) + ( abs(int(2.0)) * int(6.0) ) ):abs(i1)])), len(\"\"l\"\"[divInt(saveOrd(\"\"Z\"\"[int(2.0):]),i0):( int(1.0) - int(4.0) )][:i1])),max(max(i1, max(( ( divInt(i2,int(2.0)) + min(i2, len(\"\")\"\"[i2:( len(getCharFromString(\"\"P\"\", mod(abs(i2),( ( int(5.0) - int(9.0) ) + ( i0 - abs(( min(int(4.0), ( i2 * int(2.0) )) - int(0.0) )) ) )))) * i1 )][mod(divInt(i2,divInt(( saveOrd(\"\"H\"\") * abs(divInt(divInt(divInt(int(1.0),saveOrd(getCharFromString(in1[int(7.0):][:int(3.0)], int(0.0)))),i2),int(1.0))) ),int(2.0))),int(4.0)):])) ) + i1 ), divInt(int(8.0),i1))), len(in0))) + i2 ) - i2 ):])][i1:divInt(saveOrd(in0),max(max(divInt(len(\"\"+\"\"),divInt(mod(i0,i0),int(6.0))), int(5.0)), ( saveOrd(\"\"4\"\".capitalize()) - int(6.0) )))], abs(mod(i2,int(9.0)))).strip(s2[min(i0, i1):i0]))) ) ),max(max(( abs(divInt(divInt(int(6.0),int(7.0)),max(mod(( i2 * divInt(int(7.0),mod(i1,int(2.0))) ),i0), abs(int(1.0))))) * mod(int(7.0),i1) ), i1), ( max(( mod(mod(mod(int(9.0),i2),saveOrd(saveChr(i1))),i1) * int(4.0) ), int(6.0)) + len(getCharFromString(getCharFromString(getCharFromString(in2[( ( mod(int(9.0),divInt(int(8.0),i1)) * min(i2, i0) ) * divInt(divInt(max(i0, int(6.0)),int(4.0)),i0) ):( len(getCharFromString(\"\"_\"\", mod(( int(2.0) - int(9.0) ),i1))) * int(5.0) )], saveOrd(in1[( ( len(s2[:len(\"\"7\"\")].capitalize()[abs(int(2.0)):]) + ( min(saveOrd(in2), i1) + min(mod(int(4.0),i0), int(5.0)) ) ) - i2 ):int(8.0)])), i1), min(( max(mod(( int(6.0) + len(\"\"6\"\") ),i1), ( i1 * i0 )) * divInt(divInt(mod(i1,int(8.0)),int(6.0)),saveOrd(s2[( divInt(len(saveChr(i1)[int(4.0):]),min(int(7.0), int(0.0))) + int(8.0) ):i1])) ), abs(i2)))) ))):]))))]) + getCharFromString(\"\".\"\", i0)) + getCharFromString(getCharFromString(\"\"V\"\".rstrip(\"\"`\"\"), i1), divInt(i1,len(\"\"r\"\".lstrip().capitalize())))[:i1])) ) + int(5162.0) ):( divInt(i0,i2) * mod(int(7.0),abs(int(092.0))) )]) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [1, 1, 2, 2, 2, 1, 2, 2, 0, 1, 0, 2, 0, 1, 1, 0], [2, 2, 0, 0, 0, 0], [2, 1, 2, 2, 1, 2, 0, 1, 2, 2], [0, 0, 0, 0], [0, 0, 0, 0], [], [], [3, 2], [4, 4], [1, 1, 0, 2, 0], [0, 0], [1], [3, 0], [1], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 6, 8, 4, 7, 6, 6, 5, 5, 9, 6, 7, 4, 8, 3, 3, 9, 0, 6, 4, 8, 2, 6, 3, 6, 9, 0], [2, 1, 1, 0, 2, 2, 1, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 2, 1, 1, 1, 0, 2], [1, 1, 1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 1, 3, 2, 2, 3, 1, 0, 1, 3, 3, 0, 2, 2, 0, 0, 3, 1, 1, 0, 0, 1, 2, 0, 3, 0, 3, 0, 1, 2, 1, 0, 2, 3, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 2, 2, 2, 3, 3, 1, 3, 3, 3, 2, 2, 0, 0, 1, 3, 2, 1, 3, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0], [4, 3, 3, 0, 1, 0, 2, 4, 2, 2, 1, 1, 4, 0, 0, 0, 4, 1], [0, 1, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2], [1, 1, 0, 0, 1, 1, 0], [0, 1, 3, 2, 4, 5, 4, 5, 3, 5, 1, 2, 3, 5, 0, 5, 4, 4, 4, 1, 2, 4, 2, 2, 0], [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0], [3, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 1, 0, 1, 0, 3, 1, 4, 4, 4, 1, 4, 0, 2, 4, 2, 2, 0, 0, 2, 0, 1, 2, 0, 2, 0, 2, 2, 4, 0, 1, 1, 0], [0, 3, 2, 2, 2, 2], [4], [0, 2, 2, 1, 2, 2, 1, 0, 0, 0, 1], [3, 3, 1, 0, 2, 3, 3, 1, 2, 1, 2], [9], [16, 17, 22], [0, 5, 7], [1, 4, 30, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 16, 16, 6, 10, 4, 4, 0, 0, 2, 2, 5, 2, 1, 2, 1, 0, 0, 28, 28, 23, 3, 78, 17, 18, 13, 7, 25, 11, 4, 44, 6, 1, 11, 11, 1, 3, 3, 4], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (s1 + in0)\\ni2 += saveOrd((s2 + (in1[( ( len(in2) - mod(len(\"\"\\\\\\n\"\"),int(3.0)) ) * int(1.0) ):][i1:] + \"\"!q\"\"))[int(6.0):int(8.0)])\\nloopBreak% = 0\\nwhile int(4.0) \\le min(mod(( max(int(76.0), i1) * int(6.0) ),min(abs(i0), divInt(divInt(i2,i2),saveOrd(in1)))), int(55.0)):{:\\nloopBreak% = 0\\nwhile int(9.0) \\le i1:{:\\nloopBreak% = 0\\nfor in2 in \"\"J\"\":{:\\nin0 = in2\\nloopBreak% = 0\\nfor s1 in (\"\"0\"\" + getCharFromString(\"\"_\"\".capitalize().rstrip(s2.capitalize()), i2)):{:\\nloopBreak% = 0\\nfor in0 in in2[int(6.0):][mod(i0,abs(i2)):].capitalize()[:abs(i0)]:{:\\ns0 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = in1[:( int(4833.0) * i0 )]\\nloopBreak% = 0\\nfor in1 in \"\"<r5\"\":{:\\nres0 = ( s1[( max(( int(9.0) + int(0.0) ), i0) * int(6.0) ):int(4.0)] not in s2[i2:i0] or b2 )\\ni1 += i2\\nin1 = s2.capitalize()[:int(8.0)][mod(( divInt(max(saveOrd(\"\"w\"\"), int(2.0)),min(min(min(( ( i1 * i1 ) * int(6.0) ), saveOrd(\"\"7\"\")), ( int(3.0) * max(int(6.0), i1) )), int(9.0))) * int(0.0) ),i0):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = s0\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 5], [0, 0, 1, 1, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 3, 5], [0, 1], [], [0, 1, 2, 2, 3, 0, 3, 0, 2, 0, 0, 0, 0], [0, 3, 2], [4], [2, 1, 1], [1, 3], [], [15], [], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 5, 0, 21, 7, 4, 4, 3, 4, 2, 0, 10, 0, 0, 3, 2, 0, 1, 0, 1], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\l ( divInt(len(\"\"p>\"\"),mod(len((in2 + (in0 + s2[:min(( i0 + int(3.0) ), ( int(7.0) + i0 ))]))[:divInt(int(5.0),i1)][int(8.0):]),i1)) + ( i2 * int(5.0) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [8, 1, 3, 8, 7, 1, 8, 1, 6, 5, 7, 4, 7, 6, 2, 9, 0, 1, 8, 1, 2, 6, 3, 9, 8, 7], [2, 2, 1, 0, 2, 1, 0, 0, 1, 0, 1, 0, 2, 1], [1], [3, 2, 2, 3, 2, 2, 2, 1, 3, 1, 3, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 2, 0, 0, 2, 2, 2, 0, 1, 0, 1, 3, 3, 1, 3, 3, 2, 2, 1, 2, 1, 3, 1, 0, 2, 2, 3, 0, 2, 2, 0, 1, 2, 1, 2, 1, 2, 3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0], [4, 3, 3, 0, 0, 0, 1, 2, 3, 3, 3, 2, 0, 1, 0, 4], [0, 0, 0, 2, 1, 2, 0, 2, 0, 2, 2, 0], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0], [1, 5, 3, 2, 2, 5, 2, 0], [1], [], [0, 0, 2, 2, 3, 0, 0, 4, 2, 0, 0, 3, 1, 0, 2, 2, 0], [0, 3, 2], [4], [0, 0, 2, 2, 1], [2], [], [], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 26, 26, 14, 0, 76, 25, 16, 12, 13, 8, 1, 0, 17, 1, 0, 5, 1, 0, 0, 1, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(divInt(( int(8.0) + len((in0 + s2)[int(13.0):min(divInt(divInt(( int(8.0) + i2 ),int(7.0)),i2), mod(i1,int(1.0)))][( divInt(int(8.0),int(16.0)) + min(i0, i2) ):int(5.0)]) ),mod(i1,i0)),mod(( mod(i0,int(74.0)) * i1 ),int(7.0)))) - min(max(int(6.0), abs(len(getCharFromString(s2[( mod(int(2.0),( int(9.0) * len(in2) )) + int(0.0) ):], i0)))), mod(( len((\"\"3\"\" + s2)) * i1 ),( ( i0 + int(181.0) ) * ( int(2.0) * divInt(int(6.0),( abs(min(max(min(saveOrd(s0[:i2][int(3.0):]), int(9.0)), int(8.0)), int(7.0))) + i1 )) ) ))) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [8, 4, 8, 8, 9, 8, 5, 6, 4, 2, 3, 9, 7, 0, 1], [2, 1, 1], [0], [3, 3, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1, 3, 1, 1, 1, 1, 1], [0, 0, 1], [2, 3, 3, 0, 2, 4, 4], [0, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 4, 0, 1], [0, 3, 2], [4], [0, 1, 0, 1], [3], [], [], [], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 15, 15, 3, 1, 18, 2, 7, 2, 0, 6, 1, 0, 15, 1, 0, 4, 1, 0, 0, 0, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(s0)) \\le ( len(in2[( min(abs(saveOrd((in0 + (s2[:i2][int(84.0):i1] + in1))[:int(8.0)])), saveOrd((getCharFromString(in2, int(8.0)) + \"\"#\"\"))) + int(98.0) ):int(564.0)]) - int(2397.0) )\\ni1 = int(01.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 1, 0], [2, 2, 0], [0, 2, 2], [0], [0, 0], [], [], [3], [4, 4, 5], [1, 1, 2], [0, 0, 0], [4], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 4, 4, 7, 0, 8], [0, 0, 1, 1], [1], [3, 3, 0, 3, 0, 0, 1, 0, 0, 1, 1, 2, 2, 2, 1, 1, 3, 1, 0, 0], [1, 1, 1, 0, 1], [4, 3, 3, 2, 2, 3], [0], [1, 1, 0, 0, 1], [2, 5, 3, 0, 4, 1, 2, 2, 3, 2], [1, 1], [0], [1, 0, 0, 2, 3, 0, 0, 1, 0, 0, 0, 1], [0, 3, 2], [4], [0], [3, 3], [], [], [], [12, 8]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 3, 1, 1, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 3, 0, 0, 6, 2, 1, 9, 0, 0, 1, 2, 0, 0, 0, 2], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(\"\")\"\") \\le len(s2):{:\\nloopBreak% = 0\\nwhile i0 \\le len(in2):{:\\nloopBreak% = 0\\nfor in0 in (s0 + in1)[i0:i1]:{:\\nres0 = \"\"%\"\".startswith(s1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [3], [2, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1, 0, 1, 1], [9, 0, 6, 8, 2, 1, 0], [0, 1, 2, 0, 2], [0, 1], [3, 2, 3, 2, 2, 1, 3, 0, 1, 1, 1, 1, 3, 3, 0, 2, 3, 0, 1], [1, 1, 1, 0], [4, 3, 3, 2, 1, 2], [0], [0, 1, 0], [3, 5, 4, 1], [1, 1, 1], [], [2, 0, 3, 4, 3, 1, 3, 2, 0, 2, 0, 1, 1], [0], [], [2, 1, 0], [0, 3, 2], [5], [], [2], [21]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 3, 0, 19, 4, 6, 1, 3, 3, 3, 0, 13, 1, 0, 3, 3, 1, 0, 1, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[divInt(len((getCharFromString((\"\"F\"\" + (in2[:mod(divInt(int(9.0),len(in1[i0:int(0.0)])),int(6.0))] + \"\"<\"\")), int(8.0)) + \"\"2\"\")),int(21.0)):]) == abs(max(i1, ( abs(i2) + int(0.0) )))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 2, 2, 1, 2, 2, 0, 0, 1, 0], [2, 2, 0, 2, 1], [0, 1, 2, 2, 0], [0], [0, 0, 0], [], [], [3, 0], [4, 4, 5, 3], [1, 1, 1, 2, 0, 1], [0, 0, 0, 0], [4], [1], [], [1], [1], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [7, 1, 0, 8, 7, 8, 3, 5, 4, 4, 5, 0, 8], [0, 0, 0, 1], [0], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 3, 3, 1, 1, 3, 1, 0, 1], [1, 1, 1, 0, 1], [4, 3, 3, 2, 3, 3], [1, 0], [1, 1, 1, 0, 1], [2, 5, 3, 3, 4, 1, 2, 2, 3, 2, 4, 0], [1, 1], [0], [0, 0, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1, 1, 0], [0, 3, 2], [4], [2, 2, 2], [0, 3], [23], [], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 5, 5, 1, 3, 0, 0, 2, 4, 6, 4, 1, 1, 0, 1, 1, 12, 12, 3, 1, 20, 4, 6, 1, 3, 12, 2, 1, 14, 1, 0, 1, 2, 1, 0, 0, 1], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le mod(mod(len(in2),mod(len(in0),int(71.0))),int(0.0)):{:\\nloopBreak% = 0\\nwhile i0 \\le int(8.0):{:\\nloopBreak% = 0\\nfor in0 in (in1 + s1)[int(7.0):]:{:\\nres0 = ( abs(len(getCharFromString(s2, int(83.0)))) - int(54.0) ) != len(s2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile in0.startswith(\"\"X\"\"):{:\\nif False:{:\\ni0 = int(45.0)\\n:}else:{:\\ns2 = \"\")\"\"\\n:}\\nin1 = s0\\nb0 = i0 \\ge int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1], [0, 2, 2, 1, 0, 0, 1], [2, 0, 0], [0, 2, 2, 0, 2], [0, 0], [0, 0, 0], [], [], [3, 3], [4, 0, 5], [0, 1, 1, 2], [0, 0], [4], [2], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [3, 1, 0, 8, 7, 8, 3, 3, 4, 4, 7, 0, 8, 7, 4, 4, 8, 5, 1, 4, 7, 5, 2, 8, 4, 9, 7, 1, 9], [0, 2, 1, 1, 1, 2, 1, 0, 2, 1, 2, 0, 2, 0, 0, 1], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1, 2, 1, 1, 1, 0, 1, 2, 1, 2, 1, 1, 3, 0, 1, 0, 3, 3, 1, 3, 1, 3, 3, 1, 0, 0, 2, 0, 2, 0, 1, 3, 1, 2, 2, 0, 0, 1, 2, 3, 0, 1, 2, 0, 2, 3, 3, 0, 3, 3, 3, 0, 0], [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [2, 4, 3, 2, 2, 3, 1, 1, 0, 4, 4, 0, 1, 4, 1, 4, 1, 0, 4], [0, 2, 2, 0, 2, 2, 1, 2, 0], [1, 1, 0, 0, 1, 0], [3, 5, 3, 3, 4, 1, 2, 3, 3, 2, 1, 5, 3, 5, 2], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0], [0, 3, 0, 2, 3, 0, 0, 4, 0, 0, 0, 1, 4, 2, 0, 1, 2, 2, 3, 1, 4, 3, 3, 3, 4, 1, 1, 0, 3, 2, 4, 4, 4, 2, 1, 2, 0, 4, 4, 2, 4, 1, 2, 4, 1, 4, 1, 0], [0, 3, 2, 2, 0, 2, 0, 1, 1, 0, 2, 3], [4, 2], [2, 2, 2, 0, 2, 1, 0, 0, 0], [0, 1, 3, 0, 0, 2, 0, 1, 2, 3, 3], [4, 15, 1, 7], [2, 24], [6, 1], [12, 29, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 2, 5, 1, 3, 0, 0, 2, 2, 4, 2, 1, 1, 0, 0, 0, 29, 29, 16, 0, 72, 15, 19, 9, 6, 15, 11, 1, 48, 12, 2, 9, 11, 4, 2, 2, 3], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not abs(mod(mod(saveOrd(in0),divInt(len((in2 + (in0 + in0)[int(31.0):])),int(0.0))),i0)) \\le int(8.0)\\nloopBreak% = 0\\nwhile abs(( divInt(abs(int(7.0)),int(83.0)) + len(getCharFromString(in1, int(34.0))) )) \\l i2:{:\\nloopBreak% = 0\\nfor s1 in s2:{:\\nin0 = in0\\ns2 = \"\"E\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = s1[int(47.0):].rstrip(\"\"c)\"\").startswith((\"\"P\"\" + (((\"\"B\"\".capitalize() + \"\"6\"\") + in2) + (getCharFromString(getCharFromString(\"\"H\"\"[:( int(0.0) * int(8.0) )], int(7.0)).capitalize(), i1)[int(4.0):] + in0[( int(4.0) * ( int(8.0) + int(5.0) ) ):max(i1, int(1.0))])).capitalize())[i1:max(min(int(4.0), saveOrd(saveChr(int(7.0)))), saveOrd(saveChr(min(int(5.0), i2))))][i1:])\\nin2 = getCharFromString(\"\"y\"\", mod(i0,( i2 * int(2.0) )))[max(int(8.0), divInt(( i1 * i2 ),int(497.0))):( saveOrd(\"\"1^\"\".capitalize()[i0:int(19.0)]) - ( i2 * ( max(saveOrd(\"\"=\"\".strip()), i0) + max(min(saveOrd(s2), i0), i1) ) ) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [2, 1], [0, 0], [1], [], [], [], [], [1, 1, 1, 1], [3, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 5, 0, 1, 0], [1, 0, 0, 1], [], [2, 0, 3, 0, 0, 4, 3, 4, 4, 3, 0, 1, 2, 1, 0], [0, 2, 1], [], [2, 1], [3, 3, 3, 2], [5], [], [3], [31, 6, 1]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 3, 0, 0, 5, 4, 0, 15, 3, 0, 2, 4, 0, 0, 1, 3], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0[saveOrd((in2 + s0)):] not in getCharFromString((saveChr(int(3.0)).capitalize() + (s1 + \"\"`\"\")), len(\"\"#\\\\\\n3\"\"[:len(s0)]))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1], [1, 1, 2, 2, 1, 1, 2, 1], [2, 2, 0], [0, 1, 0, 1, 2], [0], [0, 0], [], [], [3, 3], [4, 4, 2, 1], [1, 1, 0, 2, 0, 1], [0, 0, 0, 0], [2], [3, 1], [0], [1], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 2, 7, 8, 3, 5, 5, 1, 4, 0, 4, 3, 3, 3, 4, 1, 3, 3, 2], [2, 2, 1, 0, 2, 2, 1, 2, 0, 2, 1, 0, 2, 2, 2], [1, 0], [3, 2, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 3, 3, 2, 1, 1, 0, 0, 0, 0, 1, 3, 2, 1, 2, 1, 3, 0, 0, 1, 0, 0, 3, 1, 3, 2, 1, 3], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3, 2, 1, 1, 2, 4], [2, 0, 0, 2, 1, 2, 0], [0, 0, 1, 0, 0, 1, 1, 1], [3, 5, 4, 1, 3, 2, 0, 4, 3], [1, 1, 1, 0, 1], [0], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 2, 4, 1, 2, 4, 4, 4, 2, 4, 4, 1, 1, 1, 4, 0, 3, 4, 0], [0, 3, 2, 3, 0, 2, 2, 1, 1], [4, 4], [2, 0, 2, 2, 1, 1], [3, 1, 1, 0, 0], [4, 10], [16, 0], [], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 1, 0, 0, 0, 2, 3, 6, 3, 1, 2, 1, 1, 0, 17, 17, 15, 2, 44, 10, 7, 4, 7, 9, 5, 1, 29, 9, 2, 6, 5, 2, 2, 0, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le ( divInt(len(in2),i2) * divInt(len(getCharFromString((in1 + (s1[int(8.0):][i2:int(2.0)] + in0))[int(7.0):], i1)),mod(( int(8.0) + i0 ),int(3.0))) )\\ni2 += i2\\nloopBreak% = 0\\nwhile divInt(i1,int(5.0)) \\le int(5.0):{:\\nloopBreak% = 0\\nwhile ( \"\"[\"\".rstrip(getCharFromString(\"\"q\"\".capitalize().capitalize()[:divInt(int(140.0),i2)], int(4.0)).rstrip(\"\"a\"\").capitalize()[:min(min(mod(int(3.0),int(3.0)), i0), i2)])[i1:] == \"\"EK\"\" and False ):{:\\nres0 = i0 == int(3.0)\\ni2 = len(saveChr(( int(41.0) * mod(int(3.0),abs(i2)) )))\\nloopBreak% = 0\\nfor s2 in s0:{:\\nin1 = (saveChr(i2) + in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1], [1, 1, 2, 2, 1, 1, 2, 1], [1], [0, 1, 0, 1, 2], [0], [0, 0], [], [], [3, 3], [4, 4, 2, 1], [1, 1, 0, 1, 0, 1], [0, 0, 0, 0], [], [3, 1], [0], [1], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 2, 7, 8, 3, 5, 5, 1, 4, 0, 4, 3, 3, 3, 4, 1, 3, 3, 2], [0, 1, 1, 0, 2], [1, 0], [3, 2, 2, 3, 2, 1, 3, 1, 0, 1, 1, 0, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 3, 3, 2, 1, 1, 0, 0, 0, 0, 1, 3, 2, 1, 2, 1, 3, 0, 0, 1, 0, 0, 3, 1, 3, 2, 1, 3], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3, 2, 1, 1, 2, 4], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0, 0, 0, 1, 1, 1], [2, 5, 3, 4, 4, 0, 5, 2, 0, 3, 4], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 3, 0, 1, 0, 0], [3, 3, 2], [4], [2, 0, 2], [3], [], [], [], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 3, 3, 2, 1, 6, 1, 0, 14, 1, 1, 3, 1, 0, 0, 0, 1], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(len(in2),( int(8.0) + len((in0 + (in1[int(2.0):][i0:int(7.0)] + in1))[int(8.0):].rstrip((s0 + \"\"[\"\"))) )) + i1 )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 0, 7, 8, 3, 5], [2, 0, 1, 0, 2], [0], [3, 3, 0, 2, 3, 3, 2, 0, 0, 0, 0, 1, 3, 3, 0], [0, 1, 1], [2, 1, 3, 0, 0, 3], [0], [1, 1, 0], [4, 5, 3, 4, 4, 5], [0, 1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [], [0], [1, 3], [], [25], [], [17]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 10, 2, 4, 1, 1, 2, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(max(i0, ( len(\"\"z.\"\") + min(mod(i1,i0), i2) )))\\nin1 = in2\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [2, 2, 2, 1, 2, 0, 2, 1, 0, 2, 0, 2, 2, 1, 0, 2, 1, 2, 0, 0, 2, 0, 1], [2, 2, 0, 1, 1, 1, 1, 1, 2, 0, 2], [0, 2, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [3, 2, 2, 1, 3, 3, 3, 1, 3, 2], [4, 4, 3, 2, 4, 0, 2], [1, 1, 1, 1, 0, 0, 2, 0, 0, 1, 1, 0, 0, 2, 0, 1, 2, 2, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0], [4, 1, 2, 5, 1, 1], [3, 0, 3, 0, 1, 0, 1, 2], [0, 1], [0, 0], [1, 1, 0, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 0, 8, 7, 8, 3, 5, 9, 4, 7, 0, 8, 3, 1, 0, 1, 6, 9, 2, 4], [1, 0, 1, 1, 0, 0, 2, 1, 0, 2, 2, 2, 1, 1, 0, 1, 1, 2, 0, 2, 0, 2, 0], [1], [3, 2, 2, 3, 2, 3, 1, 1, 0, 1, 1, 2, 2, 2, 1, 1, 3, 1, 0, 0, 2, 3, 0, 0, 2, 0, 0, 1, 3, 3, 1, 0, 0, 2, 3, 1, 1, 3, 2, 1, 0, 0, 0, 3, 1, 2, 1, 0, 0, 2, 3, 0, 0, 0, 0, 0, 2, 2, 1, 2, 2, 0, 3, 1, 1, 3, 0, 3, 2, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [4, 3, 3, 2, 2, 3, 1, 2, 0, 2, 0, 1, 0, 2], [0, 1, 0, 1, 0, 2, 2, 2, 0, 1], [1, 1, 0, 0, 1, 1, 0], [1, 5, 3, 5, 4, 2, 2, 1, 3, 2, 3, 1, 3, 2, 3, 2, 2, 1, 1, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [0, 0, 0, 2, 3, 1, 0, 4, 0, 0, 0, 1, 3, 2, 1, 1, 1, 1, 1, 1, 3, 1, 0, 2, 4, 0, 4, 2, 0, 2, 0, 4, 0, 1, 4, 2, 1, 0, 0, 4], [0, 3, 2, 2, 1, 1], [4], [2, 2, 2, 1, 2, 1], [1, 3, 1, 0, 3, 0, 2, 3, 3, 2, 1], [17, 9], [24, 2, 14], [4, 0], [12, 0, 16, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 23, 23, 11, 12, 2, 7, 0, 0, 10, 7, 21, 7, 6, 8, 2, 2, 5, 21, 21, 23, 0, 72, 17, 14, 10, 7, 21, 11, 2, 40, 6, 1, 6, 11, 2, 3, 2, 4], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le ( ( len(in2) + mod(len(in0),int(31.0)) ) - int(0.0) ):{:\\nloopBreak% = 0\\nwhile i1 \\le int(8.0):{:\\nloopBreak% = 0\\nfor in2 in (\"\"y\"\" + in1)[int(7.0):]:{:\\nres0 = mod(divInt(( int(83.0) + int(59.0) ),abs(int(4.0))),i0) \\ge i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( abs(i1) - i0 ) == divInt(i0,i2):{:\\ns2 = getCharFromString(s2, int(7.0))\\nif ( b2 and s1.startswith(in0) ):{:\\ns2 = \"\")\"\"\\nin0 = (\"\"c\"\"[len(\"\"R\"\"):] + \"\"\"\")\\n:}else:{:\\nif ( b2 or max(int(0.0), i1) \\le i0 ):{:\\nb1 = ( abs(int(8.0)) + int(3.0) ) \\l min(( int(1.0) * i2 ), i2)\\n:}\\nif True:{:\\nif res0:{:\\ns1 = \"\"J\"\"\\n:}else:{:\\nres0 = \"\"4\"\" not in \"\"-\"\"\\n:}\\n:}\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile True:{:\\nres0 = i2 == abs(int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in0 in (\"\"<\"\" + s2):{:\\nb1 = in0.rstrip(s2[:mod(int(1.0),i1)].capitalize())[i1:] == s2[( min(i0, i1) * i1 ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = s1.capitalize().endswith(\"\"0\"\")\\nloopBreak% = 0\\nwhile not saveChr(i2) not in \"\"o\"\"[:i0]:{:\\ns1 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = s2 not in saveChr(mod(( int(6.0) * ( ( i2 + max(int(9.0), int(2.0)) ) - min(i0, abs(divInt(i2,int(4.0)))) ) ),i0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [3, 2], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [8, 1, 5, 6, 7, 6, 6, 8, 9, 0, 1, 1, 9, 9, 4, 6, 0], [2, 0, 1, 0, 2, 1, 1, 2], [1], [3, 3, 2, 3, 2, 2, 3, 1, 0, 3, 1, 2, 2, 2, 1, 0, 2, 0, 2, 0, 1, 2, 3, 0, 3, 1, 0, 3, 1, 3, 1, 1, 2, 1, 1, 0, 0, 3], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0], [4, 3, 3, 0, 0, 4, 3, 0, 0, 3], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0, 0], [1, 5, 3, 2, 4, 5, 4], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 1], [0, 3, 2], [4], [0, 0, 0], [0], [19], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 16, 16, 8, 0, 38, 10, 10, 4, 6, 7, 1, 0, 13, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\l len(in2)\\nb2 = ( len(in0) + ( divInt(min(int(8.0), i2),min(int(1.0), mod(( divInt(int(5.0),i0) + divInt(i1,divInt(i0,int(6.0))) ),divInt(saveOrd((s2 + (in1[i2:len(in2)][int(7.0):i1] + in1))[min(int(6.0), min(int(6.0), int(89.0))):( int(01.0) + int(19946.0) )]),i1)))) * i2 ) ) \\le len(\"\"T\"\")\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0, 0, 0, 0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [4, 4, 7, 8, 3, 5], [2, 1, 1], [0], [3, 3, 2, 2, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3], [0, 0, 1], [2, 3, 3, 0, 2, 3], [1, 1], [1, 1, 0], [4, 5, 1, 4, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [3], [], [], [], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 11, 3, 4, 2, 1, 3, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in1)) \\l ( ( len(\"\">\"\") - min(int(4.0), mod(i2,i1)) ) - i1 )\\nin2 = s1\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1, 0, 1], [1], [0, 2, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1], [6, 5, 6, 8], [1, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 0, 3, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 1, 3, 1, 4], [0, 1, 1], [0, 1, 0], [3, 4, 5, 1], [1, 0, 1], [], [2, 0, 3, 0, 3, 1, 3, 1, 3, 0, 0], [0], [], [2], [0, 3, 2], [5], [], [8], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 5, 0, 3, 0, 0, 4, 3, 0, 11, 0, 0, 1, 3, 1, 0, 1, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(6.0):]) \\l max(len((in1 + (\"\"F\"\" + (\"\"8\"\" + (in2 + s1))))), i1)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [3, 2, 6, 8, 2, 6, 7, 9, 9, 5, 9, 8, 2, 6, 6, 7, 2, 3, 0, 4, 5, 8, 2, 1, 3], [2, 0, 1, 0, 1, 2, 0, 2, 0, 0, 0, 0], [], [3, 2, 2, 3, 2, 3, 1, 2, 3, 1, 1, 1, 3, 3, 3, 1, 2, 2, 0, 1, 2, 3, 0, 3, 3, 1, 1, 2, 2, 3, 2, 1, 3, 1, 2, 2, 0, 2, 2, 1, 1, 0, 3, 3, 0, 3, 0, 2, 3, 1, 1, 3, 0, 1, 0, 2, 2, 3, 0, 1, 2, 3, 1, 1, 2, 2, 1, 2, 2, 0, 3, 2, 3, 1, 0, 0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 3, 1, 3, 4, 2, 0, 3, 2, 2, 4, 1, 1, 0, 1, 3, 3, 2], [0, 2, 0, 0, 0, 2, 2, 0, 2, 2], [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [0, 5, 3, 2, 4, 5, 3, 2, 1, 2, 3], [1, 1, 1, 0, 1, 1, 1], [], [0, 3, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 3, 0, 3, 0, 4, 0, 4, 1, 0, 2, 2, 1, 0, 0, 3, 1, 1, 1], [0, 3, 2], [4], [0, 1, 0, 0, 0], [2, 3, 1, 0, 1, 0, 0], [6, 3, 10], [24, 24], [3], [30]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 25, 25, 12, 0, 76, 23, 21, 10, 13, 11, 7, 0, 30, 2, 1, 5, 7, 3, 2, 1, 1], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len((in2 + (in0 + (s2[mod(len(in1),int(3.0)):( min(int(2.0), int(6.0)) + int(82.0) )][:len(\"\"3\"\")] + (in2 + (in0 + getCharFromString(s2, max(len(\"\"_\"\".rstrip(s1)), int(6.0)))))))[divInt(( i2 * int(79.0) ),mod(saveOrd(\"\"y\"\"[i0:abs(min(int(9.0), int(5.0)))][mod(( len(s2) + ( int(9.0) + abs(int(8.0)) ) ),divInt(mod(i1,( ( int(2.0) + int(6.0) ) * i0 )),abs(saveOrd(in0)))):i1]),max(i2, mod(max(int(6.0), int(7.0)),min(i0, int(2.0)))))):i2])),( mod(max(i0, int(30.0)),mod(len((\"\"Gy\"\" + \"\"D\"\")),int(4.0))) * int(58.0) )) + divInt(( int(21.0) * divInt(( i0 * len(\"\"K\"\") ),divInt(abs(int(3.0)),i0)) ),i0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [3, 3, 4, 8, 7, 7, 1, 2, 2, 4, 0, 8, 4, 5, 9], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 2, 0, 2, 1, 0, 1, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 0, 2, 3, 0, 0, 0, 2, 0, 0, 2, 1, 0, 3, 0, 2, 3, 2, 2, 3, 2, 2, 1, 0, 3, 0, 3, 1, 2, 2, 0, 0, 1, 1, 1, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], [4, 3, 3, 0, 0, 2, 1, 3, 1], [0, 1, 1, 0, 2, 0, 2, 2], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1], [2, 5, 3, 2, 4, 5], [1], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 2, 1, 0], [0, 3, 2], [4], [2, 1, 0, 0], [3], [], [], [], [22]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 15, 15, 18, 0, 58, 19, 9, 8, 11, 6, 1, 0, 15, 2, 1, 4, 1, 0, 0, 0, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(getCharFromString(s2, ( divInt(len(in2),divInt(len((in0 + (s2[( divInt(i0,int(3.0)) + int(3.0) ):mod(i0,( int(4.0) - i1 ))][:int(8.0)] + in1))[i0:]),( i2 - int(7.0) ))) + ( i2 * divInt(min(i1, i2),i0) ) ))) \\le divInt(i0,i2):{:\\nres0 = divInt(int(71.0),i2) \\le min(i0, ( abs(mod(( max(mod(divInt(int(2.0),i2),len(\"\"=\"\"[i1:max(int(2.0), ( mod(i0,i1) + int(4.0) ))].rstrip(in2))), int(0.0)) * int(84.0) ),i2)) * int(59.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [2, 1, 2, 1, 2, 2, 1, 2, 2, 0, 0, 1, 0, 2, 2, 0, 1, 0, 1, 2, 1, 1, 2, 0], [2, 0, 0, 1, 1, 2, 1, 2, 0, 0], [0, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 0, 2, 2], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [], [], [3, 1, 1], [4, 4, 3, 0, 0, 3], [1, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2], [0, 0, 0, 0, 0, 0], [3, 3], [3, 2, 0], [0], [], [1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [3, 1, 6, 8, 0, 8, 2, 5, 2, 1, 9, 2, 0, 2, 4, 0, 2, 0, 9, 2, 6, 9, 8, 2, 4, 1, 4, 2, 7, 0, 2, 3, 1, 3, 8, 8, 6, 3, 8, 9, 6, 6, 0, 7, 1, 4, 3, 1, 6, 4, 2, 8, 7, 3, 7, 3, 0, 5, 5, 9, 1, 2, 2, 3, 2, 3, 0, 5, 6, 2, 6, 1, 6, 9, 2, 6, 9, 2, 5, 2], [2, 0, 1, 2, 0, 2, 1, 2, 0, 1, 0, 1, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 1, 0, 2, 2, 1, 0, 0, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 0, 1, 0, 2, 2, 1, 1, 2, 0], [1, 0, 1, 1, 1], [3, 2, 2, 2, 2, 3, 1, 1, 3, 1, 1, 1, 3, 2, 0, 0, 3, 0, 3, 2, 1, 3, 3, 1, 1, 3, 2, 1, 3, 0, 2, 0, 0, 1, 0, 2, 2, 3, 2, 1, 1, 2, 3, 0, 3, 3, 2, 0, 2, 0, 2, 1, 1, 2, 3, 0, 0, 3, 3, 2, 2, 2, 0, 1, 1, 3, 3, 1, 2, 2, 3, 3, 0, 2, 1, 3, 1, 1, 1, 2, 3, 3, 1, 3, 1, 1, 1, 0, 2, 0, 0, 0, 1, 2, 2, 1, 2, 2, 2, 3, 3, 1, 3, 0, 0, 0, 0, 3, 0, 3, 1, 2, 1, 0, 2, 1, 3, 2, 1, 2, 1, 2, 2, 1, 3, 2, 0, 1, 0, 3, 1, 0, 0, 0, 0, 0, 1, 3, 2, 0, 2, 1, 2, 3, 3, 2, 2, 3, 2, 2, 3, 2, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 2, 1, 3, 0, 3, 0, 0, 3, 3, 1, 2, 3, 1, 2, 1, 1, 2, 3, 2, 1, 1, 0, 3, 2, 1, 2, 1, 2, 2, 3, 2, 2, 1, 2, 2, 2, 2, 0, 2, 0, 0, 0, 1, 1, 3, 1, 0, 3, 2, 1, 0, 1, 0, 1, 2, 1, 2, 3, 3, 2, 1, 0, 1, 1], [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 1, 3, 4, 3, 1, 1, 0, 2, 2, 4, 3, 1, 3, 4, 4, 1, 4, 4, 4, 1, 4, 3, 4, 0, 3, 4, 0, 4, 3, 0, 0, 2, 1, 3, 1, 1, 0, 2, 3, 0, 2, 2, 4, 1, 0, 3, 4, 1], [0, 1, 0, 1, 2, 1, 2, 2, 0, 1, 0, 0, 2, 0, 2, 1, 0, 1, 1, 0, 1, 0, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 2, 0, 1, 0, 1, 2], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 5, 3, 2, 4, 5, 0, 5, 1, 1, 3, 0, 2, 5, 0, 4, 5, 3, 0, 1, 0, 1, 1, 0, 2, 4, 3, 0, 1, 0, 4, 0, 5, 5, 3, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 1, 2, 1, 1, 1, 3, 3, 4, 2, 0, 4, 4, 0, 0, 1, 0, 3, 1, 1, 4, 2, 0, 4, 4, 2, 4, 4, 4, 0, 0, 1, 1, 4, 4, 0, 4, 0, 0, 4, 1, 0, 2, 2, 4, 0, 4, 0, 1, 2, 3, 4, 1, 2, 1, 4, 3, 2, 4, 4, 0, 4, 0, 3, 0, 4, 4, 1, 1, 3, 1, 1, 1, 1, 3, 1, 4, 0, 4, 2, 3, 4, 2, 0, 1, 2, 0, 0, 1, 1, 2, 4, 2, 1], [0, 3, 2, 3, 0, 3, 2, 3, 2, 1, 2, 2, 0, 1, 1, 1, 1, 3, 2, 0, 3, 0, 2, 0, 2, 1], [4, 4, 3, 5, 1, 4], [0, 0, 0, 2, 1, 1, 0, 2, 1, 2, 1, 2, 0, 0, 2, 2, 1], [0, 2, 3, 2, 2, 1, 1, 1, 2, 2, 2, 0, 2, 1, 1, 2, 3, 2, 0, 3, 3, 1, 3, 3, 2, 3, 2, 0, 1, 0, 1, 1, 2, 3, 0, 2, 1], [11, 7, 21, 9, 9, 15], [6, 22, 16, 4, 13, 13, 24, 20, 17, 5], [5, 0, 1, 8, 9, 8, 6, 6, 9, 2, 9, 0, 1], [20, 10, 5, 6, 17, 11, 13, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 24, 24, 10, 14, 4, 6, 0, 0, 3, 6, 11, 6, 2, 3, 1, 0, 3, 80, 80, 49, 5, 226, 64, 52, 38, 30, 37, 37, 4, 105, 26, 6, 17, 37, 6, 10, 13, 8], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( mod(mod(divInt(len(in2),int(3.0)),int(1.0)),len(in0)) + int(6.0) ):{:\\nres0 = int(8.0) \\le int(0.0)\\nloopBreak% = 0\\nfor s2 in (in1 + (in2[min(divInt(i2,i0), max(i1, len(s0))):( int(8.0) - saveOrd(\"\"L\"\") )][len(\"\"5\"\"):int(25.0)] + \"\";\"\"[int(21.0):]))[max(divInt(int(92.0),max(i2, mod(i0,i2))), int(0.0)):i1]:{:\\ni2 += ( mod(min(( int(2.0) - int(4.0) ), ( abs(i0) * abs(saveOrd(\"\"0\"\")) )),( i1 - ( i0 * mod(int(0.0),int(2.0)) ) )) * ( len(\"\"1\"\") + i1 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in ((getCharFromString(s1[:i2], max(len(s1.capitalize().rstrip(in0)), divInt(( mod(i2,int(0.0)) - int(9.0) ),saveOrd(\"\"g\"\")))) + s0) + (\"\"wq\"\" + \"\"8\"\")):{:\\nif ( not saveOrd(s2[:int(2.0)].rstrip(getCharFromString(in2.capitalize().strip(s0).capitalize()[( ( max(saveOrd(\"\"9\"\"), i2) + mod(int(6.0),saveOrd(\"\"8\"\")) ) + int(9.0) ):int(8.0)].lstrip(saveChr(int(2.0))), ( saveOrd(in1.capitalize()) * max(int(4.0), saveOrd(in2.capitalize())) )))) \\ge int(1.0) and int(4.0) \\l int(2.0) ):{:\\nin0 = s0\\nif i2 \\l mod(i2,i0):{:\\nloopBreak% = 0\\nwhile b1:{:\\ns1 = getCharFromString(\"\"H\"\", i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni2 = int(7.0)\\n:}\\ni2 += ( ( int(0.0) * ( ( ( len(s0) - saveOrd(saveChr(int(2.0))[:min(i2, i1)][i0:]) ) + i2 ) - len(s1) ) ) - i2 )\\n:}else:{:\\ns1 = saveChr(saveOrd(s0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif \"\"6en6\"\\\\\"\"\" != (saveChr(int(3138.0)) + \"\"9\"\")[( int(8.0) + i1 ):]:{:\\nloopBreak% = 0\\nwhile ( int(638.0) - min(divInt(int(9.0),divInt(int(6.0),divInt(( int(6.0) + saveOrd(\"\"V\"\"[:( i0 - int(0.0) )]) ),i0))), len(saveChr(int(7.0)))) ) \\ge i2:{:\\ns2 = (in1.capitalize().rstrip()[i1:] + getCharFromString(in0, i1))\\ni2 *= i2\\ns0 = (s1 + getCharFromString(\"\"\"\"\", i2).rstrip(\"\"#\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni2 *= int(1.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s0 in (\"\"n\"\" + \"\".\"\"):{:\\nb1 = \"\"(\"\" != \"\"2*9Jy\"\"\\nin1 = (\"\"Jur\"\" + s0.capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in getCharFromString((in2[min(divInt(i2,divInt(int(4.0),( min(abs(divInt(divInt(max(( divInt(len(\"\"0\"\"),mod(int(3.0),int(1.0))) - int(6.0) ), int(4.0)),int(2.0)),max(int(8.0), max(int(7.0), int(3.0))))), divInt(int(7.0),min(i1, abs(i2)))) + i2 ))), len(in0[min(int(3.0), ( abs(int(0.0)) - mod(int(5.0),int(5.0)) )):])):( abs(( int(9.0) * int(1.0) )) * i0 )].capitalize() + s1)[saveOrd(\"\"/P\"\"):mod(int(2.0),divInt(int(2.0),mod(( max(( mod(int(3.0),mod(mod(( ( i1 - ( i0 * i2 ) ) * i2 ),int(2.0)),int(3.0))) + min(int(0.0), i1) ), len(\"\"1\"\")) - ( int(5.0) + i1 ) ),int(6.0))))], i2):{:\\ns1 = saveChr(int(2.0))[mod(int(616926.0),( saveOrd(\"\"f\"\"[:max(( int(9.0) - i0 ), int(2.0))]) * int(52.0) )):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0, 0, 1], [1], [0, 0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1], [3, 0, 6, 8], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 2, 1, 3, 0, 1, 1, 1, 1, 3], [1, 1, 1], [4, 3, 3, 2], [0], [0, 0, 0], [3, 4, 4, 1], [1], [], [2, 3, 3, 0, 0, 4, 4, 2, 0, 2, 1, 0], [0, 2], [], [2, 1, 2], [3], [5], [], [], [5]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 9, 1, 4, 0, 1, 4, 1, 0, 12, 2, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(((in0 + in1) + getCharFromString(in1[:int(3.0)].capitalize(), len(\"\"\"\"\"[len(s1):])))[divInt(int(0.0),abs(i0)):]) == int(6.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}]