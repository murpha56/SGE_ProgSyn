[{"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,int(9.0)), int(7.0)), i1) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 7, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2):{:\\nres0 = min(min(mod(i1,int(9.0)), i1), i1) \\le int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 - i1 )), i0)), int(26.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,int(9.0)), int(7.0)), i1) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 6, 0, 23, 3, 9, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,int(9.0)), int(7.0)), i1) \\le max(int(3.0), int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,int(9.0)), int(7.0)), i1) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 1, 1, 5, 5], [0, 0, 1, 0, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 1, 2, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 19, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i0, ( i0 - i1 )), i0)), int(26.0))) \\l len(in2):{:\\nres0 = min(int(9.0), divInt(i1,int(1.0))) \\le int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 7, 0, 21, 3, 8, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2):{:\\nres0 = min(min(( i1 + int(9.0) ), i1), i1) \\le int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 1, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i1)), int(26.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [2, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i2, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 2, 7, 4, 5, 5], [2, 0, 1, 2, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 1, 1, 1, 0, 3, 2, 1, 0, 0], [1, 0, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 0, 2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 7, 0, 25, 4, 9, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i2, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2):{:\\nres0 = min(max(( int(2.0) + int(7.0) ), int(4.0)), i1) \\le max(( int(5.0) * i1 ), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 2, 8, 5], [0, 1, 1, 1, 2, 0], [1], [1, 3, 2, 2, 3, 3, 2, 2, 0, 0, 3, 2, 3, 3, 2, 2, 0, 0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 0], [2, 3, 3, 2, 3, 0, 1, 4, 2], [0], [1, 1, 1, 1, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 22, 7, 6, 1, 6, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(mod(len(in1),len(in2)),mod(mod(i0,i1),abs(mod(len(in0),min(mod(( i1 + i1 ),int(9.0)), i2)))))):{:\\nres0 = int(8.0) != int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 1, 9, 7, 3, 5, 5], [1, 2, 1, 1, 0, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0, 1, 0], [0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 7, 0, 19, 4, 7, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i2 + i1 )), i1)), int(21.0))) \\l mod(len(in2),min(( i0 - i1 ), i2))\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 0, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 2, 2, 1, 1, 1], [1], [1, 3, 2, 3, 2, 3, 0, 2, 0, 0, 3, 1, 0, 1, 2, 1, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0], [1, 1, 0, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 0, 12, 3, 4, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),( len(in2) + i0 ))):{:\\nres0 = mod(i0,i2) \\le abs(int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 2, 2, 1, 1, 1], [1], [1, 3, 2, 3, 2, 3, 0, 2, 0, 0, 3, 1, 0, 1, 2, 1, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 2, 2, 0, 1, 0, 1], [0], [1, 0, 0, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 0, 12, 3, 4, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),( len(in2) + i0 ))):{:\\nres0 = divInt(i0,i2) \\le abs(int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [1, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 3, 8, 3, 5, 5, 3, 5], [1, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 0, 1, 3, 3, 2, 1, 3, 3, 0, 0, 2, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 0, 0, 0, 1, 4, 1, 0], [0], [1, 1, 1], [4, 5, 4, 2, 0, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 3, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l abs(mod(len(in1),len(in2)))\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [2, 1, 1, 2, 0, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 0, 3, 1, 0, 0, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0], [2, 3, 3, 2, 0, 1, 1, 1, 1], [0, 0, 0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 14, 3, 5, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),( len(in2) + abs(mod(i2,i1)) ))):{:\\nres0 = min(int(9.0), i1) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 6, 5, 5], [1, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 0, 0, 0, 0, 3, 1, 1, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 0, 1, 0, 1, 4, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 3, 0, 9, 1, 4, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = min(i1, i0) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 6, 3, 3, 5, 3], [2, 2, 2, 0, 2], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 1, 0, 3, 0, 3, 1, 1, 3, 1], [1, 0, 1, 1], [2, 3, 3, 2, 2, 0, 4, 4, 1], [2], [1, 1, 1], [4, 5, 4, 3, 0, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 2, 4, 0], [0, 3, 2], [4], [1, 1, 2, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 1, 0, 13, 2, 7, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(abs(( i2 * int(9.0) ))) \\le min(int(6.0), saveOrd(in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 0, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 3, 0, 10, 1, 5, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(min(i0, i0)) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 2, 2, 2, 0, 1, 1, 1, 0], [1], [1, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 2, 0, 3, 0, 2, 0, 3, 0, 0, 1, 1, 1, 2, 0, 1, 3, 0, 0, 0], [1, 1, 1, 0, 1, 0], [2, 3, 3, 2, 0, 2, 1, 2, 3, 1], [0, 0], [1, 1, 0, 1, 1], [4, 5, 4, 2, 4, 4], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 5, 0, 20, 4, 9, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(min(mod(abs(int(9.0)),max(divInt(i0,abs(i2)), ( i2 + len(in1) ))), i2)) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 2, 8, 5], [0, 1, 1, 1, 2, 0], [1], [1, 3, 2, 2, 3, 3, 2, 2, 0, 0, 3, 2, 3, 3, 0, 2, 0, 0, 1, 0, 1, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 2, 0, 0, 1, 4, 2], [0, 2, 1, 0], [1, 1, 1, 1, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 22, 6, 6, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(( mod(len(in1),len(in2)) + mod(( i0 * i1 ),abs(( min(min(i1, mod(i1,i2)), int(9.0)) - i0 ))) )):{:\\nres0 = int(8.0) != int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [2, 0, 1, 2, 0, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 3, 0, 0, 3, 1, 0, 0, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0], [1, 3, 3, 2, 0, 1, 1, 1, 1], [0, 0, 0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 5, 0, 21, 4, 7, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),( len(in2) + abs(min(i2, i0)) )), max(int(9.0), i1)):{:\\nres0 = i2 \\le mod(( i0 + max(int(8.0), int(3.0)) ),int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 7, 9, 7, 3, 5, 5], [1, 0, 2, 2, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 7, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i2 )), i2)), int(27.0))) \\l len(in2):{:\\nres0 = min(min(divInt(i1,int(9.0)), i1), i1) \\le int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 222}, {"genotype": [[0], [0, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 8, 5], [1, 2, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 1, 3, 3, 2, 2, 0, 3, 1, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 4, 2], [0], [1, 1, 1], [4, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 3, 0, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l abs(mod(len(in1),len(in2)))\\ns2 = s2\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [0, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 8, 5], [1, 2, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 1, 3, 3, 2, 2, 0, 3, 1, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 4, 2], [0], [1, 1, 1], [4, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 3, 0, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l abs(mod(len(in1),len(in2)))\\ns2 = s2\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 1, 1, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 0, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 0, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0], [1, 0, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 3, 0, 10, 2, 4, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(i0) \\le ( i0 + i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [2, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0], [2, 3, 3, 2, 0, 1, 3, 1, 1], [1, 0, 0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 3, 4, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l abs(mod(len(in1),( len(in2) - abs(( i2 + i0 )) )))\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 2, 2, 2, 0, 1, 1, 1, 0], [1], [1, 3, 2, 3, 3, 3, 3, 2, 1, 0, 3, 2, 0, 3, 0, 1, 0, 0, 0, 0, 1, 1, 1, 2, 0, 1, 3, 0, 0, 0], [1, 1, 1, 0, 1, 0], [2, 3, 3, 2, 0, 2, 1, 4, 2, 1], [0, 0], [1, 0, 0, 1, 1], [4, 5, 4, 2, 4, 4], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 4, 0, 17, 3, 7, 0, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(min(divInt(int(9.0),i0), abs(divInt(i2,max(i2, int(8.0)))))) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 8, 3, 5, 7, 3], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1, 0], [2, 3, 3, 2, 0, 0, 4, 4, 1], [0, 0], [1, 0, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 0, 2, 2, 0, 1, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 4, 0, 22, 5, 7, 2, 3, 4, 0, 0, 7, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),( len(in2) + abs(divInt(i2,int(4.0))) ))):{:\\nres0 = min(int(8.0), min(int(3.0), mod(( i1 + saveOrd(getCharFromString((in1 + s2)[i2:], i2)) ),int(5.0)))) \\le int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [1, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 2], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 6, 5], [1, 0, 2, 0, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 4, 1, 0, 1], [1], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 3, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l abs(mod(len(in1),len(in2)))\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 4, 8, 3, 5, 5, 3, 6, 9], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 3, 3, 1, 3, 1, 2, 2, 0, 3, 1, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 4, 3, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 2], [], [], [0, 0, 4, 2, 4, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 10, 10, 3, 0, 24, 4, 9, 1, 3, 6, 0, 0, 12, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(min(( i2 + min(saveOrd(getCharFromString(in1.rstrip((s2[int(4.0):][len(in1):] + s2))[int(8.0):], mod(mod(i1,max(int(3.0), i2)),int(5.0)))), int(5.0)) ), int(3.0))) \\le int(69.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1, 1], [2, 0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 0, 6, 5, 5], [1, 0, 1, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 0, 0, 0, 3, 1, 1, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 0, 0, 2, 1, 4, 1], [0, 0, 0, 2, 1, 2, 0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 0, 12, 1, 6, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = min(min(i1, i0), i1) \\le abs(int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 6, 5, 5], [1, 1, 0, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 0, 0, 0, 3, 1, 1, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 3, 1, 0, 1, 4, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 9, 1, 5, 0, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = len(in1) != max(i1, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(3.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 5, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(5.0) ) + int(5.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(3.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(5.0) ) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 167}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(4.0) ) + int(7.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 170}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(3.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 165}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(3.0) ) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(3.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( int(3.0) + int(7.0) ) + int(2.0) ))) + int(8.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 161}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(6.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 182}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 0, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(i2, ( i0 * i0 )), i2) ), int(17.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 230}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 2, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(i2, ( i1 * i2 )), i2) ), int(17.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 230}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(6.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 182}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(6.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 182}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 0, 0, 1, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(i2, ( i0 * i0 )), i1) ), int(17.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 230}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 2, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(i2, ( i1 * i2 )), i2) ), int(17.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 230}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 3, 1, 1, 1, 2, 1, 2, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 18, 7, 4, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + min(int(3.0), int(7.0)) ) + int(9.0) ))) + divInt(int(8.0),( int(7.0) * i2 )) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 161}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 1, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + max(min(i2, divInt(i1,i0)), i2) ), int(17.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 230}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(2.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 7, 7, 1], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(5.0) ) + int(7.0) ))) + min(int(9.0), divInt(int(8.0),i2)) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 161}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 4, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(5.0) ) + int(4.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 0, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(5.0) ) + int(7.0) ))) + int(0.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 180}, {"genotype": [[0], [0, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 9, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(19.0):]) \\le len(in2)\\ni0 += int(3.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + i2 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 9, 9, 4, 1, 5, 5, 5], [1, 0, 1, 0, 1, 0, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 3, 3, 1, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 1], [1], [0, 0, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 5, 0, 25, 3, 10, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in0),min(min(i1, ( i0 - i1 )), i0)), int(29.0))) \\l len(in2):{:\\nres0 = min(max(divInt(i1,int(9.0)), int(4.0)), max(max(int(1.0), int(5.0)), int(5.0))) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1, 1, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 2, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),min(( i0 + int(3.0) ), int(8.0)))) + mod(int(2.0),mod(int(8.0),i2)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 305}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 2, 8, 7, 7, 1], [1, 1, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(3.0) ) + int(7.0) ))) + i1 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 0, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( ( i0 + int(3.0) ) + min(int(2.0), i0) ))) + divInt(int(2.0),i2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 305}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(9.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 231}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(9.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 231}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [2, 2, 1, 0, 2], [1, 1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(in2)\\ni2 += i2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( ( i0 + int(3.0) ) + i0 ))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 305}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [2, 2, 1, 0, 2], [1, 1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(in2)\\ni2 += i2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),min(( i0 + int(3.0) ), int(8.0)))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 305}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 3, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 18, 6, 5, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + min(int(3.0), min(int(7.0), divInt(int(9.0),i2))) ) + int(8.0) ))) + i2 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 177}, {"genotype": [[0], [0, 1], [1, 0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0], [0, 1, 1, 1, 1], [1, 6, 6, 8, 4], [0, 2, 2, 0, 2], [0, 1], [3, 1, 3, 2, 1, 0, 3, 3, 3, 1, 1, 1, 3, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 4, 4, 2, 1, 2], [2], [0, 0, 0], [3, 5, 4, 3, 4, 4, 2, 3], [1], [], [2, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 4, 0, 1, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 2, 2, 2], [0], [17], [], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 1, 6, 1, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(in2)\\ni0 = ( int(6.0) * i2 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 14, 5, 4, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + min(int(3.0), int(7.0)) ) + int(9.0) ))) + i2 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 180}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 18, 6, 5, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( ( i0 + int(3.0) ) + min(int(2.0), i0) ))) + divInt(int(2.0),min(int(8.0), i1)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 305}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 4, 0, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( ( i0 + int(3.0) ) + min(int(4.0), i0) ))) + mod(int(4.0),int(0.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 6, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + divInt(i0,( int(6.0) * int(8.0) )) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\l ( divInt(len(in2),mod(len(in0),( ( i0 + int(3.0) ) + min(int(2.0), i0) ))) + divInt(int(2.0),i1) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 296}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 1, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 0, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( ( i2 + int(3.0) ) + i2 ))) + int(1.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 296}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 4, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( int(3.0) + i0 ))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + i2 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 5, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(5.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 167}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [1, 1, 1], [2, 0, 0], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 8, 2, 8, 9, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 3, 1, 0, 1, 3, 2, 0, 3], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0, 1], [0, 5, 3, 2, 4, 2, 3], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 5, 4, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( divInt(i0,int(3.0)) + int(8.0) ))) + int(2.0) ):{:\\nres0 = i2 \\le min(int(8.0), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 183}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 4, 0, 22, 6, 6, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( divInt(len(in2),mod(saveOrd(in1),min(( int(5.0) + int(3.0) ), int(3.0)))) + int(6.0) ):{:\\nres0 = min(( int(7.0) * i0 ), min(i0, divInt(i1,int(79.0)))) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 329}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 0, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(6.0) ) + int(7.0) ))) + int(0.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 181}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0, 1], [1, 5, 3, 2, 4, 5, 3], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 15, 5, 3, 2, 3, 7, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( divInt(i0,int(3.0)) + int(8.0) ))) + int(2.0) )\\ns2 = (in1 + (in2[i2:][i2:] + in0))[int(8.0):]\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 183}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 7, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(saveOrd(in1),min(( int(5.0) + int(7.0) ), int(3.0)))) + int(6.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 329}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0, 1], [0, 5, 3, 2, 4, 5, 3, 1], [1], [], [0, 0, 0, 2, 3, 2, 3, 2, 2, 0, 0, 3, 0, 3, 0, 4, 1], [0, 3, 2], [4], [2, 2, 2, 0], [0], [20], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 4, 0, 18, 5, 3, 2, 3, 8, 1, 0, 17, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),divInt(len(in0),( divInt(i0,int(3.0)) + int(8.0) ))) + int(2.0) )\\ns2 = ((in1[i2:int(8.0)][int(7.0):] + in2)[i2:] + (in0 + (s1 + getCharFromString(\"\"U\"\", int(7.0)))))[i0:]\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 6, 5, 8, 7, 7, 1], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(6.0) ))) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 174}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(saveOrd(in1),min(( int(5.0) + int(3.0) ), int(3.0)))) + int(6.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 329}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 2, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(len(in2),divInt(len(s2),( ( i2 + int(9.0) ) + int(7.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 309}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [3, 1, 3, 7, 6, 3, 6], [0, 1, 1, 1], [0, 1], [3, 1, 3, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3], [0, 0, 1, 0, 1, 1, 0, 0], [4, 1, 3, 3, 4], [1, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 3, 0, 0, 4, 4, 2, 0, 0, 3, 0, 1], [2, 0, 0], [4], [2, 0], [1], [5], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 10, 1, 5, 1, 0, 5, 0, 0, 10, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(31.0):]) \\le max(len((in2 + s1)), ( len(getCharFromString(in1[i0:i1], int(3.0)).capitalize()) - saveOrd(in1) ))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 211}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0, 1], [0, 5, 3, 2, 4, 5, 3], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 2, 3, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(i0,( divInt(i2,int(0.0)) + int(8.0) ))) + int(2.0) )\\nin0 = s2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 309}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(saveOrd(in1),min(( int(2.0) * int(3.0) ), int(3.0)))) + int(6.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 329}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 1, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(s1),( ( i0 + int(5.0) ) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 325}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 4, 3, 7, 6, 3, 6], [2, 2, 1, 0, 2], [1, 1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 14, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(14.0):]) \\le len(in2)\\ni2 += i2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 210}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [0, 1, 2, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(i0, ( int(17.0) * i1 )), i2) ), int(9.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 244}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 3, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 1, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),len(s1)) + min(mod(( i0 + int(4.0) ),int(6.0)), int(4.0)) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 325}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 8, 0, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 2, 2, 0, 1, 3, 3, 1, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1], [2, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( int(3.0) + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 314}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 1, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( ( i2 + int(3.0) ) + divInt(int(1.0),int(9.0)) ))) + ( int(8.0) * i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 297}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 1, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 3, 0, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2, 1], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 17, 4, 4, 2, 2, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2[int(3.0):]),len((in0 + (s2[:min(i0, i2)][int(8.0):] + in1))[int(2.0):divInt(i1,( int(8.0) + i0 ))])) + int(7.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 325}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 3, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 18, 6, 5, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( ( i0 + int(3.0) ) + min(min(i0, divInt(int(2.0),i1)), int(2.0)) ))) + i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 297}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 2, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(s2),( ( i0 + int(5.0) ) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 325}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 0, 0, 1, 3, 1, 3, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 3, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 3, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 1], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 3, 3, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),int(3.0))) + i0 ):{:\\nres0 = i0 \\le int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 297}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 1, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 18, 7, 4, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( ( i2 + int(3.0) ) + ( min(int(1.0), ( int(6.0) * i2 )) * int(8.0) ) ))) - i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 297}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(5.0) ) * int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 325}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [0, 2, 1, 1, 2, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 2, 0, 0, 2, 0, 1, 1, 1], [1, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0, 0, 0], [0, 1, 1], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 7, 0, 21, 5, 7, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(s1),min(min(i0, ( i2 + i1 )), i1)), int(26.0))) \\l mod(len(in2),min(( i2 + i1 ), ( i2 + int(9.0) )))\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 337}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 1, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( i0 + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 3, 3, 1, 0, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 5, 5, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( divInt(i0,min(min(int(3.0), i0), int(2.0))) + int(2.0) ))) + i1 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 7, 7, 1], [1, 0, 1, 0, 2], [1], [3, 2, 3, 3, 2, 2, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( len(in2) + len(s0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 2, 2, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 6, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le max(( len(in2) + divInt(min(divInt(( i1 * int(5.0) ),int(7.0)), ( i0 * divInt(int(4.0),i1) )),int(8.0)) ), i0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [2, 1, 0, 1, 2, 1], [1, 1, 1], [5, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2[int(163.0):]) \\le len(in2)\\ni0 *= int(7.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 6, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 0, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(s0),( ( i0 + int(2.0) ) + divInt(int(6.0),i2) ))) + ( int(2.0) * i2 ) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [1, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 1, 2, 0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 1, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 3, 3, 0, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(mod(len(in2),i0),max(int(1.0), divInt(i0,int(2.0))))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 0, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 0, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 1, 1, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 9, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( i0 + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 18, 7, 4, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(s0),( ( i0 + int(3.0) ) + min(int(2.0), i0) ))) + divInt(( i1 * int(2.0) ),i0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 2, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 4, 3, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( i1 + max(mod(len(in2),divInt(( i2 + int(5.0) ),int(7.0))), int(2.0)) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [1], [3, 2, 0, 3, 2, 1, 3, 0, 1, 1, 1, 2, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 2, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( i0 + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 6, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 2, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( int(5.0) + len(in2) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 337}, {"genotype": [[0], [0, 1], [1, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1], [1, 7, 9, 8, 2, 5, 5, 1, 4, 4, 7, 6, 7, 1, 1], [1, 0, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 1, 3, 1, 3, 3, 3, 0, 0, 0, 2, 0, 1, 1, 1, 1, 0, 1, 2, 1, 1], [1, 1, 1, 1, 0], [2, 3, 3, 0, 0, 3, 3, 1, 1], [0], [1, 1, 0, 0], [4, 5, 3, 2, 4, 5, 5, 5], [1], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [0, 0, 1, 2, 0, 0], [0], [5], [], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 15, 15, 6, 0, 29, 5, 8, 1, 4, 7, 1, 0, 15, 0, 0, 6, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) \\le abs(mod(len(in1),mod(len(in2),min(divInt(i1,int(9.0)), min(int(8.0), len(in0))))))\\ns2 = (\"\"F\"\" + (in1[:len(in2)][max(i0, i2):i2] + in2[divInt(i2,int(2.0)):int(5.0)][int(5.0):int(14.0)][i1:]))[int(47.0):( int(6.0) + int(711.0) )]\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 194}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5], [2, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0], [2, 3, 3, 2, 0, 1, 3, 1, 1], [0, 0, 0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 3, 4, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(16.0) \\l abs(mod(len(in1),( len(in2) + abs(( i2 + i0 )) )))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 194}, {"genotype": [[0], [0, 1], [1, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 7, 9, 8, 2, 5, 5, 1, 4, 4, 7], [1, 0, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 1, 3, 1, 3, 3, 3, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [1, 1, 1], [2, 3, 3, 0, 0, 3, 3, 0, 1], [0], [1, 1, 0], [4, 5, 3, 2, 4, 5, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [0, 0, 1, 2, 0, 0], [], [5], [], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 19, 3, 8, 0, 3, 8, 0, 0, 11, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) \\le abs(mod(len(in1),mod(len(in2),min(divInt(i1,int(9.0)), min(int(8.0), len(in0))))))\\ns2 = (in1 + (in2 + in2[len(s1):min(i0, i2)]))[i2:i2]\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 194}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 3, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 1, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 0, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 0, 0, 3, 3, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 1, 1, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 2, 2, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(i0,i2) + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [3, 2, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [0, 1], [3, 1, 3, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3], [0, 0, 1, 0, 1, 1, 0, 0], [4, 1, 3, 3, 4], [1, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 3, 0, 0, 4, 4, 2, 0, 0, 3, 0, 1], [1, 2, 0], [], [2, 1], [1], [5], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 4, 1, 0, 3, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(32.0):]) \\le max(len((in2 + s1)), ( len(saveChr(i0)) - i2 ))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 7, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 0, 2, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 1, 0, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le divInt(mod(len(in2),i0),divInt(( ( i2 - int(6.0) ) - int(7.0) ),int(7.0)))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [2, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 0, 2, 4, 5], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 5, 0, 21, 7, 3, 4, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(getCharFromString((s0 + (s2[( ( i0 + int(2.0) ) + int(7.0) ):int(4.0)][i0:] + in1))[divInt(int(8.0),i1):], int(7.0))),i0)) + ( i2 * int(7.0) ) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [1, 1, 4, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 3, 2, 1, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0], [4, 3, 3, 3, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 1, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 1], [0], [20], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 4, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 3, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( i0 + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 0, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 3, 4, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(len(in2),mod(saveOrd(in1),min(i0, int(5.0)))) + int(3.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 0, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 7, 1, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + mod(len(in0),( ( i0 + int(2.0) ) + int(7.0) )) ) * int(1.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 320}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 6, 0, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 0, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 2, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(s2),( int(5.0) + i0 ))) + i2 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 4, 8, 2], [1, 0, 1, 0, 1, 1], [1], [1, 3, 1, 3, 3, 3, 1, 2, 0, 1, 3, 1, 3, 3, 2, 1, 0, 3, 0, 0, 1, 1, 1, 1], [0, 0, 1], [3, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 1, 0, 10, 1, 4, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(26.0) \\l len(in2):{:\\nres0 = int(9.0) \\le max(len(in2), min(int(7.0), ( i1 * int(3.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 337}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 0, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [2, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2[int(10.0):]) \\le len(in2)\\ni0 += int(37.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 7, 7, 1], [1, 0, 1, 0, 2], [1], [3, 3, 2, 3, 2, 3, 2, 1, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 1, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 3, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 18, 6, 5, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),min(( i0 + int(3.0) ), min(( i0 + divInt(int(8.0),i1) ), int(2.0))))) + i0 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 1, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( i0 + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 3, 2, 2, 2, 3, 2, 2, 0, 1, 1, 1, 3, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [0, 1], [1, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 7, 9, 8, 2, 5, 5, 1, 4, 4, 7], [1, 0, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 1, 0, 0, 3, 3, 3, 0, 2, 0, 0, 0, 1, 1, 1, 1, 0], [1, 1, 1], [2, 3, 3, 0, 0, 3, 3, 0, 1], [0], [1, 1, 0], [4, 5, 3, 2, 4, 5, 2, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [0, 0, 1, 2, 0, 0], [], [5], [], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 11, 3, 4, 0, 3, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) \\le abs(mod(len(in1),mod(len(in2),min(divInt(i1,int(9.0)), i0))))\\nin0 = s2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 194}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 0, 0, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 2, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(i0,( ( i0 + int(3.0) ) + int(4.0) ))) + int(0.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 * int(3.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 177}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 2, 7, 4, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 1, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0], [4, 1, 3, 0, 0, 3, 0, 1, 1], [2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 12, 2, 4, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\l max(divInt(len(in2),min(int(26.0), i1)), ( i0 * i1 )):{:\\nres0 = i2 \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 293}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 0, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( int(6.0) + len(in2) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 347}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 * int(3.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 177}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [2, 6, 9, 7, 3, 5, 5, 1, 6, 4, 3, 7, 9, 5, 2], [1, 0, 1, 0, 1, 1, 2, 2, 2], [1], [3, 3, 2, 3, 2, 3, 0, 0, 0, 2, 0, 1, 3, 3, 3, 3, 0, 1, 2, 3, 0, 0, 1, 1, 2, 1, 0, 3, 1, 0, 1, 2, 1, 3, 1], [1, 0, 1, 1, 1, 1], [3, 4, 3, 0, 0, 1, 0, 1, 1, 2, 3], [1], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 2, 0], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 15, 15, 9, 0, 35, 6, 11, 1, 5, 6, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l saveOrd(getCharFromString(in2, divInt(len((in0 + (s2[( min(i1, i0) - i1 ):mod(i0,int(26.0))][min(max(min(max(i1, int(9.0)), divInt(max(i1, i2),int(73.0))), int(5.0)), divInt(int(5.0),i2)):] + in1))[abs(int(164.0)):i2]),int(37.0)))):{:\\nres0 = divInt(int(95.0),len(in2)) \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 297}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 6, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 2, 0, 0, 1, 1, 1, 2, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 2, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 4, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(len(in2),mod(( i0 + i0 ),int(5.0))) + int(6.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 347}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 0, 5, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 3, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 3, 5, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(len(in2),mod(saveOrd(in1),min(min(int(5.0), int(3.0)), int(0.0)))) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 340}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(min(( ( i2 + int(3.0) ) + int(7.0) ), int(4.0)),int(8.0))) + divInt(int(7.0),i2) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 350}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 2, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 293}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 6, 5, 5], [1, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 0, 0, 0, 3, 1, 1, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 0, 1, 0, 1, 4, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 3, 0, 13, 1, 6, 0, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(17.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = min(max(i1, i0), i2) \\le min(int(9.0), int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = s2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 196}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 3, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 1, 1, 1, 0, 0], [4, 3, 2, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0, 1], [0, 5, 3, 2, 4, 5, 3], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 17, 5, 5, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( ( len(in2) + divInt(abs(min(divInt(i0,int(3.0)), int(82.0))),min(i2, divInt(int(8.0),i2))) ) + int(7.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 350}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( min(i1, int(3.0)) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 177}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [2, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 2, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1, 0], [4, 1, 3, 0, 0, 3, 0, 1, 4], [2, 1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 6, 0, 20, 4, 7, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\l max(divInt(len(in2),( min(i2, mod(i0,i1)) * i2 )), int(2.0)):{:\\nres0 = min(len(in0), min(( i1 - int(6.0) ), int(9.0))) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 293}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 5, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( mod(len(in2),divInt(len(in0),( ( i2 + int(9.0) ) + divInt(int(5.0),i2) ))) + ( int(2.0) * i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 201}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 7, 5, 8, 7, 7, 1], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 2, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 0, 1], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 5, 0, 21, 7, 3, 4, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2[divInt(len((s2 + (s2[:( ( i0 + int(3.0) ) + int(7.0) )][int(5.0):i0] + in1))[:divInt(int(8.0),i1)]),int(7.0)):]),i0) + ( i2 * int(7.0) ) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 298}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 5, 0, 23, 3, 9, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 - i1 )), i0)), int(2.0))) \\l len(in2):{:\\nres0 = min(max(mod(max(int(6.0), int(9.0)),i1), int(7.0)), int(3.0)) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 7, 8, 3, 5, 5], [1, 0, 1, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(i1, ( int(1.0) - i0 )), i1) ), int(1.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 1, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 1], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 18, 7, 4, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),divInt(( i0 + int(3.0) ),min(int(2.0), int(2.0))))) + mod(( i0 + int(8.0) ),i1) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 357}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 8, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 0, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [0, 5, 2, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 2, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(min(divInt(( i0 - int(5.0) ),int(7.0)), int(8.0)),i0)) + mod(int(8.0),i1) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 357}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5], [1, 2, 1, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2, 2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i2 * i1 )), i1)), int(1.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5], [0, 0, 0, 2, 0, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 0, 1], [1, 2], [1, 1, 0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 5, 0, 23, 3, 9, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(mod(len(in1),min(min(i0, ( i0 - i0 )), i2)), int(1.0))) \\l len(in2):{:\\nres0 = min(min(( max(int(6.0), int(9.0)) * i0 ), int(8.0)), int(3.0)) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [1, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) - min(min(i2, ( i1 * i0 )), i2) ), int(1.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 8, 2, 8, 7, 7, 1], [0, 2, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 0, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 1, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(s1),min(( i0 - i2 ), int(2.0)))) + ( i1 + divInt(int(8.0),i0) ) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 357}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [1, 1, 0], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2, 2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, mod(i2,i1)), i2)), int(1.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 1, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(s1),( ( i1 + int(3.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], "other_info": {}, "test_fitness": 372}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 8, 9, 4, 1, 5, 5], [0, 0, 1, 0, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1, 2], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 23, 4, 8, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i0, ( i0 - i1 )), i0)), int(2.0))) \\l divInt(len(in2),min(( i1 * int(8.0) ), int(9.0))):{:\\nres0 = i1 \\le max(int(4.0), int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(s0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], "other_info": {}, "test_fitness": 372}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5], [0, 1, 0, 2, 0, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 0, 1], [1, 2], [1, 1, 0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(min(i0, ( i1 - i0 )), i2)), int(1.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5], [1, 2, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [1, 1, 0], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(min(i1, mod(i2,i1)), i0)), int(1.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( mod(len(in2),divInt(len(in0),( ( i2 + int(6.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 1, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(len(in2),divInt(int(3.0),( ( i0 + int(7.0) ) + int(9.0) ))) + int(8.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 357}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [1, 1, 0], [2, 1, 3, 1, 0, 3, 0, 0, 1], [2, 2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),max(min(i1, mod(i2,i1)), i2)), int(1.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 1, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(int(3.0),( ( i2 + int(7.0) ) + int(9.0) ))) + int(8.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 357}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 1, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(int(6.0),( ( i2 + int(7.0) ) + int(9.0) ))) + int(8.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 357}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(i0,( ( i2 + int(3.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], "other_info": {}, "test_fitness": 372}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 0, 9, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(6.0) ) + int(0.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 190}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 0, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(min(( ( i2 + int(9.0) ) + int(7.0) ), i2),i2)) - divInt(int(2.0),i0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 290}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 0, 1], [9, 5, 9, 8, 5, 6, 2, 5], [0, 1, 1, 1, 1, 2, 1, 1, 0], [0], [3, 2, 3, 3, 2, 2, 3, 3, 0, 1, 0, 3, 3, 1, 3, 2, 0, 0, 1, 2, 3, 1, 0, 1, 0, 2, 3, 3, 2, 0, 0, 1, 1, 3], [1, 0, 1, 1, 1, 0], [3, 2, 3, 2, 0, 0, 3, 3, 1, 2, 0, 1, 4], [0, 1], [0, 1, 0, 1], [4, 5, 0, 2, 4, 5, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 14, 3, 7, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in1) \\l divInt(abs(len(in2)),( mod(abs(min(i0, int(95.0))),i1) + min(len(s0), int(9.0)) ))\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 2, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 17, 7, 3, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(abs(divInt(len(in2),( ( i2 * int(5.0) ) + int(7.0) ))),divInt(int(9.0),( int(8.0) + i2 ))) * int(7.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 282}, {"genotype": [[0], [1, 1], [1, 0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0], [0, 1, 1, 1, 1], [1, 6, 6, 8, 4], [0, 2, 2, 0, 2], [0, 1], [3, 1, 3, 2, 1, 0, 3, 3, 3, 1, 1, 1, 3, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 4, 4, 2, 1, 2], [2], [0, 0, 0], [3, 5, 4, 3, 4, 4, 2, 3], [1], [], [2, 0, 3, 0, 0, 1, 1, 0, 2, 0, 0, 4, 0, 1, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 2, 2, 2], [0], [17], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len((in2 + in1))\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 284}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [4, 1, 7, 8, 3, 5, 5], [1, 2, 1, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 4, 3, 1, 0, 1], [0, 1], [0, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 1, 5, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in1)) \\l ( len(in2) + min(saveOrd(in0), i1) )\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [1, 0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0], [0, 1, 1, 1, 1], [1, 6, 6, 8, 4], [0, 2, 2, 0, 2], [0, 1], [3, 1, 3, 2, 1, 0, 3, 3, 3, 1, 1, 1, 3, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 4, 4, 2, 1, 2], [2], [0, 0, 0], [3, 5, 4, 3, 4, 4, 2, 3], [1], [], [2, 0, 3, 0, 0, 1, 1, 0, 2, 0, 0, 4, 0, 1, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 2, 2, 2], [0], [17], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len((in2 + in1))\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 284}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 4, 4, 0, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 20, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( ( i0 + int(5.0) ) + min(int(4.0), i0) ))) + mod(int(4.0),int(0.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 288}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [3, 7, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 1], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 20, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(i2, ( i1 - i0 )), i2) ), int(37.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 227}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [2, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 2, 1, 3, 1, 3, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 3, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 1, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 1], [0], [20], [], [], []], "fitness": 20, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 12, 5, 4, 2, 3, 3, 1, 0, 4, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(len(in2),mod(len(in0),mod(int(3.0),( int(7.0) + len(\"\"U\"\") )))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 314}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 0, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 20, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(5.0) ) + int(0.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 206}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),min(( i0 + int(3.0) ), int(8.0)))) * ( i2 + divInt(int(2.0),i2) ) )\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0], "other_info": {}, "test_fitness": 398}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 1, 9, 7, 3, 5, 5], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(s0),min(min(i1, ( i1 * i1 )), i2)), int(21.0))) \\le len(in2)\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 396}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 7, 3, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(s2),int(0.0))) - ( i1 + int(7.0) ) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 268}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(9.0) ) + int(7.0) ))) - int(9.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 230}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 2, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 1, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 4, 0, 22, 6, 6, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\l ( divInt(len(in2),mod(saveOrd(in1),min(( int(5.0) + int(3.0) ), int(3.0)))) - int(6.0) ):{:\\nres0 = min(( int(7.0) * i0 ), min(i0, divInt(i1,int(79.0)))) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 279}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le ( int(6.0) + len(in2) ):{:\\nres0 = mod(len(in0),divInt(( i2 + int(7.0) ),int(9.0))) \\le int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 1, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( mod(len(in2),divInt(len(in0),( ( i2 + int(6.0) ) + int(1.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 232}, {"genotype": [[0], [1, 1], [2, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 0, 0, 2, 1], [0, 0], [1], [2, 3], [0], [], [0], [0, 1, 1, 1, 1], [1, 6, 2, 8, 4], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 3, 0, 0, 3, 2, 1, 2, 1, 3, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 4, 4, 2, 1, 2], [2], [0, 0, 0], [4, 5, 4, 1, 4, 4, 2, 3], [1], [], [2, 0, 3, 0, 0, 4, 2, 2, 2, 0, 0, 4, 0, 1, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 1, 2, 2], [0], [17], [], [], []], "fitness": 22, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 5, 2, 1, 2, 1, 0, 1, 4, 4, 3, 0, 14, 2, 6, 1, 1, 7, 1, 0, 15, 2, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(in1[int(16.0):]) \\le len((in2 + in1)):{:\\nres0 = not ( s1[len(in1):][saveOrd(saveChr(i0)):][:i1].strip(in1) not in \"\"R\"\" and saveOrd(s2) \\le ( int(2.0) * divInt(int(8.0),abs(i2)) ) )\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 411}, {"genotype": [[0], [1, 1], [2, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0], [0, 1, 1, 1, 1], [1, 6, 2, 8, 4], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 3, 0, 0, 3, 2, 1, 1, 1, 3, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 4, 4, 2, 1, 2], [2], [0, 0, 0], [4, 5, 4, 1, 4, 4, 2, 3], [1], [], [2, 0, 3, 0, 0, 4, 2, 2, 2, 0, 0, 4, 0, 1, 0, 0], [3, 2, 2, 0, 3], [5, 3], [2, 1, 2, 2], [0], [17], [], [], []], "fitness": 22, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 8, 0, 5, 0, 0, 6, 1, 0, 14, 2, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(in1[int(16.0):]) \\le len((in2 + in1)):{:\\nres0 = len(s1[saveOrd(in1):][i0:][:i1].strip(in1.capitalize())) \\le saveOrd(\"\"R\"\")\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 411}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 1, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),int(3.0))) + ( int(7.0) + int(9.0) ) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 207}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( ( i0 + int(3.0) ) + min(int(2.0), int(2.0)) ))) + divInt(int(8.0),i0) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 299}, {"genotype": [[0], [1, 1], [2, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0], [0, 1, 0, 1, 1, 1, 1], [1, 6, 2, 8, 4, 3, 0], [0, 0, 2, 0, 2], [0, 1], [3, 1, 3, 3, 3, 2, 0, 3, 2, 1, 1, 1, 3, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 3, 4, 1], [2], [0, 0, 0], [4, 5, 4, 1, 4, 4, 2, 3], [1], [], [2, 0, 3, 0, 0, 4, 2, 2, 2, 0, 0, 4, 0, 1, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 1, 2, 0], [0], [17], [], [], []], "fitness": 22, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 7, 7, 3, 0, 16, 2, 6, 1, 1, 6, 0, 0, 13, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(in1[int(16.0):]) \\le len((in2 + in1)):{:\\nres0 = len(s1[len(in1):( i0 * saveOrd(saveChr(divInt(int(28.0),int(4.0)))) )][int(3.0):][:max(i0, i2)].strip(in1)) \\le int(0.0)\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 411}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 2, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( ( i0 + int(3.0) ) + min(int(2.0), int(2.0)) ))) + divInt(int(8.0),i2) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 299}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [3, 2, 6, 7, 6, 3, 6], [0, 2, 1, 0, 2], [0, 1], [3, 1, 3, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3], [0, 0, 1, 0, 1, 1, 0, 0], [4, 1, 3, 4, 4], [1, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 5, 4, 4], [], [], [2, 0, 3, 0, 0, 4, 4, 2, 0, 0, 3, 0, 1], [2, 0, 0], [], [2, 1], [1], [5], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 9, 1, 4, 1, 0, 4, 0, 0, 9, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(32.0):]) \\le max(len((in2 + in2)), ( saveOrd(getCharFromString(in1[:i0], i2).capitalize()) - int(6.0) ))\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 347}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 3, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [2, 0, 2, 2, 1, 2, 0], [1, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 23, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 3, 5, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(len(in2),mod(saveOrd(in1),min(min(int(5.0), int(3.0)), int(3.0)))) * int(6.0) )\\n", "test_case_results": [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 410}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 23, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),min(( i0 + int(3.0) ), int(8.0)))) + ( i2 + mod(int(2.0),i1) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 248}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 6, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 24, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),int(3.0))) + ( i1 + int(7.0) ) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 24, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),( len(in0) - ( ( i2 + int(3.0) ) + int(0.0) ) )) * int(9.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 194}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 25, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(len(in2),mod(len(in0),( ( i1 + int(3.0) ) + int(7.0) ))) + min(int(9.0), mod(int(8.0),i2)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 25, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( ( i2 + int(3.0) ) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 298}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 2, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 3, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 25, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 3, 5, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(len(in2),mod(saveOrd(in1),min(min(int(5.0), int(3.0)), int(2.0)))) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 346}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 2, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 0, 3, 0, 0, 3, 0, 3, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 5, 0, 19, 3, 8, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(min(divInt(len(in1),min(min(i1, ( i2 * i1 )), i0)), int(26.0))) \\l len(in2):{:\\nres0 = min(len(in0), mod(i1,int(9.0))) \\le int(7.0)\\n:}\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 369}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [2, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le ( divInt(len(in2),mod(len(in0),( ( i2 + int(3.0) ) + min(int(2.0), int(2.0)) ))) + divInt(int(8.0),i0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 298}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 3, 4], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 6, 4, 3, 3, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( ( i0 + int(3.0) ) + len((s2 + (in1[int(2.0):][i0:divInt(int(2.0),i1)] + in2))[int(8.0):]) ))) + i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 297}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 3, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 18, 6, 5, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( min(i0, int(3.0)) + min(int(2.0), i0) ))) + ( divInt(i1,int(2.0)) + i0 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 289}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 4, 0, 7, 7, 1], [2, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),i2)) + ( i0 + int(3.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 284}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),i0)) + ( i0 + int(3.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 284}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(9.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 287}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 2, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),i0)) - ( i0 * int(0.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 289}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 0, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( i0 + i0 ))) + int(5.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 4, 0, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 4, 0, 0], [0, 1, 2, 2, 1, 2, 0], [0, 1, 1], [2, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(saveOrd(s2),( ( i0 + int(3.0) ) - min(int(4.0), i0) ))) * mod(int(4.0),int(0.0)) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 455}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( ( i2 + int(9.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 300}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),divInt(( i1 + int(3.0) ),int(7.0)))) + int(9.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 - int(6.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),( len(in0) + i2 )) + ( i2 + int(6.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( i2 + i2 ))) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + divInt(len(in0),( ( i2 + int(9.0) ) + int(7.0) )) ) * int(2.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 467}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 6, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),( len(in0) + i0 )) + ( i0 + int(6.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 2, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),divInt(( i2 + int(6.0) ),int(7.0)))) + min(int(9.0), mod(int(8.0),i2)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [2, 6, 9, 1, 3, 5, 5, 0, 4, 6, 8, 4, 7, 2, 7, 7], [2, 0, 1, 0, 1, 1, 1, 2, 1, 2, 2], [1], [3, 3, 2, 3, 2, 3, 2, 0, 0, 2, 0, 1, 3, 3, 3, 3, 0, 1, 1, 3, 0, 1, 1, 3, 1, 2, 3, 1, 2, 2, 3, 1, 0, 3, 1, 3, 0, 3, 1, 0, 2, 2, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 0, 1, 1], [3, 1, 3, 0, 0, 3, 0, 1, 1, 4, 3, 1, 0, 0, 4], [1, 0, 1], [0, 1, 0, 1, 1, 0], [4, 5, 3, 2, 4, 5, 0], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 0], [0, 3, 2], [4], [0, 0, 0], [0], [17], [], [], []], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 16, 16, 11, 0, 46, 9, 15, 3, 6, 7, 1, 0, 13, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l max(divInt(len(in2),( min(mod(i2,i0), divInt(i1,int(26.0))) - min(len(in0), min(max(i0, int(9.0)), int(13.0))) )), max(i1, int(5.0))):{:\\nres0 = int(5.0) \\le saveOrd((s2 + (in1[int(04.0):( len(in2) + int(6.0) )][mod(( max(int(8.0), i1) - min(int(4.0), min(i1, saveOrd(\"\"R\"\"))) ),int(7.0)):i2] + s0))[mod(divInt(int(277.0),i1),i2):i2])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 265}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(6.0) ) - int(7.0) ))) + int(9.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 1, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 3, 4, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),min(int(3.0), i0))) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),i1)) + ( int(5.0) - int(7.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 293}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),divInt(( i2 + int(6.0) ),int(7.0)))) + int(9.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 0, 8, 7, 7, 1], [2, 2, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(len(in2),mod(len(in0),( ( i2 + int(6.0) ) - int(7.0) ))) + int(0.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 339}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 9, 9, 8, 3, 5, 5], [2, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 0, 3, 3, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0], [2, 3, 3, 2, 0, 1, 3, 1, 1], [0, 0, 0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 10, 2, 4, 2, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(19.0) \\l abs(( len(in1[i2:len(in2)]) + abs(( i0 + i2 )) ))\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 365}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 3, 3, 2, 0, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 3, 4, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( mod(len(in2),len(in0)) + min(divInt(i0,i0), int(5.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 339}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 6, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 5, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in2),( ( i0 + int(2.0) ) + int(6.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 332}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 3, 8, 3, 5, 5, 3, 5], [1, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 2, 2, 0, 1, 3, 1, 3, 3, 2, 1, 3, 3, 0, 0, 2, 1, 1, 1, 1], [1, 0, 1, 1, 1], [2, 3, 3, 0, 0, 0, 1, 4, 1, 0], [0], [1, 1, 1, 0], [4, 5, 4, 2, 0, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 3, 0, 25, 5, 9, 1, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(40.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = min(( mod(i1,int(3.0)) + min(int(8.0), min(max(mod(int(3.0),saveOrd(in1)), max(i1, i2)), divInt(int(5.0),int(5.0)))) ), int(3.0)) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 296}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [5, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 29, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2[int(16.0):]) \\le len(in2)\\ni0 += i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 323}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 29, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in1),( ( i0 + int(8.0) ) + i0 ))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 322}, {"genotype": [[0], [0, 1], [1, 0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [1, 4, 6, 8, 4], [0, 2, 2, 0, 2], [0, 1], [3, 1, 3, 2, 1, 0, 3, 3, 3, 1, 1, 1, 3, 0, 0, 1, 0], [1, 0, 1, 1], [4, 3, 3, 4, 4, 2, 1, 2], [2], [0, 0, 0], [3, 5, 4, 3, 4, 4, 2, 3], [1], [], [2, 0, 3, 0, 0, 1, 1, 0, 2, 0, 0, 4, 0, 1, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 2, 2, 2], [0], [17], [], [], []], "fitness": 29, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 6, 1, 2, 0, 1, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(1.0):]) \\le len((in2 + in1))\\ni0 = divInt(int(4.0),i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 320}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 7, 7, 1], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [3, 5, 3, 2, 4, 5, 0], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 29, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 16, 5, 3, 3, 2, 7, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le ( mod(len(in2),divInt(len(in0),int(3.0))) + ( i0 + int(7.0) ) )\\ns2 = (in1 + (in2[:int(5.0)][int(8.0):i0] + s0))[( int(7.0) + i1 ):]\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 300}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [2, 0, 1, 2, 0, 1, 1], [1], [1, 3, 2, 3, 2, 2, 3, 2, 0, 0, 3, 1, 0, 2, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0], [2, 3, 3, 2, 3, 1, 1, 1, 1], [0, 0, 0, 0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 20, 7, 5, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),( mod(len(in2),( i2 + i0 )) + abs(int(9.0)) ))):{:\\nres0 = i1 \\le ( mod(( i2 + len(in1) ),int(8.0)) + int(3.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 394}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 5, 7, 8, 3, 5, 5, 8], [0, 0, 1, 1, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 1, 0, 3, 1, 0, 2, 2, 0, 0, 3, 1, 1, 1, 1, 1], [1, 1, 1, 0, 0, 1, 0, 0], [2, 0, 3, 3, 0, 0, 1, 0, 1], [0, 1, 2], [1, 1, 1, 0], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 4, 0, 21, 4, 7, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\le abs(mod(min(len(in1), len(in2)),min(mod(int(7.0),i0), min(int(8.0), i0)))):{:\\nres0 = mod(( i1 + i1 ),max(int(3.0), int(5.0))) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 392}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [2, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 2, 1, 3, 2, 0, 2, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0], [2, 3, 3, 0, 0, 1, 3, 1, 1], [0, 0, 0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 29, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 7, 2, 3, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l abs(mod(len(in1),( int(9.0) + len(in2) )))\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 394}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 4, 1, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( saveOrd(in1) + max(min(i2, ( i1 - i0 )), i2) ), int(17.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 313}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [1, 1, 1, 1, 1, 1], [5, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2) \\le ( mod(len(in2),mod(len(in0),min(mod(i0,int(4.0)), int(8.0)))) + ( i2 - ( int(2.0) + i2 ) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 320}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 4, 9, 8, 7, 7, 1, 9, 1, 8, 9], [2, 0, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 3, 2, 1, 2, 1, 3, 1, 0, 2, 0, 1, 0, 2, 0, 1, 3, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0, 3, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 0], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 4, 0, 28, 8, 7, 5, 3, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le ( ( len(in2) - divInt(len(in0),min(divInt(int(0.0),int(4.0)), min(( int(9.0) + divInt(int(8.0),len((s2 + (in1[int(7.0):i2][:( i0 + int(7.0) )] + in2))[i2:])) ), ( i0 * int(1.0) )))) ) - min(int(9.0), int(189.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 310}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 4, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2) \\le ( divInt(len(in2),mod(len(in0),mod(( i0 + int(3.0) ),min(int(4.0), i0)))) + ( int(4.0) + int(8.0) ) )\\n", "test_case_results": [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 312}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [1], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 7, 8, 3, 5, 5], [0, 2, 2, 2, 0, 1, 1, 1, 0], [1], [1, 1, 2, 3, 3, 2, 3, 2, 0, 0, 3, 2, 3, 2, 0, 2, 0, 3, 0, 0, 1, 1, 1, 2, 0, 1, 3, 0, 0, 0], [1, 1, 1, 0, 1, 0], [2, 3, 1, 2, 0, 0, 1, 4, 3, 1], [1, 0], [1, 1, 0, 1, 1], [4, 4, 4, 2, 4, 4, 4], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 4, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l int(7.0):{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 0, 8, 7, 7, 1], [2, 2, 2, 0, 2], [1], [3, 1, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le int(6.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [2, 0, 1, 2, 1, 1], [1], [1, 3, 2, 1, 3, 3, 3, 0, 0, 0, 3, 1, 1, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 9, 1, 4, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(26.0) \\l abs(divInt(int(9.0),max(len(in1), min(i2, i0))))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 2, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 17, 7, 2, 4, 3, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1[( mod(divInt(( len(in2) + ( divInt(i2,int(6.0)) + int(7.0) ) ),int(9.0)),i2) + ( int(8.0) * i2 ) ):]) \\le int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 7, 8, 3, 5, 5], [1, 2, 1, 2, 0], [1], [3, 3, 2, 3, 1, 3, 0, 2, 1, 3, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 2, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 2, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 6, 0, 20, 2, 9, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(i2, ( i2 * abs(i0) )), int(17.0)) ), max(min(max(int(9.0), i2), int(8.0)), i0))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 5, 6, 0, 3, 5, 5], [1, 1, 2, 1, 0, 1, 1], [1], [1, 0, 2, 2, 3, 3, 3, 2, 0, 2, 3, 1, 3, 3, 2, 3, 0, 3, 0, 0, 3, 1, 1, 1], [1, 0, 1, 1, 0], [2, 3, 3, 2, 0, 0, 1, 4, 1, 2], [0, 0], [1, 0, 0], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 5, 0, 24, 5, 9, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l i1:{:\\nres0 = mod(( abs(len(in1)) + len(in2) ),divInt(i1,divInt(abs(int(6.0)),min(min(( max(i2, saveOrd(in1)) + i1 ), i0), max(int(0.0), int(3.0)))))) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(divInt(len(in2),divInt(len(s2),( ( i2 + int(9.0) ) + int(7.0) ))),int(9.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [1, 0, 2, 2, 1, 1, 1], [1], [1, 2, 2, 3, 2, 2, 3, 2, 0, 0, 3, 1, 0, 1, 2, 1, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0, 0], [1, 1, 0, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 17, 6, 3, 2, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l mod(( abs(mod(divInt(len(in1),mod(i1,i0)),len(in2))) + int(9.0) ),i2):{:\\nres0 = int(8.0) \\le ( int(3.0) + i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 3, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0], [3, 5, 0, 4, 4], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 3, 5, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le ( mod(len(in2),mod(saveOrd(s0),min(min(int(5.0), int(3.0)), int(3.0)))) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [0, 1], [5, 3], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 2, 1, 3, 3, 3, 2, 0, 2, 1, 0, 1, 1, 1, 3, 0, 3, 0], [1, 0, 1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 4], [2, 1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 7, 7, 6, 0, 27, 5, 10, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( int(26.0) * i0 )), mod(int(9.0),len(in2)))), min(max(( i1 - divInt(int(7.0),i0) ), int(3.0)), int(5.0)))) != int(5.0):{:\\nb0 = max(i1, saveOrd(in0)) \\ge i1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 3, 8, 3, 5, 5, 3, 5], [1, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 3, 2, 1, 3, 0, 0, 0, 2, 1, 2, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [2, 3, 3, 3, 0, 0, 1, 4, 2, 0], [0, 2, 1], [0, 1, 1], [4, 4, 4, 2, 0, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 4, 0, 25, 5, 9, 3, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(( len(in1) + len(in1) )):{:\\nres0 = len(in1) \\le min(divInt(i1,int(3.0)), min(int(8.0), max(saveOrd((s2 + (s0[mod(int(3.0),abs(i1)):][i2:] + in2))[i2:]), ( int(5.0) * ( int(5.0) - int(3.0) ) ))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 0, 1], [0, 0], [], [2], [], [], [0], [0, 1, 1, 1, 1], [1, 6, 2, 8, 4], [0, 1, 2, 0, 2], [0, 1], [2, 1, 3, 3, 3, 0, 0, 3, 2, 1, 1, 1, 3, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [1, 3, 3, 4, 4, 2, 1, 2], [2], [0, 0, 0], [4, 3, 4, 1, 4, 4, 2, 3], [1], [], [2, 0, 3, 0, 4, 4, 2, 2, 2, 0, 0, 4, 0, 1, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 1, 2, 2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 0, 0, 1, 5, 5, 4, 0, 15, 2, 5, 1, 1, 5, 0, 0, 13, 3, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( int(16.0) * max(len(in1[len((in0 + saveChr(i0).strip(in1[i1:][saveOrd(s1):][:divInt(int(2.0),int(8.0))]))):]), int(4.0)) ) \\le saveOrd(in1.capitalize()):{:\\nres0 = not i2 \\le i0\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 0, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 2, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 19, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(min(i2, ( i0 + mod(i0,int(17.0)) )), len(in2))), max(min(int(9.0), i2), int(8.0)))) \\l i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [2], [2, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 8, 5], [1, 2, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 1, 3, 3, 2, 2, 0, 3, 1, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 4, 2], [0], [1, 1, 1], [4, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\ns2 = s2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 4, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 2, 0, 2, 0, 0, 0, 1, 3, 0, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 6, 0, 19, 4, 6, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(( i1 * divInt(i0,i1) ), i2)), int(2.0))) \\l min(i1, len(in2)):{:\\nres0 = divInt(i1,int(6.0)) \\le int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [1, 1, 0], [0, 2, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(mod(len(s0),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(s2):{:\\nres0 = min(max(mod(i1,int(9.0)), int(7.0)), i1) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [2, 9, 9, 4, 1, 5, 5], [1, 0, 1, 0, 1, 0, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 1, 3, 3, 3, 3, 0, 1, 0, 0, 3, 1, 1], [1, 0, 1], [2, 1, 3, 1, 0, 3, 0, 1, 1, 1, 4], [1], [1, 0, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 6, 0, 23, 2, 11, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(mod(len(in0),max(min(i1, ( i0 - len(in2) )), i1)), int(2.0))) \\l min(max(max(max(i0, int(9.0)), i1), i0), saveOrd(in0)):{:\\nres0 = int(9.0) \\le int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [5], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 1, 1, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 7, 0, 22, 2, 8, 1, 1, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1.endswith(in2):{:\\nres0 = abs(max(divInt(len(in0),min(min(i1, ( i0 * i1 )), i1)), int(26.0))) \\l len((s2 + (in1[:max(max(i1, i1), int(9.0))][int(7.0):i2] + in2))[int(3.0):int(5.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 5, 7, 8, 3, 5, 5, 8], [0, 0, 2, 1, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 1, 0, 3, 1, 0, 2, 2, 2, 0, 3, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [2, 0, 3, 2, 1, 0, 1, 0, 1], [0], [1, 1, 1, 0], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(15.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [6, 7, 0, 8, 7, 7, 1], [2, 2, 2, 0, 2, 0, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1, 2, 0, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5, 1], [], [], [4, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0, 3, 2, 4, 0, 2, 0], [0, 3, 2], [4], [2, 2, 0, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 7, 0, 25, 8, 3, 5, 3, 7, 0, 0, 18, 3, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(s2, ( divInt(len((in2 + (in0[divInt(len(s2),( ( i2 + int(6.0) ) + int(7.0) )):int(0.0)][int(8.0):] + in1))[divInt(int(7.0),i2):].rstrip((in2.capitalize()[:int(7.0)] + s1[i2:]))),( i0 + int(1.0) )) * ( i2 - i0 ) ))) \\le i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 2, 2, 2, 1, 1, 1, 1, 0], [1], [1, 3, 2, 2, 3, 3, 3, 2, 3, 0, 3, 2, 0, 3, 0, 2, 1, 3, 0, 0, 1, 1, 1, 2, 0, 1, 3, 0, 0, 0], [1, 1, 1, 0, 1, 0], [2, 3, 4, 2, 0, 2, 1, 4, 2, 1], [0, 0], [1, 0, 1, 1, 1], [4, 5, 4, 2, 4, 4], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 5, 0, 21, 5, 8, 1, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(divInt(len(in1),saveOrd(in2)),abs(mod(min(i0, abs(( i2 + max(i2, mod(int(9.0),saveOrd(in1))) ))),i2)))):{:\\nres0 = i1 \\le int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 3, 0, 0, 1, 3, 3, 3, 0, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 19, 2, 9, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = abs(max(divInt(len(in1),min(min(i1, ( len(s0) * i0 )), i1)), int(26.0))) \\l min(max(max(i2, i1), int(9.0)), int(7.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [3, 4, 2, 8, 7, 7, 1], [1, 0, 1, 2, 0, 1], [1], [3, 3, 2, 3, 0, 3, 0, 1, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 2], [1, 0, 1], [2, 1, 0, 1, 0, 3, 0, 1, 1], [2], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 19, 2, 7, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(min(i1, max(i0, int(34.0))),i1), i2)) \\l i0:{:\\nres0 = int(2.0) \\le min(len(in1), min(( i1 * int(8.0) ), int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [4, 6, 9, 7, 1, 5, 5], [1, 0, 1, 2, 1, 0], [1], [3, 3, 2, 3, 3, 3, 3, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 1, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 5, 0, 23, 3, 9, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(len(s1), ( i1 * i0 )), i1)), int(46.0))) \\l min(max(max(mod(i2,int(9.0)), int(7.0)), i1), int(1.0)):{:\\nres0 = int(5.0) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 1, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(in1) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(5.0) ) + int(1.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 2, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 3, 0, 0, 0, 1, 3, 3, 3, 2, 2, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 4, 3, 0, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 1, 6, 0, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(mod(len(in1),min(saveOrd(in2), i1)), len(in0))) \\l i0:{:\\nres0 = i2 \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 3, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 5, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in2),( divInt(i2,int(9.0)) + int(7.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 3, 5, 5], [1, 0, 1, 1, 1, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 0, 3, 2, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1], [2, 1, 3, 0, 0, 3, 4, 1, 1], [2], [0, 0, 0, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 7, 0, 18, 4, 6, 0, 4, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(s2),min(min(i1, divInt(i0,i1)), i1)), int(29.0))) \\l divInt(i1,len(getCharFromString(in2, mod(i1,i2))))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 1, 2, 3, 0, 1, 0, 2, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 6, 0, 24, 7, 5, 5, 2, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(s1, ( divInt(len(in2),mod(len((in0 + (s2[( ( i0 + int(3.0) ) + min(int(2.0), int(2.0)) ):][:( min(i0, int(8.0)) + i1 )] + in1))[( i0 * int(7.0) ):]),i2)) - i2 ))) \\le int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [1, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 17, 3, 7, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = abs(max(( ( len(in1) + min(i2, mod(i1,i0)) ) * i2 ), int(17.0))) \\l min(len(s0), max(int(9.0), i0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 4, 0, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 0, 2, 3, 2, 3, 2, 2, 2, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 1], [2, 1, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 2, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 2, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(( ( divInt(i1,int(3.0)) + int(7.0) ) + int(9.0) ),int(8.0))) + ( int(7.0) * i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1, 1], [1], [3, 3, 2, 3, 2, 3, 1, 3, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1], [0, 1, 3, 0, 0, 3, 0, 0, 1], [2, 1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 2, 8, 2, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(max(( len(in1) * ( min(int(29.0), min(i1, i0)) - i1 ) ), int(9.0)), len(in2)) \\l min(min(int(7.0), i2), int(3.0)):{:\\nin0 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [1], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 2, 2, 2, 0, 1, 1, 1, 0], [1], [1, 3, 2, 2, 3, 2, 3, 2, 0, 0, 3, 2, 3, 3, 0, 2, 0, 3, 0, 0, 1, 1, 1, 2, 0, 1, 3, 0, 0, 0], [1, 1, 1, 0, 0, 0, 1], [2, 3, 3, 2, 0, 0, 1, 4, 3, 1], [2, 0, 1], [1, 1, 0, 1, 1], [4, 5, 4, 2, 4, 4, 4], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 4, 0, 0, 0], [0, 3, 2], [4], [0, 1, 2], [1], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 9, 0, 29, 7, 8, 3, 4, 7, 0, 0, 13, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(mod(len(in1),divInt(len(in2),( i0 * i2 ))),abs(( min(min(i2, ( i2 + max(i0, i1) )), int(9.0)) - int(8.0) )))):{:\\nres0 = in1 not in (s2 + (getCharFromString(in1, int(3.0))[mod(i1,int(5.0)):][:saveOrd(in1)] + in1))[i1:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 3, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0], [4, 3, 3, 3, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 1, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 1], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [2], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 2, 1, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 0, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 0, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 0, 0, 0, 1, 0, 1], [0], [1, 0, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 13, 2, 5, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nb2 = min(i0, ( i0 + i2 )) \\le min(int(9.0), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 0, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 1, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s2) \\le ( divInt(len(in2),divInt(max(( ( i2 + int(6.0) ) + int(7.0) ), int(0.0)),int(8.0))) + divInt(int(7.0),i2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 1], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0], [2, 3, 4, 2, 0, 0, 1, 0, 1], [0, 2], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 5, 0, 20, 4, 7, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l abs(mod(len(in1),saveOrd(in2))):{:\\nres0 = abs(min(( i0 + i0 ), min(int(0.0), i2))) \\g max(mod(( i2 * i0 ),int(9.0)), int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 3, 9, 7, 3, 5, 5], [1, 2, 1, 1, 2, 1, 2], [1], [3, 3, 1, 3, 3, 3, 3, 2, 0, 0, 0, 1, 2, 3, 3, 2, 0, 0, 2, 0, 1, 1, 1], [1, 0, 1, 0, 0], [2, 1, 3, 2, 0, 3, 4, 1, 1], [0, 0, 0], [0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 1, 6, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(int(23.0), len(in1))) \\l abs(min(len(in2), divInt(i1,i2)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le divInt(divInt(len(in2),divInt(len(in0),min(( int(3.0) + i0 ), int(4.0)))),int(2.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 5, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 2, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 6, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 6, 3, 3, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s2) \\le ( divInt(len(getCharFromString(in2, divInt(len((in0 + (s2[:i0][:( i0 + int(3.0) )] + in1))[int(4.0):]),( i1 + divInt(int(6.0),int(8.0)) )))),int(7.0)) + i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 6, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 2, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 8, 2, 5, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(divInt(( len(in2) + ( divInt(i0,int(3.0)) + int(7.0) ) ),( i0 + ( int(6.0) * int(8.0) ) )),int(7.0)) - i1 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 5, 5, 6, 0, 23, 4, 8, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), mod(len(in2),min(max(divInt(i1,int(2.0)), int(6.0)), i1)))) \\l int(9.0):{:\\nres0 = int(7.0) \\le int(3.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 0, 7, 3, 5, 5], [1, 0, 1, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 1, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 15, 3, 6, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l mod(int(0.0),len(in2))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 0, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 3, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 4, 0, 0, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 1, 6, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( saveOrd(in1) + min(min(i2, len(in2)), i0) ), i0)) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(in0[int(16.0):]) \\le len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 2, 1, 0, 1, 1], [1], [1, 3, 2, 2, 0, 3, 0, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 0, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0], [1, 0, 1], [4, 5, 4, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 5, 0, 13, 3, 3, 1, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(( i0 + len(in1[i0:divInt(i2,i1)]) ),len(in2))):{:\\nres0 = int(9.0) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [3, 1, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 3, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 1], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 0, 1], [2, 1, 3, 3, 0, 3, 0, 1, 1], [2], [0, 1, 0], [0, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 4, 0, 11, 1, 5, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(int(26.0), len(s0))) \\l len(in2):{:\\nres0 = min(i1, divInt(i0,i1)) \\g i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [1], [], [1], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 0, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 3, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 0, 0, 0, 0, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 0, 3, 2, 3, 0, 0, 0, 2, 0, 1, 3, 3, 3, 3, 0, 1, 1, 3, 0, 1, 1], [1, 0, 0], [1, 1, 3, 0, 0, 3, 0, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 0, 12, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(i1, len(in1)), divInt(min(i0, i1),i0)) \\l ( i1 - int(26.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [5, 7, 9, 8, 7, 7, 1, 5, 2, 7, 8, 9, 0], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1, 3, 2, 1, 1, 1], [0, 1, 1, 0, 1, 1, 0, 0], [3, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 4, 0, 26, 8, 4, 4, 4, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = len(s1) \\le ( divInt(len(in2),divInt(len(getCharFromString((in0 + (s2[( divInt(i2,int(5.0)) + int(7.0) ):int(9.0)][int(8.0):divInt(int(7.0),i2)] + in1))[int(7.0):], i2)),( i0 + int(1.0) ))) + min(( int(5.0) * int(278.0) ), int(90.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 4, 1, 5, 5], [0, 1, 1, 0, 1, 1, 0], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 1, 3, 3, 2, 0, 1, 1, 2, 0, 1, 1], [1, 0, 1, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1, 1], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 19, 4, 6, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(( len(s2) - min(i0, divInt(i1,i1)) ),i0), int(26.0))) \\l int(9.0):{:\\nres0 = min(len(in2), ( i1 - int(4.0) )) \\le int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 2, 6, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 1, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [2, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 13, 6, 2, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( divInt(divInt(saveOrd(s2),( len(in2) + ( divInt(i2,int(9.0)) + int(7.0) ) )),int(2.0)) + i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [0], [1, 1, 1, 1, 1], [1, 6, 2, 8, 4], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 1, 3, 0, 0, 3, 2, 1, 1, 1, 3, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 4, 4, 2, 1, 2], [2], [0, 0, 0], [4, 5, 4, 1, 4, 4, 2, 3], [1], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 1, 2, 2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 2, 2, 0, 0, 4, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(in1) == int(1.0):{:\\nres0 = len(in2) \\le int(6.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 0, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(3.0) ) + divInt(i2,int(7.0)) ))) + ( int(9.0) * i2 ) ):{:\\nres0 = int(8.0) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [1], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0 not in in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 1, 7, 3, 5, 5], [1, 1, 1, 2, 1, 1], [1], [3, 1, 3, 3, 1, 0, 3, 3, 3, 1, 1, 1, 3, 0, 0, 1, 0], [0, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 5, 0, 3, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(26.0)) \\l max(len(s2), int(1.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 3], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [1, 0, 2, 2, 0, 1, 1], [1], [2, 3, 3, 3, 2, 3, 3, 2, 0, 1, 3, 1, 3, 3, 3, 0, 0, 2, 0, 0, 1, 1, 1], [1, 1, 1, 0], [2, 3, 3, 1, 0, 3, 1, 1, 1], [0], [1, 1, 0], [4, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 5, 0, 23, 4, 9, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(abs(len(in1)),len(in1)) \\le mod(max(min(divInt(i1,int(17.0)), len(in0)), int(9.0)),max(max(max(i0, i2), ( i2 + i0 )), int(8.0))):{:\\nres0 = int(3.0) \\ge int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 2], [0, 5], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 2, 8, 5], [0, 1, 1, 1], [1], [1, 3, 2, 1, 3, 3, 2, 2, 0, 0, 3, 1, 3, 3, 2, 2, 0, 3, 1, 2, 1, 1, 1], [1, 0, 1, 1, 1], [2, 3, 3, 2, 4, 0, 1, 1, 2], [2], [1, 0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 0, 0, 5, 1, 2, 0, 1, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb2 = int(10.0) \\l abs(mod(int(9.0),len(in1)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = in0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 9, 7, 8, 7, 7, 1], [1, 0, 1, 0, 2], [1], [3, 1, 2, 3, 1, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0, 2], [0], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [9, 0, 9, 8, 3, 5, 5, 3], [2, 0, 1, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 1, 0, 0, 2, 2, 0, 3, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 0], [2, 3, 3, 2, 0, 1, 1, 1, 1], [0, 0, 0], [1, 1, 1], [2, 1, 4, 2, 4, 5], [], [0], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 6, 0, 24, 4, 7, 2, 2, 6, 0, 1, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in getCharFromString(s1, int(90.0)):{:\\nres0 = abs(mod(len(in1),len((s2 + (in1[abs(min(( i2 + i0 ), max(int(9.0), i1))):][i2:mod(( i0 + max(int(8.0), int(3.0)) ),int(5.0))] + in2))[i1:int(5.0)]))) \\l int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 2, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [3, 5, 2, 2, 4, 5], [], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 2, 0, 17, 7, 2, 5, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( ( divInt(( len(in0) + ( mod(i1,int(3.0)) + int(7.0) ) ),int(9.0)) + int(8.0) ) * ( int(7.0) - i2 ) )) \\le int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 6, 5], [1, 0, 2, 0, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 2, 0, 4, 1, 0, 1], [1], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 4, 0, 22, 4, 8, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(max(len(in1), abs(min(( i1 - i0 ), saveOrd(in2)))),int(9.0))):{:\\nres0 = i2 \\le max(mod(mod(i0,min(int(8.0), int(3.0))),int(6.0)), int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [1], [0, 1, 1, 1, 1, 1, 1, 1], [9, 5, 7, 8, 4, 5, 5, 8], [0, 0, 2, 1, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 1, 0, 1, 2, 0, 2, 2, 2, 0, 3, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0], [1, 0, 1, 0, 1, 0], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 8, 8, 3, 0, 22, 6, 6, 0, 6, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(95.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(min(divInt(int(7.0),i0), int(8.0))) \\le mod(i0,divInt(mod(divInt(i2,min(int(4.0), int(5.0))),int(5.0)),int(8.0)))\\n:}else:{:\\nin1 = s2\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 6, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\l ( divInt(len(in2),divInt(min(( ( i0 + int(9.0) ) + min(int(7.0), i2) ), divInt(int(2.0),i2)),int(8.0))) * i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [1, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [3, 7, 7, 1, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 1], [1, 0, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s2) \\g divInt(( len(in2) + divInt(len(in0),( divInt(i0,int(3.0)) + int(7.0) )) ),( i0 - divInt(int(7.0),int(1.0)) ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [0], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [0, 6, 9, 8, 3, 5, 5], [0, 0, 0, 0, 0, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2, 2], [1, 1, 0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = abs(max(mod(len(in1),min(min(i0, ( i0 * i0 )), i0)), int(06.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [0, 1], [0, 0], [], [0], [], [], [0], [0, 0, 1, 1, 1, 1, 1], [1, 5, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [3, 1, 0, 3, 0, 3, 1, 1, 3, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0, 2], [0], [0, 0], [], [], [3, 1], [0, 4], [0, 1], [0, 0], [], [1], [], [1], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 6, 7, 8, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 0, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 2, 4, 0, 1, 0], [0, 1, 2, 2, 1, 2, 0], [0, 1, 0], [1, 5, 4, 2, 4, 5, 1], [], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2:{:\\nres0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 0, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le ( divInt(len(s0),divInt(len(in0),( ( i0 + int(5.0) ) + int(7.0) ))) + int(4.0) ):{:\\nres0 = i0 \\le divInt(int(8.0),i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0], [1, 1, 1, 1, 1], [9, 6, 6, 8, 4], [0, 2, 2, 0, 2], [0, 1], [1, 1, 3, 2, 1, 0, 3, 3, 3, 1, 1, 1, 3, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 4, 4, 2, 1, 2], [2], [0, 0, 0], [3, 5, 4, 3, 4, 4, 2, 3], [1], [], [3, 0, 3, 0, 0, 1, 1, 0, 2, 0, 0, 4, 0, 1, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 2, 2, 2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 1, 0, 6, 1, 1, 1, 0, 3, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(9.0) \\le int(6.0):{:\\nres0 = saveOrd((in0 + (in2 + in1))) \\le ( int(6.0) * i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 2, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 0, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0], [1, 0, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 7, 0, 22, 4, 8, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(in1)) \\l mod(len(in2),abs(min(i0, ( i0 + i2 )))):{:\\nres0 = min(int(10.0), i1) != max(divInt(mod(i0,min(int(9.0), i1)),int(8.0)), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(saveOrd(in1),min(( int(5.0) + int(3.0) ), int(3.0)))) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [9, 0, 9, 8, 3, 5, 5], [0, 0, 2, 1, 0, 1, 1], [1], [1, 3, 2, 3, 0, 3, 3, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 0, 1, 0, 1], [1, 0, 1, 1], [2, 2, 3, 2, 0, 0, 1, 0, 1], [0], [1, 0, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 6, 1, 3, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(90.0) \\l abs(mod(abs(i0),len(in1)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [1, 5, 6, 0, 3, 5, 5], [1, 1, 2, 1, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 1, 3, 2, 3, 1, 1, 3, 2, 1, 0, 3, 0, 0, 3, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 4, 2, 2], [0], [1, 0, 0], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 2, 0, 19, 3, 9, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(min(int(5.0), min(( max(int(6.0), int(0.0)) + saveOrd(in1) ), divInt(int(3.0),i1)))) \\le abs(i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 0, 9, 8, 3, 5, 5], [0, 0, 2, 1, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 0, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 0, 1, 0, 1], [1, 0, 1, 1], [0, 3, 3, 3, 4], [0], [1, 0, 1], [4, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 1, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 3, 0, 10, 2, 4, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(20.0) \\l min(mod(len(in1),len(in2)), len(in1)):{:\\nres0 = i0 != ( i0 + i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 0, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [1, 0, 2, 1, 2, 1, 1], [1], [1, 3, 2, 3, 1, 3, 1, 2, 0, 1, 2, 3, 3, 3, 2, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0], [2, 3, 3, 0, 0, 3, 1, 0, 1], [0, 2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 5, 1, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(179.0) \\le abs(divInt(len(in1),int(8.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 5, 8, 7, 7, 1], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 2, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 7, 2, 3, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(( divInt(mod(i0,int(3.0)),int(3.0)) + int(5.0) ),i0)) + ( int(8.0) + i1 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 0, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(min(divInt(len(in2),( ( i2 + int(6.0) ) + int(7.0) )), int(9.0)),int(8.0)) + divInt(int(7.0),i2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 0], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 2, 8, 5], [0, 1, 1, 1, 2, 2, 2, 2], [1], [1, 3, 2, 2, 2, 3, 0, 2, 0, 3, 3, 2, 3, 3, 2, 3, 2, 0, 3, 0, 1, 3, 0, 0, 1, 1, 3, 2, 1, 2, 0, 0, 1], [1, 0, 1, 1, 1, 1, 0, 0, 0], [2, 3, 3, 2, 0, 0, 1, 4, 2, 0], [0, 1, 2, 2], [1, 1, 1, 1, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 8, 0, 33, 9, 10, 4, 5, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\le abs(mod(( mod(len(in1),i0) + mod(i1,len(in2)) ),abs(mod(min(min(divInt(max(( i1 - saveOrd(in0) ), i1),int(0.0)), abs(i2)), i2),int(9.0))))):{:\\nres0 = int(8.0) \\l min(( int(2.0) * ( i2 * i2 ) ), int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 2, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 5, 3, 4, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( abs(divInt(len(in2),( ( i2 + int(9.0) ) + int(7.0) ))) + int(2.0) ) * i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [2], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 6, 8, 2, 8, 5], [0, 1, 1, 1], [1], [1, 1, 2, 3, 3, 3, 2, 2, 0, 0, 3, 1, 3, 3, 2, 2, 0, 3, 1, 2, 1, 1, 1], [1, 0, 1, 1, 1], [2, 3, 3, 2, 4, 0, 1, 1, 2], [2], [1, 1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 3, 4, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l int(6.0):{:\\nb2 = mod(abs(len(in1)),len(in2)) != ( mod(i0,i1) * abs(int(8.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 4, 4, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( divInt(len(s2),mod(len(in2),min(( i0 + int(3.0) ), int(8.0)))) + int(2.0) )) == i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 1, 0, 1, 1, 0, 1], [0, 1], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 6, 0, 19, 2, 8, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + max(min(i2, ( i1 - i0 )), i2) ), int(10.0))) \\l max(max(min(int(9.0), i0), int(8.0)), i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 1, 5, 5, 3, 5], [1, 0, 2, 2, 2, 1, 1], [1], [3, 2, 2, 3, 2, 3, 2, 0, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 0, 1, 1, 0, 1], [2, 3, 3, 0, 0, 0, 1, 4, 1, 0], [0, 2], [1, 1, 1, 1], [4, 5, 4, 2, 0, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 3, 0, 13, 4, 3, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(mod(( len(in1) + mod(len(in2),mod(i1,i0)) ),int(10.0))) \\l int(9.0):{:\\nres0 = int(8.0) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 11, 2, 4, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(17.0)) \\l ( max(len(in1), min(i2, ( i1 + i0 ))) * i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 8, 3, 5, 5, 3], [1, 1, 2, 2, 2, 1, 1], [1], [2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 1, 3, 0, 2, 2, 0, 3, 0, 0, 1, 0, 1, 1], [1, 0, 1, 1, 1], [2, 3, 3, 2, 0, 0, 4, 3, 1], [0], [1, 1, 1, 0], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 7, 0, 24, 5, 8, 1, 4, 6, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(abs(( len(in1) + len(in2) )),abs(min(mod(i1,i1), min(int(10.0), saveOrd(getCharFromString((in1 + (s2[i2:][mod(divInt(i2,len(in1)),i2):] + in2))[i1:], int(4.0))))))) \\l i1:{:\\nres0 = int(8.0) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1], [3, 5, 9, 8, 4, 6, 7, 0], [0, 2, 1, 2], [0], [3, 3, 2, 3, 2, 2, 3, 3, 0, 1, 0, 1, 3, 3, 1, 0, 1, 1, 3, 0, 3, 1], [1, 0, 0], [2, 3, 3, 0, 3, 0, 3, 0, 2], [0, 1], [0, 0, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 4, 0, 22, 3, 9, 2, 1, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(in0)) \\l divInt(len(in2),( ( min(len(in0), i0) + int(35.0) ) - i2 )):{:\\nres0 = int(9.0) \\le min(len((s2 + (in1[:int(8.0)][i1:] + in2))[int(4.0):int(67.0)]), min(i2, abs(int(0.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [3, 7, 6, 1, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 1], [1, 0, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 7, 3, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le divInt(( len(in2) + divInt(len(in0),( divInt(i0,int(3.0)) + int(7.0) )) ),( i0 - mod(int(6.0),int(1.0)) )):{:\\nres0 = int(7.0) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [2, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 8, 3, 8, 7, 3], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 0, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 3, 0, 0, 4, 4, 1], [0], [1, 1, 1], [4, 5, 1, 2, 2, 4], [], [], [0, 0, 4, 0, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 2, 0, 10, 2, 4, 1, 1, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) == abs(mod(i2,len(in1))):{:\\nres0 = len(in2) \\le len(getCharFromString(s1, ( i1 + int(4.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 4, 0, 7, 7, 1], [1, 2, 1, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 3, 1, 2, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 18, 7, 4, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( ( min(int(3.0), mod(int(4.0),i1)) - ( int(4.0) + int(0.0) ) ) + int(7.0) ))) * i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 1, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [1, 1, 0], [2, 1, 3, 2, 0, 3, 0, 0, 1], [2, 2], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 10, 1, 5, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),abs(min(i1, int(1.0)))), i1)) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [0], [0, 1], [1, 0], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [0, 0, 0, 0, 0, 1, 1], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 3, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1], [4, 4, 3, 0, 0, 3, 0, 0, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(in1) \\l saveOrd(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [2], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 6, 0, 23, 3, 8, 1, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 == in2:{:\\nres0 = abs(max(divInt(len(in0),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len((s2 + (in1[min(max(mod(i0,int(9.0)), int(7.0)), i1):][:int(3.0)] + in2))[int(5.0):int(5.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 1, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(int(3.0),divInt(len(in2),( ( i1 + int(3.0) ) + int(9.0) ))) * int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 1, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [2, 1, 1, 4, 4], [1], [], [2, 0, 1, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 8, 1, 3, 1, 1, 1, 1, 0, 3, 0, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2[int(1.0):]) \\le max(int(6.0), divInt(len(\"\"f\"\"),i0))\\ni2 += i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 1, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 12, 2, 4, 2, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(17.0)) \\l ( max(len(getCharFromString(in1, max(i2, ( i1 + i0 )))), i2) - int(9.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [5, 1, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [0, 1], [3, 1, 2, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3], [0, 0, 1, 0, 1, 1, 0, 0], [4, 1, 3, 3, 4], [1, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 3, 4, 0, 4, 4, 2, 0, 0, 3, 0, 1], [2, 0, 0], [], [2, 1], [1], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 12, 2, 4, 2, 0, 4, 0, 0, 10, 3, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(51.0):]) \\le ( max(( len((in2.capitalize() + getCharFromString(getCharFromString(s1[:i0], i2), int(3.0)))) - len(in1) ), int(7.0)) - int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 336}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( int(5.0) + int(7.0) ) + int(4.0) ))) * int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\l ( divInt(len(in2),mod(len(in0),( ( i2 + int(3.0) ) + divInt(int(0.0),int(9.0)) ))) + ( int(8.0) * i2 ) ):{:\\nres0 = int(7.0) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(57.0))) \\l len(in1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 6, 5, 5], [1, 0, 2, 2, 0, 1, 1], [1], [0, 3, 2, 3, 3, 3, 3, 0, 1, 0, 3, 1, 1, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [0, 4, 3, 0, 0, 0, 1, 4, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 4, 0, 20, 3, 8, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 \\l min(mod(saveOrd(in1),len(in2)), min(min(i0, int(10.0)), i2)):{:\\nres0 = min(int(9.0), int(8.0)) \\le max(( mod(i2,saveOrd(in1)) + int(6.0) ), int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [3, 2, 2, 8, 7, 7, 1, 8, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 2, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 3, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 5, 0, 25, 8, 5, 5, 3, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2[mod(min(( ( divInt(int(3.0),min(int(2.0), i0)) + ( int(2.0) + i0 ) ) + int(8.0) ), i1),( i0 * int(7.0) )):]),min(int(7.0), i2)) - int(1871.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 5, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 0, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(s0),divInt(len(in0),( ( i1 + int(5.0) ) + int(5.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 0, 1], [2, 1, 0], [0, 2], [0], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [4], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1], [2, 6, 2, 7, 3, 5, 5, 2], [1, 1, 1, 2, 2, 1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 2, 0, 1, 3, 3, 3, 2, 0, 1, 2, 0, 1, 1, 1, 0, 0, 2, 3, 2, 1, 1, 2, 0, 3, 0, 3, 3, 0, 3, 0], [1, 0, 0, 0, 1, 1, 0, 0], [2, 2, 3, 0, 0, 3, 0, 2, 1, 0, 2, 2, 3], [1, 0, 0, 1, 1], [0, 1, 0], [4, 5, 3, 2, 4, 5, 1, 0, 1, 4, 2], [], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 0, 0], [0, 3, 2], [4], [0, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 8, 8, 11, 0, 39, 8, 13, 5, 3, 11, 0, 1, 14, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(abs(divInt(len(in1),min(min(i1, ( i1 - ( i1 + int(26.0) ) )), len(in2))))) \\l min(abs(( i2 + int(2.0) )), mod(i2,int(7.0))):{:\\nif int(3.0) \\le int(5.0):{:\\nloopBreak% = 0\\nfor in0 in s2:{:\\nres0 = (in1 + (in2[i1:][i0:] + s1))[divInt(max(( int(5.0) - int(2.0) ), ( i1 - min(i2, abs(abs(i1))) )),len(s0)):i1].startswith(s1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = s2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [2, 8, 2, 8, 7, 7, 1], [0, 2, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0], [2, 2, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 4, 0, 22, 8, 4, 4, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(max(mod(len(s2),min(( i0 + int(2.0) ), int(8.0))), divInt(divInt(( int(2.0) + i2 ),int(8.0)),i1)),( i0 + int(7.0) )) * int(71.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 18, 6, 3, 3, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2[divInt(len((in0 + (s2[:( ( i0 + int(3.0) ) + int(7.0) )][i2:] + in1))[i2:]),divInt(int(2.0),i0)):]),int(8.0)) + i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 5, 7, 0, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 0], [4, 1, 1, 0, 0, 3, 0, 0, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 20, 2, 8, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in1) \\l max(int(26.0), max(min(min(i1, divInt(i0,i1)), i2), int(5.0))):{:\\nres0 = len(in2) \\le min(min(( i1 * int(7.0) ), int(0.0)), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 1, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in2) + max(min(i2, ( i1 - i0 )), i2) ), i0)) \\l len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [6, 7, 8, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 5, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 4, 0, 21, 7, 3, 4, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(getCharFromString(in2, divInt(len((in2 + (s2[( ( i2 - int(6.0) ) + int(7.0) ):int(8.0)][:int(8.0)] + in1))[divInt(int(7.0),i2):]),int(7.0)))),i2) + ( i0 * int(1.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0], [0, 2], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 0, 1, 1, 1, 1, 1], [1, 5, 9, 8, 3, 8, 5], [1, 2, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 0, 3, 3, 2, 0, 0, 3, 1, 3, 3, 2, 2, 0, 3, 1, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 4, 2], [0], [0, 0, 0], [4, 5, 2, 1, 4, 5], [], [], [0, 3, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 5, 1, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(159.0) \\l abs(divInt(len(in1),i1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [4, 4], [2, 1], [0, 0], [5], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 2, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s2.endswith(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 1, 0, 1, 2, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 0], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2, 0, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 4, 7, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) * min(min(i1, ( i0 + int(26.0) )), i1) ), int(9.0))) \\l divInt(len(in2),abs(( i2 + int(7.0) )))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [0, 2], [0], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 0, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 2, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = abs(max(divInt(len(in0),min(min(i1, ( i0 + i1 )), i2)), int(26.0))) \\l len(s2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 0, 2, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 5, 2, 4, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( i0 + ( divInt(len(in2),( ( i0 + int(57.0) ) + int(4.0) )) * int(8.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [2, 2], [1, 2], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 0, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 0, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [0, 0, 1, 1], [3, 3, 3, 2, 0, 0, 1, 0, 1], [0, 0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 1, 10, 1, 5, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(109.0) \\g len(in1):{:\\nloopBreak% = 0\\nwhile ( len(in2) + len(in1) ) \\le abs(min(i0, i0)):{:\\ni2 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 0], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 0, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 0], [1], [3, 3, 3, 3, 2, 3, 0, 0, 0, 3, 0, 1, 2, 3, 3, 3, 3, 1, 1, 3, 0, 1, 1], [0, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 4, 0, 11, 1, 6, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(len(in1), min(( min(i1, i0) - i1 ), len(in2)))) \\l i0:{:\\nres0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 2, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 13, 5, 3, 4, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s2) \\le ( divInt(len(in2),( abs(( ( i2 + int(6.0) ) + int(7.0) )) + int(9.0) )) * int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [9, 7, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 2, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0], [2, 1, 1, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 13, 5, 3, 4, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(abs(( len(s1) + ( ( i2 - int(97.0) ) + int(2.0) ) )),int(8.0)) * i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 3, 8, 3, 5, 5, 3, 5], [1, 2, 2, 2, 2, 1, 1], [1], [1, 3, 2, 0, 3, 3, 3, 2, 1, 1, 3, 1, 3, 3, 2, 1, 1, 3, 3, 0, 2, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 0, 0, 0, 1, 4, 1, 0], [0], [1, 0, 1], [4, 5, 2, 2, 0, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 2, 0, 23, 4, 9, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(i1,len(in1))):{:\\nres0 = len(in2) \\le min(( int(3.0) + int(8.0) ), min(int(3.0), min(max(divInt(int(5.0),int(5.0)), saveOrd(s2)), max(i2, mod(int(3.0),int(5.0))))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 2, 2, 2, 0, 1, 1, 1, 0], [1], [1, 3, 2, 3, 3, 3, 3, 1, 3, 2, 3, 2, 0, 2, 0, 2, 0, 3, 0, 0, 1, 1, 1, 2, 0, 1, 3, 0, 0, 0], [1, 1, 1, 0, 1, 0], [2, 0, 3, 1, 0, 2, 1, 4, 2, 1], [0, 0], [1, 0, 0, 1, 1], [4, 5, 4, 2, 4, 4], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 6, 0, 26, 6, 8, 2, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(min(len(in1), max(min(int(9.0), abs(divInt(max(divInt(i0,( i2 + mod(i2,saveOrd(in2)) )), i2),i0))), int(8.0))),int(3.0))):{:\\nres0 = int(5.0) \\le ( i1 + int(5.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [3, 7, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 0, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3, 3], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 1, 2, 2, 0, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 3, 2, 3, 0, 3, 2, 0, 3, 0, 2, 0, 3, 0, 0, 1, 1, 1, 2, 0, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1, 0], [2, 3, 3, 2, 0, 2, 1, 4, 2, 1], [0, 0], [1, 0, 0, 1, 1], [4, 5, 4, 2, 4, 4], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 6, 0, 20, 4, 10, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nres0 = abs(len(in1)) \\l mod(len(in2),abs(min(abs(( max(i0, saveOrd(in1)) + divInt(i1,abs(i2)) )), ( i2 + max(i0, i1) ))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [5], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 5, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 2, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 2, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 6, 0, 22, 4, 6, 1, 3, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1.endswith(in2):{:\\nres0 = abs(divInt(( max(len(in0), min(i1, mod(i0,i1))) * i2 ),int(26.0))) \\l min(i1, len((s2 + (in1[:divInt(i1,int(5.0))][int(7.0):int(3.0)] + in2))[int(5.0):int(5.0)]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [7, 7, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 2, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(s2),( len(in0) + ( ( i0 + int(7.0) ) + int(7.0) ) )) * i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 1, 2, 1, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 2, 0, 1, 0, 1, 1, 1], [1, 0, 1], [2, 3, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 1, 0, 7, 1, 3, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(int(26.0)) \\l divInt(int(9.0),len(s1)):{:\\nres0 = len(in2) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 1, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [4, 1, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le ( divInt(len(s1),mod(saveOrd(in1),max(( int(5.0) + int(3.0) ), int(3.0)))) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [9, 0, 3, 2, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 4, 4, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le divInt(mod(len(in2),divInt(saveOrd(in1),min(( int(9.0) + int(0.0) ), int(3.0)))),int(2.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 18, 6, 3, 3, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(i0,mod(len(in2),( ( i0 - int(3.0) ) + len(getCharFromString((in0 + (s2[:int(2.0)][:i1] + in1))[divInt(int(2.0),i0):], int(8.0))) ))) + i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [2], [0, 0], [], [0, 0], [], [], [3, 0, 2], [0, 4], [1, 1, 0], [0, 0], [], [0], [], [], [], [0, 0, 1, 1, 1, 1, 1], [1, 0, 9, 0, 6, 5, 5], [1, 0, 1, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 0, 3, 2, 0, 0, 1, 1, 1, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [0, 3, 3, 0, 0, 0, 1, 4, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 3, 2, 3, 2, 0, 1, 0, 0, 0, 5, 5, 3, 0, 12, 2, 4, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(109.0) \\l min(mod(len(in1),len(in2)), i1):{:\\nres0 = min(( i0 + i1 ), int(0.0)) \\le int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 9, 9, 4, 1, 5, 0, 2, 7, 0, 2, 1, 4, 3, 3, 6, 9, 4, 7, 0, 3, 6, 4, 9, 5, 4, 8, 0, 4, 5], [1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 2], [1], [3, 3, 3, 3, 3, 3, 0, 2, 3, 1, 0, 1, 3, 3, 3, 2, 0, 2, 1, 0, 0, 1, 1, 1, 3, 2, 2, 2, 1, 2, 2, 0, 3, 0, 1, 2, 0, 1, 3, 2, 1, 1, 3, 1, 2, 1, 3, 2, 0, 2, 3, 3, 3, 3, 1, 1, 0, 0, 1], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0], [2, 1, 3, 0, 0, 2, 0, 1, 2, 0, 2, 2, 3, 0, 0, 0, 0, 2, 2], [1, 2, 1, 0, 1, 2, 2], [0, 0, 0, 0, 1, 0], [4, 2, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 30, 30, 11, 0, 59, 13, 19, 7, 6, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(len(in1[min(min(abs(i1), divInt(min(int(29.0), i0),int(9.0))), max(abs(min(( i1 - divInt(int(4.0),i0) ), i1)), int(1.0))):int(5.0)]), int(0.0))) \\le abs(( divInt(divInt(int(2.0),mod(( i1 * abs(i0) ),int(7021.0))),( i1 - int(4.0) )) + len(s2) )):{:\\nb2 = ( int(33694.0) - int(703.0) ) \\le min(int(64954.0), ( int(8.0) * min(divInt(i0,( min(min(abs(abs(int(0.0))), int(4.0)), i0) * i2 )), int(5.0)) ))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 0, 6, 5, 5], [1, 0, 1, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 1, 3, 0, 0, 0, 3, 1, 1, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 0, 0, 0, 1, 4, 1], [0], [1, 1, 0], [4, 5, 4, 2, 4, 5, 3, 2], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 5, 0, 22, 3, 7, 1, 2, 8, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l abs(mod(len(in1),len(in2))):{:\\nin1 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = (in2 + (in0[int(0.0):min(i1, i0)][:i1] + s2))[min(int(9.0), int(0.0)):min(( mod(i2,max(int(6.0), int(5.0))) + int(5.0) ), i0)]\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [1], [2, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 1, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2[saveOrd(s1):]\\ni0 += int(16.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 5, 9, 8, 4, 7, 9, 0, 9, 9], [0, 2, 1, 1], [0], [3, 3, 2, 3, 2, 2, 3, 3, 0, 1, 0, 1, 3, 3, 1, 0, 1, 2, 3, 1, 0, 3, 3, 1, 1], [1, 1, 1, 0], [2, 3, 3, 4, 0, 0, 3, 3, 1, 4], [0, 1], [0, 0, 0], [3, 5, 3, 2, 4, 5, 3, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 4, 4, 1, 0], [0, 3, 2], [4], [0, 1, 0], [1], [], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 10, 10, 4, 0, 25, 4, 10, 1, 3, 8, 1, 0, 16, 2, 1, 3, 1, 0, 1, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(in0)) \\l divInt(len(in2),divInt(divInt(saveOrd(in0),min(i0, int(35.0))),i2)):{:\\nres0 = int(9.0) \\le min(len((s2 + (in1[int(8.0):i1][:int(4.0)] + in2))[( len(in0) + int(7.0) ):i1]), max(saveOrd(getCharFromString(\"\"f\"\".rstrip(in2), int(9.0))), int(099.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 3, 8, 7, 7, 1], [1, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += saveOrd(in1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [6, 7, 0, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 4, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 4, 0, 21, 7, 4, 4, 3, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(len(getCharFromString(s2, divInt(saveOrd(in2),( ( i2 * int(6.0) ) + int(7.0) )))),min(int(0.0), divInt(int(8.0),i2))) + int(7.0) ), i2) \\le ( i0 * int(7.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [1, 0, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(3.0) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 4, 1, 5, 5], [1, 0, 1, 0, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1], [0, 0, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 6, 0, 23, 3, 9, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in2),min(min(i1, ( i0 - i1 )), i0)), int(29.0))) \\l len(in2):{:\\nres0 = min(max(divInt(i1,int(9.0)), int(4.0)), i1) \\le max(int(1.0), int(5.0))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [1, 1, 0, 1, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 4, 3, 0, 0, 3, 1, 0, 1], [1, 2], [1, 1, 0], [4, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 11, 2, 5, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(saveOrd(in1)) \\l ( len(s0) - min(min(int(1.0), ( i1 * i1 )), i0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 0], [0, 0], [], [3, 1], [1], [1], [0], [0, 0, 1, 1, 1], [1, 6, 6, 8, 4], [0, 2, 2, 0, 2], [0, 1], [3, 1, 0, 2, 1, 0, 3, 3, 3, 1, 1, 1, 3, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 4, 4, 2, 1, 2], [2], [0, 0, 0], [3, 5, 4, 3, 4, 4, 2, 3], [1], [], [2, 0, 3, 4, 3, 1, 1, 0, 2, 0, 0, 4, 0, 1, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 2, 2, 2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 0, 2, 1, 1, 0, 3, 3, 1, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(in0[int(166.0):]) \\le i0 or False )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 2, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 1, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 13, 1, 6, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, int(26.0)), i2)), i1)) \\l i0:{:\\nres0 = int(9.0) \\le len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 2, 3, 0, 1, 1], [1], [0, 1, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 6, 0, 20, 4, 7, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(( len(in2) - min(i1, mod(i1,i1)) ),i2), int(26.0))) \\l abs(len(in2)):{:\\nres0 = min(divInt(i1,int(9.0)), int(7.0)) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 2, 1, 1, 2, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 2, 0, 2, 2, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0, 0, 0, 0], [0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 6, 0, 23, 6, 7, 4, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i2 + i1 )), i1)), int(26.0))) \\l mod(len(in2),min(( i2 + ( ( i1 + int(9.0) ) + int(7.0) ) ), int(3.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( int(3.0) + int(7.0) ) + int(2.0) ))) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( min(i0, int(0.0)) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 2, 1, 2, 0, 1, 1, 1, 0], [1], [1, 3, 0, 3, 3, 3, 3, 2, 3, 0, 3, 2, 0, 3, 0, 2, 0, 3, 0, 0, 1, 1, 1, 2, 0, 1, 3, 0, 0, 0], [1, 1, 1, 0, 1, 0], [2, 3, 3, 2, 0, 0, 1, 4, 2, 1], [0, 0], [1, 1, 0, 1, 1], [4, 5, 4, 2, 4, 4], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [2], [0, 2], [], [0, 0], [], [], [2], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 1, 2, 1, 1, 1], [1], [1, 2, 2, 3, 2, 3, 3, 2, 0, 0, 3, 1, 0, 1, 2, 1, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 2, 4, 0, 1, 0, 1], [0], [1, 0, 0, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 4, 4, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(1.0) \\l mod(( abs(divInt(len(in1),len(in2))) + divInt(i0,i0) ),abs(int(0.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 0, 9, 8, 2, 8, 5], [0, 1, 1, 1, 2, 0], [1], [1, 3, 2, 2, 3, 1, 2, 2, 0, 0, 2, 2, 3, 3, 2, 2, 0, 0, 3, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 0, 0], [2, 3, 3, 2, 0, 0, 1, 4, 2], [0, 2], [1, 1, 1, 1, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 6, 0, 24, 8, 5, 2, 6, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(20.0) \\l abs(mod(mod(len(in1),int(9.0)),mod(mod(i0,i1),mod(mod(len(in2),abs(( ( i1 + i1 ) * min(i2, int(8.0)) ))),int(2.0))))):{:\\nres0 = int(8.0) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 8, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(6.0) ))),int(8.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3, 3], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 4, 5, 3], [2, 2, 1, 0, 2], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 1, 3, 3, 1, 1, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 1, 3, 4, 4, 1], [2], [1, 1, 1], [4, 5, 4, 3, 0, 5], [], [], [0, 0, 0, 2, 3, 0, 2, 0, 2, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 0, 0, 5, 1, 3, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nres0 = int(10.0) \\l abs(mod(len(in1),len(in2)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 2], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 7, 7, 3, 5, 5], [1, 0, 1, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 1, 2, 3, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 1, 1, 1], [2, 1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [3], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 5, 5, 5, 2, 9, 0, 9, 9, 2, 8, 0, 2], [2, 0, 1, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 2], [1], [3, 2, 2, 3, 1, 3, 3, 2, 0, 0, 0, 1, 0, 3, 2, 2, 0, 0, 1, 1, 2, 0, 1, 3, 2, 0, 2, 3, 2, 1, 2, 1, 1, 3, 1, 3, 0, 2, 2, 0, 3, 0, 3, 1, 3, 2, 2, 1, 3, 0, 2, 1, 1, 1, 3, 3, 3, 1, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0], [2, 3, 3, 2, 0, 0, 1, 0, 1, 1, 0, 0, 1, 4, 1, 4], [0, 0, 2, 0, 1, 2], [1, 1, 1, 0, 1, 0, 1, 0, 0], [4, 5, 4, 2, 4, 5, 5, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 2, 0, 0, 0], [0, 3, 2], [4], [0, 0, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 16, 16, 14, 0, 60, 15, 16, 6, 9, 8, 0, 0, 14, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 != in2:{:\\nres0 = abs(mod(( len(in1) + int(10.0) ),len((s2 + (in1[abs(mod(i2,i0)):][i1:int(9.0)] + in2[i0:]))[min(mod(( i0 + i1 ),int(8.0)), int(5.0)):divInt(i1,int(5.0))]))) \\l min(mod(i1,( max(( int(5.0) * divInt(int(2.0),int(9.0)) ), min(int(0.0), max(i1, ( mod(i2,max(i0, min(int(9.0), min(divInt(divInt(int(9.0),max(i1, ( int(2.0) + int(8.0) ))),int(0.0)), saveOrd(in2))))) - max(saveOrd(in0), int(2.0)) )))) * i0 )), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 5, 8, 7, 7, 1], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 0, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 4, 3, 2, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(max(i0, len(in2[divInt(( i0 + int(5.0) ),int(7.0)):])),int(5.0)) + i1 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [0], [4, 3], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [1, 0, 2, 2, 0, 1, 1], [1], [1, 2, 2, 3, 2, 1, 3, 2, 0, 1, 3, 1, 3, 3, 3, 0, 0, 2, 0, 0, 1, 1, 1], [1, 1, 1, 1], [2, 3, 3, 0, 0, 3, 1, 0, 1], [0], [1, 1, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 17, 4, 6, 0, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(17.0) \\le mod(mod(abs(divInt(int(9.0),len(in1))),divInt(i1,int(8.0))),len(in2)):{:\\nb0 = int(3.0) \\ge min(min(len(in0), i0), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 6, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [2, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 0, 1, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 8, 2, 4, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = divInt(divInt(divInt(saveOrd(s2),( len(in2) + ( divInt(i0,int(3.0)) + int(7.0) ) )),( i0 + ( i1 * int(6.0) ) )),int(8.0)) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 0, 9, 7, 3, 5, 5], [1, 2, 1, 1, 2, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 2, 0, 0, 2, 0, 1, 1, 1], [1, 0, 0, 0, 0], [2, 1, 3, 0, 0, 2, 0, 1, 1], [0, 0, 0, 1], [0, 1, 1], [4, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 7, 0, 22, 5, 7, 4, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i2 + i1 )), i1)), int(20.0))) \\l ( abs(min(( i2 + i1 ), ( i2 + int(9.0) ))) - int(7.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 7, 7, 1], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 2, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(( ( divInt(i0,int(5.0)) + int(7.0) ) * int(4.0) ),i0)) + ( int(8.0) * i1 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 3, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 1, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 19, 2, 9, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + max(min(i2, ( i1 - i0 )), len(in2)) ), int(17.0))) \\l max(min(max(int(9.0), i2), int(8.0)), i0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [7, 1, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2, 2, 2], [1], [3, 2, 2, 3, 2, 3, 3, 0, 1, 1, 1, 2, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 2, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 7, 0, 28, 8, 6, 5, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(saveOrd(getCharFromString((in1 + (s2[min(i0, int(7.0)):][int(1.0):int(3.0)] + in1))[( abs(( int(6.0) + i0 )) + min(i1, divInt(i0,int(7.0))) ):], i2)),( ( i2 * int(79.0) ) * int(6.0) ))) - i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [4, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2, 2, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 0, 3, 3, 3, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0, 4, 1], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 1, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 7, 0, 28, 8, 7, 5, 3, 6, 0, 0, 12, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1[( divInt(len(in2),divInt(len((in0 + (s2[:( ( int(4.0) + int(7.0) ) + min(int(4.0), i0) )][:divInt(int(8.0),i0)] + in1))[:int(7.0)]),i1)) + ( i0 * int(7.0) ) ):]) \\le ( i2 - min(saveOrd(in2), max(i2, i2)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 2], [2], [0, 2], [], [0, 0], [], [], [3], [4, 3], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 9, 3, 5, 5], [1, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 1, 3, 1, 3, 2, 3, 0, 0, 0, 2, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0], [2, 3, 3, 0, 0, 3, 1, 0, 1], [0], [1, 1, 0, 0], [5, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 6, 0, 24, 5, 7, 1, 4, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) \\le abs(mod(len(getCharFromString(in2, mod(len(in2),min(divInt(i1,int(9.0)), min(int(9.0), len((in0 + (s2[:divInt(max(i0, i2),i2)][( i0 + int(3.0) ):] + in1))[int(5.0):int(5.0)])))))),i1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [0, 1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [1], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 18, 4, 7, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(( len(in1) - min(i1, mod(i0,i1)) ),i2), int(26.0))) \\l min(len(in2), abs(divInt(i1,int(9.0))))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 3, 1, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 6, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(len(s2),mod(len(in2),max(( i0 + int(3.0) ), int(8.0)))) + ( i2 + divInt(int(2.0),i1) ) ), int(8.0)) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [3, 5, 9, 8, 4, 0, 9, 4, 6, 3, 4], [0, 1, 1], [0], [3, 3, 2, 3, 2, 2, 3, 3, 0, 1, 0, 1, 3, 3, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1, 0, 0], [1, 3, 3, 0, 0, 0, 3], [0, 1], [0, 0, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 11, 11, 3, 0, 18, 3, 7, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(len(in0), divInt(len(in2),( divInt(min(min(i0, int(35.0)), i1),int(9.0)) + min(len(in0), int(8.0)) ))) \\l i1:{:\\nres0 = int(4.0) \\le int(094634.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [1], [4, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [0, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 1, 3, 1, 3, 3, 3, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1], [2, 3, 3, 0, 0, 3, 1, 0, 1], [0], [1, 1, 0], [4, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 5, 0, 19, 3, 8, 0, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\le abs(mod(len(in1),mod(len(in2),min(divInt(i0,int(7.0)), min(int(9.0), len(s0)))))):{:\\nb1 = max(min(i0, i2), i2) \\ge i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 3, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 22, 7, 6, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(saveOrd(in1),( ( int(5.0) + int(3.0) ) + int(3.0) ))) * min(min(divInt(int(6.0),i0), min(i0, ( i1 * int(7.0) ))), i0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 4, 3, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 1], [2, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(3.0) \\le ( divInt(saveOrd(s2),( len(in0) + ( ( i0 + int(4.0) ) + len(in0) ) )) * int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 0, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 1, 4, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le i0\\ni2 += int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 6, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 3, 1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 18, 7, 4, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(in1) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + min(int(3.0), divInt(i0,( int(7.0) + int(6.0) ))) ) + int(8.0) ))) * i1 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 2, 2, 2, 0, 1, 3, 1, 3, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 3, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 1, 0], [2, 2, 3, 2, 4, 5], [1], [], [0, 0, 0, 1, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 1], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 14, 6, 4, 2, 4, 3, 1, 0, 4, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(len(s2),mod(mod(( divInt(i0,int(3.0)) + len(in0) ),int(7.0)),len(\"\"U\"\"))) + i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [6, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [0, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [1, 1, 0, 1, 2, 1], [0, 1, 0], [3, 1, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(66.0):]) \\le len(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [2, 2], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 5, 3, 3, 7, 7, 9, 6, 8, 9, 5, 2, 2], [1, 0, 1, 0, 2, 2], [1], [3, 2, 2, 3, 2, 3, 3, 3, 1, 1, 0, 3, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0], [1, 3, 4, 0, 0, 0, 4, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 1], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [5, 6, 7, 7, 3, 5, 5], [1, 0, 1, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 2, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1, 0], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 19, 5, 6, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(56.0))) \\l mod(divInt(len(in2),( i0 + int(7.0) )),int(7.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [1, 1], [4, 4], [0, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 2, 1], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 7, 7, 3, 5, 5], [1, 0, 1, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 6, 0, 22, 3, 8, 1, 2, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(getCharFromString(in1, min(min(i1, ( i0 * i1 )), i1))),int(26.0)), len(in2))) \\l min(max(mod(i1,int(7.0)), int(7.0)), i1):{:\\nres0 = int(3.0) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [0, 2], [], [0, 0], [], [], [3], [2, 3], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [1, 0, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 1, 0, 1, 3, 1, 3, 3, 3, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1], [2, 3, 3, 0, 0, 3, 1, 0, 1], [0], [1, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 5, 5, 1, 0, 13, 2, 6, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(17.0) == abs(mod(len(s1),mod(len(in2),min(int(9.0), i1)))):{:\\nres0 = int(8.0) \\ge min(int(3.0), len(in0))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 7, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0], [2, 0, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(s0),divInt(len(in0),( ( i2 + int(9.0) ) - int(7.0) ))) + int(7.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 1, 7, 3, 5, 5], [1, 2, 1, 1, 2, 1, 2], [1], [3, 3, 2, 3, 3, 3, 2, 2, 0, 0, 0, 1, 2, 3, 3, 2, 0, 0, 2, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0, 0, 0, 0, 0], [0, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 7, 1, 22, 6, 7, 5, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += abs(max(divInt(len(in1),min(min(( divInt(i2,i1) + i1 ), int(29.0)), ( len(in2) + min(( i2 + i1 ), ( i2 + int(1.0) )) ))), int(7.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 9, 9, 4, 3, 3, 5], [1, 1, 1, 0, 1, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 3, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 4], [1], [0, 0, 0], [3, 1, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 6, 0, 21, 2, 10, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in0),min(min(i1, len(s1)), i1)), i1)) \\l i0:{:\\nres0 = int(2.0) \\le min(max(max(( i1 - int(9.0) ), int(9.0)), i2), saveOrd(in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 9, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 0, 1, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( i2 * int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 9, 2, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 1, 2, 3, 2, 3, 2, 1, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 2, 0, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\l int(9.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 0, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 4, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 4, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(17.0):]) \\le i0\\ni2 += i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 1, 9, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 8, 2, 6, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(( ( ( ( int(4.0) + int(7.0) ) + int(1.0) ) + i0 ) * ( int(9.0) - i0 ) ),int(7.0))) * i1 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 2, 3, 5, 3, 3], [0, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 0, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 4, 4, 1], [0], [1, 0, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l abs(mod(i0,len(in1)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 0, 4, 8, 5, 5, 5, 3, 2, 9, 9], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 2, 3, 3, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 1, 1, 2, 1, 0, 2, 0, 2, 1, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 2, 0, 0, 4, 3, 1], [2, 2, 0], [1, 1, 1, 0, 0, 0], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 11, 11, 6, 0, 32, 9, 8, 3, 6, 6, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),( len(in2) * abs(mod(i2,mod(min(min(saveOrd(getCharFromString((in1 + (s2[int(4.0):][( ( i1 * len(in1) ) + i2 ):] + in2))[i2:], int(8.0))), int(5.0)), int(5.0)),int(5.0)))) ))):{:\\nres0 = divInt(int(3.0),i2) \\le divInt(i1,divInt(int(29.0),int(9.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [1, 1], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [3, 5, 9, 8, 4, 3, 5, 6, 9, 8, 9, 3, 1], [0, 2, 1, 1], [0], [3, 3, 2, 3, 2, 2, 3, 3, 0, 2, 0, 1, 3, 3, 3, 0, 1, 2, 3, 1, 1, 1, 1, 2, 2, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0], [2, 3, 3, 0, 0, 0, 3, 4, 4], [2, 1], [0, 0, 0, 0, 0], [3, 5, 3, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 0], [0, 3, 2], [4], [0, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 13, 13, 4, 0, 30, 7, 9, 2, 5, 7, 0, 0, 13, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(in0)) \\g divInt(len(in2),( divInt(min(min(i0, divInt(i2,int(35.0))), min(len(in0), saveOrd((s2 + (in1[:i1][int(9.0):] + in2))[divInt(saveOrd(getCharFromString(s1, int(8.0))),int(4.0)):int(3.0)]))),int(569.0)) * divInt(( int(8.0) - int(9.0) ),int(3.0)) )):{:\\nres0 = i1 \\g int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [1, 4], [2, 1], [0, 0], [2], [], [], [], [], [1, 1, 1, 1, 1], [2, 4, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 0, 2, 1, 0, 1, 0, 1, 0, 2, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5, 1], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 16, 5, 4, 2, 3, 7, 0, 0, 13, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s2 == in2[saveOrd((in0 + (s2[:divInt(( len(in1) - divInt(len(in2),min(divInt(i2,int(2.0)), i2)) ),( int(4.0) + i2 ))][int(9.0):] + s1))[i0:]):]\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 8, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 3, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 2, 2, 4, 0, 13, 2, 6, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(len(in2), i1)), ( i0 * i1 ))) \\l i0:{:\\nres0 = int(26.0) \\le len(in0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [1, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [2, 0, 1, 0, 2], [0], [3, 2, 2, 3, 2, 3, 3, 3, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [0, 1], [0, 0], [], [1], [], [1], [], [1, 1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [2, 1, 4, 0, 0, 3, 0, 1, 1], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 1, 2, 0, 1, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 10, 4, 1, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(int(4.0),divInt(i1,int(7.0))) + ( i2 + int(9.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [7, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 3, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 2, 0, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 14, 5, 4, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),min(( int(3.0) + int(8.0) ), int(2.0)))) + ( i0 + i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 3, 8, 3, 5, 5, 9, 5], [1, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 3, 2, 1, 3, 3, 0, 0, 2, 1, 1, 1, 1], [1, 0, 1, 1], [2, 2, 3, 0, 0, 4, 1, 4, 1, 0], [0], [1, 1, 1], [4, 5, 4, 2, 0, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 3, 0, 24, 4, 10, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(abs(len(in1)),min(min(( i1 + int(3.0) ), saveOrd(in2)), int(8.0)))):{:\\nres0 = max(saveOrd(in1), mod(int(3.0),max(min(i1, i2), mod(int(5.0),int(5.0))))) \\le int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 7, 5, 1, 5, 5], [0, 0, 1, 0, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1], [0, 0, 0], [4, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i0, ( i0 - i1 )), i0)), int(26.0))) \\l len(in1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 5, 7, 8, 3, 5, 5, 8], [1, 0, 2, 1, 0, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 1, 0, 3, 1, 0, 2, 2, 2, 0, 3, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0, 2, 0], [0, 1, 1, 0], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 3, 0, 22, 6, 6, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l abs(divInt(len(in1),( len(in2) + abs(mod(int(7.0),i1)) ))):{:\\nres0 = min(int(8.0), i0) \\le ( mod(( i2 * min(int(3.0), int(5.0)) ),int(5.0)) + int(8.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [2, 0, 2, 2, 0, 1, 1], [1], [1, 1, 2, 3, 3, 2, 3, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0], [2, 3, 3, 3, 0, 1, 3, 1, 1], [0, 0, 0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l int(9.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 4, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in0),divInt(len(in0),divInt(( i2 + int(6.0) ),int(7.0)))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 2, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 2, 3, 2, 4, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 7, 7, 1], [1, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 1, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),( len(in0) + ( int(3.0) + i1 ) )) + int(7.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3, 0], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5, 3], [2, 2, 2, 0, 2], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 3, 2, 1, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 1, 0, 4, 4, 1], [2], [1, 1, 1], [4, 5, 4, 3, 0, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 2, 4, 0], [2, 3, 2], [4], [2, 1, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 0, 0, 5, 1, 3, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb0 = int(10.0) \\l abs(mod(len(in1),len(in2)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3, 2], [0, 4], [1, 0], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 8, 3, 5, 5, 3], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 3, 3, 3, 0, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 4, 3, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(len(in1)):{:\\nres0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 3], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [1, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 0, 0, 1, 3, 1, 3, 3, 3, 0, 3, 0, 0, 0, 1, 1, 1], [1, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0], [1, 0, 0], [4, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 21, 2, 9, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(17.0) \\le abs(mod(max(divInt(len(in1),min(i1, i0)), int(9.0)),min(int(8.0), len(in1)))):{:\\nres0 = max(min(i2, max(i2, i0)), i1) \\ge int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 6, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [2, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( divInt(mod(saveOrd(s2),( len(in2) + len(in0) )),( i0 + int(3.0) )) + int(8.0) ) \\le int(6.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [0, 1], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s2) \\ge ( divInt(len(in2),divInt(len(in0),( ( i2 + int(9.0) ) + int(7.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [2, 0, 1, 2, 0, 1, 1], [1], [1, 0, 2, 1, 2, 3, 3, 2, 0, 0, 3, 1, 0, 0, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0], [2, 3, 3, 2, 0, 1, 1, 1, 1], [0, 0, 0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 0, 11, 3, 3, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l i2:{:\\nres0 = mod(int(9.0),( abs(len(in1)) + mod(i0,i1) )) \\le len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [1], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 4, 1, 5, 5], [0, 0, 1, 0, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 1, 3, 0, 0, 0, 1, 3, 3, 2, 2, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1], [0, 0, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 5, 5, 6, 0, 21, 3, 8, 1, 2, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in0),min(min(int(26.0), len(in2)), i0)), i0)) \\l i1:{:\\nres0 = int(9.0) \\le min(max(( divInt(i0,int(4.0)) - int(1.0) ), i1), i1)\\n:}else:{:\\nin0 = s2\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 4, 7, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 2, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1], [2, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 4, 4, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(abs(int(3.0)),( i0 + int(4.0) ))) + min(int(4.0), i0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1, 2], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 2, 1, 1, 3, 0, 1, 1, 3, 0, 1, 0], [1, 0, 1, 1, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 7, 0, 27, 5, 9, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(( len(in1) * min(i1, mod(i0,i1)) ),i2), int(2.0))) \\l min(len(in2), min(divInt(( int(6.0) + int(9.0) ),max(i1, int(7.0))), int(3.0))):{:\\nres0 = max(i1, int(5.0)) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 2, 1, 1, 2, 1, 2], [1], [3, 3, 2, 3, 1, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 2, 0, 0, 2, 0, 3, 1, 1], [1, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0, 0, 0], [0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),int(26.0)), min(i1, ( i2 + i1 )))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [5, 7, 4, 8, 7, 7, 1, 3, 9, 6], [1, 0, 1, 0, 2, 1, 1, 1, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 0, 3, 2, 2, 1, 0, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 9, 0, 30, 10, 4, 7, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(getCharFromString((in0 + (s2[( ( i1 + int(5.0) ) + int(7.0) ):int(4.0)][i0:divInt(int(8.0),i1)] + in1))[int(7.0):], i0)),( i2 + int(7.0) ))) * ( i1 - min(( ( int(1396.0) * i1 ) + i1 ), i2) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 4, 4, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 0, 2, 3, 2, 3, 2, 2, 1, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 5, 7, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 2, 0, 0, 0, 1, 1], [1, 0, 1, 0], [2, 1, 3, 0, 0, 3, 2, 0, 1], [2, 0, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 9, 1, 21, 4, 8, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(25.0))) \\l len(in2):{:\\ni1 += abs(min(mod(i1,( i1 + i1 )), i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [7, 6, 9, 8, 3, 5, 5], [0, 0, 0, 2, 0, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [1, 0, 0], [2, 1, 3, 3, 0, 3, 0, 0, 1], [1, 2], [1, 1, 0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 2, 5, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),len(in2)), min(i0, ( i0 - i0 )))) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [0], [], [], [0], [0, 0, 1, 1, 1], [1, 6, 6, 8, 4], [0, 2, 2, 0, 2], [0, 1], [3, 1, 3, 2, 1, 0, 3, 3, 3, 1, 1, 1, 3, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [4, 4, 3, 4, 4, 2, 1, 2], [2], [0, 0, 0], [3, 5, 4, 3, 4, 4, 2, 3], [1], [], [2, 0, 3, 0, 3, 1, 1, 0, 2, 0, 0, 4, 0, 1, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 2, 2, 2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 2, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 1], [2, 1, 0, 0, 0, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 6, 0, 19, 2, 8, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( min(min(min(i2, mod(i2,i0)), i2), int(17.0)) + len(in1) ), max(min(int(9.0), i0), int(8.0)))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [1], [3, 2, 2, 1, 2, 3, 3, 3, 3, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 3, 5, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\l ( mod(int(5.0),mod(len(in2),saveOrd(in1))) + min(min(int(3.0), int(3.0)), int(6.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 8, 8, 3, 5, 5], [2, 0, 1, 2, 0, 1, 1], [1], [2, 3, 2, 3, 2, 3, 3, 2, 0, 0, 3, 1, 0, 0, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0], [2, 3, 3, 2, 0, 1, 1, 1, 1], [0, 0, 0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 14, 4, 5, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = mod(abs(( len(in1) + mod(len(in2),abs(( i2 + i0 ))) )),min(int(10.0), i1)) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 1, 8, 7, 7, 1, 8, 2], [0, 2, 0, 0, 2, 0, 2, 0], [0, 1], [3, 2, 2, 2, 2, 3, 3, 2, 2, 1, 1, 2, 1, 2, 3, 2, 1, 0, 2, 0, 1, 1, 2, 0, 2, 3, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0, 2, 2], [0, 1, 1, 1, 1], [4, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 8, 0, 36, 14, 5, 9, 5, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(mod(( len(in1) + len(in2) ),( mod(int(3.0),int(2.0)) - ( int(1.0) + ( min(mod(int(8.0),i0), ( i2 * int(7.0) )) - int(7.0) ) ) )),( i0 * mod(min(( int(1.0) + int(8.0) ), i0),( i2 * i0 )) )) * i2 ), int(2.0)) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [3, 1, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [0, 1], [3, 1, 3, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3], [0, 0, 1, 0, 1, 1, 0, 0], [4, 1, 3, 3, 4], [1, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 3, 0, 0, 4, 4, 2, 0, 0, 3, 0, 1], [2, 0, 0], [], [2, 1], [1], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 9, 1, 4, 1, 0, 4, 0, 0, 9, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(in0[int(31.0):]) \\le max(len((in2 + s1)), ( len(getCharFromString(in1[:i0], i2).capitalize()) - int(3.0) ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 2, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 1, 0], [2, 1, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 13, 5, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(abs(mod(len(s1),( ( i2 + int(6.0) ) - int(7.0) ))),int(9.0)) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 2, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 1, 1, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 11, 4, 3, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(abs(( len(in2) + ( i0 + i2 ) )),int(3.0)) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5], [0, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [1, 1, 0], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2, 2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 1, 12, 2, 5, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(max(divInt(len(in1),min(min(i2, mod(i1,i2)), i1)), int(1.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 2, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 2, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 17, 6, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(s2),divInt(abs(( ( i2 * int(9.0) ) + int(7.0) )),min(i2, divInt(int(9.0),i2)))) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 7, 7, 3, 5, 5], [1, 2, 1, 2, 0, 1], [1], [3, 3, 2, 3, 0, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),i1), min(i2, ( i1 * i2 )))) \\l i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 5, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le divInt(( len(in2) + divInt(len(in2),divInt(( i0 + int(5.0) ),int(7.0))) ),int(4.0)):{:\\nres0 = i0 \\le ( int(8.0) + i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 1], [0, 0, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2) \\le ( i2 * len(in2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 5, 6, 0, 3, 5, 5], [1, 1, 2, 1, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 2, 3, 1, 3, 3, 2, 1, 0, 3, 0, 0, 1, 1, 1], [1, 0, 1, 0], [2, 3, 3, 2, 0, 0, 0, 1, 1, 2], [0], [1, 0, 0], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 3, 0, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l abs(mod(len(in1),len(in2))):{:\\nin1 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 0, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 2, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 11, 4, 2, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(i0,mod(abs(i0),divInt(i1,int(5.0)))) + int(7.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [2], [0, 0], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [2, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0], [2, 3, 3, 2, 0, 4, 3, 1, 1], [0, 0, 0, 0], [1, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 0, 14, 3, 6, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),( len(in2) + abs(( i2 + i0 )) ))):{:\\nb2 = min(int(9.0), i2) \\l saveOrd(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 8, 4, 8, 3, 5, 7, 3], [2, 1, 1, 2, 2, 1, 1], [1], [1, 3, 2, 1, 3, 3, 3, 1, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1], [1, 3, 3, 2, 0, 0, 4, 4, 1], [1], [1, 1, 1], [4, 1, 4, 2, 4, 2], [], [], [0, 0, 4, 2, 3, 4, 3, 1, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 1, 0, 9, 1, 4, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(18.0) \\l max(mod(int(4.0),len(in1)), len(s1)):{:\\nres0 = abs(int(8.0)) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [3, 7, 6, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 2, 1, 2, 0, 1, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 0, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [0, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [3, 3, 1, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 2, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 10, 1, 5, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = abs(max(int(17.0), len(in1))) \\l min(abs(i2), ( i1 + i0 ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 7, 7, 6, 0, 23, 3, 8, 1, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i0)), int(26.0))) \\l len(in2[min(max(mod(i1,int(9.0)), int(7.0)), i1):int(3.0)]):{:\\nres0 = int(5.0) \\le int(5.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [0, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [1, 3, 2, 3, 1, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 4, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 5, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [2, 2, 1, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 4, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 5, 2, 3, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( divInt(int(5.0),abs(divInt(saveOrd(s1),( ( i1 + int(5.0) ) + int(4.0) )))) + i0 ) \\le i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [2, 0, 2, 2, 0, 1, 1], [1], [1, 1, 2, 3, 2, 3, 3, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0], [2, 3, 3, 2, 0, 1, 3, 1, 1], [0, 0, 0], [1, 1, 1], [4, 2, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l int(9.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [1, 2], [], [0, 0], [], [], [3], [0, 5], [1, 0], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 7, 8, 2, 8, 5], [0, 1, 1, 1], [1], [1, 3, 1, 3, 3, 3, 2, 2, 0, 2, 3, 1, 3, 3, 2, 2, 0, 3, 1, 2, 1, 1, 1], [1, 0, 1, 1, 1], [2, 3, 3, 2, 4, 0, 1, 1, 2], [2], [1, 1, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 1, 4, 0, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(int(7.0)):{:\\ni0 *= len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [1], [2, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [0, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [2, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2[saveOrd(s1):]\\ni0 = int(16.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 16, 6, 2, 3, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(len(s1),divInt(i1,( ( int(5.0) + int(7.0) ) + int(4.0) ))) + int(8.0) ), i0) \\le divInt(int(7.0),i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [2, 0, 1, 2, 1, 1], [1], [0, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 3, 3, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i2 \\l abs(divInt(( max(len(s1), i0) * mod(i1,i2) ),i1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [2, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 0, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 0, 13, 2, 5, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i2, ( i1 * i1 )), i2)), int(26.0))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 3, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(in0)\\ni0 += int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 348}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 7, 8, 3, 5, 5], [1, 2, 1, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 4, 3, 1, 0, 1], [0, 1], [0, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 11, 2, 5, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(saveOrd(in2), i1) ), ( int(1.0) - i2 ))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [0, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 2, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 1, 2, 2, 5, 0, 15, 3, 6, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif res0:{:\\nb1 = abs(max(mod(len(in1),( min(i1, mod(i0,i1)) * i0 )), int(26.0))) \\l min(len(in2), i1)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 4, 8, 7, 7, 1], [1, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 0, 1, 0, 0, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( int(3.0) + i1 ))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 1, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 2, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le divInt(i2,len(in2))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 0, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0], [1, 1, 1], [1, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 3, 0, 10, 1, 5, 0, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(s1),len(in2))):{:\\nres0 = abs(min(i0, i0)) \\le i2\\nin1 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [1], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += saveOrd(in0[int(16.0):])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 0, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 2, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s2) \\le ( mod(len(in2),divInt(( ( divInt(i2,int(6.0)) + int(7.0) ) + int(0.0) ),int(8.0))) + ( int(7.0) * i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [2, 6, 1, 7, 3, 5, 5, 5, 8, 0, 8, 7, 4, 4, 9], [1, 2, 1, 0, 1, 0, 2, 0, 0, 2, 2, 2], [1], [3, 3, 2, 3, 2, 3, 0, 0, 0, 2, 0, 1, 3, 3, 3, 3, 0, 1, 1, 3, 0, 1, 1, 2, 0, 2, 0, 2, 2, 3, 0, 1, 3, 2, 0, 1, 2, 3, 3, 2, 2, 3, 1, 0, 0, 1, 1, 3], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0], [3, 1, 3, 0, 0, 3, 0, 1, 1, 1, 3, 2, 2, 2, 3], [1, 2, 2, 1, 0, 2, 2], [0, 0, 0, 0], [4, 5, 3, 2, 4, 5, 3], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 0], [0, 3, 2], [4], [0, 2, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 15, 15, 12, 0, 48, 11, 15, 7, 4, 7, 0, 0, 13, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l max(divInt(len(in2[( min(i1, i2) - i1 ):divInt(i0,int(26.0))]),min(len((in0 + (s2[:min(max(i1, int(1.0)), int(73.0))][:max(i0, int(5.0))] + in1))[int(5.0):]), ( i2 * ( i0 * divInt(( max(i0, int(5.0)) - len(in2) ),( i2 + int(8.0) )) ) ))), ( abs(abs(divInt(( abs(int(0.0)) * i2 ),i2))) * int(874.0) )):{:\\nres0 = int(49.0) \\le len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(i1,divInt(len(in2),divInt(( i2 + int(3.0) ),int(0.0)))) + int(9.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 1, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 2, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 5, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 6, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) )) ) * divInt(i0,( int(6.0) - int(8.0) )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 1], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 2, 0, 2, 0, 0, 0, 1, 1, 3, 3, 2, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 6, 0, 19, 4, 6, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(( i1 * mod(i0,i1) ), i2)), int(26.0))) \\l int(9.0):{:\\nres0 = min(len(in2), divInt(i1,int(7.0))) \\g i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 4, 1, 5, 5], [1, 0, 2, 0, 1, 0, 0, 2, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 0, 1, 1, 0, 3, 1, 1, 0, 0], [1, 0, 1], [2, 1, 3, 4, 0, 3, 0, 1, 1], [0], [0, 0, 0], [3, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 9, 0, 25, 3, 8, 1, 2, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in0[saveOrd(in2):min(i1, ( i0 + i2 ))]),i0), int(29.0))) \\l len((in0 + (s2[min(i1, divInt(i0,int(9.0))):][int(4.0):] + in1))[i0:max(int(1.0), int(5.0))]):{:\\nres0 = i2 \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 1, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 4, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 19, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(int(26.0), i1)), ( i1 * i1 ))) \\l i2:{:\\nres0 = int(9.0) \\le min(len(in2), min(mod(i1,int(7.0)), int(3.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 0, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(mod(len(s0),divInt(len(in0),int(4.0))),( i0 + int(6.0) ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 6, 2, 7, 5, 5, 5, 8, 4, 4, 5, 3, 4, 9], [2, 1, 1, 2, 2, 1, 0, 1, 1, 1, 2, 2, 0, 0], [1], [3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 2, 0, 1, 1, 1, 2, 1, 2, 2, 0, 2, 2, 3, 2, 1, 1, 1, 0, 0, 1, 2, 0, 2, 2, 2, 2, 1, 2, 2, 3, 3, 1, 0, 0, 2, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [2, 1, 0, 0, 0, 3, 0, 1, 1, 1, 0, 4, 4], [2, 0, 0, 1, 2, 0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 14, 14, 14, 0, 55, 16, 13, 6, 10, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(min(min(min(len(in1), i2), min(i1, i1)), i2), int(36.0))) \\l max(max(max(divInt(i2,int(2.0)), ( i1 * int(7.0) )), int(5.0)), int(5.0)):{:\\nres0 = ( int(5.0) + mod(divInt(i0,divInt(mod(min(( int(8.0) + int(4.0) ), int(4.0)),i1),i1)),int(5.0)) ) \\le mod(i1,mod(mod(divInt(( int(34.0) - divInt(( saveOrd(in2) * saveOrd(in0) ),int(9.0)) ),i2),i2),( i0 + i0 )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 3, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(i0,mod(max(len(in2), ( i2 + int(3.0) )),int(8.0))) + ( int(2.0) + divInt(int(8.0),i2) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),i0)) + ( i0 + int(5.0) ) ):{:\\nres0 = int(7.0) \\le int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 1, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [2, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [3, 2, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 3, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 3, 4, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( ( max(len(in1), len(in2)) + i2 ) - divInt(i1,i0) )) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 6, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 0, 2, 2, 2, 2, 0, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 16, 7, 1, 4, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(i0,divInt(( ( divInt(i2,i2) + int(2.0) ) + int(6.0) ),i0)) + ( int(2.0) * i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [2, 9, 9, 4, 5, 5, 5, 3, 5, 2, 1, 1, 9, 3, 0, 9, 9, 8], [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 2, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 2, 1, 1, 0, 3, 1, 1, 3, 0, 2, 2, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 3, 3, 0, 1, 3, 1, 3, 0, 2, 3, 3, 0, 0, 0, 0, 3, 1, 3, 2, 1, 2, 0, 1], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1, 0, 0, 3, 1, 2, 0, 1, 4, 0, 0, 2], [1, 2, 2, 2, 1], [0, 0, 0, 0, 0], [3, 5, 3, 2, 4, 5, 0, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 4, 0], [0, 3, 2], [4], [0, 0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 18, 18, 16, 0, 60, 10, 20, 5, 5, 8, 0, 0, 14, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in0),( min(i1, divInt(i0,i1)) - i0 )), int(29.0))) \\l min(len(in2), abs(( ( int(9.0) * int(4.0) ) * i1 ))):{:\\nres0 = max(int(5.0), int(5.0)) \\le max(i0, divInt(( int(5.0) * min(min(len(in0), int(3.0)), i0) ),int(5.0)))\\n:}else:{:\\ns2 = (in1 + (in2[:i1][i1:int(2.0)] + s0))[max(abs(i1), int(11.0)):min(int(93.0), max(i0, ( saveOrd(getCharFromString(in2, min(i0, i1))[i0:i1]) - min(int(09.0), abs(divInt(int(9.0),divInt(i1,int(8.0))))) )))]\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [5, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 0, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 0, 18, 5, 4, 3, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = max(( divInt(min(divInt(len(s1),min(( i2 + int(5.0) ), int(7.0))), int(9.0)),int(8.0)) + ( int(7.0) + i2 ) ), int(7.0)) \\le i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [1], [1, 2, 2, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0], [1, 5, 4, 2, 4, 5, 1], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 3, 0, 21, 4, 6, 2, 2, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(5.0) \\le ( mod(saveOrd(s1),int(3.0)) + len(getCharFromString(in2, saveOrd((in1 + (s2[min(int(3.0), int(6.0)):][int(7.0):int(79.0)] + in1))[min(mod(int(6.0),i0), min(i0, ( i1 + int(895.0) ))):]))) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [2, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 0, 2, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2, 2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 3, 3, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) * i2 ), ( i0 * divInt(i1,i2) ))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [1], [3, 2, 2, 0, 2, 3, 3, 3, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [2, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [1], [3, 2, 2, 3, 1, 3, 2, 3, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 13, 3, 4, 1, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(len(s2[int(3.0):]),len(in2)) + divInt(min(i1, int(7.0)),int(9.0)) ), int(8.0)) \\le int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 3, 8, 7, 7, 1], [2, 2, 2, 0, 2], [1], [1, 2, 0, 2, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(9.0) \\le ( i2 + divInt(divInt(saveOrd(s1),( ( i2 + int(7.0) ) + len(in2) )),int(3.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [9, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1, 1], [1], [3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1], [1, 1, 3, 0, 2, 3, 0, 0, 1], [2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 7, 0, 21, 2, 9, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(len(s0), min(abs(len(in2)), i1)), divInt(i0,i1)) \\l i2:{:\\nres0 = int(96.0) \\le min(min(max(( i1 * int(9.0) ), i1), i1), int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1], [3, 8, 2, 8, 7, 7, 1, 2], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 1, 0], [0, 5, 3, 2, 4, 5, 3], [1], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 4, 0, 22, 8, 3, 4, 4, 7, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(getCharFromString(s0, ( divInt(len(in2),mod(len((in0 + (s2[( mod(i0,int(3.0)) + int(8.0) ):][int(2.0):] + in1))[divInt(( int(8.0) + i2 ),int(7.0)):]),i2)) * ( i0 * int(71.0) ) ))) \\le int(2.0)\\nin2 = in0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 6, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\l ( divInt(max(divInt(len(in2),( ( i0 + int(9.0) ) + min(int(7.0), i2) )), divInt(int(2.0),i2)),int(8.0)) + i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [1, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 0, 1, 1, 1], [2, 6, 9, 1, 3, 5, 5], [1, 0, 1, 0, 1, 0], [1], [3, 3, 2, 3, 2, 3, 0, 0, 0, 1, 0, 1, 3, 3, 3, 3, 0, 1, 1, 3, 0, 1, 1], [1, 0, 1], [3, 1, 3, 0, 0, 3, 2, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 12, 2, 4, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l max(divInt(len(in2),( min(i1, i0) - i1 )), int(26.0)):{:\\nb1 = i0 \\le int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 0, 1, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 12, 4, 2, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(i0,int(3.0)) * len(s0) ), divInt(( i2 + int(7.0) ),int(2.0))) \\le i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [2, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [2, 0, 1, 2, 0, 1, 1], [1], [2, 3, 2, 3, 2, 3, 3, 2, 0, 0, 3, 1, 0, 2, 2, 2, 0, 3, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 2, 0, 1, 1, 1, 1], [0, 0, 0, 1], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 5, 5, 5, 0, 22, 7, 6, 4, 3, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( abs(mod(len(in1),mod(len(in2),abs(( i2 + i0 ))))) + min(int(10.0), i1) ) \\l ( mod(( i2 + max(int(9.0), int(8.0)) ),int(3.0)) - i0 ):{:\\nin1 = s2\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [1, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1], [7, 8, 2, 8, 7, 7, 1, 4, 0, 5], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 1, 1, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 3, 0, 18, 5, 4, 3, 2, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s2) \\l ( mod(len(getCharFromString(in2, mod(len((in0 + (s2[:min(( i0 + int(7.0) ), int(8.0))][:int(2.0)] + in1))[int(8.0):]),( int(7.0) + i2 )))),int(71405.0)) + i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [2, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 3, 1, 3, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [0, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 4], [2, 2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 4, 0, 23, 3, 10, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(( len(in1) * min(min(i1, ( i0 * i1 )), len(in2)) ), int(26.0))) == min(max(max(divInt(saveOrd(in0),int(9.0)), int(7.0)), i2), int(3.0)):{:\\nres0 = int(5.0) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 1, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [0, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 2, 0, 16, 6, 2, 3, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( mod(int(3.0),divInt(len(s2),( ( i2 * int(7.0) ) + int(9.0) ))) + int(8.0) ), int(7.0)) == divInt(int(71.0),i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 0, 3, 0, 0, 1, 1, 2, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 2, 4, 0, 2, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 3, 3, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s2) \\le ( mod(abs(mod(i0,saveOrd(in2))),i0) + i1 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [2], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 0, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 2, 3, 0, 0, 1, 0, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 3, 0, 10, 1, 5, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),abs(len(in2)))):{:\\nb2 = min(i0, i0) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 5, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += saveOrd(in0[int(15.0):])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [5, 9, 5, 4, 1, 5, 5], [1, 0, 2, 0, 1, 0, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [2, 1, 3, 0, 3, 3, 0, 1, 1], [1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in0),min(len(in2), i1)), ( i0 - i2 ))) \\l i0:{:\\nres0 = int(5.0) \\le len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [1, 3, 2, 0, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 1, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 5, 0, 11, 2, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(26.0) \\l abs(divInt(i1,max(len(in1), i0))):{:\\nres0 = ( i1 * i2 ) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 1, 1, 1, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 7, 8, 3, 5, 5], [1, 2, 1, 2, 0], [1], [3, 3, 2, 3, 3, 0, 0, 2, 1, 3, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 2, 1, 0, 1], [0, 2], [0, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [1], [3, 2, 1, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 0, 1, 1, 1, 1, 1], [8, 0, 0, 8, 3, 5, 5], [0, 0, 2, 2, 1, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 0, 3, 1, 1, 1, 2, 1, 0, 3, 1, 1, 1, 0, 1], [1, 0, 0, 1], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0, 2], [0, 0, 0], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 2, 0, 14, 3, 5, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(800.0) \\l abs(divInt(len(in1),( len(in2) + abs(( i0 * i0 )) ))):{:\\nres0 = min(int(8.0), int(3.0)) \\le int(5.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 2, 2, 2, 0, 1, 1, 1, 0], [1], [1, 3, 2, 3, 3, 3, 2, 2, 3, 0, 3, 2, 0, 0, 0, 2, 0, 3, 0, 0, 1, 1, 1, 2, 0, 1, 3, 0, 0, 0], [1, 1, 1, 0, 1, 0], [2, 3, 3, 2, 0, 2, 1, 4, 2, 1], [0, 0], [1, 0, 0, 1, 1], [0, 5, 4, 2, 4, 4], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 7, 0, 21, 5, 7, 1, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(s0),len(in2))):{:\\nres0 = abs(divInt(divInt(min(i0, abs(( i2 + i2 ))),i2),mod(i0,max(i1, i1)))) \\le int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(max(divInt(len(in2),( ( i2 + int(6.0) ) + int(7.0) )), int(9.0)),int(8.0)) + divInt(int(7.0),i2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 7, 8, 3, 5, 5, 8, 2, 5, 7], [0, 0, 2, 1, 0, 1, 1, 2, 1, 0, 2, 2, 1, 0, 1, 2], [1], [1, 3, 2, 3, 3, 3, 3, 2, 1, 0, 3, 1, 0, 2, 2, 2, 0, 3, 0, 1, 2, 1, 1, 3, 3, 2, 0, 1, 2, 3, 0, 2, 3, 0, 0, 2, 2, 0, 0, 2, 2, 1, 0, 0, 3, 0, 1, 2, 0, 1, 0, 0], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 3, 3, 2, 0, 0, 1, 0, 1, 3, 1, 3], [0, 1, 1, 2, 2, 2, 1], [1, 1, 0, 0, 0, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 11, 11, 16, 0, 52, 14, 12, 7, 7, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l min(mod(len(in1),len(in2)), abs(min(( int(7.0) + i0 ), min(int(8.0), i0)))):{:\\nres0 = mod(divInt(divInt(i2,max(i1, int(3.0))),( int(5.0) - int(5.0) )),min(max(( i0 - int(8.0) ), divInt(len(in1),i1)), mod(max(i1, i2),( ( i1 * i0 ) * ( mod(int(2.0),i2) * i2 ) )))) \\le len((s2 + (in1[:i1][int(5.0):( i0 - int(7.0) )] + in2))[i1:i2])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 4, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 2, 2, 4, 0, 13, 2, 6, 1, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i0)), int(26.0))) \\le len(in2):{:\\nin0 = s2\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1, 2], [], [0, 0], [], [], [3, 1], [0, 4], [2, 1], [0, 0], [5], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1, 1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 1, 12, 2, 5, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1.endswith(in2):{:\\ni1 -= abs(max(divInt(len(in0),min(min(i0, ( i1 - i0 )), i1)), int(26.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 7, 8, 3, 5, 5], [1, 2, 1, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 0, 1], [0, 1], [0, 0, 0, 0], [4, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(i1, ( int(1.0) - i2 )), i1) ), int(1.0))) \\l len(s0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1], [5, 7, 4, 8, 7, 7, 1, 7, 6, 0, 8], [1, 0, 1, 0, 2, 1], [0, 1], [3, 2, 2, 3, 2, 3, 1, 3, 1, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 11, 11, 6, 0, 23, 6, 4, 4, 2, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le ( divInt(len(in2[( len((in0 + (s2[:int(5.0)][min(int(7.0), int(4.0)):] + in1))[( int(8.0) + i1 ):( int(7.0) + i0 )]) + int(717.0) ):]),i1) * divInt(i0,int(608.0)) ):{:\\nres0 = i2 \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 5, 7, 0, 3, 5, 5], [1, 1, 2, 1, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 1, 2, 3, 1, 1, 3, 0, 1, 0, 3, 0, 0, 3, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 4, 1, 2], [0], [1, 0, 0], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 1, 3, 0, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l abs(mod(len(in1),len(in2))):{:\\nin1 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [2], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 0, 3, 1, 0, 0, 2, 2, 0, 3, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not int(3.0) \\le saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 2, 7, 4, 5, 5], [1, 0, 1, 2, 1, 1, 0], [1], [3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 2, 0, 1, 0, 0, 3, 1, 1], [1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 0], [0, 1, 0], [4, 2, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 7, 0, 19, 2, 8, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(len(in1), min(min(len(s2), i1), divInt(i0,i1)))) \\l i2:{:\\nres0 = int(26.0) \\le min(i1, max(( i1 * int(2.0) ), i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 5, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 4, 9, 8, 3, 5, 5], [2, 1, 2, 2, 0, 1, 0], [1], [3, 3, 2, 3, 2, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 6, 0, 19, 3, 7, 2, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + ( min(i2, mod(i1,i2)) * i2 ) ), int(14.0))) \\l min(len(in2[max(int(9.0), i0):int(8.0)]), i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 2, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = saveOrd(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1], [3, 3, 3, 1, 3, 3, 2, 2, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [1, 1, 0], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2, 2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 4, 0, 3, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= abs(max(len(in1), int(1.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 0], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 0, 3, 3, 2, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0], [0, 1, 3, 0, 0, 3, 0, 0, 1], [2, 0], [0, 1, 0], [4, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 8, 0, 20, 4, 7, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), mod(i1,len(in0))), min(( i0 + int(26.0) ), i1)) \\l i0:{:\\nres0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [1, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [0, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 6, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( divInt(len(s2),divInt(len(in2),( min(i1, int(1.0)) + int(7.0) ))) + ( int(9.0) + divInt(int(8.0),i2) ) ), int(7.0)) \\le i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 0, 0, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 2, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le divInt(divInt(max(divInt(len(in2),( ( i2 + int(9.0) ) * int(7.0) )), int(2.0)),i2),mod(int(8.0),i2))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [1, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5], [2, 0, 0, 2, 0, 1, 0], [1], [3, 0, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 2, 4, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = abs(i2) \\l ( max(len(in1), min(i0, ( i0 + i2 ))) * i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 0, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 1, 5, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(i1, len(in1))) \\l min(min(i0, divInt(i1,i2)), i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 3, 7, 3, 5, 5], [0, 0, 0, 2, 1, 1], [1], [3, 3, 2, 3, 3, 1, 0, 2, 0, 0, 0, 1, 0, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 5, 0, 13, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(int(2.0), i0)), ( i0 * i0 ))) \\l i2:{:\\nres0 = int(6.0) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 6, 4, 8, 3, 5, 7, 3, 3], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 3, 0, 1, 1, 1, 1], [0, 0, 1, 1], [2, 3, 3, 2, 0, 0, 4, 4, 1], [0, 1], [1, 1, 0], [5, 5, 4, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 3, 0, 24, 4, 9, 2, 2, 6, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\l abs(( len(in2) + len(in2) )):{:\\nres0 = abs(min(( i2 - int(4.0) ), min(int(8.0), saveOrd(getCharFromString((in1 + (s2[int(3.0):][mod(mod(i1,saveOrd(in1)),max(i2, int(5.0))):] + in2))[int(7.0):], int(3.0)))))) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 2, 7, 2, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 2, 2, 0, 2, 0, 1, 0, 1, 3, 1, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [2, 1, 3, 0, 0, 1, 0, 3, 1], [2, 0, 2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 5, 0, 21, 5, 5, 3, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),( ( i1 * mod(i0,int(2.0)) ) + i1 )), int(6.0))) \\l min(int(2.0), min(( i2 * int(7.0) ), int(2.0))):{:\\nres0 = i1 \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 2, 2, 2, 0, 1, 1, 1, 0], [1], [1, 3, 2, 3, 3, 3, 3, 2, 3, 0, 3, 2, 1, 3, 0, 0, 0, 3, 0, 0, 1, 1, 1, 2, 0, 1, 3, 0, 0, 0], [1, 1, 1, 0, 1, 0], [2, 3, 3, 2, 4, 2, 1, 4, 2, 1], [0, 0], [1, 0, 0, 1, 1], [4, 5, 4, 2, 4, 4], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 6, 0, 20, 3, 9, 0, 3, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(saveOrd(in1)) \\le divInt(abs(i0),max(divInt(int(9.0),saveOrd((s2 + (in1[:i2][:i2] + in1))[i2:abs(i0)])), i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 8, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 2, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(( ( divInt(i0,int(5.0)) + int(8.0) ) + int(4.0) ),i0)) + ( int(8.0) * i1 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 6, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [1, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 7, 3, 3, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(len(s2),divInt(len(in2),divInt(( i0 + int(3.0) ),int(7.0)))) + divInt(i0,( int(6.0) + int(8.0) )) ), int(7.0)) \\le i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [0, 1, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 2, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 17, 3, 7, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(( i0 * mod(i1,i0) ), i2) ), int(17.0))) \\l min(len(in2), max(int(9.0), i0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 2], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 5, 6, 0, 3, 7, 5, 0, 0, 4], [1, 1, 2, 1, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 2, 3, 1, 3, 3, 2, 1, 0, 1, 0, 0, 3, 1, 1, 1, 3, 3, 0, 1], [1, 0, 1, 1], [2, 3, 1, 2, 0, 0, 1, 1, 1, 2, 2], [0], [1, 0, 0], [5, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 10, 10, 5, 0, 28, 4, 11, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l abs(mod(len(in2),max(abs(min(( i1 + divInt(min(int(6.0), max(max(divInt(int(0.0),i1), int(3.0)), i2)),i1) ), max(int(7.0), int(5.0)))), int(0.0)))):{:\\nres0 = abs(abs(i0)) == int(04.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [1, 0, 0, 1, 0, 1, 1], [1], [1, 3, 3, 3, 2, 3, 2, 2, 0, 1, 3, 2, 2, 3, 3, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0], [2, 3, 3, 0, 0, 3, 1, 0, 1], [0, 2], [0, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 2, 7, 3, 5, 5], [2, 0, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 0, 1, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 12, 1, 4, 0, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(int(2.0), len(getCharFromString(in1, min(i2, int(6.0)))))) \\l divInt(i0,i1):{:\\nres0 = i2 \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 0, 1, 0, 1, 1, 1], [1, 0, 9, 0, 6, 5, 5], [1, 0, 1, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 0, 3, 0, 0, 0, 3, 1, 1, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 0, 0, 0, 1, 4, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 0, 9, 1, 4, 0, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(109.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = i1 \\le min(i0, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = s2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 4, 1, 5, 5], [1, 0, 1, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1], [4, 1, 3, 0, 0, 3, 0, 4, 1], [1], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 7, 0, 23, 3, 8, 1, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in1) \\l max(divInt(len(in2),min(min(i1, ( i0 - i1 )), i1)), int(26.0)):{:\\nres0 = len(in0) \\le min(saveOrd((s2 + (in1[divInt(i1,int(9.0)):][int(4.0):i1] + in2))[i0:int(1.0)]), int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 308}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 1, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(int(8.0),divInt(len(in2),( ( i2 + int(7.0) ) + int(9.0) ))) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 3, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 1, 3, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 1, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 1], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 5, 5, 3, 2, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( mod(len(\"\"U\"\"),mod(max(( ( i0 + int(3.0) ) + len(in2) ), int(7.0)),min(i0, int(4.0)))) + i0 ):{:\\nres0 = int(8.0) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [1, 4, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 8, 7, 5, 5, 3], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 1, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 4, 3, 2, 0, 0, 4, 3, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 8, 8, 3, 0, 22, 4, 8, 1, 3, 6, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) \\l abs(mod(saveOrd(in1),len(in2))):{:\\nres0 = abs(min(( i2 + int(4.0) ), min(int(8.0), saveOrd(getCharFromString((in1 + (s2[int(7.0):][mod(mod(i1,len(in1)),int(5.0)):] + in2))[i2:], int(5.0)))))) \\le int(3.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [0, 1, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 0, 1], [9, 5, 9, 8, 5, 6, 2, 5], [0, 0, 1, 1, 2, 0, 0, 2, 1], [0], [3, 3, 0, 3, 2, 2, 3, 3, 0, 3, 0, 2, 3, 1, 1, 2, 0, 3, 3, 1, 3, 1, 0, 0, 0, 2, 3, 3, 3, 0, 0, 1, 1, 3], [1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0, 0, 3, 3, 1, 2, 0, 3, 4], [0, 1, 0], [0, 1, 0, 1], [3, 5, 3, 2, 4, 5, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 2, 0], [0, 3, 2], [4], [0, 2, 0], [0], [19], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [1], [1, 1], [], [0, 0], [], [], [3], [4, 4], [0, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 9, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [5, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 0, 2, 2, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += saveOrd(in2[int(19.0):])\\ni2 -= len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [1, 1], [3, 0, 1, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 1, 4, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[i1:]) \\g int(163.0)\\ni2 += int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 2, 3, 2, 2, 3, 0, 0, 1, 3, 1, 1, 3, 1, 0], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [1, 0], [1, 0], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 1, 15, 3, 5, 2, 2, 2, 2, 0, 7, 1, 0, 1, 2, 1, 1, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[:divInt(len(in2),( mod(len(getCharFromString((\"\"f\"\" + \"\"F\"\"), i0)),i2) + int(17.0) ))]) \\le min(int(3.0), int(7.0))\\ni1 -= min(int(6.0), i0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 1, 9, 8, 3, 5, 5], [0, 2, 2, 2, 0, 1, 1, 1, 0], [1], [1, 3, 2, 3, 3, 3, 3, 2, 3, 0, 3, 2, 0, 3, 0, 2, 0, 3, 0, 0, 1, 1, 1, 2, 0, 1, 3, 0, 0, 0], [1, 1, 1, 0, 1, 0], [2, 3, 3, 2, 0, 2, 1, 4, 2, 1], [0, 0], [1, 0, 0, 1, 1], [2, 5, 4, 2, 4, 4], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 6, 0, 20, 4, 9, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(11.0) \\l abs(mod(len(s2),len(in2))):{:\\nres0 = abs(min(divInt(abs(i0),max(divInt(i2,saveOrd(in1)), i2)), ( i2 + abs(i0) ))) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [1], [2, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [1, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 4, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 2, 0, 1, 1, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2[saveOrd(s1):]\\ni1 += int(382.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 5, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 1, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [1, 2], [], [0, 0], [], [], [3], [0, 5], [1, 2], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 2, 8, 5], [0, 0, 1, 1, 2, 0], [1], [1, 3, 2, 2, 3, 3, 2, 2, 0, 1, 3, 2, 3, 3, 2, 1, 0, 0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 0], [2, 3, 3, 2, 0, 0, 1, 4, 2], [2], [1, 1, 1, 1, 1, 1], [4, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 5, 1, 21, 6, 6, 1, 6, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(mod(len(in1),len(s0)),mod(mod(i0,int(9.0)),abs(mod(min(min(mod(int(8.0),i0), i1), int(2.0)),i1))))):{:\\ni2 *= int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 8, 7, 3, 5, 5], [1, 0, 1, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 4, 3, 0, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(saveOrd(in2), i1)), ( i0 - i1 ))) \\l i0:{:\\nres0 = int(26.0) \\le len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [2, 2, 3, 3, 2, 3, 2, 2, 0, 1, 0, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [3, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 17, 6, 3, 3, 3, 6, 0, 0, 12, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( divInt(saveOrd((s2 + in2)),len((in0 + (s2[:divInt(len(in1),( ( i2 - int(3.0) ) + i2 ))][int(7.0):] + in2))[int(9.0):])) * divInt(int(8.0),i2) ) == int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [1, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 2, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 2, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 5, 1, 12, 2, 5, 3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += abs(max(( len(in1) * min(min(i1, ( i2 * i2 )), i0) ), int(17.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 2, 1, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 8, 1, 20, 3, 8, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i2 * i1 )), i2)), int(26.0))) \\l len(in2):{:\\ni1 += min(min(mod(i1,int(9.0)), i1), i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0], [0, 1, 1, 1, 1], [1, 6, 6, 8, 4], [0, 2, 2, 0, 2], [0, 1], [3, 1, 3, 2, 1, 0, 3, 3, 3, 1, 1, 1, 3, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 4, 4, 2, 1, 2], [2], [0, 0, 0], [3, 5, 4, 3, 4, 4, 2, 3], [1], [], [3, 0, 3, 0, 0, 1, 1, 0, 2, 0, 0, 4, 0, 1, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 2, 2, 2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd((in0 + (in2 + in1))) \\le int(16.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 322}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 8, 7, 3, 5, 5], [1, 2, 1, 1, 2, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 2, 2, 0, 2, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0, 0, 0, 1], [0, 1, 1], [4, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 6, 0, 23, 6, 7, 4, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i2 + i1 )), i1)), int(2.0))) \\l mod(len(in1),min(( ( i2 + ( i1 + int(6.0) ) ) - int(8.0) ), int(7.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 7, 8, 3, 5, 5], [1, 2, 1, 2, 0], [1], [3, 3, 3, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 11, 1, 6, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(len(in1), min(min(len(in2), i1), ( int(1.0) + i2 )))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 1, 2, 3, 2, 2, 2, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 7, 2, 5, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s2) \\le ( divInt(int(3.0),divInt(len(in2),( ( ( i2 - int(7.0) ) + int(9.0) ) + int(8.0) ))) * ( int(7.0) - i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0], [0, 1, 1, 1, 1], [1, 6, 6, 8, 4], [0, 2, 2, 0, 2], [0, 1], [3, 1, 3, 2, 1, 0, 3, 3, 3, 1, 1, 1, 3, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 4, 4, 2, 1, 2], [2], [0, 0, 0], [3, 0, 4, 3, 4, 4, 2, 3], [1], [], [2, 0, 1, 0, 0, 1, 1, 0, 2, 0, 0, 4, 0, 1, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 2, 2, 2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(in0[int(16.0):])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 5, 1, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 1], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le mod(mod(len(in2),mod(i1,( ( i0 + int(5.0) ) + int(5.0) ))),int(1.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [3, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [7, 5, 2, 7, 3, 5, 5], [1, 1, 1, 2, 2, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 2, 0, 1, 1, 1], [1, 0, 0, 0], [2, 1, 3, 0, 0, 3, 2, 1, 1], [0, 0, 0], [0, 1, 0], [3, 5, 4, 3, 4, 4, 2, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 22, 4, 8, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in0),min(min(i1, ( i1 + i1 )), i2)), int(75.0))) \\ge len(in2):{:\\nres0 = abs(max(( i2 + int(2.0) ), ( i1 + int(7.0) ))) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0, 2], [0], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [8, 0, 9, 8, 3, 5, 5], [0, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 1, 3, 0, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 3, 0, 0, 1, 0, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 3, 0, 1, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = int(80.0) \\l abs(mod(len(in1),len(s2)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 6, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(7.0) ))) + divInt(i0,( int(6.0) * int(8.0) )) ):{:\\nres0 = int(7.0) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 6, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 3, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 1], [2, 0, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(s0),len(in1)) + min(divInt(( i0 + int(3.0) ),int(7.0)), i0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [0], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5], [0, 0, 1, 0, 2], [1], [3, 3, 2, 3, 3, 2, 0, 2, 0, 0, 3, 1, 3, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0], [2, 1, 3, 0, 0, 3, 0, 0, 1], [1, 2, 1, 2], [1, 1, 0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 4, 0, 23, 4, 9, 4, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = abs(max(( len(in1) - min(( i0 * ( i0 - i1 ) ), min(int(1.0), len(in2))) ), min(min(( max(int(6.0), int(9.0)) * i0 ), int(8.0)), int(3.0)))) \\l int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 2, 8, 5], [0, 2, 1, 2, 2, 0, 2, 1], [1], [3, 3, 2, 2, 3, 3, 2, 2, 0, 0, 3, 2, 3, 3, 2, 2, 0, 2, 1, 0, 1, 1, 1, 0, 3, 3, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0], [2, 3, 3, 2, 0, 0, 1, 4, 2], [0, 2], [1, 1, 1, 1, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 8, 0, 29, 8, 9, 2, 6, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(in1)) \\l mod(mod(len(in2),abs(mod(mod(i0,i2),min(mod(min(max(mod(( i1 + ( int(10.0) * i2 ) ),int(9.0)), int(8.0)), int(2.0)),i2), saveOrd(in0))))),abs(i0)):{:\\nres0 = i2 != i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 2, 7, 3, 5, 5], [1, 1, 1, 2, 2, 1, 1, 2], [1], [3, 3, 2, 0, 0, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 2, 0, 1, 1, 1], [1, 0, 0, 0], [2, 1, 0, 0, 0, 3, 0, 1, 1], [2, 0, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 8, 0, 21, 4, 6, 3, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(i1,i1), min(i1, ( i2 * i2 )))) \\l i1:{:\\nres0 = int(26.0) \\le min(min(len(s1), ( i1 + int(2.0) )), ( i2 + int(7.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 2, 8, 5], [0, 1, 1, 1, 2, 0, 2, 2], [1], [1, 3, 2, 2, 3, 3, 2, 2, 0, 0, 3, 2, 3, 3, 2, 2, 0, 3, 1, 0, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0], [2, 3, 2, 2, 0, 0, 1, 4, 2], [0], [1, 1, 1, 1, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 8, 0, 27, 7, 7, 1, 6, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(mod(len(in1),abs(mod(mod(i0,i1),abs(mod(min(min(mod(( i1 + max(int(9.0), i1) ),int(8.0)), int(2.0)), int(8.0)),i2))))),i0)):{:\\nres0 = i2 != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 0, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1, 0, 1, 1], [1], [3, 3, 2, 3, 2, 3, 0, 0, 0, 2, 0, 1, 3, 3, 3, 3, 0, 2, 1, 3, 0, 1, 1, 2, 3, 0, 1, 0, 2, 3, 3, 0], [1, 0, 1, 0, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1, 1, 2, 3], [1, 2, 0, 1], [0, 1, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1], [], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 9, 0, 32, 6, 12, 4, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(s1),( min(i1, i0) - i1 )), mod(i0,int(26.0)))) \\l min(len(\"\"f\"\"), min(max(i1, ( int(9.0) * max(i1, int(73.0)) )), int(5.0))):{:\\nres0 = ( max(i0, int(5.0)) + i1 ) \\le ( abs(len(in2)) - i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 6, 4, 0, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 0, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 1, 3, 0, 1, 1], [2], [0, 1, 0], [4, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(max(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in1):{:\\nres0 = min(max(mod(i1,int(9.0)), int(7.0)), i1) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 4, 8, 3, 5, 7, 3], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1], [4, 3, 3, 2, 0, 0, 4, 4, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(10.0) \\l saveOrd(in1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 9, 2, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [3], [], [], [], [14]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( mod(len(\"\"+\"\"),divInt(len(in2),( ( i1 + int(5.0) ) + int(9.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 2, 7, 4, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 0], [0, 1, 1], [4, 1, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 6, 0, 23, 3, 9, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(s1):{:\\nres0 = min(max(( i1 + int(2.0) ), int(7.0)), i1) \\le max(int(4.0), int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 2, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(s2),mod(saveOrd(in1),min(( int(5.0) + int(3.0) ), int(3.0)))) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1, 6], [0, 0, 2, 1, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 1, 0, 2, 1, 0, 2, 2, 2, 0, 3, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0], [2, 3, 3, 2, 2, 0, 1, 0, 1], [0], [1, 1, 1, 0], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 3, 5, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(5.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(abs(( int(7.0) + i0 ))) \\le mod(int(4.0),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 0, 2, 0, 1, 1], [1], [1, 3, 2, 1, 3, 3, 3, 0, 2, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0], [1, 1, 1], [2, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 1, 0, 8, 1, 4, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(int(9.0),len(s2))):{:\\nres0 = len(in2) \\le abs(i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 2, 2, 3, 2, 2, 0, 2, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 8, 2, 5, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le ( divInt(divInt(( len(in2) + ( divInt(i0,( int(4.0) + int(7.0) )) + i0 ) ),( int(4.0) * i1 )),int(8.0)) - i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 2, 8, 5], [0, 1, 1, 1, 2, 0], [1], [3, 2, 2, 3, 2, 2, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 2, 0, 0, 1, 4, 2], [0], [1, 1, 1, 1, 1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 5, 0, 21, 8, 2, 1, 7, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(mod(mod(len(in1),mod(mod(mod(mod(i0,int(10.0)),int(9.0)),int(8.0)),i1)),( int(2.0) + i1 ))) \\l int(8.0):{:\\nres0 = i1 != divInt(i2,int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 2], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 0, 1, 1, 1], [2, 6, 9, 7, 6, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 2, 3, 0, 0, 0, 2, 0, 0, 3, 3, 3, 3, 0, 1, 1, 3, 0, 1, 1], [1, 1, 1], [3, 1, 3, 0, 0, 3, 1, 1, 2], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\ni1 -= len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3, 3], [0, 4], [1, 0], [0, 0], [1], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 2, 2, 1, 0, 1, 1, 1, 0], [1], [1, 3, 2, 3, 3, 2, 3, 2, 0, 0, 3, 2, 3, 3, 0, 2, 0, 3, 0, 0, 1, 1, 1, 2, 0, 1, 3, 0, 0, 0], [1, 1, 1, 0, 1, 0], [2, 3, 3, 2, 0, 0, 1, 4, 3, 1], [1, 2], [1, 1, 0, 1, 1], [4, 5, 4, 2, 4, 4, 4], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 0, 0, 5, 1, 3, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 4, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 1, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le int(4.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 0, 1], [9, 5, 9, 8, 5, 6, 2, 5], [0, 1, 1, 1, 1, 2, 1, 1, 0], [0], [1, 3, 3, 3, 2, 2, 3, 3, 0, 1, 0, 3, 3, 1, 3, 2, 0, 0, 1, 2, 3, 1, 0, 1, 0, 2, 3, 3, 2, 0, 0, 1, 1, 3], [1, 0, 1, 1, 1, 0], [2, 2, 3, 2, 0, 0, 3, 3, 1, 2, 0, 1, 4], [0, 1], [0, 1, 0, 1], [3, 5, 0, 2, 4, 5, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 3, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(95.0) \\l abs(abs(len(in0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 1, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 0, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 2, 4, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 4, 3, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(min(mod(int(3.0),len(s2)), ( i0 + int(8.0) )),int(2.0)) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 0, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 0, 1], [1, 0, 1], [2, 2, 3, 0, 0, 4, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 6, 0, 20, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(abs(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)))) \\l int(26.0):{:\\nres0 = saveOrd(in2) \\le min(max(mod(i1,int(9.0)), int(7.0)), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 4, 1, 5, 5], [0, 0, 1, 2, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1, 0], [2, 1, 2, 0, 0, 3, 0, 1, 1], [1, 1], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 7, 0, 22, 4, 7, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(abs(min(min(i0, ( i0 - i1 )), i2)),int(2.0)), len(in1))) \\l divInt(min(( i1 - int(6.0) ), int(9.0)),i1):{:\\nres0 = i0 \\le int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 2, 2, 0, 1, 3, 1, 3, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 3, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 4, 0, 1, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 1], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 15, 4, 5, 1, 3, 5, 1, 0, 11, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s2) \\le ( mod(len(getCharFromString(in2, i0)),len(\"\"U\"\")) + mod(mod(i0,int(3.0)),len((in0 + (s2[int(7.0):][min(i0, int(4.0)):] + in1)))) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [1, 2, 1, 0, 2], [0, 1], [3, 0, 2, 3, 2, 3, 3, 2, 0, 1, 1, 2, 0, 3, 1, 2, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 4, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 7, 6, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 1, 1, 1, 2, 0, 0, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 0, 17, 5, 3, 3, 2, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(getCharFromString(in2, divInt(len((in0 + (s2[i0:( int(3.0) + int(7.0) )][int(6.0):] + in1))[( i0 + i1 ):]),int(8.0)))),int(7.0)) + int(7.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 13, 5, 3, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( divInt(len(s1),divInt(len(in2),( divInt(i0,i0) + int(5.0) ))) + int(7.0) )) \\le i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [2, 2, 2, 3, 2, 3, 2, 2, 0, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 2, 3, 0, 0], [0, 1, 1, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 17, 7, 2, 4, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( divInt(divInt(saveOrd(s2),( abs(( divInt(i2,i2) + int(9.0) )) - int(7.0) )),i2) - ( int(2.0) * i0 ) ) \\le int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 17, 5, 3, 3, 2, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2[divInt(len((in0 + (s2[( i0 + i0 ):int(5.0)][:int(7.0)] + in1))[int(4.0):]),i1):]),( int(8.0) + i0 )) + int(7.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [2, 0, 1, 2, 0, 1, 1], [1], [1, 0, 2, 3, 2, 3, 3, 2, 0, 0, 3, 1, 0, 0, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0], [2, 3, 3, 2, 0, 1, 1, 1, 1], [0, 0, 0], [1, 0, 1], [4, 5, 4, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 6, 0, 21, 5, 5, 2, 3, 6, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l i2:{:\\nin1 = getCharFromString(in2, mod(abs(divInt(len(in1),len((s2 + (in1[mod(i0,i1):][:abs(int(9.0))] + in2))[i2:i0]))),( ( i1 + min(int(8.0), int(3.0)) ) + int(5.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [1], [0, 2, 2, 3, 0, 3, 3, 3, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [1, 0, 0], [0, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 2, 4, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i0 \\le ( mod(saveOrd(s0),i0) + len(in2) ):{:\\nb2 = saveOrd(in1) \\le min(int(5.0), int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [2], [0, 2], [], [0, 0], [], [], [2], [5, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 8, 5], [1, 2, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 1, 3, 3, 2, 2, 0, 3, 1, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 4, 2], [0], [1, 1, 1], [4, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 3, 0, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(10.0) != abs(mod(len(in1),len(in2)))\\ns2 = s2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 7, 7, 1], [1, 0, 1, 0, 2], [1], [3, 2, 2, 0, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 1], [4, 4, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 1, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le divInt(divInt(i1,divInt(saveOrd(in2),( divInt(i0,int(3.0)) + int(7.0) ))),int(5.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [0], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 6, 2, 7, 3, 5, 5, 0, 6, 6, 1, 7, 0, 9, 5, 6, 5, 5, 3, 2, 3, 4, 0, 7, 5, 5, 4, 7, 5, 2], [1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 2, 1, 2, 2, 2], [1], [3, 0, 2, 3, 3, 3, 1, 2, 0, 0, 0, 2, 3, 3, 3, 2, 0, 1, 2, 0, 1, 1, 1, 0, 1, 3, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 0, 0, 3, 0, 3, 0, 3, 2, 0, 2, 0, 0, 1, 2, 1, 2, 3, 1, 3, 0, 1, 3, 2, 0, 1, 1, 2, 3, 2, 2, 2, 0, 2, 1, 1, 0, 3, 1, 2, 0, 3, 0, 1, 3, 1, 2, 0, 0, 3, 2, 1, 1, 0, 1, 2, 1, 2, 2, 3, 2, 2, 0, 0, 3, 2, 3, 1, 0, 1, 0, 0, 3, 3], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 1, 3, 0, 0, 3, 0, 1, 1, 1, 4, 3, 2, 4, 2, 4, 0, 4, 2, 2, 0, 1, 4, 3], [0, 0, 0, 1, 0, 2, 0, 2, 1, 0, 0, 2, 2, 2, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [4, 5, 3, 2, 4, 5, 5, 2, 5, 2, 3, 0], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 2, 2, 4, 2, 0, 2, 2, 4, 2, 0, 0, 4, 2, 0, 0, 0, 4, 0], [0, 3, 2, 1], [4], [0, 2, 1, 2, 1, 0, 1, 0, 0, 1, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 30, 30, 28, 0, 111, 32, 24, 15, 17, 12, 0, 0, 30, 4, 1, 12, 0, 0, 0, 0, 0], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1[i1:divInt(max(len(in2), min(int(26.0), ( i1 + i1 ))),i2)]) \\l ( min(len((in0 + (s2[min(( i2 + int(2.0) ), ( i1 + int(7.0) )):][:int(3.0)] + in1))[int(5.0):]), i2) - int(5.0) ):{:\\nb0 = max(int(06.0), int(6.0)) \\le ( mod(int(1.0),divInt(divInt(( divInt(mod(mod(int(7.0),i2),i1),max(i2, max(i1, saveOrd(getCharFromString(in2[( i2 + ( i2 * i1 ) ):int(0.0)], ( int(9.0) + ( len(in2[int(5.0):].rstrip(s2)[:abs(i0)][int(6.0):saveOrd(in2[divInt(i1,int(5.0)):int(5.0)].capitalize())]) * mod(abs(mod(( ( i1 - divInt(int(3.0),int(2.0)) ) + i2 ),saveOrd(s2))),int(3.0)) ) ))[:( i2 + min(i1, int(4.0)) )][saveOrd(in0):int(0.0)][:divInt(i1,i0)])))) * abs(divInt(int(7.0),int(5.0))) ),i1),int(54.0))) * mod(int(7.0),divInt(( abs(( mod(i2,i1) * min(mod(max(int(5.0), i2),int(2.0)), i2) )) + i2 ),saveOrd(saveChr(len(s0))))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 1], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 2, 8, 5, 4, 9], [0, 1, 1, 0, 2, 0], [1], [1, 3, 2, 2, 3, 3, 2, 2, 0, 2, 3, 2, 3, 3, 2, 2, 0, 0, 1, 2, 1, 1, 1, 0, 3, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 4, 2], [0], [1, 1, 1, 1, 1, 1, 0, 1], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 5, 0, 30, 9, 7, 1, 8, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l abs(mod(mod(len(s0),len(in2)),mod(mod(i0,mod(abs(mod(min(min(( divInt(i1,i1) + int(0.0) ), mod(int(9.0),int(8.0))), int(2.0)),i0)),max(int(8.0), int(5.0)))),int(4.0)))):{:\\nres0 = i2 \\g int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [2], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 2, 2, 1, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 0, 3, 1, 0, 1, 2, 1, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 2, 2, 0, 1, 0, 1], [2], [1, 1, 0, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 3, 5, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),( len(in2) * abs(mod(i0,i0)) ))):{:\\nb2 = abs(int(9.0)) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 5, 8, 7, 7, 1], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 5, 0, 21, 7, 3, 5, 2, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2[( divInt(len(in2),( len((in0 + (s2[( ( i0 - int(3.0) ) + int(7.0) ):][int(5.0):i0] + in1))[divInt(int(8.0),i1):]) + int(7.0) )) * i0 ):]) == ( i2 - int(71.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 4, 1, 5, 5], [1, 0, 1, 0, 1, 2, 0], [1], [3, 3, 2, 3, 3, 1, 3, 2, 0, 3, 0, 1, 3, 0, 3, 3, 0, 0, 1, 0, 0, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 7, 0, 21, 2, 9, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(int(2.0), min(( i1 + len(in2) ), i0))), int(6.0))) \\l min(i1, max(max(i0, i1), int(9.0))):{:\\nres0 = i2 \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 8, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = saveOrd(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 2, 5], [0, 0, 2, 2, 0, 1, 1], [1], [0, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 3, 1, 0, 2, 0, 1], [1, 0, 1, 0, 0, 1], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0, 1, 1], [1, 0, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 6, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i0 \\l mod(( abs(divInt(len(in1),( ( i0 + int(10.0) ) - len(in2) ))) - int(9.0) ),i2):{:\\nres0 = mod(int(8.0),abs(int(3.0))) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 2, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(( ( divInt(i1,int(0.0)) + int(7.0) ) + int(9.0) ),int(8.0))) + ( int(7.0) * i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 1, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le len(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 2], [1, 1], [0, 0], [], [0], [], [], [], [0, 0, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [2, 3, 2, 3, 3, 1, 0, 2, 1, 0, 0, 1, 3, 3, 3, 2, 0, 0, 1, 0, 3, 1, 1], [0, 1, 1], [2, 3, 3, 3, 0, 3, 0, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 3, 0, 11, 3, 3, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( abs(divInt(len(in1),len(in2))) - int(269.0) ) \\l i1:{:\\nres0 = mod(int(7.0),i0) == i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [2], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 0, 2, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0], [2, 1, 1, 0, 0, 4, 0, 0, 1], [2, 2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 7, 0, 19, 4, 6, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 == in2:{:\\nres0 = abs(max(divInt(max(min(min(i1, ( i0 * i1 )), i2), int(26.0)),mod(saveOrd(in0),i2)), ( i1 * int(9.0) ))) \\l i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 3, 3, 3, 0, 1, 1, 1, 2, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 1, 4, 0, 2, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0], [2, 1, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 11, 2, 5, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(max(saveOrd(s1), min(abs(i0), int(5.0))),int(3.0)) + int(3.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [0], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 7, 8, 3, 5, 5], [1, 2, 1, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0], [2, 1, 0, 0, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 19, 2, 8, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = abs(max(( min(min(min(i1, ( int(1.0) + i2 )), i1), int(1.0)) - len(in1) ), max(min(int(7.0), i2), i0))) \\le int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 2], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 3, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 3, 3, 0, 1, 1], [2], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 6, 0, 21, 3, 9, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(len(in2), i1)), ( i0 * i1 ))) \\l i2:{:\\nres0 = len(in0) == min(max(max(divInt(i1,int(26.0)), int(9.0)), i1), int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [5, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 5, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1, 1], [1], [2, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 7, 0, 21, 4, 7, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile divInt(abs(( max(len(in1), min(i1, mod(i0,i1))) * i2 )),int(26.0)) \\l min(len(in2), min(( i1 + i1 ), int(5.0))):{:\\nb1 = i1 \\le int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 2, 7, 3, 5, 5], [1, 1, 1, 2, 2, 1], [1], [3, 3, 2, 1, 3, 3, 0, 0, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 2, 0, 1, 1, 1], [1, 0, 0, 0], [2, 1, 3, 2, 0, 3, 0, 1, 1], [2, 0, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 10, 1, 4, 0, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(int(26.0),len(in1[abs(i1):i1])), i1)) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 0, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [2, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in1),( ( i1 + int(4.0) ) + i2 ))) - int(7.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 333}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 1, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [5, 3, 3, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2) \\le ( divInt(int(6.0),divInt(len(in0),( ( i2 + int(7.0) ) + int(9.0) ))) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 324}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 3, 3, 3, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 0, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le divInt(len(in2),len(in1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 332}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 7, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [2, 2, 2, 3, 0, 3, 3, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 1, 1, 1, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( mod(mod(saveOrd(s2),i0),len(in2)) + len(in0) ) \\le ( i2 * int(3.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 315}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 3, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) == ( divInt(len(in2),i0) + len(in0) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 328}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [2, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 6, 5, 5], [1, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 0, 0, 0, 3, 1, 1, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 0, 1, 0, 1, 4, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 3, 0, 13, 1, 6, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) == abs(mod(len(in1),len(in2))):{:\\nres0 = min(max(i1, i0), i2) \\le min(int(9.0), int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 2, 1, 1, 2, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 2, 3, 1, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0], [2, 1, 3, 0, 1, 3, 0, 1, 1], [0, 0, 0], [0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 0, 15, 3, 6, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(max(i1, ( i2 + i1 )), i1) ), i2)) \\l divInt(len(in2),int(26.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 324}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 3, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( len(in2) + len(in0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 566}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 7, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 3, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 5, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(int(26.0)) \\l divInt(max(len(in1), min(i1, ( i0 * i1 ))),min(int(9.0), len(in2))):{:\\nres0 = min(max(mod(i0,int(7.0)), int(7.0)), i1) \\le int(5.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 324}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 8, 3, 5, 7, 3], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 3, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 4, 4, 1], [0], [0, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 4, 0, 22, 3, 9, 1, 2, 6, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\le abs(len(in1)):{:\\nres0 = len(in2) \\le abs(min(min(divInt(i2,int(4.0)), saveOrd(getCharFromString((in1 + (s2[int(8.0):][saveOrd(in1):] + in2))[int(3.0):], ( mod(i1,max(i2, i2)) + int(5.0) )))), int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 327}, {"genotype": [[0], [1, 1], [2, 0], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 8, 3, 5, 7, 3], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 3, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 4, 4, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 4, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 1, 0, 12, 1, 7, 0, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) \\l abs(len(in1)):{:\\nres0 = len(in2) \\le abs(min(min(mod(i2,int(4.0)), saveOrd(in1)), int(8.0)))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 327}, {"genotype": [[0], [1, 1], [0, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [0], [0, 1, 1, 1, 1], [1, 6, 2, 8, 4], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 3, 0, 0, 3, 2, 1, 1, 1, 3, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [4, 3, 4, 4, 4, 2, 1, 2], [2], [0, 0, 0], [4, 5, 4, 1, 4, 4, 2, 3], [1], [], [2, 0, 3, 0, 0, 4, 2, 2, 2, 0, 0, 1, 0, 1, 0, 0], [3, 1, 2, 0, 3], [2, 3], [2, 1, 2, 2], [0], [17], [], [], []], "fitness": 33, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1[int(16.0):]) == len((in2 + in1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 328}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 4, 0, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 3, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 1], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 5, 5, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + len(in0) ) + min(divInt(( i0 * int(3.0) ),min(int(4.0), i0)), ( int(4.0) * int(0.0) )) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 566}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 0, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 34, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 3, 0, 10, 1, 5, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(min(i0, i0)) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 463}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 1], [1, 0], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [0, 0, 0, 0, 0, 1, 1], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 3, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1], [4, 4, 3, 0, 0, 3, 0, 0, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 34, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\l saveOrd(in2)\\n", "test_case_results": [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], "other_info": {}, "test_fitness": 454}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 1], [1, 0], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [0, 0, 0, 0, 0, 1, 1], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 3, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1], [4, 4, 3, 0, 0, 3, 0, 0, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 34, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\l saveOrd(in2)\\n", "test_case_results": [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], "other_info": {}, "test_fitness": 454}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [2, 0, 1, 2, 0, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 0, 3, 1, 0, 0, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0], [1, 3, 3, 2, 1, 1, 1, 1, 1], [0, 0, 0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 34, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 21, 5, 6, 3, 2, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),( len(in2) + abs(mod(i2,i0)) )), max(int(0.0), i1)):{:\\nres0 = i2 \\le ( ( i0 + max(int(9.0), int(8.0)) ) + int(3.0) )\\nin1 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 463}, {"genotype": [[0], [1, 1], [1, 0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0], [0, 0, 1, 1, 1], [1, 6, 6, 8, 4], [0, 2, 2, 0, 2], [0, 1], [3, 1, 3, 2, 1, 0, 3, 3, 3, 1, 1, 1, 3, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 4, 4, 2, 1, 2], [2], [0, 0, 0], [3, 5, 4, 3, 4, 4, 2, 3], [1], [], [2, 0, 3, 0, 0, 1, 1, 0, 2, 0, 0, 4, 0, 1, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 2, 2, 2], [0], [17], [], [], []], "fitness": 34, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(166.0):]) \\le len((in2 + in1))\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 540}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 1], [1, 0], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [0, 0, 0, 0, 0, 1, 1], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 3, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1], [4, 4, 3, 0, 0, 3, 0, 0, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 34, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\l saveOrd(in2)\\n", "test_case_results": [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], "other_info": {}, "test_fitness": 454}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 8, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 2, 3, 2, 1, 0, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 2, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 34, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(( saveOrd(in0) + ( int(5.0) + i0 ) ),int(3.0))) * int(3.0) )\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 487}, {"genotype": [[0], [0, 1], [1, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 7, 9, 8, 2, 5, 5, 1, 5, 4, 5], [1, 0, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 1, 3, 1, 0, 3, 3, 0, 0, 0, 0, 0, 2, 1, 1, 1, 0], [1, 1, 1], [2, 3, 3, 0, 0, 3, 3, 0, 1], [0], [1, 1, 0], [3, 5, 3, 2, 4, 5, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [0, 0, 1, 2, 0, 0], [], [5], [], [], []], "fitness": 35, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 13, 3, 5, 0, 3, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) \\le abs(mod(len(in0),mod(len(in2),min(divInt(i1,int(9.0)), min(int(8.0), i0)))))\\nin0 = s2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], "other_info": {}, "test_fitness": 391}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [3, 1, 3, 0, 0, 3, 0, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 35, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 6, 0, 20, 3, 8, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l max(divInt(len(in2),min(min(i1, ( i0 - i1 )), i0)), int(26.0)):{:\\nres0 = len(in0) \\le min(max(mod(i1,int(9.0)), int(7.0)), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 292}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [1, 0, 2, 1, 2, 1, 1], [1], [1, 3, 2, 3, 2, 3, 1, 2, 0, 1, 2, 3, 3, 3, 2, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0], [2, 3, 3, 0, 0, 3, 1, 0, 1], [0, 2], [1, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 36, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 7, 2, 3, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(1.0) \\le abs(mod(len(in1),divInt(len(in2),int(7.0))))\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0], "other_info": {}, "test_fitness": 483}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [2], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 2, 1, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 0, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 0, 1, 0, 1], [1, 0, 1, 1], [2, 1, 3, 2, 0, 0, 1, 0, 1], [0], [1, 0, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 36, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 1, 1, 3, 0, 10, 2, 4, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l abs(mod(max(len(in1), abs(i0)),( i0 + i2 ))):{:\\nres0 = in2 == in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 413}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 1, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 36, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(int(3.0),divInt(( i1 + int(7.0) ),int(9.0)))) * int(8.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 518}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 9, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 36, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 5, 5, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le ( ( len(in2) + divInt(len(in0),min(( i0 + int(3.0) ), min(int(9.0), i0))) ) + mod(int(2.0),i1) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], "other_info": {}, "test_fitness": 433}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [5, 7, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 3, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [0, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1, 0], [5], [5], [], []], "fitness": 38, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 9, 1, 4, 1, 1, 2, 2, 0, 7, 1, 0, 1, 2, 1, 1, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(len(in0[len(in2):]), int(57.0)) \\le divInt(len(getCharFromString((\"\"f\"\" + \"\"F\"\"), i0)),i2)\\ni1 += int(3.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 353}, {"genotype": [[0], [1, 1], [1, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 8, 3, 5, 7, 3], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 4, 4, 1], [0], [1, 1, 1], [3, 5, 4, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 3, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l abs(mod(len(in0),len(in2)))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 413}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 8, 3, 5, 7, 3], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 0, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 4, 4, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 39, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 2, 0, 10, 2, 4, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),i2)):{:\\nres0 = len(in2) \\le abs(( i1 + int(4.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 369}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0], [0, 1, 0, 1, 1, 1, 1], [6, 6, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [1, 1], [3, 0, 2, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 3, 2], [], [2, 0], [1], [5], [5], [], []], "fitness": 39, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 3, 0, 9, 2, 2, 1, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(in0[i1:]) \\le divInt(int(66.0),( len(in2) + i2 )):{:\\nres0 = i1 \\le int(37.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 326}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 7, 8, 3, 5, 5], [1, 2, 1, 2, 0], [1], [3, 3, 2, 2, 3, 3, 0, 2, 1, 0, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 40, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 17, 3, 7, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( ( len(in1) + min(i1, divInt(int(1.0),i2)) ) - i1 ), int(1.0))) \\l min(len(in2), max(int(7.0), i2))\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 404}, {"genotype": [[0], [0, 1], [1, 1], [1], [1, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1, 1, 1, 1], [7, 1, 8, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [4, 1, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 40, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 1, 4, 0, 2, 1, 0, 1, 1, 0, 3, 1, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += saveOrd(getCharFromString(\"\"f\"\", int(718.0)))\\nres0 = len(in0) \\le int(7.0)\\n", "test_case_results": [1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 250}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [9, 6, 7, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 4, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 41, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(96.0):]) \\le len(in1)\\ni0 += int(7.0)\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 470}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 0, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 1], [2, 1, 3, 0, 2, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 6, 0, 20, 3, 8, 0, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(abs(i1), mod(i0,i0))), i2)) \\l int(26.0):{:\\nres0 = len(in2) \\le min(max(divInt(i1,int(9.0)), int(7.0)), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 325}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5], [0, 0, 0, 0, 0, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 3, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2, 2, 0], [1, 1, 0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 5, 0, 23, 4, 9, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(min(i0, ( i0 * i0 )), i0)), ( len(in2) * min(min(( max(int(16.0), int(9.0)) + i0 ), int(8.0)), int(3.0)) ))) \\l int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 322}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [5], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0.endswith(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 2, 7, 4, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 1, 0, 1, 1, 3], [2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 6, 0, 23, 2, 10, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(len(in1), min(min(max(i1, divInt(i0,i1)), i2), int(26.0)))) \\l min(max(max(( i1 * int(2.0) ), int(7.0)), i1), len(in2)):{:\\nres0 = int(4.0) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 404}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0], [0, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 6, 3, 5, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( ( len(s2) + ( len(in2) * ( ( i0 + int(3.0) ) * int(7.0) ) ) ) - int(9.0) ), int(8.0)) \\le mod(int(7.0),i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [4], [], [], [], [], [1, 1, 1, 1, 1], [9, 4, 4, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2.startswith(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 2, 2, 0, 1, 1], [1], [0, 3, 2, 3, 3, 3, 3, 0, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 10, 1, 5, 0, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i0 \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(min(i0, i2)) \\le i2\\nin1 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 514}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 5, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [1, 5, 1, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s1) == ( divInt(len(in2),i1) + len(s1) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 0, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [1, 0, 1, 2, 0, 1, 1], [1], [0, 2, 2, 0, 3, 3, 3, 2, 0, 0, 0, 1, 0, 3, 2, 2, 0, 0, 1, 1, 2, 0, 1], [1, 0, 0, 1], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0, 2], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 3, 3, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 \\l mod(( i0 + abs(len(in1)) ),len(in2)):{:\\nres0 = ( i1 * i2 ) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 514}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 5, 9, 7, 3, 5, 5], [1, 1, 2, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 3, 1, 1, 1, 2, 1, 1], [1, 1, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 5, 0, 24, 4, 9, 0, 4, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(getCharFromString(in1, min(min(i1, mod(i1,i2)), i2))),int(25.0)), len(in2))) \\l min(max(mod(i0,max(int(9.0), int(7.0))), int(3.0)), divInt(int(5.0),int(5.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [5], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1.endswith(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 2, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 7, 2, 5, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( ( divInt(( len(in2) + ( divInt(i0,int(4.0)) + int(8.0) ) ),int(4.0)) + i0 ) * ( int(8.0) - i1 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 574}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [2], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 == in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),int(3.0)) + len(in0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 634}, {"genotype": [[0], [1, 1], [1, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 2, 8, 5], [1, 1, 1, 1], [1], [1, 3, 2, 3, 3, 3, 2, 1, 0, 0, 3, 1, 3, 3, 2, 2, 0, 3, 1, 2, 1, 1, 1], [1, 1, 1, 1, 1], [2, 3, 3, 2, 4, 0, 1, 1, 2], [2], [1, 1, 1, 1], [4, 5, 0, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 10, 2, 4, 0, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l abs(mod(len(in1),len(in2[abs(mod(int(9.0),i1)):i1])))\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 561}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 1], [1, 0], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [0, 0, 0, 0, 0, 1, 1], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 3, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1], [4, 4, 3, 0, 0, 3, 0, 0, 1], [2], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\l saveOrd(in2)\\n", "test_case_results": [1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], "other_info": {}, "test_fitness": 450}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),int(3.0)) + len(in0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 634}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 2, 2, 0, 1, 1, 0, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),int(3.0)) + len(in0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 634}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 44, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),int(6.0)) + len(in0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 608}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [0, 3, 2, 3, 3, 3, 2, 2, 0, 0, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 44, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 19, 4, 6, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 \\l abs(divInt(max(len(in1), min(( mod(i0,i1) - i0 ), int(26.0))),int(9.0))):{:\\nres0 = min(len(in2), divInt(i1,int(7.0))) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 567}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 2, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 1, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 44, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 7, 2, 2, 1, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le divInt(int(37.0),( len(s1) + i0 ))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], "other_info": {}, "test_fitness": 304}, {"genotype": [[0], [0, 1], [1, 0], [1], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 8, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [3, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [0, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 44, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in0) \\le int(18.0)\\nin2 = s1\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [6, 1, 7, 8, 3, 5, 5], [1, 2, 1, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 2, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 45, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 19, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( int(6.0) + i2 )), i1)), divInt(len(in2),max(min(int(1.0), i2), i0)))) \\l int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 340}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 46, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(26.0)) \\l divInt(max(len(in1), min(i1, ( i0 + i1 ))),i2)\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 487}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 1, 1, 5, 5], [0, 0, 1, 0, 2, 1, 0], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1], [2, 1, 3, 2, 0, 3, 0, 1, 1], [1], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 46, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 12, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(int(26.0)) \\l divInt(max(len(in1), abs(i0)),( i0 - i1 )):{:\\nres0 = i0 \\le int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 487}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 5, 7, 3, 5, 5], [1, 0, 1, 2, 2, 1], [1], [3, 3, 0, 1, 3, 3, 0, 2, 0, 0, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 46, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 5, 0, 11, 1, 4, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(i1, int(26.0))) \\l len(in1):{:\\nres0 = min(i0, divInt(i1,i2)) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 487}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 7, 7, 3, 5, 5], [1, 0, 1, 2, 0, 1], [1], [1, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 2, 0, 3, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 46, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(26.0) \\l abs(divInt(max(len(in1), min(i1, ( i0 * i1 ))),i2))\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 487}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 7, 7, 1], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 46, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + divInt(len(in1),( ( i0 + int(3.0) ) + int(7.0) )) ) * int(5.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 607}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [8, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 4, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 47, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(86.0))) \\l saveOrd(in2):{:\\nres0 = min(max(mod(i1,int(9.0)), int(7.0)), i1) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1], "other_info": {}, "test_fitness": 486}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1], [3, 7, 5, 8, 7, 7, 1], [2, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 0, 1, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 47, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 16, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( divInt(len(in0),divInt(len(in0),( ( i2 + i0 ) + int(37.0) ))) + int(5.0) ):{:\\nres0 = i1 \\le divInt(int(8.0),int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 642}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 5, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 47, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),i1) * len(in2) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 599}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 2, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 0, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [2, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 47, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 14, 2, 6, 1, 1, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(getCharFromString(in1, min(min(int(1.0), mod(i2,i2)), i0))) * int(7.0) ), i2)) \\l len(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 578}, {"genotype": [[0], [1, 1, 1], [2, 1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [3, 4], [1, 1], [0, 0], [], [], [], [], [1], [1, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 0, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 47, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 2, 2, 4, 1, 8, 1, 2, 1, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(in0[int(1.0):]) \\ge i0:{:\\nres0 = int(6.0) \\le divInt(len(in2),i2)\\n:}else:{:\\ni1 += i0\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 599}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 1, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 2, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [2, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 48, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 9, 2, 3, 2, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(16.0)) \\le len(in0[divInt(( len(in2) + i0 ),i2):])\\ni1 -= int(1.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], "other_info": {}, "test_fitness": 467}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [5], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 7, 8, 3, 5, 5], [2, 2, 2, 2, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0], [2, 2, 3, 0, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 48, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1.endswith(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 430}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [2, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [4, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 49, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 4, 0, 2, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(16.0)) \\le len(in1[int(3.0):])\\n", "test_case_results": [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 525}, {"genotype": [[0], [1, 1], [0, 0], [0], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 5, 7, 8, 3, 5, 5, 8], [0, 0, 1, 1, 0, 1, 1], [1], [3, 2, 2, 3, 3, 0, 3, 2, 1, 0, 3, 1, 0, 2, 2, 2, 0, 3, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0], [1, 1, 0, 0], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 49, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 3, 4, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(mod(( len(in1) + len(in2) ),i0)) \\l abs(mod(int(15.0),i0))\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 356}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 4, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 49, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 11, 4, 3, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( divInt(len(s2),int(6.0)) + len(in2) )) \\le divInt(( i2 + int(7.0) ),int(4.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 341}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1], [2, 6, 9, 2, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 0, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1], [2, 2, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 4, 0, 10, 1, 4, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(abs(int(2.0))) \\l len(in1):{:\\nres0 = min(i1, i0) \\le ( i1 * i2 )\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 623}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 1, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 0, 17, 3, 7, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( ( len(s2) + max(i2, divInt(i1,i0)) ) - i2 ), int(1.0))) \\l min(len(in2), max(int(7.0), i0))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 659}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [1, 0, 2, 1, 2, 1, 1], [1], [1, 3, 2, 3, 2, 3, 1, 2, 0, 1, 2, 3, 3, 3, 2, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0], [2, 3, 2, 0, 0, 3, 1, 0, 1], [0, 2], [1, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 3, 3, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(1.0) \\le abs(mod(len(in1),( abs(int(7.0)) + ( i1 * int(9.0) ) )))\\n", "test_case_results": [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "other_info": {}, "test_fitness": 631}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 52, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + divInt(len(in0),( ( i1 + int(3.0) ) + int(7.0) )) ) * int(9.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 656}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 7, 5, 3, 5, 5, 8], [0, 0, 2, 1, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 1, 1, 3, 2, 0, 2, 2, 2, 0, 3, 1, 1, 1, 1, 1, 0], [1, 0, 1, 1, 1, 0], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0, 0], [0, 1, 1, 0], [4, 1, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 53, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 3, 0, 24, 6, 7, 2, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l abs(divInt(len(in1),len(s1))):{:\\nres0 = abs(min(( int(5.0) + int(7.0) ), min(mod(i0,mod(divInt(( i0 + max(int(5.0), int(3.0)) ),int(5.0)),int(5.0))), int(8.0)))) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 642}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 6, 9, 6, 5, 5], [1, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 2, 3, 3, 3, 1, 0, 0, 3, 1, 3, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 0, 1, 0, 1, 4, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 53, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 3, 0, 21, 4, 8, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(( len(in1) + len(in2) ),min(int(6.0), i1))):{:\\nres0 = i0 \\le max(int(9.0), min(max(mod(mod(i2,saveOrd(in1)),int(6.0)), int(5.0)), int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 656}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [3, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 53, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in0[int(16.0):]) \\le len(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], "other_info": {}, "test_fitness": 543}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 0, 3, 5, 5], [1, 1, 2, 2, 0, 1, 1], [1], [2, 3, 1, 0, 3, 3, 3, 2, 0, 0, 3, 0, 3, 3, 2, 1, 0, 3, 1, 0, 3, 1, 1], [1, 0, 1, 1], [2, 1, 3, 2, 0, 0, 4, 1, 1, 2], [0], [1, 0, 0], [4, 5, 4, 1, 4, 5], [], [], [0, 0, 0, 0, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 2], [], [], [], [], []], "fitness": 53, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 6, 0, 20, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(abs(int(1.0)),i1) \\l max(len(in1), abs(( i1 + i2 ))):{:\\nres0 = min(i2, min(saveOrd(in2), divInt(int(0.0),i0))) \\le max(int(9.0), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 642}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 6, 5, 5], [1, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 0, 0, 0, 1, 4, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 53, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 0, 11, 2, 4, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(( len(in1) + len(in2) ),min(i1, i0))):{:\\nres0 = i2 \\le int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 656}, {"genotype": [[0], [1, 1], [2, 0], [0], [0, 2], [0], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 9, 2, 8, 5], [0, 1, 2, 0, 2, 0], [1], [0, 3, 2, 2, 3, 3, 2, 2, 0, 0, 3, 2, 3, 1, 2, 2, 0, 0, 1, 0, 1, 3, 1, 0], [1, 1, 1, 1, 1, 1, 0], [2, 3, 3, 2, 0, 0, 1, 4, 2], [0], [1, 1, 1, 1, 1, 1], [4, 5, 3, 2, 4, 5], [], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 6, 0, 20, 7, 5, 1, 6, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = i0 \\l abs(mod(mod(len(in0),len(s2)),mod(mod(i1,i2),abs(mod(min(int(10.0), mod(( i0 + i2 ),int(9.0))),i0)))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 3, 0, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 4, 0, 17, 3, 4, 0, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(getCharFromString(s2, divInt(int(3.0),len(in2)))) \\le mod(len((in0 + (s2[min(i0, i2):][int(8.0):int(2.0)] + in1))[int(8.0):]),i2):{:\\nres0 = divInt(int(7.0),i0) \\le int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1], "other_info": {}, "test_fitness": 662}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [2, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 56, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 4, 0, 2, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(16.0)) \\le len(in0[int(3.0):])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 717}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5], [1, 0, 2, 1, 2, 1, 1], [1], [1, 3, 2, 2, 2, 3, 1, 2, 0, 1, 2, 3, 3, 3, 2, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1], [2, 3, 3, 0, 0, 3, 1, 0, 1], [0, 2], [1, 0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 56, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 19, 6, 5, 2, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(1.0) \\le abs(mod(divInt(( len(in1) + int(6.0) ),( i1 * int(9.0) )),mod(len(in2),min(min(divInt(i0,i2), i1), i2))))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 642}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [2, 4], [2, 1], [0, 0], [3], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 4, 1, 5, 5], [0, 0, 1, 0, 1, 1, 0], [1], [3, 2, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1, 2], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 2], [], [], [], [], []], "fitness": 56, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 7, 0, 23, 4, 7, 2, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 != in2:{:\\nres0 = abs(divInt(( max(len(in0), min(i0, divInt(i0,i1))) - i0 ),int(26.0))) == min(len((s2 + (in1[min(( i1 * int(9.0) ), int(4.0)):][:i1] + in2))[i0:int(1.0)]), int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0], "other_info": {}, "test_fitness": 599}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 2, 7, 1, 5, 5], [1, 0, 1, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 2, 0, 3, 1, 1], [1, 0, 0], [2, 2, 3, 0, 0, 3, 4, 1, 1], [2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 4, 0, 14, 2, 7, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(abs(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)))) \\l int(26.0):{:\\nres0 = len(in2) \\le saveOrd(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 502}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [1, 0, 2, 1, 2, 1, 1], [1], [1, 3, 3, 3, 2, 3, 1, 2, 0, 1, 2, 3, 3, 3, 2, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0], [2, 3, 3, 0, 0, 3, 1, 0, 1], [0, 2], [1, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(1.0) \\le abs(len(in1))\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [2], [], [], [], [1, 1, 1, 1, 1], [5, 5, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 2, 2, 0, 1, 1, 3, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 2, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not saveOrd(s2) \\le ( divInt(i1,divInt(len(s2),( ( i0 + int(5.0) ) + int(5.0) ))) + len(in0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], "other_info": {}, "test_fitness": 429}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 0, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 2, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 0], [2, 1, 3, 0, 0, 3, 3, 1, 1], [2], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(i1) \\l divInt(max(len(in1), min(i0, ( i1 * i2 ))),i1)\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 7, 8, 3, 5, 5], [1, 2, 1, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 3, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 19, 2, 9, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(i1, ( int(1.0) - i2 )), len(in2)) ), int(1.0))) \\l max(min(max(int(7.0), i1), i2), int(8.0))\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 428}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [3], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1 != in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [3], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 != in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [3], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [6, 7, 9, 3, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 != in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [2, 6, 9, 7, 3, 5, 5, 4, 9, 4, 3], [1, 0, 1, 1, 1, 1, 2, 2, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 3, 1, 0, 1, 1, 1, 2, 2, 2, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1, 1, 1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 11, 11, 9, 0, 31, 6, 9, 3, 3, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1[min(min(i1, ( i0 - i1 )), i1):int(26.0)]),len(in2)), min(max(mod(i1,max(int(9.0), i1)), int(7.0)), int(3.0)))) \\l int(5.0):{:\\nres0 = ( divInt(( i2 - int(5.0) ),i2) - int(4943.0) ) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 627}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 0, 1], [9, 5, 9, 8, 5, 6, 2, 5], [0, 1, 1, 1, 1, 2, 1, 1, 0], [0], [3, 3, 3, 3, 2, 2, 3, 3, 0, 1, 0, 3, 3, 1, 3, 2, 0, 0, 1, 2, 3, 1, 0, 1, 0, 2, 3, 3, 2, 0, 0, 1, 1, 3], [1, 0, 1, 1, 1, 0], [3, 2, 3, 2, 0, 0, 3, 3, 1, 2, 0, 1, 4], [0, 1], [0, 1, 0, 1], [2, 5, 0, 2, 4, 5, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s2) \\l abs(len(in2))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [3, 6, 9, 7, 3, 5, 5], [2, 0, 1, 2, 1, 1], [1], [3, 3, 0, 0, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 != in2:{:\\nres0 = abs(max(i2, i0)) \\l len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 603}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 4, 4, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 0, 2, 1, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 1, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 3, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 4, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\g ( mod(len(in2),mod(i0,( int(6.0) + i0 ))) * int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 426}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [2, 1], [0, 0], [3], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 7, 7, 3, 5, 5], [1, 0, 1, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 != in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [3], [], [], [], [], [1, 1, 1, 1, 1], [3, 3, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 != in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [4], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 7, 7, 3, 5, 5], [0, 0, 2, 1, 2, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 0, 3, 1, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [0, 1, 3, 0, 1, 3, 0, 1, 1], [2], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 1], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 7, 0, 20, 3, 6, 1, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(max(divInt(len(in1),min(max(i0, ( i0 * i2 )), i1)), int(26.0)), i2) \\l len(in2):{:\\nres0 = in0.startswith((s2 + (in1[:int(7.0)][divInt(i1,int(7.0)):] + in2))[int(3.0):i0])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 0, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [1, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 60, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 4, 3, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(i0, ( len(s2) + divInt(len(in2),divInt(( i2 + int(3.0) ),int(7.0))) )) \\le int(9.0)\\n", "test_case_results": [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 449}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [0, 5, 6, 0, 3, 5, 5], [1, 1, 2, 1, 0, 1, 1], [1], [1, 2, 3, 1, 3, 1, 3, 2, 0, 2, 3, 1, 3, 3, 2, 1, 0, 3, 0, 0, 3, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 4, 1, 2], [0], [1, 0, 0], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 60, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 0, 0, 7, 1, 3, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(05.0) \\l mod(abs(int(6.0)),len(in1)):{:\\nres0 = int(0.0) \\le len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 596}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 4, 8, 7, 7, 1], [2, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 2, 1, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 2, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 1, 1], [2, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 60, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 9, 3, 3, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in0),i2) * abs(mod(int(3.0),i0)) )\\n", "test_case_results": [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 751}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [1], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 0, 5, 5, 1], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1, 3, 1], [1, 0, 1], [2, 1, 2, 0, 0, 3, 4, 1, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 62, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 5, 0, 25, 3, 10, 1, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(abs(min(min(int(26.0), ( i1 * i0 )), i1)),int(9.0)), len(in1))) \\l saveOrd(in2):{:\\nres0 = in0 not in (s2 + (in1[:max(mod(i2,int(7.0)), int(0.0))][:i1] + in2))[max(int(5.0), int(5.0)):abs(int(1.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 682}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [3, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 1, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 2, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 62, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(36.0):]) \\le int(37.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], "other_info": {}, "test_fitness": 523}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 8, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 3, 2], [], [0, 0], [1], [5], [5], [], []], "fitness": 63, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 4, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(18.0):len(in2)]) \\le int(37.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], "other_info": {}, "test_fitness": 458}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 0, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 64, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(i2, ( i0 * i0 )), i2) ), int(17.0))) != len(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 604}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 6, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 4, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 65, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(saveOrd(in2),divInt(len(in0),( ( i0 + int(9.0) ) + int(6.0) ))) + int(4.0) )\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 596}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [5, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 5, 9, 8, 3, 5, 5], [1, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 2, 0, 3, 2, 0, 1, 3, 1, 3, 3, 3, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 0], [2, 3, 3, 0, 0, 3, 1, 0, 1], [0], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 65, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 17, 3, 7, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) != abs(mod(len(in1),mod(i1,len(in2)))):{:\\nres0 = ( i0 + int(5.0) ) \\ge min(int(9.0), min(len(in0), max(i2, i2)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 658}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 4, 4, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 3, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 67, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\g ( len(in2) + len(in0) )\\n", "test_case_results": [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], "other_info": {}, "test_fitness": 434}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 9, 5, 5], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 2, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0], [2, 1, 3, 1, 0, 3, 0, 1, 1], [2, 2], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 67, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 5, 0, 23, 4, 8, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),max(min(i1, ( i1 * i1 )), divInt(int(26.0),len(in2)))), min(max(( i2 * int(9.0) ), int(7.0)), i1))) \\l int(9.0):{:\\nres0 = int(5.0) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 533}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 0, 4, 1, 0, 1], [0, 1], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 68, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(i2, ( i1 - i0 )), i2) ), int(17.0))) \\l saveOrd(in2)\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 658}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 4, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 68, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( i1 + saveOrd(in2) )\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 9, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0], [4, 4, 2, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0, 0], [2, 5, 0, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 68, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 21, 6, 6, 2, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(saveOrd(in2),mod(abs(min(divInt(i0,int(5.0)), int(3.0))),int(3.0))) + min(( int(9.0) + i0 ), min(i1, divInt(i0,int(7.0)))) )\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1], [3, 7, 7, 1, 7, 7, 1, 5, 8, 9, 0, 3, 5, 0], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 2, 1, 1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 1, 3, 2, 2, 1, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0], [4, 4, 0, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0, 0, 0, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 68, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 5, 0, 28, 11, 4, 5, 6, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le divInt(( saveOrd(in2) + divInt(min(( divInt(( int(3.0) + int(7.0) ),divInt(i0,divInt(int(7.0),int(1.0)))) - int(7.0) ), i0),mod(i1,int(7.0))) ),min(( ( int(158903.0) * i0 ) - i2 ), int(50.0)))\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [4, 6, 9, 7, 0, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [3, 1, 2, 0, 0, 3, 4, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 68, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 15, 2, 7, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l int(46.0):{:\\nres0 = divInt(max(abs(min(i1, ( i0 * i1 ))), i2),int(9.0)) \\le min(len(in2), saveOrd(in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 648}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [1], [], [0], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 1, 1], [0, 5, 3, 2, 4, 5, 3], [1], [], [0, 4, 0, 2, 3, 0, 3, 0, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\ns0 = in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [1], [0, 1, 1, 1, 1], [1, 6, 2, 8, 4], [0, 1, 2, 0, 2, 0], [0, 1], [3, 3, 3, 3, 3, 2, 0, 2, 1, 0, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 4, 4, 2, 1, 2], [0], [0, 0, 0], [4, 5, 4, 1, 4, 4, 2, 3], [1], [], [2, 1, 3, 0, 0, 4, 2, 2, 2, 0, 0, 4, 0, 1, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 1, 2, 2], [0], [17], [], [], []], "fitness": 69, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 6, 1, 18, 2, 8, 1, 1, 5, 1, 0, 13, 2, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(\"\"R\"\"[len((in1 + in2)):]) \\g len(in1[saveOrd(s1):][saveOrd(saveChr(( i0 + divInt(int(16.0),i1) ))):][:i2].strip(in1)):{:\\nres0 = int(2.0) \\le abs(max(abs(int(8.0)), i0))\\n:}else:{:\\ni2 = i0\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 2, 0, 0, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 0, 3, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 12, 2, 5, 2, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(getCharFromString(in1, min(len(in2), i2))) + ( i2 * i0 ) ), i0)) \\l int(17.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [0, 1, 1, 1, 2, 0], [0, 1], [0, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le ( divInt(saveOrd(s2),divInt(len(in2),( ( i1 + int(6.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 1, 0, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 0, 1, 0, 3, 1, 0, 1], [0, 1], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 6, 0, 21, 2, 9, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( min(max(min(i2, ( i1 + len(in1) )), i0), int(17.0)) - max(min(max(int(9.0), i2), int(8.0)), i0) ), i1)) \\l int(3.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [3, 1, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [0, 1], [0, 1, 3, 3, 2, 3, 1, 0, 1, 3, 1, 1, 3], [0, 0, 1, 0, 1, 1, 0, 0], [4, 1, 3, 3, 4], [1, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 3, 0, 0, 4, 4, 2, 0, 0, 3, 0, 1], [2, 0, 0], [], [2, 1], [1], [5], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le int(31.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [0, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( divInt(len(s1),divInt(len(in2),i0)) + ( ( int(5.0) + int(7.0) ) + int(4.0) ) ), i0) \\le divInt(int(8.0),i1)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [0, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i1 \\le ( divInt(saveOrd(s1),divInt(len(in2),( ( i0 + int(5.0) ) + divInt(int(7.0),i1) ))) + ( int(4.0) * i0 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 9, 1, 8, 7, 7, 1], [0, 1, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 3, 1, 1, 1, 3, 2, 1, 0, 1, 0, 2, 0, 1], [1, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 2, 2, 1, 2, 0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 18, 6, 5, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) != divInt(( len(in2) - divInt(len(in0),( ( min(int(3.0), int(9.0)) + int(1.0) ) * min(divInt(int(8.0),i0), int(7.0)) )) ),i1)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 680}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [0, 2, 2, 3, 2, 3, 2, 2, 2, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 2, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 2, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le ( divInt(saveOrd(s2),divInt(len(s2),( ( divInt(int(3.0),int(7.0)) - int(9.0) ) + int(8.0) ))) + ( int(7.0) * i2 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [3, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s2) \\le ( divInt(len(in2),( len(in0) * ( ( i2 + int(6.0) ) + min(int(7.0), int(9.0)) ) )) * divInt(int(8.0),i2) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 5, 3, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 4, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 0, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\g ( divInt(len(s0),mod(saveOrd(in0),( ( i1 + int(5.0) ) + int(5.0) ))) + int(3.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [5, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [9, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 7, 0, 22, 3, 8, 1, 2, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(s1),min(min(i1, ( i0 * i1 )), i2)), int(96.0))) != len(getCharFromString(in2, min(max(mod(i1,int(9.0)), int(7.0)), i1))):{:\\nres0 = i1 \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [2, 0, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( i1 + divInt(len(s2),divInt(len(in2),( ( i2 + int(3.0) ) + int(7.0) ))) ) \\le int(9.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 5, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [0, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 12, 5, 1, 3, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i1 \\le ( divInt(saveOrd(s1),divInt(i0,( ( i1 + int(5.0) ) + int(5.0) ))) + int(4.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [3, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 9, 9, 8, 3, 5, 5], [2, 0, 2, 1, 0, 1, 1], [1], [1, 3, 2, 3, 3, 2, 2, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0, 0, 2], [1, 0, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 6, 0, 22, 6, 6, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(2.0) \\ge abs(mod(len(in1),len(in2))):{:\\nres0 = ( divInt(mod(i2,i0),abs(int(9.0))) + i2 ) \\le min(( ( i1 + min(int(9.0), i0) ) * int(8.0) ), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 593}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1 in in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [3, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [0, 1], [0, 1, 3, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3], [0, 0, 1, 0, 1, 1, 0, 0], [4, 1, 3, 3, 4], [1, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 3, 0, 0, 4, 1, 2, 0, 0, 3, 0, 1], [2, 0, 0], [], [2, 1], [1], [5], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le int(3.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 2, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) != divInt(divInt(len(in2),divInt(len(in0),( ( i1 + int(9.0) ) + int(7.0) ))),int(2.0))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 8, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 0, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 1, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 10, 4, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) != ( divInt(i2,divInt(len(in2),i2)) + ( i2 * int(5.0) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 3, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 0, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 4, 4, 2, 0, 0], [1, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 2, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le saveOrd(s2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 4, 4, 8, 7, 7, 1], [2, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 2, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 0, 18, 5, 4, 3, 2, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s2[( divInt(len(in2),mod(len((in0 + (s2[( int(3.0) + i2 ):][int(4.0):] + in1))[:min(int(4.0), i0)]),( int(8.0) + int(7.0) ))) + int(7.0) ):]) \\le i0\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 4, 3, 2, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( i1 + len(s2) )) \\le divInt(len(in2[divInt(( i2 + int(3.0) ),int(7.0)):]),int(9.0))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [1], [3, 2, 3, 3, 2, 3, 3, 3, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( len(in2) + saveOrd(in1) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 678}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [0, 0, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le i2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 1, 3, 0, 0, 3, 0, 1, 1], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 5, 4, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s2) \\le ( divInt(max(mod(len(in2),min(( i0 + int(3.0) ), int(2.0))), int(2.0)),i2) + ( int(8.0) + i2 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 1], [], [0, 0], [], [], [3, 1], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1], [3, 7, 5, 8, 7, 7, 1], [0, 0, 1, 0, 2], [1], [1, 1, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(37.0) \\ge int(5.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 3, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) != ( divInt(len(in2),divInt(len(in0),( ( i2 + min(int(3.0), int(7.0)) ) + i2 ))) + divInt(int(2.0),i2) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 684}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 3, 1, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 1, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 2, 4, 2, 4, 5, 1], [], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 10, 3, 3, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(5.0) \\le ( divInt(saveOrd(s2),mod(len(s2),max(int(3.0), int(3.0)))) + int(6.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0, 1], [0, 5, 3, 2, 4, 5, 3], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [3], [], [], [], [10]], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 13, 4, 3, 2, 2, 6, 1, 0, 11, 0, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\ge ( divInt(len(\"\"\"\\\\\"\"\"),divInt(len(in2),int(3.0))) + ( i0 + int(8.0) ) )\\nin0 = (s2 + (in1[int(2.0):][int(8.0):] + in2))[i2:]\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1, 8, 9, 0, 9, 6, 4, 9, 9, 2, 0], [0, 2, 1, 0, 2, 0, 0, 1], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 1, 2, 2, 3, 1, 3, 0, 1, 1, 3, 2, 1, 1, 2, 0, 0], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0, 1, 1, 3], [0, 0, 0, 2, 1, 2, 0, 2], [0, 1, 0, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 0], [0, 3, 2], [4], [2, 2, 2, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 17, 17, 8, 0, 39, 12, 8, 8, 4, 6, 0, 0, 13, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2[mod(len((in0 + (s2[:min(divInt(i0,int(3.0)), int(8.0))][( i2 + mod(int(2.0),i1) ):] + in1))[int(8.0):]),i0):]),( i2 + int(7.0) )) + ( min(int(718.0), ( ( max(int(90.0), max(i0, int(9.0))) * int(6499.0) ) - len(getCharFromString(in2, ( int(2.0) * int(0.0) ))) )) + ( i0 * i1 ) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 1, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 1, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) != int(5.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0], [2, 3, 3, 2, 4, 0, 1, 1, 2], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 5, 3, 1, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(divInt(mod(len(s2),divInt(len(in2),mod(( i1 + i2 ),int(6.0)))),int(7.0))) \\le int(9.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 4, 4, 0, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 3, 0, 18, 6, 3, 3, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2[( divInt(len(in2),mod(len((in0 + (s2[:( ( i0 + int(3.0) ) + int(4.0) )][int(4.0):] + in1))[i0:]),mod(int(0.0),int(7.0)))) + int(71.0) ):]) \\g i0\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [5, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 2, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1], [1, 0, 1, 1, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 6, 0, 23, 5, 7, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),( min(i1, mod(i0,i1)) * i0 )), int(26.0))) != min(len(in2), min(divInt(i1,int(9.0)), int(7.0))):{:\\nres0 = i1 \\le ( int(3.0) + int(5.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 2, 7, 4, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 1, 0, 3, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 0], [0, 1, 3, 0, 0, 3, 0, 1, 1], [2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 12, 1, 5, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(max(divInt(len(in1),min(int(26.0), i1)), min(i0, i1)), i2) \\l int(2.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 4, 3, 7, 6, 3, 6], [2, 2, 1, 0, 2], [1, 1], [0, 0, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 4, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 2, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i2 \\le i2\\ni1 += saveOrd(in0[i0:])\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 8, 5, 8, 7, 7, 1], [0, 2, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 2, 3, 2, 1, 0, 1, 0, 2, 0, 1, 3, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 0, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 5, 0, 24, 7, 6, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s2) \\le ( divInt(len(in2),divInt(min(min(( i0 + int(3.0) ), int(8.0)), ( min(divInt(int(5.0),i2), int(8.0)) + i1 )),( i0 + int(7.0) ))) * min(int(7.0), i2) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 0], [2], [0, 0], [], [0, 0], [], [], [3, 3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 8, 5], [1, 2, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 1, 3, 3, 2, 2, 0, 3, 1, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 4, 2], [0], [1, 1, 1], [4, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 3, 0, 21, 4, 9, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l abs(mod(len(in1),len(in2)))\\nres0 = abs(min(( i1 + i2 ), min(int(9.0), max(saveOrd(s2), mod(mod(i2,abs(int(8.0))),int(3.0)))))) != int(8.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [3, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 8, 5], [1, 2, 2, 2, 0, 1, 1], [1], [1, 3, 0, 0, 3, 3, 3, 2, 0, 0, 3, 1, 3, 3, 2, 2, 0, 3, 1, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 4, 2], [0], [1, 1, 1], [4, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\ge abs(i1)\\nin1 = in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5], [0, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 0, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [0, 0, 1, 1], [2, 4, 3, 2, 0, 0, 1, 0, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 3, 0, 10, 1, 5, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\l abs(( saveOrd(in1) + len(in2) )):{:\\nres0 = abs(min(i0, i0)) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 682}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 7, 1, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [0, 2, 2, 3, 2, 1, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 5, 1, 3, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le ( ( saveOrd(s2) + divInt(int(2.0),divInt(( i0 + int(7.0) ),int(1.0))) ) + int(8.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [9, 5, 9, 8, 5, 6, 2, 5, 2, 7], [0, 1, 1, 1, 1, 2, 1, 1, 0], [0], [3, 3, 3, 3, 2, 2, 3, 3, 0, 1, 0, 3, 3, 1, 3, 2, 0, 0, 1, 2, 3, 1, 0, 1, 0, 2, 3, 3, 2, 0, 0, 1, 1, 3, 0], [1, 0, 1, 1, 1, 0], [3, 2, 3, 2, 0, 0, 3, 3, 1, 2, 0, 1, 4], [0, 1], [0, 1, 0, 1], [3, 5, 0, 2, 4, 5, 5], [1], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 4, 1], [0, 3, 2], [4], [0, 0, 0, 2], [3], [], [], [], [21]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 9, 0, 35, 6, 13, 2, 4, 6, 1, 0, 14, 1, 0, 4, 1, 0, 0, 0, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in0[abs(len(in2)):abs(divInt(( min(min(i0, int(95.0)), i1) + len((s0 + (s2[len(in1):][int(9.0):max(mod(i1,i1), int(8.0))] + in2))[divInt(abs(int(5.0)),i1):int(6.0)]) ),i2))]) \\l mod(min(max(( i1 - i1 ), int(25.0)), int(27.0)),saveOrd(getCharFromString(\"\"<\"\", i0)))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], [2, 6, 9, 7, 3, 5, 5, 2, 8, 9, 0, 0], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 2, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 3, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0], [2, 1, 3, 0, 4, 0, 0, 1, 1], [2], [0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 4, 0, 24, 4, 9, 1, 3, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(getCharFromString(in1, min(saveOrd(in2), mod(mod(i0,i1),i1)))),int(26.0)), min(min(max(( i2 * max(int(9.0), int(7.0)) ), int(3.0)), int(5.0)), int(5.0)))) \\l int(28900.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0], [1, 1, 0, 1, 1, 1, 1], [1, 9, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [1, 1, 2, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [], [5], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 5, 5, 2, 0, 9, 2, 1, 1, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(1.0) \\le int(9.0):{:\\nres0 = divInt(int(37.0),( saveOrd(in0[i0:]) + i2 )) \\le int(6.0)\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [1], [], [], [1, 1, 1, 1, 1], [4, 1, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(1.0) ))) + int(4.0) ) or i0 \\le divInt(int(8.0),i1) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [2, 0, 0, 2, 0, 1, 0], [1], [3, 2, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1], [2, 1, 3, 2, 0, 3, 1, 0, 1], [0, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 12, 3, 4, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( ( max(len(in1), abs(i2)) + mod(i0,i0) ) * i2 )) \\l int(17.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1 in in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [3, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 2, 1, 3, 5, 5], [1, 1, 1, 2, 2, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 0, 1, 2, 0, 1, 1, 1], [1, 0, 0, 0], [2, 1, 2, 0, 0, 3, 0, 1, 1], [2, 0, 0], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 7, 0, 22, 4, 7, 3, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(mod(abs(min(min(i1, ( i1 * i1 )), i2)),int(26.0)), len(in1))) \\ge min(i2, ( i1 + int(2.0) )):{:\\nres0 = ( i0 + int(1.0) ) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [0, 1], [0, 0], [], [1], [], [0], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 2, 1, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [1, 2, 2, 1, 2, 3, 2, 1, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [3, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 10, 4, 1, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(5.0) \\l ( divInt(int(7.0),divInt(saveOrd(in0),( int(4.0) + i1 ))) + int(8.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 0, 1, 1, 1, 2, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 2, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 3, 4, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + divInt(saveOrd(in1),min(i0, int(5.0))) ) + int(3.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 678}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [3, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [2, 2, 2, 1, 2, 1, 2, 2, 3, 0, 1, 1, 2, 2, 2, 0, 1, 0, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1], [4, 3, 3, 1, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 5, 0, 22, 10, 1, 6, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( divInt(divInt(int(3.0),( int(7.0) + ( divInt(saveOrd(s2),i2) + int(9.0) ) )),int(8.0)) + ( ( ( i2 * int(7.0) ) - i2 ) * divInt(i0,int(71.0)) ) ) \\le i2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [0, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le ( mod(saveOrd(s2),divInt(len(in2),( ( i2 + int(3.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [1], [], [0], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 5, 5, 8, 7, 7, 1], [1, 0, 1, 0, 2], [1], [1, 2, 2, 3, 2, 3, 2, 2, 0, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 1, 0, 0], [1, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(3.0) \\le ( divInt(saveOrd(s2),divInt(len(in2),( ( i1 - i0 ) + int(5.0) ))) * int(5.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [1, 2, 1, 3, 2, 3, 2, 3, 2, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(3.0) \\le ( int(7.0) + saveOrd(s2) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(6.0) \\l ( divInt(saveOrd(s2),divInt(len(in2),( ( i2 + int(7.0) ) + int(9.0) ))) + int(8.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [2, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0], [2, 3, 3, 2, 0, 1, 3, 1, 1], [2, 0, 0], [1, 1, 1], [1, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 3, 4, 2, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\g abs(mod(len(s1),( len(in2) * abs(( i2 + i0 )) )))\\nin1 = s2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 2, 7, 7, 1], [0, 1, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0], [3, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0, 1], [2, 4, 4, 2, 4, 5, 3], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 3, 2, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s2) \\le ( ( len(in1) + divInt(i0,( divInt(i1,int(3.0)) + int(8.0) )) ) * int(2.0) )\\nin1 = s2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( int(3.0) + int(0.0) ) + int(2.0) ))) + int(8.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 70, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\ge ( ( len(in2) + divInt(len(in0),mod(( i0 + int(9.0) ),int(7.0))) ) + int(9.0) )\\n", "test_case_results": [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], "other_info": {}, "test_fitness": 470}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 6, 7, 7, 1], [2, 1, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 3, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 4, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 70, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 6, 4, 2, 4, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) != divInt(divInt(len(in2),divInt(len(in0),( ( saveOrd((s2 + (in1[i2:][int(3.0):int(7.0)] + in2))[int(9.0):]) + mod(int(6.0),i1) ) + int(7.0) ))),i2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 674}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [1, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 71, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),int(5.0)) + saveOrd(in1) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 6, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 74, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\g ( divInt(len(in2),divInt(len(in0),( ( i0 + int(2.0) ) - divInt(int(6.0),i2) ))) + ( int(2.0) * i2 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 711}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [2], [], [], [], [1, 1, 1, 1, 1], [3, 5, 6, 8, 7, 7, 1], [0, 2, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 74, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),divInt(( i0 + int(3.0) ),int(5.0)))) + mod(i2,( int(6.0) + int(8.0) )) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 711}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 3, 3, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0], [2, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 82, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 3, 5, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\g ( mod(len(in2),mod(saveOrd(in1),min(min(int(5.0), int(3.0)), int(3.0)))) + int(6.0) )\\n", "test_case_results": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 674}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 0, 0, 1], [3, 7, 9, 8, 7, 7, 1, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 1, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 1, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 82, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 2, 1, 13, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\l ( divInt(int(37.0),divInt(len(in2),( ( i2 + int(9.0) ) + int(8.0) ))) + int(7.0) )\\ni2 = int(711.0)\\n", "test_case_results": [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "other_info": {}, "test_fitness": 710}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 6, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 1, 1, 1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 88, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\g ( divInt(len(in2),divInt(len(in0),( min(int(3.0), int(7.0)) + int(6.0) ))) + ( i0 + divInt(int(8.0),int(7.0)) ) )\\n", "test_case_results": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 818}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [2, 0, 0, 1, 0, 1, 0, 1, 2, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 1, 2, 0, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1], [1, 1, 2, 1, 0, 2, 1, 2, 0, 2, 0, 1], [0, 1, 2, 0, 1, 2, 1, 1, 1, 1, 1, 1, 0, 1, 2, 0, 1, 0, 0, 1, 1, 0, 2, 2], [0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [3, 1, 0, 3, 3, 0, 2, 2, 2], [4, 4, 5, 2, 3, 5, 2, 1, 5, 3, 4, 1, 4], [1, 1, 0, 2, 1, 1, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 1, 1, 0, 2, 2, 1, 0, 2, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 4, 3, 4, 0, 0], [2, 0, 1, 3, 0, 2, 3, 3, 3, 3, 3, 1, 3, 3], [1, 0, 1, 0, 0, 0, 1, 1], [1, 1], [1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 6, 3, 7, 6, 3, 6, 5, 7, 1, 0, 5, 2, 5, 1, 8, 8, 4, 5, 2, 6, 6, 2, 3, 5, 5, 5, 3, 1, 3, 7, 3, 9, 5, 6, 2, 4, 0, 2, 9, 9, 9, 8, 5, 4, 1, 8, 0, 1, 6, 8, 9, 4, 8, 2, 2, 9, 6, 6, 6, 1, 8, 7, 6, 3, 5], [0, 2, 1, 0, 2, 1, 2, 0, 1, 1, 0, 1, 2, 0, 1, 2, 0, 1, 1, 0, 2, 2, 1, 1, 1, 1, 2, 0, 0, 1, 2, 0, 2, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 2, 0, 2, 1, 0, 1, 0, 2, 1, 1, 2, 0, 2, 2, 0, 1, 0, 2, 2, 1, 2, 2, 0, 1, 0, 0, 1, 1, 2, 2, 0, 2, 0, 2, 0, 1, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3, 0, 2, 0, 2, 1, 1, 1, 1, 1, 3, 1, 3, 2, 0, 1, 3, 3, 0, 0, 0, 3, 0, 3, 2, 2, 3, 0, 0, 0, 3, 1, 2, 3, 2, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 3, 3, 2, 1, 0, 2, 1, 3, 2, 3, 0, 1, 1, 0, 1, 3, 2, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 2, 3, 1, 0, 1, 1, 1, 1, 2, 3, 0, 0, 2, 3, 0, 3, 2, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 3, 1, 0, 2, 2, 2, 3, 1, 2, 2, 1, 0, 0, 0, 2, 1, 0, 3, 2, 2, 1, 3, 0, 1, 0, 3, 3, 2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 2, 3, 0, 2, 3, 2, 1, 1, 0, 3, 0, 3, 1, 3, 3, 3, 0, 1, 3, 2, 0, 1, 0, 0, 1, 3, 0, 1, 2, 2, 2, 3, 0, 0, 3, 2, 0, 0, 0, 2, 1, 1, 2, 3, 1, 2, 0, 2, 1, 2, 3, 2, 0, 1, 1, 2, 0, 0, 0, 1, 2, 0, 0, 3, 3, 0, 2, 2, 3, 3, 1, 1, 2, 3, 3, 2, 0, 0, 1, 3, 1, 2, 3, 1, 3, 1, 2, 0, 0, 1, 3, 1, 0], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4, 3, 0, 4, 0, 1, 2, 3, 1, 4, 3, 3, 4, 2, 0, 2, 0, 0, 1, 4, 4, 2, 2, 2, 0, 2, 3, 3, 3, 1, 4, 3, 0, 3, 1, 3, 0, 4, 4, 1, 0, 0, 2, 3, 1, 4, 4, 2, 0, 1, 1], [0, 1, 0, 1, 2, 1, 1, 0, 1, 0, 0, 1, 0, 2, 0, 2, 0, 0, 1, 2, 0, 2, 1, 2, 1, 0, 1, 0, 2, 1, 2, 1, 2, 1], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1], [3, 5, 1, 4, 4, 1, 0, 0, 1, 3, 0, 0, 2, 2, 2, 5, 4, 3, 2, 2, 4, 1, 0, 4, 5, 1, 5, 2, 2], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0], [4, 2, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1, 0, 2, 1, 1, 4, 4, 4, 1, 1, 1, 0, 2, 1, 4, 2, 4, 1, 0, 4, 2, 4, 1, 1, 0, 2, 0, 1, 3, 2, 3, 3, 4, 2, 1, 1, 2, 2, 4, 1, 1, 2, 3, 4, 4, 2, 0, 1, 4, 0, 4, 1, 1, 0, 3, 2, 3, 0, 0, 4, 2, 0, 2, 4, 2, 1, 2, 4, 4, 1, 2, 2, 1, 0, 4, 0, 4, 0, 1, 1, 1, 1, 1, 2, 0, 4, 4, 0, 0, 2, 1, 0, 4, 1, 2, 2, 1], [0, 0, 0, 3, 0, 0, 2, 2, 2, 1, 0, 3, 1, 3, 1, 2, 3, 3, 3, 2, 1, 1, 1, 1, 3], [3, 3, 1, 4, 2, 0, 2], [2, 0, 1, 0, 2, 1, 0, 2, 2, 1, 2, 1, 2, 0, 1, 1, 2, 0, 1, 1, 0, 0, 2, 1], [1, 0, 1, 0, 0, 2, 0, 2, 0, 2, 3, 0, 3, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 3, 2, 1, 2, 1, 1, 2, 2, 0, 2, 1, 1, 0, 3, 3, 1, 1, 0, 1], [5, 17, 11, 25, 18, 0, 2, 22, 23, 22, 8, 20, 18, 10], [5, 13, 10, 8, 4, 24, 7, 14, 12, 11, 7, 23, 5, 22, 2], [5, 8, 4, 2, 7, 7, 3, 9], [21, 17, 5, 17, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 36, 36, 12, 24, 3, 7, 0, 0, 9, 13, 34, 13, 7, 14, 8, 2, 5, 66, 66, 90, 12, 245, 57, 55, 34, 31, 29, 42, 3, 109, 25, 7, 24, 42, 14, 15, 8, 5], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(getCharFromString(in0[int(16.0):], len(getCharFromString((\"\"f\"\" + \"\"F\"\"), int(3.0))))) \\le divInt(len(getCharFromString(in2, i0)[i2:int(7.0)]),len((s1 + \"\"n\"\"))):{:\\nres0 = int(6.0) \\le int(3.0)\\n:}else:{:\\ni1 += saveOrd(in1)\\nin1 = \"\"R\"\"[:i0]\\nb1 = not \"\"L\"\" in getCharFromString(getCharFromString(\"\"5\"\", ( i2 - mod(int(6.0),int(5.0)) )), int(7.0)).lstrip(\"\"Z\"\")\\ni1 += int(10525.0)\\ns1 = \"\"8S\"\"\\ni2 -= int(1.0)\\nif len(s0) != int(88.0):{:\\nloopBreak% = 0\\nwhile min(( i0 * int(4.0) ), saveOrd(\"\"4\"\"[min(i1, i1):i0])) == max(i1, abs(divInt(divInt(len(\"\"<\"\".capitalize()[i2:].capitalize()),i0),i1))):{:\\nif s0.endswith(saveChr(max(int(5.0), ( saveOrd(\"\"A\"\") - ( ( i2 - i0 ) + int(2.0) ) )))[:mod(int(6.0),( i1 - i1 ))].capitalize()):{:\\ni0 = i2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += len(\"\".\"\")\\ni1 = len(s1)\\ni1 += ( int(6.0) - i1 )\\ni1 += mod(int(2.0),saveOrd(in0[( abs(i2) * int(3.0) ):int(5.0)]))\\nloopBreak% = 0\\nfor s0 in \"\"k\"\":{:\\nb0 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i0\\ns0 = (((getCharFromString(\"\"i\"\"[int(5.0):], min(divInt(i1,i2), i0)) + \"\"C\"\") + \"\"W\"\".lstrip(\"\"e\"\")[i2:][:i1])[int(5.0):] + (saveChr(int(3.0)) + s2[abs(( ( i1 + ( min(int(1.0), i2) * int(3.0) ) ) + int(7.0) )):].rstrip())[:int(3.0)])\\nloopBreak% = 0\\nwhile \"\"yXW\"\".startswith(saveChr(int(95.0))):{:\\nres0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += mod(min(i2, i0),( max(i0, saveOrd(s2)) - divInt(saveOrd(\"\"h\"\".capitalize()),abs(i0)) ))\\nb0 = i1 \\ge mod(i1,i0)\\n:}\\n:}\\nif ( b2 or not ( ( ( \"\"I\"2o\"\" != s2 and i0 != i0 ) or i2 == i1 ) and ( ( False and i1 \\g divInt(abs(int(6.0)),i2) ) and mod(divInt(( abs(int(2.0)) * ( divInt(int(4.0),i2) + i2 ) ),i0),divInt(int(02.0),i2)) != min(( ( int(9.0) * abs(i1) ) - int(99.0) ), i0) ) ) ):{:\\nb2 = ( ((in2 + in1)[len(in0[:len(\"\"7\"\"[( i1 * ( mod(i0,mod(i2,i1)) - i1 ) ):].strip()[:i2])].rstrip(\"\"m\"\".capitalize().lstrip()[mod(len(\"\"l\"\"[:i0][:( max(mod(int(8.0),int(5.0)), i2) + saveOrd(s2) )]),i2):len(saveChr(int(4.0)))])):min(len(s2), max(i0, int(1.0)))] + saveChr(len(in1))).startswith(\"\"73U9\"\") or \"\"h\"\" in \"\"x\"\" )\\nloopBreak% = 0\\nwhile mod(i1,int(8.0)) \\ge i0:{:\\ni2 -= i2\\nloopBreak% = 0\\nfor s1 in \"\"S.#\"\":{:\\nloopBreak% = 0\\nwhile ( \"\"f\"\" in s0[int(0.0):min(i1, int(1.0))] or ( divInt(mod(saveOrd(saveChr(i2)),i2),saveOrd(saveChr(( i0 + i1 )))) * i0 ) \\le mod(int(6.0),int(8.0)) ):{:\\ni0 = divInt(max(int(9.0), ( i1 - mod(int(4.0),divInt(min(( i1 * int(8.0) ), int(2.0)),mod(i2,i2))) )),i0)\\nloopBreak% = 0\\nfor in1 in in2:{:\\nif int(2.0) \\g ( i2 - i0 ):{:\\nb2 = min(abs(i2), mod(( len(s1) * max(int(9.0), int(6.0)) ),divInt(saveOrd(\"\"w\"\"[saveOrd(in2):mod(i0,i1)]),int(6.0)))) \\le abs(int(6.0))\\n:}else:{:\\ns2 = \"\"K\"\".strip()\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = \"\"c\"\"[:( min(int(1.0), max(int(8.0), mod(i0,i0))) - int(7.0) )][max(int(635.0), i1):]\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 0], [1], [3, 3, 2, 3, 3, 3, 3, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [2], [], [], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 5, 0, 23, 3, 9, 2, 1, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(len(\"\"4\"\"), ( i1 * i0 )), i1)), int(26.0))) \\l min(max(max(( i2 - int(9.0) ), int(7.0)), i1), int(3.0)):{:\\nres0 = int(5.0) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 1, 1], [0, 5, 3, 2, 4, 4, 3], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2], [3], [], [], [], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 16, 5, 3, 2, 3, 6, 1, 0, 12, 1, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( int(3.0) + len(in2) )\\nin0 = getCharFromString((s2 + (in1[divInt(len(in1),divInt(( i0 + int(0.0) ),int(2.0))):][int(8.0):] + \"\"&\"\"))[i2:], mod(int(7.0),i2))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1], [0, 1, 0, 2, 1], [2], [0, 2, 2, 0], [], [0, 0], [], [], [3, 1], [0, 4], [2, 1, 2], [0, 0], [5, 2], [0], [], [], [], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5, 3, 9, 6, 5, 3, 1, 3, 2, 9, 4, 0, 6, 2, 0, 8, 3, 2, 3, 6], [1, 0, 1, 0, 1, 1, 0, 1, 2, 0, 1, 0, 1, 2, 2, 0, 1, 0, 1, 0, 0, 2, 2, 1, 2, 2, 2, 1, 0, 2, 0], [1], [3, 3, 2, 3, 2, 3, 3, 0, 0, 2, 0, 3, 3, 3, 3, 3, 0, 1, 1, 3, 0, 1, 1, 2, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 3, 3, 2, 3, 1, 1, 3, 3, 3, 0, 2, 1, 1, 2, 0, 2, 3, 0, 1, 3, 3, 3, 0, 2, 2, 2, 3, 0, 0, 3, 0, 0, 3, 1, 2, 2, 2, 1, 0, 3, 0, 0, 1, 0, 3, 0, 1, 3, 2, 0, 3, 1, 1, 0, 1, 1, 3, 1, 1, 0, 2, 0, 1], [1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 1, 0, 0, 0, 3, 0, 1, 1, 3, 1, 2, 1, 1, 2, 3, 2, 4, 1, 2, 2, 1, 2, 3, 1, 2, 0, 1, 0, 2], [2, 0, 0, 2, 1, 2, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [4, 5, 3, 2, 4, 5, 3, 3, 2, 5, 4], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 0, 1, 4, 1, 3, 2, 2, 1, 4, 2, 1, 0, 4, 1, 4, 4, 2, 2, 0, 2, 2, 1], [0, 3, 2, 3, 0], [4, 2], [0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0], [2, 0, 0, 0, 0, 3, 3, 0, 0, 1], [24, 24, 4, 23, 21, 21], [10], [2], [27, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 2, 0, 0, 2, 1, 3, 1, 2, 0, 0, 0, 0, 26, 26, 31, 0, 98, 17, 30, 7, 10, 11, 10, 0, 34, 5, 2, 11, 10, 6, 1, 1, 2], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1.endswith(in2)\\nin0 = s2\\nin1 = (in2 + (in0[min(max(divInt(min(( min(min(i1, i0), divInt(i1,len(in0))) * min(max(max(len(s2[:i0]), int(26.0)), int(9.0)), max(i1, int(73.0))) ), int(5.0)),( i1 + i0 )), i1), abs(i2)):i0][i1:] + \"\"2YY\"\"))[divInt(i0,i1):i2]\\nloopBreak% = 0\\nwhile max(max(mod(abs(int(5.0)),int(396.0)), len(getCharFromString(\"\"EX\\\\\\\\\"\", abs(saveOrd((\"\"?\"\"[i2:( int(5.0) + int(3.0) )][divInt(i0,( max(i1, int(1.0)) * abs(abs(max(i0, ( mod(divInt(abs(i1),i0),len(\"\"V\"\"[i0:i2].rstrip(in2))) - max(int(3.0), divInt(( ( int(2.0) * i2 ) - abs(i1) ),i2)) )))) )):int(9.0)] + \"\"V\"\".capitalize())))))), i2) \\l min(i2, int(4.0)):{:\\nb1 = getCharFromString(in1[max(divInt(i1,min(int(0.0), int(6.0))), i0):int(2.0)][:int(083.0)], abs(int(2.0))).strip() == \"\"k\"\"[int(3.0):i2][mod(i0,int(6.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [0], [16], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(\"\"Q\"\"),( ( i2 + int(6.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 1], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 0, 0, 1, 1], [4, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 2, 3, 0, 0, 0, 2, 0, 1, 3, 3, 3, 3, 0, 3, 1, 3, 0, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 4], [1], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [0], [6], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 6, 0, 23, 3, 10, 1, 2, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(\"\"G\"\"),( min(i1, i0) - i1 )), mod(i0,int(46.0)))) \\l min(len(s0), min(max(i1, max(int(9.0), saveOrd(in2))), i1)):{:\\nres0 = int(735.0) \\g int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [2, 2, 1, 0, 2], [1, 1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1, 0, 0, 0, 1, 0, 1], [], [2, 0, 2, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0, 0], [1, 0, 1, 1, 0, 1, 1], [5, 21], [5, 14, 17, 7, 25], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 1, 12, 1, 4, 1, 1, 3, 7, 0, 13, 2, 0, 3, 7, 2, 5, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(getCharFromString((\"\"f\"\" + \"\"ForV\"\"), i2)[divInt(len(getCharFromString(in2, i2)[i1:int(3.0)]),len((s1 + \"\"hz\"\"))):int(7.0)])\\ni0 += int(6.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 7, 9, 1, 2, 5, 5, 1, 4, 4, 7], [1, 0, 2, 2, 2, 1, 1], [1], [1, 2, 2, 2, 2, 3, 3, 2, 0, 1, 3, 1, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0], [1, 1, 1, 1, 1], [2, 3, 3, 0, 0, 3, 3, 0, 1], [0], [1, 1, 0, 0, 1], [4, 5, 3, 2, 4, 5, 5, 1], [0, 1], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [0, 0, 1, 2, 0, 0], [0, 0], [5, 25], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 5, 0, 22, 5, 6, 0, 5, 6, 2, 0, 11, 0, 0, 3, 2, 2, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) \\le mod(mod(divInt(divInt(abs(len(in1)),mod(i1,int(9.0))),len(in2)),int(1.0)),min(min(len(in0), i0), i2))\\ns2 = (\"\"FZ\"\" + (in1[:i2][i2:int(2.0)] + in2))[int(55.0):int(14.0)]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 7, 7, 1], [1, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 2, 3, 2, 4, 5], [0, 1], [], [1, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [2, 3], [], [], [8], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 21, 8, 3, 5, 3, 1, 2, 0, 2, 0, 0, 0, 2, 0, 0, 1, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(( divInt(len(\"\"8%\"\"),divInt(len(s2),( ( i1 + int(3.0) ) + int(7.0) ))) + divInt(i0,( int(5.0) * i1 )) )) \\le int(8.0):{:\\nres0 = i0 \\le ( i2 - int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [2], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [2, 6, 2, 7, 3, 5, 5, 8, 2, 7, 5, 3, 4, 6, 2, 2, 3, 2, 0, 1, 5, 8, 8, 0, 1, 9, 5], [1, 1, 1, 2, 2, 1, 0, 2, 0, 0, 1, 2, 1, 0, 2, 2, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 3, 3, 2, 0, 1, 2, 0, 1, 1, 2, 2, 0, 2, 1, 0, 2, 0, 2, 3, 1, 0, 3, 3, 2, 0, 1, 2, 0, 0, 1, 0, 1, 1, 3, 2, 2, 2, 0, 1, 3, 2, 2, 2, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1, 0, 4, 3, 1], [2, 0, 0, 1, 2, 0, 0, 2, 0, 1], [1, 1, 0, 0, 0, 1, 1], [4, 5, 3, 2, 4, 5, 5, 4], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 2, 3, 2, 1, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 1, 0, 0, 1, 2, 2], [1], [], [6], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 27, 27, 18, 0, 64, 17, 13, 10, 7, 8, 1, 0, 20, 0, 0, 8, 1, 0, 1, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(mod(len(in1),min(min(i1, ( int(26.0) * i1 )), i1)), int(2.0))) \\l len(in2):{:\\nres0 = in0 == (s2 + (in1[:min(max(( i2 + int(7.0) ), ( i2 + int(3.0) )), int(5.0))][( ( i1 - mod(int(5.0),i0) ) * divInt(i2,divInt(max(int(8.0), i0),min(saveOrd(in2), divInt(i0,int(2.0))))) ):] + (\"\"g\"\"[:mod(i1,i2)] + in2[int(7.0):][i1:])[int(5.0):int(34.0)][len(in1):mod(( ( i0 + int(6.0) ) + max(( ( ( i2 * i2 ) + int(2.0) ) - i1 ), i2) ),int(2.0))]))[int(320158.0):int(80195.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [3, 7, 9, 8, 7, 7, 1, 8, 4, 1, 9, 4, 9, 9, 4, 8], [0, 2, 1, 1, 0, 1], [0], [3, 3, 2, 3, 2, 2, 3, 3, 0, 1, 0, 1, 3, 3, 1, 0, 1, 1, 2, 2, 3, 2, 3, 3, 1, 3, 2, 3, 0, 3, 1, 2, 3, 1, 3, 3, 0, 0, 1, 3, 2, 3, 3, 1, 1, 1, 1, 3, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0], [2, 3, 3, 0, 0, 0, 0, 3, 3, 2, 2, 3, 4, 3, 0, 3, 2, 4, 1, 3], [0, 1, 0, 2, 2, 1], [0, 0, 0], [3, 5, 3, 2, 4, 5, 4, 2, 4, 1, 0, 2, 2], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 0, 0, 2, 4, 0, 4, 0, 4, 2, 4, 0, 0, 4, 4, 1, 2, 4, 0], [0, 3, 2, 3, 3, 3, 2, 1], [4, 3, 2, 4], [0, 0, 2, 2, 0, 1], [2], [], [], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 16, 16, 6, 0, 49, 9, 20, 6, 3, 13, 1, 0, 30, 8, 4, 6, 1, 0, 0, 1, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(in0)) \\l divInt(len(in2),( divInt(min(min(i0, int(37.0)), i2),int(9.0)) + min(min(int(8.0), i1), int(7.0)) )):{:\\nres0 = int(7.0) \\le ( ( len(in0) - ( len((s2 + (in1[abs(int(1.0)):][abs(( len(in2) + i1 )):saveOrd(getCharFromString(in1, int(8.0)))] + s2))[divInt(len(in1.rstrip(s1.capitalize())[int(4.0):]),min(len(s0.strip()[i0:i1].lstrip(s2)), int(1.0))):abs(( saveOrd(\"\"9\"\".capitalize().rstrip(saveChr(max(int(9.0), int(4.0)))[:int(9.0)])) * int(9.0) ))]) * len(s2) ) ) - int(48.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 0, 1, 2, 2, 0, 2, 1, 2, 2, 2, 1, 1, 0, 1, 0, 1], [2, 0, 1, 1, 0, 2, 0, 2], [0, 2, 2, 0, 0, 1, 1, 0, 0, 2], [0, 0, 0], [0, 0, 0, 0], [], [], [3, 3, 0, 1, 3, 1], [0, 5, 4, 0, 1], [1, 1, 2, 1, 0, 2, 0, 2, 1, 1], [0, 0, 0, 0, 0], [0, 5, 5], [0, 1], [], [1], [0, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [6, 0, 9, 8, 3, 6, 5, 6, 1, 8, 0, 5, 9, 5, 0, 0, 5, 2, 6, 7, 8, 7, 3, 6, 0, 3, 1, 5, 3, 2, 9, 0, 5, 6, 6, 2, 3, 7, 0, 2, 5, 2, 2], [1, 0, 2, 0, 0, 1, 1, 0, 0, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 0, 1, 0, 1, 0, 2, 0, 0, 0, 1, 2], [1, 1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 0, 0, 3, 2, 2, 0, 3, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 0, 0, 0, 3, 1, 2, 2, 1, 0, 2, 1, 1, 0, 3, 2, 0, 0, 0, 0, 0, 3, 2, 2, 2, 3, 1, 2, 1, 3, 2, 1, 3, 1, 0, 3, 1, 2, 1, 3, 2, 3, 2, 1, 1, 3, 2, 1, 2, 0, 3, 3, 3, 2, 2, 0, 1, 2, 3, 1, 3, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 0, 2, 3, 2, 0, 1, 3, 1, 0, 1, 2, 0, 1, 1, 1, 2, 3, 3, 1, 3, 3, 2, 0, 0, 2, 2, 3, 3, 1, 1, 2, 0, 1, 0, 3, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [2, 3, 3, 2, 0, 4, 1, 0, 1, 1, 0, 4, 4, 4, 2, 3, 3, 0, 4, 3, 3, 3, 0, 1, 0, 1, 4, 3, 2, 4, 2, 2, 0, 0, 2], [1, 0, 1, 0, 2, 1, 1, 1, 1, 1, 2, 0, 2, 0, 1, 2, 0, 0, 1, 1, 2], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [4, 5, 4, 2, 4, 5, 1, 2, 3, 5, 0, 2, 5, 5, 5, 1, 5, 2, 3, 1, 1, 4, 1, 1, 1, 3, 3, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 1, 2, 0, 0, 1, 2, 4, 0, 2, 0, 1, 0, 4, 4, 0, 4, 4, 1, 2, 2, 0, 0, 2, 0, 1, 1, 2, 2, 0, 4, 1, 1, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0], [0, 3, 2, 1, 3, 3, 2, 3], [4, 0, 1, 5], [0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 2, 1], [3, 0, 1, 0, 3, 0, 2, 1], [3, 17, 23], [13, 12], [4], [30, 0]], "fitness": 9223372036854775807, "mapping_values": [1, 18, 18, 8, 10, 3, 4, 0, 0, 6, 5, 10, 5, 3, 2, 0, 1, 2, 43, 43, 31, 2, 134, 34, 35, 21, 15, 29, 8, 3, 54, 8, 4, 12, 8, 3, 2, 1, 2], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(60.0) \\l abs(mod(len(getCharFromString(in1, len(in2))),abs(min(( i1 - i0 ), saveOrd((in1 + (s2[i2:][i0:] + in1))[max(mod(mod(i0,min(int(9.0), int(8.0))),int(3.0)), int(6.0)):int(5.0)]))))):{:\\nloopBreak% = 0\\nfor in2 in (\"\"_\"\" + s1[( mod(mod(int(61.0),( i1 + i1 )),i0) - max(int(80.0), divInt(( int(5.0) + i0 ),( int(9.0) * int(5.0) ))) ):i2]):{:\\nres0 = max(( i2 - i1 ), i2) != i1\\ns2 = in0\\nif \"\"D\"\" in in2.rstrip(s0[i2:min(divInt(divInt(( saveOrd(\"\"n\"\") - int(0.0) ),( int(0.0) - saveOrd(s2) )),( int(5.0) - saveOrd(saveChr(int(2.0)).capitalize()) )), i2)])[abs(int(6.0)):( int(7.0) - len(in2) )]:{:\\nif ( len(\"\"R\"\".rstrip().lstrip()) * mod(int(8.0),int(7.0)) ) \\le min(( int(3.0) + ( i2 * saveOrd(in2[len(in2):len(s1[( ( i2 + int(6.0) ) - ( len(\"\"\"\") * int(0.0) ) ):min(max(i1, int(3.0)), mod(int(1.0),int(5.0)))])][int(3.0):min(i2, max(i0, ( saveOrd(\"\"X\"\") + divInt(i1,int(2.0)) )))]) ) ), len(in2[int(9.0):][:i0])):{:\\ns2 = \"\"4\"\".capitalize()\\n:}else:{:\\nloopBreak% = 0\\nfor in0 in \"\"m\"\":{:\\nres0 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\nloopBreak% = 0\\nwhile s1.endswith(s1[:int(0.0)]):{:\\nloopBreak% = 0\\nfor in1 in s1.strip(s1):{:\\nloopBreak% = 0\\nwhile False:{:\\nb1 = s1.endswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += ( i0 - int(5.0) )\\ni2 -= int(6.0)\\nres0 = int(6237.0) \\l divInt(abs(saveOrd(in0)),int(02.0))\\nb1 = abs(abs(mod(i0,i0))) \\g ( divInt(min(min(int(5.0), int(2.0)), mod(i0,int(2.0))),i1) * abs(i2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = in1\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [1], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 5, 5, 5], [0, 0, 2, 1, 0, 1, 1, 1, 0], [1], [1, 3, 2, 3, 3, 2, 3, 2, 0, 0, 3, 2, 3, 3, 0, 2, 0, 3, 0, 0, 1, 1, 1, 2, 0, 1, 3, 0, 0, 0], [1, 1, 1, 0, 1, 0], [2, 3, 3, 2, 0, 0, 1, 4, 3, 1], [1, 0], [1, 1, 0, 1, 1], [4, 5, 4, 2, 4, 4, 4], [1, 0, 1, 0, 0, 0, 1], [], [0, 0, 0, 2, 3, 2, 3, 2, 2, 0, 2, 0, 3, 1, 2, 1, 1, 0], [0, 3, 2], [4], [0, 1, 1, 2, 1, 1], [0, 3, 0, 0, 1, 0, 1], [20, 0, 24, 0], [13, 22], [], [19]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 9, 0, 29, 6, 9, 2, 4, 6, 7, 0, 18, 0, 0, 6, 7, 4, 2, 0, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = in1 not in ((s2[mod(abs(divInt(i0,i0)),min(( min(max(i2, mod(i1,saveOrd(in1[:i0]))), i1) - int(9.0) ), int(8.0))):][:int(5.0)] + (\"\"U\"\" + \"\":A\"\"[:( i1 + int(5.0) )]))[:len(\"\"YnAw\"\")] + in1)[i1:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 2], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 2, 7, 4, 8, 5, 8, 8, 9, 1, 5, 3, 3, 9, 7, 4, 2, 5, 0, 7, 5, 4, 5, 2, 7, 3, 5, 6, 7, 2, 3, 7, 4, 5, 9, 6], [1, 0, 1, 2, 1, 1, 2, 0, 0, 2, 1, 0, 0, 2, 1, 1, 2, 1, 2, 2, 0, 1, 0, 1, 1, 2, 2, 2, 2, 2, 2, 0, 1, 0, 0, 0, 2, 0, 2], [1], [3, 3, 2, 3, 3, 3, 2, 2, 0, 0, 2, 2, 3, 3, 3, 2, 3, 1, 1, 2, 3, 1, 1, 1, 3, 1, 0, 1, 1, 3, 3, 3, 0, 3, 2, 1, 2, 2, 3, 0, 0, 1, 3, 2, 0, 0, 3, 3, 3, 1, 1, 2, 2, 2, 3, 2, 2, 0, 3, 2, 2, 3, 1, 2, 2, 3, 1, 2, 1, 2, 0, 0, 2, 0, 1, 1, 2, 3, 2, 0, 0, 1, 2, 2, 1, 0, 0, 3, 2, 0, 1, 1, 2, 2, 0, 0, 2, 2, 2, 2, 3, 3, 0, 1, 0, 1, 3, 0, 1, 3, 3, 3, 3, 2, 3, 2, 3, 0, 1, 3, 2, 2, 3, 2, 0, 2, 1, 0, 3, 2, 1, 3, 2, 2, 0, 3, 1, 0, 0, 0, 3, 2, 1, 1, 2, 2, 0, 3, 1, 2, 1, 0, 1, 3, 0, 0, 0, 0, 3, 2, 0, 2, 2, 0, 3, 2, 1, 3, 3, 2, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 1, 3, 0, 4, 3, 0, 1, 1, 0, 1, 2, 3, 0, 3, 0, 3, 4, 2, 4, 0, 3, 0, 3, 0, 4, 4, 0, 1, 2, 2, 0, 0, 1, 4, 2, 2, 1, 1, 0, 3, 2, 2, 3, 0, 3, 3], [2, 0, 2, 2, 2, 1, 2, 2, 1, 0, 1, 0, 0, 1, 0, 0, 1, 2, 2, 1, 1, 2, 2, 2, 2], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1], [4, 5, 3, 2, 4, 5, 2, 4, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 0, 0, 4, 2, 4, 4, 4, 1, 4, 4, 1, 2, 0, 2, 4, 2, 0, 4, 2, 1, 1, 4, 2, 1, 1, 1], [0, 3, 2, 2, 2, 1, 1, 2, 2], [4], [0, 2, 2, 0, 0, 1, 0, 1, 1], [2, 2, 3, 0, 3, 3, 2, 2], [10], [], [0, 1, 7, 0], [23, 27, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 37, 37, 39, 0, 173, 52, 47, 25, 27, 10, 8, 0, 38, 9, 1, 9, 8, 1, 0, 4, 3], "tree_depth": 64, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb2 = abs(max(divInt(len(in1),min(saveOrd(in2), ( ( i1 * i0 ) + ( ( len(in0) * min(max(( max(int(26.0), int(2.0)) * ( min(int(7.0), int(4.0)) * int(8.0) ) ), max(int(5.0), i1)), int(8.0)) ) - int(8.0) ) ))), abs(len((s2 + (in1[min(i2, len(in2)):][( int(9.0) * ( mod(min(i1, i1),int(1.0)) * len(\"\"0\"\") ) ):] + s2))[( i2 - i0 ):saveOrd(in1)])))) \\l abs(saveOrd(getCharFromString(\"\"1\"\".capitalize().capitalize().rstrip(saveChr(int(5.0)).capitalize())[int(33.0):( divInt(( min(divInt(( i0 + len(\"\">\"\") ),( divInt(min(int(9.0), divInt(divInt(len(s2[int(7.0):( int(4.0) - ( i2 + i1 ) )]),mod(i0,int(2.0))),int(5.0))),( min(( i0 + i2 ), int(0.0)) - mod(( int(7.0) + i1 ),i1) )) + saveOrd(saveChr(( i2 - int(5.0) ))[:int(4.0)]) )), divInt(divInt(i1,i2),( divInt(mod(mod(saveOrd(s1[min(i2, int(5.0)):i0]),int(2.0)),max(i1, int(7.0))),abs(abs(min(min(divInt(max(divInt(saveOrd(\"\"K\"\"[:i0].capitalize()),int(3.0)), abs(mod(( abs(mod(i1,( int(5.0) * i1 ))) * max(( int(6.0) - max(( mod(i2,min(int(7.0), i2)) - i2 ), i2) ), len(\"\"\\\\\\\\\"\")) ),( int(2.0) * int(3.0) )))),divInt(divInt(i2,abs(int(7.0))),mod(int(4.0),i2))), int(5.0)), abs(i0))))) * i1 ))) * i0 ),i0) * len(\"\"_\"\"[:divInt(i0,mod(mod(i2,min(divInt(int(9.0),len(\"\"7\"\")), len(\"\"0\"\"))),mod(i0,int(6.0))))].capitalize()) )], i2)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 0, 1, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [1], [], [18], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 16, 5, 3, 3, 2, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"s\"\") \\le ( divInt(min(divInt(max(( i1 + i0 ), int(5.0)),int(7.0)), int(4.0)),i1) + ( int(8.0) + i0 ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 0, 2, 0, 0], [1, 1], [0, 2, 0], [], [0, 0, 0], [], [], [3, 2, 2], [4, 3], [1, 1, 0, 2], [0, 0], [1], [0], [], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5, 9, 2, 4, 0, 4, 7, 1, 0, 9, 8], [1, 0, 2, 2, 0, 1, 1, 1], [1], [1, 3, 2, 1, 2, 3, 3, 2, 0, 1, 3, 1, 3, 3, 3, 0, 0, 0, 2, 0, 1, 1, 1, 1, 3, 1, 2, 1, 2, 2, 3, 1, 2, 0, 2, 2, 3, 3, 1, 0, 1, 1, 1, 3, 0], [0, 1, 1, 0, 0, 1, 1, 0, 0, 1], [2, 3, 3, 0, 0, 3, 1, 0, 1, 0, 1, 3], [0, 0, 2, 2, 2], [1, 1, 0, 1, 0], [4, 5, 3, 2, 4, 5, 4, 1, 1], [1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 1, 4, 4, 1, 4, 0, 0], [0, 3, 2, 2], [4], [0, 1, 0], [0, 1], [14], [24], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 3, 0, 0, 3, 2, 4, 2, 1, 1, 0, 0, 2, 17, 17, 8, 0, 45, 10, 12, 5, 5, 9, 2, 0, 19, 4, 1, 3, 2, 1, 1, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(1.0) \\le abs(( int(7.0) + mod(len(in1),len(in2)) )):{:\\nres0 = mod(i1,int(9.0)) \\ge min(int(8.0), min(len(in0), max(i0, i2)))\\n:}else:{:\\nif b2:{:\\ns2 = (in1 + (in2[i2:( i0 + int(3.0) )][:int(5.0)] + in1))[int(5.0):int(92.0)]\\n:}\\nb2 = getCharFromString(\"\"O\"\", min(int(4.0), ( int(04.0) * divInt(mod(max(int(7.0), ( i1 * ( divInt(min(max(int(1.0), i1), int(0.0)),int(9.0)) * int(8.0) ) )),len(\"\"y\"\".capitalize().rstrip(s1.capitalize()))),i1) ))) not in s1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2, 2], [0, 1, 0], [3, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1], [], [4], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 2, 0, 1, 1, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(\"\"e\"\") * min(min(i1, ( i1 * i1 )), i2) ), int(26.0))) \\l len(in0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 4, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [0, 0, 0, 1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [2, 2, 2, 3], [], [], [7, 0, 2], [7]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 2, 4, 0, 3, 0, 0, 0, 4, 0, 0, 3, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"702$\"\") \\le ( divInt(len(s2),divInt(len(in2),( ( i2 + int(3.0) ) + int(7.0) ))) * int(4.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [3], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [2, 8, 2, 7, 4, 5, 5, 0, 2, 9, 9, 4, 7], [0, 0, 1, 2, 1, 1, 2, 0, 1, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1, 2, 2, 3, 0, 1, 1, 2, 2, 2, 1, 0, 0, 3, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 0, 0], [2, 0, 2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [0, 0, 1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 0, 4, 1], [0, 3, 2], [4], [0, 0, 2], [2, 1, 1], [], [7, 23], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 13, 13, 12, 0, 39, 7, 11, 4, 3, 6, 3, 0, 15, 3, 1, 3, 3, 0, 2, 1, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i0, i0), i1)), i2)) \\l i1:{:\\nres0 = getCharFromString(in2, int(28.0)) != (in0 + (s2[len(in1):][min(max(( i1 * int(2.0) ), int(7.0)), i2):max(int(4.0), int(5.0))] + in2.rstrip(\"\"9hx\"\".capitalize())))[( ( min(i0, int(5.0)) + int(0.0) ) * mod(( divInt(int(2.0),i1) + i2 ),min(i2, int(9947.0))) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 5, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [0, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [1, 1], [], [17, 1], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 2, 2, 0, 3, 0, 0, 0, 2, 0, 2, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(\"\"rb\"\"),divInt(len(in2),( ( i2 + int(5.0) ) + int(5.0) ))) * int(2.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [2], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 0, 4, 8, 3, 5, 7, 3, 0, 0, 5, 5, 2, 6, 0], [2, 1, 2, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 1, 1, 2, 3, 1, 1, 3, 3, 2, 1, 1, 3, 2, 3, 0, 2, 1, 2, 0, 3, 0, 0, 2, 0, 3], [1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [2, 3, 3, 2, 4, 0, 4, 4, 1, 0, 2, 3, 2, 2, 1, 3], [0, 1, 1, 0], [1, 1, 1, 1, 0, 1], [4, 5, 4, 2, 4, 5, 2], [1, 1, 0, 1, 0, 1, 0, 1], [], [0, 4, 4, 2, 3, 0, 3, 2, 2, 0, 2, 1, 1, 1, 4, 0, 3, 1, 3, 2, 1, 2, 2, 0, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2, 1, 2, 1, 0, 2], [3, 0, 2, 1, 2, 3, 1, 2], [14], [25, 16], [3, 2, 1], [29, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 15, 15, 9, 0, 47, 10, 16, 4, 6, 7, 8, 0, 27, 3, 1, 8, 8, 1, 2, 3, 2], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(in1)) \\l mod(len(getCharFromString((in2 + (in1[abs(saveOrd(\"\"^\"\"[:min(( i2 + int(1.0) ), saveOrd(\"\"O\"\"))])):][int(0.0):] + \"\"3z\"\"))[saveOrd(s2.capitalize()):].rstrip((\"\"2,\"\" + (\"\"q1\"\"[int(4.0):] + in1[mod(mod(i1,max(i2, i2)),int(8.0)):int(3.0)][:int(5.0)]))), int(7.0))),mod(min(int(3.0), int(0.0)),abs(len(in2[divInt(int(055.0),int(2.0)):])))):{:\\nb2 = abs(( abs(i2) - mod(int(60.0),( i1 - max(i1, i1) )) )) \\le ( i0 + len(s2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [9, 7, 2, 8, 7, 7, 1, 2, 1, 9, 6, 4, 2, 6, 2, 6, 9], [0, 2, 2, 0, 2, 2, 1, 0, 2, 1, 1], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 3, 2, 1, 2, 3, 2, 0, 1, 3, 2, 2, 0, 2, 3, 2, 0, 0, 3, 3, 1, 1, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0, 1, 3, 4, 4, 3], [0, 0, 0, 2, 1, 2, 0, 0, 0], [0, 1, 0, 0], [2, 5, 3, 2, 4, 5, 2, 4, 2], [1, 1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 2, 0, 0, 4, 1, 2, 0, 4, 1, 0], [0, 3, 2], [4], [2, 0, 1, 0, 1, 0], [0, 1], [12], [18], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 17, 17, 11, 0, 44, 13, 10, 9, 4, 9, 2, 0, 22, 2, 1, 6, 2, 1, 1, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\l ( divInt(len(in2[mod(len((in0 + (s2[min(( i0 + int(9.0) ), int(7.0)):int(2.0)][:i2] + in1))[( int(8.0) + i2 ):int(7.0)]),i0):]),divInt(i2,int(7121.0))) + min(( int(9642.0) * ( max(divInt(i2,int(62.0)), len((in2[:( ( i1 - ( saveOrd(s2) * ( i0 + i2 ) ) ) + saveOrd(getCharFromString(\"\"M\"\", len(in1[int(6.0):int(9.0)]))) )] + \"\"s\"\".rstrip(s2)))) + i1 ) ), i1) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [0, 0], [1, 1], [5], [5, 23], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 8, 1, 3, 1, 1, 2, 2, 0, 7, 1, 0, 1, 2, 0, 2, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(17.0):len(in2)]) \\le int(3.0)\\ni0 += divInt(len(getCharFromString((\"\"f\"\" + \"\"x\"\"), i2)),i1)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 1, 1], [2, 2, 0, 1, 2, 0, 2, 0, 1], [2, 0, 0, 2], [0, 2, 0, 2, 2], [0, 0], [0, 0, 0], [], [], [3, 2, 0], [0, 4], [1, 1, 0, 2], [0, 0], [1], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 0, 6, 5, 5, 6, 3, 9, 5, 5, 4, 6, 6, 0, 6, 7, 6, 5, 0, 7, 3, 4, 6, 2, 8, 5, 5, 9, 2, 4, 7, 2, 4], [1, 0, 1, 2, 0, 1, 1, 0, 1, 2, 2, 1, 0, 0, 2, 1, 0, 1, 0, 0, 2, 1, 1, 2, 1, 2], [1], [1, 3, 2, 3, 3, 3, 3, 0, 1, 0, 1, 1, 1, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1, 0, 2, 0, 3, 1, 0, 3, 1, 2, 1, 1, 0, 3, 0, 2, 2, 0, 1, 3, 3, 3, 3, 1, 0, 2, 3, 0, 1, 3, 2, 2, 2, 0, 2, 2, 2, 1, 3, 1, 0, 0, 1, 2, 1, 3, 0, 1, 1, 3, 1, 0, 1, 2, 2, 0, 0, 3, 0, 0, 3, 2, 1, 2, 2, 2, 3, 0, 2, 2, 0, 0, 2, 1, 3, 1, 2, 3, 1, 0, 1, 2, 1, 1, 0, 3], [1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0], [2, 3, 3, 0, 0, 2, 1, 4, 1, 4, 4, 3, 4, 1, 0, 0, 4, 3, 0, 2, 0, 4, 4, 4, 3], [0, 0, 2, 1, 0, 0, 0, 2, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [4, 5, 4, 2, 4, 5, 1, 3, 5, 1, 0, 4, 2, 3, 2, 1, 3, 4, 5, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 3, 3, 0, 0, 1, 1, 2, 4, 3, 2, 4, 2, 2, 2, 0, 1, 1, 0, 2, 2, 2, 4, 2, 1, 2, 0, 0, 4, 4, 0, 2, 2, 0, 2, 2, 2, 1, 1, 4, 0, 0], [0, 3, 2, 1, 0, 1], [4], [0, 0, 2, 2, 0, 2, 2, 0, 2, 0, 1, 0, 0, 0, 2, 1, 0, 2], [3, 0, 3, 1, 1, 0, 1, 3], [10, 11], [9, 22, 15], [], [10, 4, 0]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 4, 5, 2, 3, 0, 0, 3, 2, 4, 2, 1, 1, 0, 0, 0, 35, 35, 26, 0, 108, 26, 25, 12, 14, 21, 8, 2, 53, 6, 1, 18, 8, 2, 3, 0, 3], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nloopBreak% = 0\\nfor in1 in s2:{:\\nres0 = min(min(i1, int(9.0)), i0) \\le int(0.0)\\nin1 = (in2 + (s1[int(6.0):][int(5.0):abs(( mod(i1,max(int(5.0), int(6.0))) + int(3.0) ))] + in0))[i2:int(9554.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in \"\"\"\\\\\"\"\":{:\\nb2 = b0\\nloopBreak% = 0\\nwhile ((s1 + s0) + \"\"K\"\") not in \"\"!\"\":{:\\nin1 = getCharFromString((s2[i0:mod(i1,saveOrd(\"\"j\"\"))][int(6.0):][i1:].rstrip(\"\"w\"\")[max(int(6.0), ( int(0.0) + int(6.0) )):i0] + in0), saveOrd(\"\"L\"\"[i1:( ( i2 * int(7.0) ) - saveOrd(s2[len(s1):saveOrd(saveChr(max(int(6.0), i2)))]) )].capitalize()[:divInt(min(i1, int(5.0)),min(mod(( divInt(i0,divInt(divInt(( int(0.0) + saveOrd(getCharFromString(in0, int(7.0))) ),i0),i2)) + int(3.0) ),divInt(int(4.0),len(in1[i1:][int(6.0):int(2.0)]))), min(int(8.0), i0)))][int(5.0):( ( i1 + i0 ) * abs(i0) )][i2:]))[min(divInt(int(5.0),( mod(divInt(saveOrd(\"\"p\"\"[i1:][( divInt(i1,i2) + mod(int(9.0),saveOrd(\"\"\"\")) ):int(2.0)][:( saveOrd(saveChr(int(4.0))) + i1 )]),int(7.0)),( int(2.0) - int(4.0) )) + i2 )), len(in2)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [3, 2, 2, 8, 7, 7, 1, 7, 9, 6], [0, 0, 1, 0, 2, 2, 2, 0, 1, 2, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 2, 0, 2, 1, 2, 1, 0, 2, 0, 1, 0, 2, 2, 0, 2, 0, 1, 2, 3, 0, 1, 0, 0, 0, 1, 2, 3, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0, 3], [0, 0, 0, 2, 1, 2, 0, 2, 2], [0, 1, 0, 0, 1], [1, 1, 2, 2, 4, 5], [1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [2, 2, 2, 0], [0], [12], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 11, 0, 39, 14, 6, 9, 5, 5, 1, 0, 12, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(s1[mod(len((s2 + (s2[( ( i0 + int(3.0) ) + min(divInt(i0,( int(2.0) + ( int(2.0) * i1 ) )), divInt(i0,int(8.0))) ):i2][( ( i2 - mod(i2,int(7.0)) ) * ( min(i0, int(7.0)) + i1 ) ):] + in1))[i2:]),i2):]),int(17.0)) * ( len(\"\"M\"\") * int(96.0) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [2], [], [], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 3, 3, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(\"\"0\"\"),mod(len(in2),( ( i0 + int(3.0) ) + min(int(2.0), i0) ))) + divInt(int(2.0),i1) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 2], [0, 0], [4], [3], [1], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [2, 0, 2], [0], [2], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 5, 5, 4, 0, 18, 6, 3, 3, 3, 6, 1, 0, 12, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(5.0) ) + int(7.0) ))) + int(4.0) ) or (s2 + (in1[i0:][divInt(int(8.0),i1):int(7.0)] + in2))[i0:].startswith(\"\"C\"\") )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [2, 0, 0, 1, 2, 1, 0, 2, 1, 0, 1, 1, 2, 1], [1, 1, 2, 2], [0, 2, 1, 0, 2, 1, 2, 1, 1, 0], [], [0, 0, 0, 0], [], [], [3, 1, 3, 3, 1], [0, 4, 2, 4, 0], [1, 1, 0, 0, 1, 2, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0], [5], [0, 2, 3, 2, 0], [1], [], [0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5, 7, 8, 9, 5, 3, 9, 1, 2, 3, 5, 6, 9, 6, 4, 8, 0, 5, 5, 9, 0, 2, 6, 8, 9, 8, 1, 9, 5], [1, 0, 2, 0, 1, 1, 2, 0, 0, 1, 2, 2, 1, 2, 2, 2, 1, 0, 2, 2, 0, 2, 2, 0, 0, 1, 2, 0, 1, 2, 0, 2, 2, 1, 1, 1, 2, 0], [1, 1, 0, 0], [3, 3, 2, 3, 1, 3, 0, 0, 0, 2, 0, 1, 3, 3, 3, 3, 0, 1, 1, 3, 0, 1, 1, 0, 2, 2, 1, 3, 2, 0, 2, 1, 1, 3, 3, 3, 0, 2, 1, 0, 2, 0, 3, 2, 2, 0, 2, 1, 3, 0, 3, 3, 0, 3, 3, 0, 3, 1, 1, 1, 1, 2, 2, 3, 0, 1, 3, 2, 0, 3, 3, 0, 3, 2, 3, 3, 2, 2, 2, 2, 3, 0, 2, 1, 3, 3, 0, 1, 1, 0, 0, 0, 2, 2, 0, 1, 0, 1, 0, 1, 3, 1, 3, 0, 2, 0, 3, 2, 1, 0, 1, 2, 1, 0, 3, 3, 0, 2, 2, 2, 1, 0, 3, 1, 2, 3, 0, 3, 1, 3, 0], [1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0], [3, 1, 3, 0, 0, 4, 0, 1, 1, 4, 3, 3, 2, 2, 0, 0, 0, 0, 2, 1, 0, 3, 0, 0, 0, 1, 1, 4, 1, 1, 4, 1, 3, 4, 0, 0, 3, 0, 3], [0, 0, 1, 2, 2, 0, 1, 2, 1, 0, 1, 1, 1, 0, 0, 2, 1, 2], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [4, 5, 3, 2, 4, 5, 3, 3, 1, 2, 2, 1, 2, 2, 5, 3, 3, 5], [1, 1, 0, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 4, 3, 4, 2, 4, 4, 0, 1, 4, 1, 0, 0, 0, 1, 2, 0, 0, 1, 4, 1, 0, 4, 0], [0, 3, 2, 1, 1, 2, 2], [4], [0, 2, 2, 2, 0], [0, 0, 1, 2, 3, 1], [11, 3], [15, 23], [4], [1]], "fitness": 9223372036854775807, "mapping_values": [1, 14, 14, 4, 10, 0, 4, 0, 0, 5, 5, 11, 5, 1, 5, 1, 0, 2, 35, 35, 38, 4, 131, 29, 39, 18, 13, 18, 6, 0, 35, 7, 1, 5, 6, 2, 2, 1, 1], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(in1) \\l max(divInt(len(in2),int(269.0)), min(i1, i0)):{:\\nres0 = i2 \\le ( i0 + int(73.0) )\\nin0 = s2\\ni1 += min(saveOrd((in1 + (in2[min(max(i1, int(5.0)), int(5.0)):][max(i2, int(7.0)):] + in0))[int(8.0):i0]), mod(( int(9.0) - saveOrd(in0) ),divInt(i0,divInt(int(539.0),int(12.0)))))\\nif b1:{:\\nres0 = not len(getCharFromString((saveChr(len(s1)).capitalize()[abs(i1):].rstrip(\"\"L\"\") + saveChr(( int(3.0) * i2 ))), mod(i2,abs(( ( i1 * divInt(int(5.0),min(i2, min(min(i2, min(abs(i2), max(int(6.0), int(9.0)))), int(6.0)))) ) + int(4.0) ))))) == ( ( min(i1, int(8.0)) - len(\"\"D\"\") ) * ( i0 - min(min(i2, min(( max(max(( divInt(mod(divInt(saveOrd(s2),i2),mod(int(0.0),max(max(i0, int(5.0)), int(5.0)))),i2) + i2 ), i0), divInt(( i0 - int(9.0) ),i1)) - int(0.0) ), i2)), int(2.0)) ) )\\n:}else:{:\\ns2 = s1\\nloopBreak% = 0\\nwhile s2.endswith(\"\"p4\"\"):{:\\ni0 -= saveOrd(s2[int(6.0):max(i1, ( i2 + len(in2) ))])\\nin0 = \"\"\\\\\\n\"\"\\ni0 = mod(int(8.0),i2)\\ni2 = int(9.0)\\nloopBreak% = 0\\nwhile ( int(8.0) + i1 ) \\le saveOrd(\"\"x\"\".capitalize()):{:\\nres0 = ( not b1 or min(i1, ( ( mod(int(1.0),i1) * min(int(9.0), ( len(in0) - i2 )) ) * min(int(5.0), len(in2.capitalize())) )) \\l i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 7, 7, 1], [1, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [0, 0, 1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1, 2, 0], [22], [25], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 4, 1, 2, 3, 0, 3, 0, 0, 0, 3, 1, 1, 1, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"z9W\"\") \\le ( ( len(s2) + divInt(len(in2),( ( i1 + int(3.0) ) * int(7.0) )) ) * int(5.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [7, 6, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [0, 1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [2, 0], [0], [], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 2, 3, 1, 1, 2, 2, 0, 3, 0, 0, 0, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(\"\"3A\"\") \\le ( divInt(len(s2),i1) + len(in2) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1], [3, 7, 7, 1, 7, 7, 1, 3, 3, 7, 1, 7, 7, 0, 8, 5, 5, 9], [0, 0, 1, 0, 2, 2, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 2, 0, 2, 1, 1, 1, 0, 2, 0, 1, 1, 2, 1, 2, 1, 1, 3, 1, 0, 2, 3, 0, 0, 1, 3, 2, 3, 1, 2, 1, 3, 3, 1, 1, 3, 1, 3], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0], [4, 3, 3, 0, 0, 2, 4, 3, 0, 2, 3], [0, 0, 1, 2, 1, 2, 0], [0, 1, 0, 0, 0, 0, 0], [2, 5, 3, 2, 4, 5, 3, 5], [1], [], [4, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 1, 2, 2, 4, 2, 4, 0, 0, 4, 0, 0], [0, 3, 2, 3, 3], [4, 0, 1], [2, 2, 0, 0, 0, 1], [1], [], [15], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 18, 18, 7, 0, 48, 14, 11, 7, 7, 8, 1, 0, 22, 5, 3, 6, 1, 0, 1, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(s2, divInt(( len((in2 + (in0[mod(len(s2),( divInt(i0,int(3.0)) + ( divInt(i0,( int(7.0) + int(7.0) )) - int(1.0) ) )):i1][( i0 * int(7.0) ):] + \"\"p\"\"))[int(7.0):].rstrip(in1.lstrip()[:divInt(int(1.0),( int(3.0) - int(3.0) ))].capitalize()[min(int(7.0), i2):divInt(min(i2, i2),int(1.0))][abs(divInt(saveOrd(in2),int(7.0))):( int(7.0) * len(in0.rstrip()) )])) + min(int(08.0), int(55.0)) ),abs(int(9.0))))) \\le len(in2)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [5], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [0, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [2, 0, 2], [0, 2], [4], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 16, 5, 3, 3, 2, 6, 2, 0, 12, 0, 0, 3, 2, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s2.endswith(in2):{:\\nres0 = saveOrd(in0) \\le ( divInt(len((s2 + (in1[i1:][len(in2):mod(( i2 + int(3.0) ),int(2.0))] + \"\"E5\"\"))[int(9.0):]),int(8.0)) + ( int(7.0) + i2 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 3, 8, 3, 5, 5, 3, 5, 4, 7, 3, 3, 4, 6, 7, 3, 5, 3, 7, 1, 4, 3], [1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 0, 0, 2, 0, 1, 1, 2], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 3, 2, 1, 3, 3, 0, 0, 2, 1, 1, 1, 1, 3, 3, 3, 3, 2, 1, 2, 3, 3, 2, 3, 0, 2, 2, 2, 3, 2, 1, 3, 3, 2, 0, 0, 1, 2, 2, 0, 3, 0, 0, 2, 2, 2, 3, 3, 2, 3, 2, 0, 2, 2, 1, 1, 2, 2, 3, 2, 0, 0, 0, 0, 3, 1, 0, 0, 3, 1, 3, 3, 3, 2, 3, 3, 2, 2, 1, 1, 3, 0, 0, 1, 0, 1, 0, 2, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0], [3, 3, 3, 2, 0, 0, 2, 4, 1, 4, 1, 1, 0, 4, 2, 1, 1, 4, 1, 4, 4, 0, 3, 2, 1, 2, 0, 3, 1, 2, 4, 3, 2], [0, 1, 0, 2, 0, 2, 2, 1, 1, 2, 2, 2, 1], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [4, 5, 4, 2, 0, 5, 3, 2, 5, 3], [1, 1, 1, 1, 1, 1, 1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 1, 4, 0, 3, 0, 1, 4, 1, 1, 2, 2, 0, 4, 1, 1, 0, 1, 0], [0, 3, 2], [4], [2, 2, 2, 1, 2, 0, 1], [0, 3, 1, 1, 3, 1, 0], [15, 17], [18, 16, 18], [], [30, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 23, 23, 21, 0, 102, 28, 33, 13, 15, 10, 7, 0, 30, 3, 1, 7, 7, 2, 3, 0, 2], "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l len(in1):{:\\nres0 = mod(len(in2[len((in1 + (s2[:abs(min(( i1 + int(3.0) ), min(int(8.0), abs(saveOrd(s0)))))][mod(int(3.0),max(saveOrd(\"\"P\"\"[i1:]), i2)):] + getCharFromString(in2, mod(int(5.0),int(5.0)))))[int(3.0):]):]),int(5.0)) \\ge max(max(min(saveOrd((in0 + \"\"_\"\")), ( int(47.0) - divInt(abs(max(( max(i2, divInt(divInt(( saveOrd(\"\"s\"\".rstrip(\"\"q\"\")) + ( int(3.0) * max(saveOrd(s2[:mod(i2,i1)][int(3.0):divInt(( i1 + saveOrd(\"\">\"\".capitalize()) ),i1)]), i1) ) ),( mod(( min(len(\"\"s\"\"), mod(abs(mod(i1,( ( int(4.0) * int(6.0) ) * divInt(mod(max(( i2 - i2 ), i2),i2),abs(int(7.0))) ))),i0)) - i0 ),min(int(3.0), len(in2))) * max(abs(divInt(saveOrd(\"\"R\"\"),len(in0))), mod(( int(5.0) * int(3.0) ),abs(i2))) )),i0)) * int(7.0) ), i1)),int(1.0)) )), i1), ( i2 - int(43.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [2], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [1, 7, 9, 8, 3, 5, 5], [1, 0, 2, 1, 2, 1, 1], [1], [1, 3, 3, 3, 2, 3, 3, 2, 0, 1, 2, 3, 3, 3, 2, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0], [2, 3, 3, 0, 0, 3, 1, 0, 1], [0, 2], [0, 0, 1], [4, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [3], [], [], [], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(1.0) \\le abs(len(\"\"]\"\"))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 9, 7, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [5, 5, 1, 4, 4], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [], [2, 0, 2, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1, 1], [0, 0, 0], [], [2, 0, 0], [1, 2, 1, 1, 3, 1, 2, 1, 0, 0, 0], [5, 0, 24], [5, 24, 4, 20, 17], [2, 0], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 2, 0, 13, 1, 5, 0, 1, 3, 11, 0, 14, 2, 0, 3, 11, 3, 5, 2, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2[int(19.0):]) \\le len(getCharFromString((\"\"f\"\" + \"\"2ye%\"\"), int(7.0))[divInt(len(getCharFromString(in2, i0)[i2:int(7.0)]),len((s1 + \"\"u\"\"))):int(6.0)])\\nb1 = int(3.0) \\le saveOrd(\"\"0rFAY\"\")\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 3, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [3], [], [], [], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 18, 7, 4, 5, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),( len(\"\"%\"\") + ( ( i0 + min(divInt(int(5.0),i0), ( int(7.0) + i1 )) ) * int(4.0) ) )) - i0 )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 5, 9, 8, 4, 8, 4, 4, 5, 7, 9, 5, 5, 3, 1, 0, 2, 9, 2, 1, 0, 7, 3, 7, 4, 1, 6, 8, 0, 9, 1, 3, 0, 3, 6, 4, 1], [0, 2, 1, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 2, 0], [0], [3, 3, 2, 2, 2, 2, 3, 3, 3, 1, 0, 1, 3, 3, 1, 0, 1, 1, 3, 2, 1, 3, 3, 2, 0, 1, 3, 1, 2, 1, 3, 2, 2, 3, 3, 3, 3, 1, 1, 0, 1, 2, 1, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 3, 2, 3, 2, 3, 0, 3, 0, 0, 1, 0, 3, 0, 3, 2, 2, 1, 2, 2, 2, 3, 1, 2, 2, 3, 3, 1, 2, 2, 3, 0, 1, 1, 0, 2, 3, 0, 1, 0, 0, 1, 1, 0, 1, 0, 3, 3, 2, 1, 2, 3, 1, 2, 2, 3, 2, 0, 1, 2, 1, 0, 3, 0, 0, 1, 0, 1, 2, 0, 2, 3, 1, 0, 3, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [2, 3, 3, 0, 0, 0, 3, 3, 4, 4, 1, 0, 2, 3, 2, 1, 3, 3, 4, 4, 3, 0, 1, 4, 4, 0, 3, 0, 1, 1, 3, 1, 0, 4, 0, 0, 1, 3, 2], [0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [3, 5, 3, 2, 4, 5, 1, 3, 5, 1, 0, 0, 4, 5, 4, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 3, 4, 1, 4, 2, 0, 4, 2, 0, 4, 2, 0, 2, 4, 4, 0, 0, 1, 1, 1, 4, 4, 1, 2, 2, 4, 0, 1, 2, 3, 3, 0, 2, 1, 1, 2, 1, 4, 0, 4, 3, 0, 1, 4, 3, 2, 2, 1, 4, 2, 0, 1], [0, 3, 2, 2, 2, 0, 0, 3, 3, 2, 2, 1, 0], [4, 5, 5], [0, 2, 2, 1, 1, 2, 0, 1, 2, 2, 0, 0, 1, 2, 2], [3, 1, 2, 0, 3, 1, 0, 3, 2, 0, 0, 2], [2, 4, 12, 24], [3, 4], [6, 4, 1], [29, 14, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 37, 37, 27, 0, 136, 35, 39, 21, 14, 16, 12, 0, 64, 13, 3, 15, 12, 4, 2, 3, 3], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(in0)) \\le divInt(( divInt(( len(in2) + min(min(int(35.0), i0), int(9.0)) ),min(len(in0), int(8.0))) - i2 ),int(4.0)):{:\\nres0 = int(84.0) \\le len((s2 + (in1[( int(4.0) - saveOrd(in2) ):][saveOrd(((getCharFromString(\"\"^\"\", divInt(i1,int(5.0))) + s1[:max(int(7.0), mod(int(9.0),min(( ( abs(len(in0[:abs(max(int(5.0), int(5.0)))].capitalize())) - i2 ) + int(3.0) ), mod(int(1.0),( ( i0 + len(in2[len(getCharFromString(s1, saveOrd(s0)).capitalize()[saveOrd(\"\"d\"\"):len(\"\"6\"\")]):].capitalize()) ) * i0 )))))].rstrip(\"\"C\"\")) + getCharFromString(\"\"+\"\".strip(s0.strip(\"\"e\"\")[i1:][:int(0.0)]), int(2.0)))):] + ((in1 + \"\"E\"\"[( mod(divInt(int(9.0),int(2.0)),int(1.0)) * min(( max(( saveOrd(\"\".\"\") * i0 ), saveOrd(\"\"4\"\"[i0:i0])) * int(0.0) ), i0) ):min(i2, len(in2.capitalize()))]) + (in1 + \"\"M\"\").capitalize())[divInt(( int(7.0) * ( divInt(( min(int(3.0), ( divInt(max(max(int(7.0), mod(( len(saveChr(i0)) * int(4.0) ),int(1.0))), i1),( max(i0, int(6.0)) * i1 )) + i0 )) + int(8.0) ),int(0.0)) * i1 ) ),int(9.0)):]))[i1:min(saveOrd((\"\"Y\"\"[( int(1.0) * ( min(int(3.0), ( divInt(min(divInt(i1,int(0.0)), divInt(int(3.0),i0)),max(i1, i1)) * int(6.0) )) * i1 ) ):][:int(4.0)] + getCharFromString(in0[( i0 + ( len(\"\"1\"\") + int(1.0) ) ):], i2))), abs(i0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 1], [2, 0, 0, 2, 1, 0], [0, 0], [0, 2, 0, 0], [0, 0], [0, 0, 0], [], [], [3, 0, 1, 1], [0, 2], [1, 1, 2, 0], [0, 0], [5], [0], [], [], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [9, 6, 2, 7, 3, 5, 5, 4, 2, 5, 2, 0, 8, 3, 2, 1, 3, 1, 2, 4, 8, 6, 7, 4, 7, 1, 1, 0, 0, 2, 4, 2, 0, 7, 6, 0, 7, 6, 4, 2, 1, 2, 2, 0, 3], [1, 0, 1, 2, 1, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 1, 2, 1, 0, 1, 1, 2, 0, 2, 1, 0, 0, 2, 1, 0, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 0, 3, 2, 0, 0, 2, 2, 3, 1, 1, 2, 1, 2, 0, 3, 0, 1, 2, 2, 3, 1, 2, 3, 1, 3, 3, 1, 1, 2, 3, 3, 3, 1, 3, 1, 2, 2, 2, 0, 3, 3, 2, 1, 2, 3, 2, 3, 1, 3, 1, 0, 0, 2, 2, 2, 3, 0, 3, 1, 3, 2, 0, 2, 0, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 2, 0, 0, 2, 2, 0, 1, 3, 2, 2, 0, 3, 0, 2, 3, 1, 3, 2, 0, 2, 1, 0, 3, 2, 1, 1, 0, 0, 1, 2, 2, 1, 1, 0, 0, 1, 1, 3, 2, 3, 3, 3, 1, 0, 1, 1, 1, 0, 0, 2, 0, 0, 0, 2, 1, 2, 0, 3, 1, 3, 3, 0, 2, 2, 3, 0, 3, 1, 0, 2, 2, 0, 0, 2, 1, 2, 2, 1, 2, 1, 0, 3, 2, 0, 3, 1, 0, 1, 0, 3, 0, 0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0], [2, 3, 3, 3, 0, 3, 0, 1, 1, 1, 3, 2, 1, 4, 3, 3, 0, 1, 1, 3, 1, 3, 0, 4, 2, 0, 0, 2, 1, 2, 3, 2, 4, 4, 3, 1, 0, 4, 0, 3, 4, 2, 3, 1], [1, 0, 2, 1, 2, 0, 1, 0, 1, 0, 0, 1, 2, 0, 0, 0, 2, 1, 1, 1, 1, 2, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0], [4, 5, 3, 2, 4, 5, 3, 4, 4, 4, 2, 0, 2, 4, 5, 2, 5, 1, 0, 2, 5], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 4, 3, 1, 1, 2, 2, 4, 2, 1, 0, 0, 0, 0, 4, 3, 1, 4, 2, 4, 4, 3, 4, 4, 1, 4, 1, 1, 2, 1, 2, 4, 1, 2, 2, 1, 0, 4, 4, 3, 2, 0, 0, 0, 3, 2, 0, 1, 2, 0, 0, 0, 2, 2, 4], [3, 3, 2, 0, 0, 0, 2, 1, 1, 2, 2, 2, 0, 1], [4, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 1, 2, 2, 2], [2, 3, 3, 3, 3, 2, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 1], [1, 1], [17, 22, 8], [8, 2, 5, 3, 8, 5, 8, 5], [1, 30, 31, 29, 25, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 2, 3, 0, 0, 3, 2, 3, 2, 1, 0, 0, 0, 0, 45, 45, 46, 0, 180, 51, 44, 25, 26, 21, 16, 2, 66, 14, 2, 16, 16, 1, 2, 7, 6], "tree_depth": 83, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = abs(len(in0)) \\l divInt(len(s2),len((in1 + (in2[min(i1, mod(int(962.0),i0)):i1][:int(7.0)] + in0))[len((\"\"8\\\\\\n\"\" + \"\"_`\"\").rstrip().rstrip(\"\"^\"\"[i2:min(divInt(i1,i1), ( ( max(int(3.0), int(5.0)) - divInt(int(5.0),( i0 + max(i2, int(4.0)) )) ) * ( divInt(max(int(2.0), divInt(len(in1),int(5.0))),abs(max(int(2.0), int(0.0)))) - divInt(saveOrd(in1),len(in1)) ) ))].capitalize()[:len(s2)][:int(8.0)])):min(int(321.0), divInt(divInt(divInt(i2,max(max(mod(int(3.0),( len(getCharFromString((\"\"25\"\" + getCharFromString(getCharFromString((saveChr(( max(int(1.0), len(saveChr(int(2.0)))) * i0 )) + \"\"38r\"\").capitalize(), i1)[( ( ( min(i2, saveOrd(\"\"B\"\".capitalize())) + int(4.0) ) - abs(divInt(i2,divInt(i0,divInt(min(i2, i2),( divInt(int(8.0),i2) + mod(min(( mod(i0,i1) - divInt(divInt(i2,int(6.0)),abs(( ( i1 + max(i0, ( abs(int(7.0)) + len(\"\"5\"\") )) ) - ( i1 * ( int(4.0) + i1 ) ) ))) ), abs(divInt(int(7.0),int(1.0)))),i2) ))))) ) + i0 ):int(1.0)], mod(mod(int(0.0),int(0.0)),i2))), i1)) + int(2.0) )), int(4.0)), saveOrd(\"\"@\"\"[mod(saveOrd(\"\"8\"\".capitalize()[len(\"\"w\"\"[max(int(2.0), i0):][int(0.0):int(7.0)]):int(6.0)]),i0):i2]))),( i1 * i0 )),i0))]))\\ns0 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in getCharFromString((in2[mod(int(0.0),( i1 - min(int(7.0), saveOrd(s2)) )):min(i1, ( ( len(in2) - i2 ) - saveOrd((s1[:int(64.0)] + \"\"#\"\")) ))] + s0[i2:]), ( ( i0 - i0 ) * ( int(2.0) - divInt(( int(1.0) + divInt(int(22.0),i0) ),abs(( i0 + len(s2) ))) ) )).capitalize():{:\\nb0 = int(0.0) == i0\\nb1 = in2.endswith(saveChr(int(3.0))[i0:][max(i2, i2):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 9, 3, 7, 6, 3, 6], [2, 2, 1, 0, 2], [1, 1], [3, 2, 3, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1, 1, 0, 0, 0, 0, 1], [], [4, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1, 3, 2, 1, 0, 3, 2], [5], [5, 10], [9, 8], [29, 29]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 11, 2, 5, 2, 1, 4, 7, 0, 13, 3, 0, 1, 7, 1, 2, 2, 2], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(in0, divInt(len(in2),len(getCharFromString((\"\"f\"\" + \"\"^\"\"), ( len(getCharFromString(s1, i2)[i2:]) + int(19.0) )))))) \\le saveOrd((in1 + \"\"9kF^8\"\"))\\ni1 -= int(3.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [0, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [3, 3], [], [], [], [20, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 2, 2, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(\"\";-\"\"),divInt(len(in2),( min(i0, int(3.0)) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 3, 7, 6, 3, 6, 6, 4], [0, 2, 1, 0, 2, 1, 0, 0], [0, 1], [3, 1, 3, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3, 2, 3, 0, 3, 0, 1, 3, 0, 0, 2, 1, 2, 3, 2, 2, 0, 1, 3, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0], [4, 1, 3, 3, 4, 1, 1, 0, 0, 4, 3], [1, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4, 5], [1], [], [2, 4, 3, 4, 2, 4, 4, 2, 0, 0, 3, 0, 1, 2, 4, 2, 0, 0, 0, 4], [2, 0, 0, 2, 0, 1], [], [2, 1, 2, 2, 1], [1], [5], [25], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 8, 0, 33, 6, 11, 3, 3, 6, 1, 0, 20, 6, 0, 5, 1, 0, 1, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd((getCharFromString(getCharFromString(in0[int(31.0):].capitalize(), max(len(in2), ( len((s1 + \"\"z\"\")) - i0 )))[:i2], int(3.0)) + getCharFromString(in1[:saveOrd(in1)], int(7.0))[int(6.0):]).capitalize()[max(( max(i1, min(i0, int(3.0))) - min(i2, i1) ), divInt(int(6.0),( saveOrd(in2) + mod(divInt(i0,int(6.0)),len(saveChr(i0))) ))):]) \\le int(4.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0, 1], [1], [0, 1], [], [0, 0], [], [], [1, 1], [4, 2], [1, 1], [0, 0], [], [], [], [], [0], [0, 1, 1, 1, 1, 1], [1, 6, 2, 8, 4, 3], [0, 1, 2, 0, 2], [0, 1], [3, 1, 3, 3, 3, 2, 3, 3, 2, 1, 1, 1, 3, 0, 0, 1, 0], [1, 1, 1, 0, 0, 1, 1], [4, 3, 3, 4, 4, 2, 1, 2], [2], [0, 0, 0], [4, 5, 4, 1, 4, 4, 2, 3], [1, 0, 0, 0, 0, 0, 1], [], [2, 0, 3, 0, 2, 4, 2, 2, 2, 0, 0, 4, 1, 1, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 1, 2, 2, 2], [0, 1, 3, 2, 1, 3, 1], [17], [20, 13, 15], [9], [20, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 3, 0, 17, 2, 7, 0, 2, 4, 7, 0, 14, 2, 1, 5, 7, 1, 3, 1, 2], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(in1[int(16.0):]) \\le len((in2 + in1[len(s1):][saveOrd(saveChr(divInt(saveOrd(\"\"R\"\"),abs(divInt(int(2.0),int(8.0)))))):][int(4.0):].strip(\"\"u;9n]p\"\")[:max(i0, i1)])):{:\\nb1 = int(3.0) == i2\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [6, 7, 9, 8, 7, 7, 1, 3, 1, 3, 5, 2, 9, 2], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 2, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 0, 1, 2, 3, 3, 3, 0, 2, 1, 1, 3, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0], [4, 3, 3, 0, 0, 3, 0, 3], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 1], [0, 3, 2], [4], [2, 1, 0], [2], [], [], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 5, 0, 35, 11, 8, 6, 5, 6, 1, 0, 13, 1, 0, 3, 1, 0, 0, 1, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(s2, ( divInt(len(in2),divInt(len((in0 + (s2[( ( divInt(int(6.0),int(7.0)) + int(9.0) ) + int(8.0) ):( int(7.0) + i2 )][:int(7.0)] + in1))[i2:]),( i2 * int(13.0) ))) - mod(min(i0, int(135.0)),divInt(min(len(in2), min(i2, ( int(2.0) * int(9.0) ))),len(\"\"9\"\"))) ))) \\le int(2.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [2, 0, 1, 2, 0, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 0, 3, 1, 0, 0, 2, 2, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0], [2, 3, 3, 2, 0, 1, 1, 1, 1], [0, 0, 0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [0, 0, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [0, 0, 2], [14, 15], [], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 2, 0, 10, 3, 4, 1, 2, 1, 3, 0, 2, 0, 0, 0, 3, 2, 0, 1, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb1 = int(1.0) \\l abs(mod(len(in1),( len(\"\"OP3\"\") + abs(mod(i2,i0)) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [9, 0, 4, 8, 5, 5, 5, 3], [2, 1, 2, 1, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 0, 1], [2, 3, 3, 2, 0, 0, 4, 3, 1], [0], [1, 0, 1], [1, 5, 4, 2, 4, 5], [1], [], [0, 0, 4, 1, 3, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 2, 2], [0], [19], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 1, 0, 14, 2, 7, 1, 1, 2, 1, 0, 4, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(90.0) \\l abs(mod(len(s1),len(in2))):{:\\nres0 = abs(min(( i2 + int(4.0) ), min(int(8.0), saveOrd(\"\"T\"\".capitalize())))) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 4, 8, 5, 5, 5, 3], [2, 1, 2, 1, 2, 1, 1], [0, 1], [2, 3, 2, 3, 3, 3, 3, 1, 0, 2, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1, 1], [2, 3, 3, 2, 0, 0, 4, 3, 1], [0], [1, 1, 1, 1], [4, 1, 1, 2, 4, 5], [1], [], [0, 0, 0, 1, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 2, 2], [0], [14], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 4, 0, 20, 5, 8, 1, 4, 3, 1, 0, 4, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(abs(( len(in1) + len(s1) )),abs(min(int(10.0), i2))) \\l mod(min(int(4.0), saveOrd(s1)),int(8.0)):{:\\nres0 = mod(mod(i1,len(\"\"O\"\")),i2) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [2, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [0, 0, 0, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1, 2, 1, 2], [], [15, 1], [2, 9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 2, 0, 1, 4, 0, 2, 0, 0, 0, 4, 0, 2, 2, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in0) * min(min(i2, ( i0 - i1 )), i2) ), int(2.0))) \\l len(\"\"p2b9\"\")\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 4, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [2], [], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 3, 1, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(\"\"8\"\"),( len(in2) + ( int(3.0) + i0 ) )) + int(4.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1], [3, 4, 4, 8, 7, 7, 1, 2, 1, 1, 9, 5, 0, 6, 3, 4, 2], [0, 0, 0, 0, 2, 1, 2, 1, 2, 0, 1, 2, 1, 1], [0, 1], [3, 3, 2, 3, 2, 0, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 0, 2, 0, 1, 3, 2, 3, 2, 1, 2, 1, 1, 3, 2, 2, 2, 2, 2, 2, 3, 0, 2, 3, 3, 2, 2, 1, 1, 0, 0, 0, 2, 3, 3, 0, 2, 0, 1, 1, 0, 0, 0, 0, 1, 0, 3], [1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1], [4, 3, 3, 0, 0, 0, 2, 4, 2, 3, 4, 4], [0, 1, 0, 2, 1, 2, 0, 2, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0], [2, 5, 4, 2, 4, 5, 2, 3], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 0, 1, 0], [0, 3, 2], [4], [2, 1, 1, 0], [0], [11], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 17, 17, 14, 0, 63, 23, 12, 12, 11, 8, 1, 0, 15, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le len(in2):{:\\nres0 = divInt(len(in1),mod(i0,( ( ( int(3.0) + mod(( ( int(4.0) - int(4.0) ) + int(8.0) ),int(7.0)) ) * i0 ) - divInt(i0,int(71.0)) ))) \\le min(mod(min(divInt(int(2.0),( int(11.0) * int(95.0) )), min(( ( ( divInt(divInt(mod(abs(i0),( saveOrd((s2 + (in1[:abs(divInt(( int(0.0) + int(6.0) ),i2))][:i1] + in2))[i2:]) * ( len(s2[saveOrd(\"\"L\"\"):i1]) - divInt(i2,int(3.0)) ) )),int(4.0)),i0) - i1 ) + i2 ) + i1 ), int(2.0))),i1), saveOrd(in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 7, 9, 8, 2, 5, 5, 1, 4, 4, 7], [1, 0, 2, 2, 2, 2, 1, 2], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 1, 3, 1, 3, 0, 3, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [1, 1, 1], [2, 3, 3, 0, 0, 3, 3, 0, 1], [0], [1, 1, 0], [4, 5, 3, 2, 4, 5, 5, 1], [1, 1, 1, 0, 0, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 1, 0, 2, 4, 2, 4, 3, 1, 2, 2, 1, 1], [0, 3, 2], [4], [0, 0, 1, 2, 0, 0, 1], [2, 1, 3, 1, 3, 0], [5], [11, 3], [2], [10, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 8, 0, 25, 3, 7, 0, 3, 6, 6, 0, 21, 2, 1, 7, 6, 1, 2, 1, 2], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(1.0) \\le abs(mod(len(in1),mod(len(in2),min(divInt(i1,int(7.0)), min(int(9.0), len(in0))))))\\ns2 = (in1 + (\"\"2\"\"[:i0][len(in2):i2] + getCharFromString((\"\"l\"\" + \"\"\"\\\\\"\"\"[:i2][i2:i2]).rstrip(\"\"d<F\"\")[i1:int(8.0)], int(2.0))[int(55.0):]))[int(14.0):i2]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 2, 9, 7, 3, 5, 5, 0, 9, 0], [1, 2, 1, 0, 1, 1, 0, 0, 1, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 2, 0, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1, 3, 3, 3, 0, 3, 0, 1, 2, 1, 1, 0, 3, 3, 0, 0], [1, 0, 1, 1, 1], [4, 1, 3, 0, 0, 3, 0, 1, 1, 4, 4, 3, 2, 3], [1], [0, 1, 0, 1], [3, 5, 3, 2, 4, 5, 1, 1], [1, 1, 1], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 3, 2, 0, 4, 2, 1, 0, 2, 4, 1, 1, 0], [0, 3, 2], [4], [0, 1, 1, 1, 0, 0, 2], [2, 3, 1], [], [22], [4], [11]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 10, 10, 11, 0, 38, 5, 14, 1, 4, 8, 3, 0, 24, 3, 1, 7, 3, 0, 1, 1, 1], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(in0[max(divInt(len(in2),min(min(i1, ( i2 - i1 )), mod(i0,len((in0 + (s2[:min(max(divInt(i1,int(22.0)), int(9.0)), i1)][:int(7.0)] + in1))[:int(3.0)])))), int(5.0)):max(saveOrd(getCharFromString((in2[saveOrd(\"\"4\"\"[i0:len(s1)].rstrip(\"\"(\"\".capitalize()[i0:])):int(5.0)] + \"\"w\"\"), mod(int(09.0),int(0.0)))), i1)]) \\l abs(len(s1)):{:\\nres0 = i0 \\le i1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1, 1], [], [3, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1, 1], [5], [5, 10], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 1, 4, 0, 2, 1, 0, 2, 2, 0, 7, 1, 0, 0, 2, 0, 2, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd((in0 + in2)) \\le int(16.0)\\ni0 += len(getCharFromString((\"\"f\"\" + \"\"k\"\"), int(3.0)))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3, 3], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 2, 1, 2, 0, 1, 1, 1, 0], [1], [1, 3, 2, 3, 3, 3, 3, 2, 3, 0, 3, 2, 0, 3, 0, 2, 0, 3, 0, 0, 1, 1, 1, 2, 0, 1, 3, 0, 0, 0], [1, 1, 1, 0, 1, 0], [2, 3, 3, 2, 3, 2, 3, 4, 2, 1], [0, 0], [1, 0, 0, 1, 1], [4, 5, 4, 2, 4, 4], [1, 1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 4, 1, 1], [0, 3, 2], [4], [0, 1, 1, 1, 2], [3, 3], [], [], [], [1, 26]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 6, 0, 21, 4, 9, 1, 3, 5, 2, 0, 15, 1, 0, 5, 2, 0, 0, 0, 2], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nres0 = int(10.0) \\l abs(mod(len(in1),len(in2[abs(len((in1 + (s2[:divInt(abs(i0),len(in1))][:divInt(i2,saveOrd(getCharFromString(\"\"\\\\\\n\"\", i1)[( i2 + abs(i0) ):]))] + \"\"[\"\"))[:i1])):int(9.0)])))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0], [1, 1, 1, 1, 1], [1, 6, 6, 8, 4], [0, 2, 2, 0, 2], [0, 1], [3, 1, 3, 2, 1, 0, 3, 3, 3, 1, 1, 1, 3, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [4, 0, 3, 4, 4, 2, 1, 2], [2], [0, 0, 0], [3, 5, 4, 3, 4, 4, 2, 3], [1, 0, 1], [], [2, 0, 3, 2, 0, 1, 1, 0, 2, 0, 0, 4, 0, 1, 0, 0], [3, 1, 2, 0, 3], [5, 3], [2, 2, 2, 2], [0, 2, 2], [17], [], [2, 4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 8, 1, 4, 1, 0, 2, 3, 0, 7, 0, 0, 2, 3, 1, 0, 2, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(1.0):]) \\le min(( int(6.0) * i0 ), len((in2[saveOrd(\"\"R\"\"):] + \"\"24\"\")))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1], [2, 1, 2, 0, 1, 0, 2, 2, 1, 2, 1, 2, 2, 0, 0, 0, 1, 0, 0, 1], [2, 1, 1, 1, 1, 2, 1], [0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 0, 0], [], [0, 0, 0, 0, 0, 0, 0], [], [], [3, 1, 3, 1], [4, 4, 5, 1, 1], [1, 1, 0, 2, 0, 0, 0, 2, 1, 1, 0, 1], [0, 0, 0, 0, 0], [4, 2], [2, 1, 0, 2, 1], [], [1, 1], [1, 1, 0, 1, 0], [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], [3, 7, 4, 8, 7, 7, 1, 7, 1, 0, 0, 5, 9, 9, 5, 5, 6, 1, 0, 3, 4, 6, 7, 2, 4, 7, 7, 0, 1, 6, 8, 8, 6, 5, 7, 1, 6, 0, 2, 7, 5, 6, 6, 6, 8, 0, 3, 3, 3, 4, 0, 6, 0, 6, 9, 3, 8, 0, 6], [0, 0, 0, 0, 2, 1, 2, 2, 0, 2, 0, 2, 1, 1, 1, 0, 1, 2, 0, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 0, 1, 1, 1, 1, 0, 2, 0, 2, 0, 2, 2, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 2, 1, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [3, 2, 2, 1, 2, 3, 3, 2, 0, 1, 3, 1, 3, 0, 1, 0, 1, 0, 2, 0, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 1, 0, 3, 3, 3, 2, 3, 3, 0, 1, 0, 2, 2, 1, 2, 2, 0, 0, 3, 0, 2, 2, 2, 2, 1, 3, 0, 3, 2, 3, 0, 1, 3, 1, 1, 0, 2, 2, 0, 1, 2, 0, 1, 1, 0, 3, 0, 1, 0, 0, 3, 0, 3, 1, 3, 0, 3, 2, 1, 0, 3, 2, 2, 1, 2, 3, 1, 1, 0, 3, 2, 3, 1, 0, 3, 1, 2, 3, 0, 0, 3, 3, 3, 0, 1, 0, 2, 3, 3, 0, 3, 0, 2, 1, 2, 3, 0, 2, 0, 2, 3, 1, 3, 1, 3, 0, 2, 1, 0, 0, 2, 2, 1, 1, 1, 0, 3, 1, 1, 2, 0, 0, 2, 3, 0, 0, 3, 1, 2, 1, 2, 0, 1, 3, 2, 2, 1, 1, 1, 2, 3, 0, 1, 3, 1, 1, 0, 1, 1, 3, 3, 2, 1, 0, 3, 0, 3, 0, 2, 3, 1, 0, 2, 2, 0, 2, 3, 3, 2, 0, 0, 0, 3, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0], [4, 3, 3, 0, 0, 1, 0, 1, 3, 2, 3, 0, 2, 0, 3, 2, 4, 0, 1, 2, 4, 4, 1, 4, 2, 2, 4, 0, 0, 4, 0, 0, 0, 1, 3, 3, 4, 4, 0, 1, 1, 0, 1, 4, 0, 1, 3, 4, 2, 1, 4, 2], [0, 0, 0, 2, 1, 2, 0, 2, 0, 1, 2, 0, 0, 2, 1, 2, 2, 0, 0, 2, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [2, 5, 3, 2, 4, 5, 2, 3, 2, 0, 3, 0, 2, 0, 4, 3, 1, 2, 5, 4], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0, 4, 0, 4, 2, 2, 4, 4, 4, 2, 0, 2, 0, 4, 1, 2, 2, 0, 4, 1, 4, 4, 4, 1, 2, 3, 2, 4, 1, 1, 2, 2, 1, 1, 2, 0, 4, 4, 2, 1, 0, 2, 1, 3, 4, 2, 0, 0, 4, 1, 3, 2, 0, 2, 1, 0], [0, 3, 2, 1, 0, 1, 0, 3, 0, 1, 3, 1, 3, 1, 2], [4, 1, 2, 5], [0, 2, 1, 0, 1, 1, 0, 0, 2, 2, 1, 2, 1, 2, 0, 1, 0, 2, 2], [2, 1, 0, 1, 2, 3, 0, 0, 0, 3, 2, 3, 0, 2, 3, 1], [13, 9, 7, 14, 6], [24, 4, 8], [4, 6, 1, 0], [8, 1, 25, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 20, 20, 7, 13, 0, 7, 0, 0, 4, 5, 12, 5, 2, 5, 0, 2, 5, 59, 59, 60, 7, 205, 49, 52, 24, 29, 20, 16, 0, 66, 15, 4, 19, 16, 5, 3, 4, 4], "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( divInt(int(3.0),mod(len(in2),len(in0))) + mod(i0,int(7.0)) ):{:\\nres0 = min(int(4.0), min(i0, int(87.0))) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif not s2[int(717.0):i0].startswith(in1):{:\\ni2 = ( i1 + int(100.0) )\\ni2 += divInt(max(( int(5.0) * int(9.0) ), int(9.0)),( min(int(5.0), divInt(int(56.0),i2)) - max(len((in2[:abs(mod(len(s2),min(i0, int(1.0))))][i2:] + getCharFromString(in0, mod(( int(0.0) * divInt(( i0 + i2 ),abs(i1)) ),mod(( ( divInt(int(3.0),min(i1, len(saveChr(divInt(abs(i1),int(4.0))).capitalize()[:saveOrd(getCharFromString(s2[:int(6.0)], int(7.0)))][i0:mod(( i1 * int(2.0) ),mod(i2,int(4.0)))].rstrip(s0[int(7.0):i0])))) + min(i1, int(7.0)) ) - i2 ),i2))))), max(i1, abs(int(0.0)))) ))\\ni2 *= saveOrd(saveChr(i1))\\nif False:{:\\nif b1:{:\\ni1 = saveOrd(\"\"4\"\")\\n:}\\n:}else:{:\\nif not in0[mod(int(1.0),i1):][max(( ( int(6.0) + divInt(saveOrd(getCharFromString(\"\"y\"\", int(8.0))),int(8.0)) ) + i1 ), abs(mod(abs(int(6.0)),i2))):saveOrd(getCharFromString(saveChr(int(5.0)), mod(min(i2, i1),min(saveOrd(\"\"N\"\"), min(i0, int(7.0))))).rstrip())] == (\"\"e\"\".strip()[:i1] + \"\"6\"\")[divInt(min(min(i1, max(i1, ( int(1.0) * divInt(len(\"\"%\"\"[:i1][( i0 - divInt(len(\"\"J\"\"),int(6.0)) ):]),saveOrd(s0[int(0.0):])) ))), saveOrd(saveChr(i2))),( int(2.0) * i0 )):]:{:\\ni2 = i0\\n:}else:{:\\nloopBreak% = 0\\nwhile divInt(mod(int(7.0),int(5.0)),int(6.0)) != i2:{:\\nif min(int(6.0), int(6.0)) \\g divInt(i2,i0):{:\\ni0 *= mod(max(i0, i2),max(int(8.0), ( int(0.0) + divInt(i0,int(3.0)) )))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += min(mod(divInt(int(3.0),int(3.0)),int(4.0)), divInt(max(i2, int(0.0)),saveOrd(\"\"H\"\"[int(6.0):int(0.0)].strip(s2))))\\n:}\\n:}\\n:}else:{:\\ns0 = \"\"O\\\\\\n1@G\"\"[:i1]\\nin1 = (saveChr(int(69.0)) + in0[int(3.0):min(max(( int(8.0) * i0 ), len(s1)), i0)])\\ns2 = \"\"0\"\".capitalize()\\nres0 = False\\nb1 = saveOrd((in2[i0:] + \"\"\"\\\\\"i\"\"[( abs(int(06.0)) + i2 ):])) \\g ( ( i1 - mod(max(saveOrd(in1), ( i2 + i0 )),i1) ) - abs(i0) )\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 8, 5, 1, 1, 3, 6, 1, 2, 7, 0, 6, 6, 6, 5, 7, 8, 8, 7, 8, 6, 0, 1, 6, 1, 9, 9, 1, 7, 4, 5, 6], [1, 2, 2, 2, 0, 1, 1, 1, 2, 2, 2, 1, 1, 0, 2, 0, 1, 2, 0, 1, 1, 1, 0, 1, 1, 2, 0, 0, 2, 2, 1, 2, 0, 1, 1], [1], [1, 3, 2, 0, 3, 3, 3, 2, 0, 0, 3, 1, 3, 3, 2, 2, 0, 3, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 2, 3, 0, 3, 0, 3, 1, 0, 2, 3, 0, 2, 3, 1, 1, 2, 2, 0, 3, 2, 3, 0, 2, 2, 2, 0, 3, 3, 2, 3, 1, 3, 2, 0, 1, 2, 2, 3, 2, 2, 0, 2, 0, 3, 0, 2, 1, 1, 1, 1, 3, 3, 2, 0, 2, 3, 2, 2, 0, 0, 1, 3, 0, 0, 2, 3, 2, 2, 1, 0, 0, 3, 2, 2, 1, 0, 1, 1, 3, 3, 0, 3, 2, 1, 2, 1, 3, 1, 3, 0, 2, 0, 0, 2, 3, 0, 1, 0, 2, 0, 2, 2, 0, 3, 2, 1, 0, 0, 3, 3, 0, 2, 1, 0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0], [2, 3, 3, 2, 0, 0, 1, 4, 2, 0, 0, 1, 0, 0, 1, 0, 1, 4, 3, 0, 1, 1, 2, 4, 0, 4, 3, 2, 0, 1, 0, 2, 3, 1, 4, 1, 3, 2], [0, 2, 2, 2, 0, 0, 2, 1, 1, 1, 1, 0, 2, 2, 0, 1], [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0], [4, 5, 2, 2, 4, 5, 0, 1, 4, 2, 1, 2, 3, 3], [1, 0, 0, 0, 0, 1, 1, 1, 1], [], [4, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 1, 2, 0, 3, 1, 2, 3, 3, 3, 0, 0, 4, 0, 2, 2, 0, 2, 4, 4, 2, 4, 2, 1, 4, 1, 0, 0, 0, 1, 0, 4], [0, 3, 2, 2, 0, 2, 2, 1], [4], [0, 2, 1, 2, 2, 2, 1, 0, 1, 2], [2, 2, 2, 2, 1, 3, 3, 1, 3], [], [2, 21], [6, 1, 7, 7], [18, 0, 2]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 36, 36, 35, 0, 142, 39, 38, 16, 23, 14, 9, 0, 42, 8, 1, 10, 9, 0, 2, 4, 3], "tree_depth": 71, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l abs(mod(i1,len(getCharFromString(in1, len((in2 + (s2[:abs(( i2 + i2 ))][min(int(9.0), min(max(mod(mod(i2,saveOrd(s2)),int(8.0)), int(3.0)), int(8.0))):] + \"\"6\"\"))[int(5.0):int(1.0)].rstrip(in1[int(1.0):]))))))\\nin2 = (\"\"177c/\"\" + (((s0 + s1) + in1.capitalize()) + s2[:int(3.0)][abs(min(int(612706.0), ( min(i0, max(i1, min(int(6.0), i1))) * ( min(i1, divInt(max(int(6.0), int(5.0)),divInt(mod(i2,min(( max(i2, ( ( ( i2 * saveOrd(getCharFromString(\"\"\"\"[len(\"\"v\"\".capitalize()):].capitalize()[:mod(min(int(7.0), max(( i1 * int(8.0) ), divInt(mod(max(( divInt(i1,divInt(i0,abs(i2))) + divInt(int(8.0),int(7.0)) ), int(8.0)),int(6.0)),saveOrd(s1)))),min(divInt(i0,divInt(saveOrd(s2),divInt(mod(i1,i2),int(0.0)))), len(in0)))], i0).capitalize()[i1:( abs(( divInt(int(1.0),i1) + i1 )) * min(divInt(divInt(int(6.0),i0),int(1.0)), int(9.0)) )]) ) - max(min(i1, abs(( int(9.0) - mod(int(1.0),len(\"\"\\\\\\t\"\")) ))), int(7.0)) ) - max(i1, ( i2 - i0 )) )) + mod(saveOrd(in0),i0) ), int(4.0))),i2))) * divInt(i2,( divInt(i1,max(( int(5.0) * i2 ), i0)) + len(saveChr(abs(i1))) )) ) ))):])[( int(6.0) - i1 ):])\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [4, 4, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [3], [], [], [], [13]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"*\"\") \\le ( divInt(len(in1),divInt(len(in1),( ( i1 + int(3.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1, 0, 0, 1, 0, 1], [], [2, 0, 4, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1, 2, 0, 1, 0, 0], [5, 8, 10], [5, 24], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 1, 11, 1, 4, 1, 1, 3, 6, 0, 13, 3, 0, 2, 6, 3, 2, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\g len(getCharFromString(getCharFromString((\"\"f\"\" + \"\"0Fy\"\"), i0), divInt(len(getCharFromString(in2, i2)[i1:int(37.0)]),len((s1 + \"\"IK\"\")))))\\ni0 += int(6.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5], [0, 0, 0, 0, 0, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 1, 0, 2, 0, 0, 0, 1, 1, 3, 3, 2, 3, 1, 1, 0, 1, 1, 1], [0, 0, 0], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2, 2], [1, 1, 0, 1, 1], [4, 5, 3, 2, 4, 5], [0, 1], [], [4, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1, 1], [], [10, 19], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 12, 2, 4, 2, 0, 0, 2, 0, 2, 1, 0, 0, 2, 0, 2, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(getCharFromString(\"\"kt\"\", min(int(16.0), i0))) * ( i0 * i0 ) ), i0)) \\l int(9.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [3, 1, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [0, 1], [3, 1, 3, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3], [0, 0, 1, 0, 1, 1, 0, 0], [4, 1, 3, 3, 4], [1, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [0, 0, 1], [], [1, 0, 3, 0, 0, 4, 4, 2, 0, 0, 3, 0, 1], [2, 0, 0], [], [2, 1], [1, 2, 2], [5], [23], [4, 2], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 0, 3, 0, 1, 0, 0, 0, 3, 0, 1, 2, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"x42\"\") \\le int(31.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4, 3], [0, 1, 0, 0, 1, 1], [0, 0, 0], [], [3, 3, 2], [1, 0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], [2, 6, 5, 8, 7, 7, 1, 7, 3, 3, 3, 8, 9, 8, 5, 5, 3, 2, 8], [0, 2, 2, 0, 2, 0, 1, 0, 2, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 3, 0, 2, 1, 2, 0, 2, 3, 1, 1, 3, 3, 0, 3, 2, 1, 1, 3, 3, 1, 3, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0, 3, 3, 1, 1, 2, 2], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0, 1], [2, 5, 3, 2, 4, 5, 1], [1], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 1, 4, 4, 0, 4, 2, 0], [0, 3, 2], [4], [2, 1, 2, 0, 1, 0], [2], [], [], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 3, 6, 3, 0, 3, 2, 0, 0, 19, 19, 10, 0, 47, 11, 11, 7, 4, 7, 1, 0, 19, 3, 1, 6, 1, 0, 0, 1, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s2[( divInt(len(in2),divInt(len((in0 + (s2[( ( i0 + int(2.0) ) + int(6.0) ):int(5.0)][i2:] + in1))[:divInt(int(8.0),i2)]),int(7.0))) - i0 ):]) \\le ( i2 * int(7.0) ) or ( not min(i0, ( int(1.0) - mod(i1,( min(int(7.0), int(3.0)) * len(\"\"9\"\"[:len(getCharFromString(in2.rstrip(s1[i0:max(( int(3.0) + int(3.0) ), max(abs(int(8.0)), abs(i2)))].capitalize()), i1))]) )) )) \\le int(98.0) and int(55.0) \\ge int(328.0) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 0, 1], [1, 7, 9, 8, 3, 5, 5, 5], [1, 0, 2, 1, 2, 1, 1], [1], [1, 3, 2, 3, 2, 3, 1, 2, 0, 1, 2, 3, 3, 3, 2, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 0], [2, 3, 4, 0, 0, 3, 1, 0, 1], [0, 2, 1], [1, 1, 1], [4, 5, 2, 2, 4, 5], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [0, 0, 1], [3], [], [], [], [31]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 6, 0, 23, 5, 6, 3, 2, 6, 1, 0, 12, 1, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) \\le abs(mod(len(in1),mod(saveOrd(in2),int(9.0))))\\ns2 = getCharFromString((s2 + (in1[:( i1 + int(8.0) )][( min(min(len(in2), ( i0 * i2 )), i1) - i2 ):i1] + \"\"`\"\"))[int(3.0):int(5.0)], int(55.0))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5, 1], [1, 1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 1, 4, 1], [0, 3, 2], [4], [2, 0, 2], [1, 1], [], [19, 10], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 5, 0, 27, 8, 6, 5, 3, 5, 2, 0, 15, 3, 1, 3, 2, 0, 2, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(getCharFromString(in2, mod(saveOrd((in1 + (s2[len(in1):][( int(5.0) + int(3.0) ):int(3.0)] + \"\"t\"\".rstrip(\"\"k\"\".capitalize())))[int(6.0):]),min(( int(7.0) + i0 ), min(i0, divInt(i1,int(79.0))))))),i0) * ( ( i2 * int(6.0) ) - int(895.0) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 0, 1], [9, 3, 9, 8, 5, 6, 2, 5], [0, 0, 1, 1, 2, 0, 0, 0, 1], [0], [3, 3, 2, 3, 2, 2, 3, 3, 0, 3, 0, 3, 3, 3, 1, 2, 0, 3, 0, 1, 3, 1, 0, 0, 0, 2, 1, 3, 2, 0, 0, 1, 1, 3], [1, 0, 0, 1, 1, 0], [2, 3, 3, 0, 0, 0, 3, 3, 1, 2, 0, 2, 4], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0, 1], [3, 5, 3, 2, 4, 5, 5], [1, 1, 0, 1], [], [1, 0, 1, 2, 1, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 0, 0], [0, 3, 1, 1], [11], [4, 25], [], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 6, 0, 24, 4, 11, 2, 2, 1, 4, 0, 5, 0, 0, 1, 4, 1, 2, 0, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(\"\"L\"\")) \\l divInt(len(in0),( ( min(min(i0, min(i0, len(\"\"&\"\"))), len(\"\"ez\"\"[max(int(93.0), mod(i1,abs(i1))):int(9.0)])) + min(int(8.0), i2) ) + i0 ))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 2], [0, 0], [0], [3], [0], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2, 1], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0], [4, 3, 1, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5, 1], [0, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [1, 2], [], [1], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 13, 13, 6, 0, 30, 8, 6, 6, 2, 5, 2, 0, 11, 0, 0, 3, 2, 0, 1, 1, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s2) \\le ( divInt(len(\"\"b2\"\"),( max(min(( int(5.0) + int(3.0) ), int(3.0)), int(6.0)) + min(( int(7.0) * i0 ), min(i0, mod(i1,int(79.0)))) )) * i0 ) and in2 in (in1 + (s2[( ( i2 - int(6.0) ) * int(895.0) ):][i1:int(2.0)] + in1))[int(2.0):] )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 3, 2, 2, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [1], [], [15], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 1, 1, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(len(\"\"p\"\"), ( divInt(mod(len(s1),( ( i0 + int(4.0) ) + int(7.0) )),int(4.0)) + i0 )) \\le divInt(int(8.0),i1)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1], [2, 1, 2, 0, 2, 1, 0, 0, 1, 2, 0, 1, 1, 0, 2, 1, 1, 0], [1, 0, 1, 0, 2], [0, 2, 1, 0, 0, 0, 1, 2, 2, 0, 1, 0, 0], [0, 0], [0, 0, 0, 0, 0, 0], [], [], [1, 1, 3, 0, 2, 1, 0, 1], [0, 4, 3, 0, 2], [1, 1, 2, 1, 2, 2, 0, 0, 1, 2, 2, 1], [0, 0, 0, 0, 0], [3, 0, 4, 0, 2], [0, 3], [1], [], [1, 0], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5, 5, 4, 8, 8, 2, 8, 4, 4, 1, 0, 6, 5, 5, 4, 7, 2, 0, 4, 5, 4, 9, 4, 8, 9, 3, 1, 4, 8, 8, 5, 7, 4, 2, 9, 6, 0, 6, 1, 1, 7, 1, 2, 9, 6, 1, 0, 6, 3], [1, 0, 1, 0, 2, 1, 2, 1, 1, 2, 0, 0, 2, 1, 1, 1, 1, 1, 0, 0, 0, 1, 2, 1, 0, 1, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 1, 1, 1, 2, 2, 1, 0, 0, 0, 2, 0, 2, 2, 1, 1], [1, 0, 0], [3, 3, 2, 3, 2, 3, 0, 0, 0, 2, 0, 1, 3, 3, 3, 3, 0, 1, 1, 3, 0, 3, 1, 3, 1, 3, 3, 3, 0, 1, 0, 3, 0, 2, 3, 2, 1, 3, 1, 3, 1, 3, 2, 0, 2, 3, 3, 3, 1, 2, 2, 2, 2, 0, 0, 3, 1, 3, 3, 0, 2, 0, 2, 3, 0, 0, 1, 1, 1, 1, 3, 2, 2, 1, 0, 0, 0, 0, 3, 2, 1, 3, 1, 2, 2, 2, 1, 3, 1, 2, 2, 0, 3, 1, 2, 1, 2, 2, 3, 3, 2, 1, 2, 1, 3, 3, 1, 0, 1, 2, 3, 0, 1, 2, 1, 1, 2, 2, 2, 0, 0, 2, 0, 3, 3, 2, 1, 2, 3, 2, 1, 1, 0, 3, 0, 1, 1, 0, 3, 2, 0, 2, 0, 0, 0, 0, 0, 3, 0, 1, 2, 1, 2, 3, 1, 0, 0, 2, 0, 0, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 3, 3, 1, 0, 1, 0, 3, 0, 3, 3, 1, 2, 2, 2, 2, 3, 1, 2, 3, 2, 2, 3, 0, 0, 0, 0, 3, 3, 1, 3, 2, 0, 1, 3, 1, 2, 3, 2, 1, 0, 2, 2, 2, 3, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 1, 3, 0, 0, 3, 0, 1, 1, 3, 0, 4, 4, 0, 0, 2, 1, 2, 1, 0, 4, 4, 2, 2, 4, 2, 4, 4, 0, 2, 3, 3, 3, 0, 1, 0, 2, 3, 0, 3, 1, 2, 4, 3, 2, 3, 3, 0, 4, 3, 4, 2, 2, 2, 4, 4, 2], [1, 2, 1, 1, 0, 2, 0, 1, 0, 1, 2, 2, 2, 1, 1, 1, 0, 1, 2, 1, 0, 0, 0, 1, 1, 0, 0, 0, 2, 2, 0, 0, 2, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1], [4, 5, 3, 2, 4, 5, 2, 0, 3, 3, 4, 3, 5, 4, 1, 5, 4, 1, 4, 3, 0, 1, 4, 1, 4, 1, 1, 3, 1], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 0, 4, 4, 0, 4, 2, 0, 1, 1, 2, 2, 4, 2, 0, 1, 0, 0, 0, 4, 2, 0, 2, 2, 1, 0, 1, 1, 1, 2, 0, 3, 2, 1, 1, 4, 4, 1, 3, 1, 3, 2, 1, 4, 4, 4, 0, 2, 4, 2, 4, 4, 2, 4, 1, 1, 4, 4, 2, 4, 4, 4, 0, 3, 2, 2, 1, 0, 1, 2, 2, 1, 0, 2, 0, 1, 4, 3, 0, 2, 0, 1, 1, 3, 1, 0], [0, 3, 2, 2, 2, 1, 0, 3, 0, 2, 1, 2, 3, 2, 3, 3, 1, 1, 1, 2, 2], [4, 0, 4, 2, 2], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 2, 0, 1, 0, 2, 1, 1, 1, 2, 0, 1, 1], [0, 2, 1, 1, 1, 0, 0, 0, 2, 3, 1, 1, 3, 0, 3, 1, 2, 1, 1, 3, 0, 1, 3, 2, 2, 3, 2], [24, 2, 6, 23, 9, 2], [8, 13, 23, 13, 22, 19, 2, 0, 16], [3, 3, 9, 6, 7, 8], [27, 25, 2, 1, 6, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 18, 18, 5, 13, 2, 6, 0, 0, 8, 5, 12, 5, 5, 2, 1, 0, 2, 55, 55, 58, 3, 226, 61, 57, 34, 28, 29, 27, 2, 97, 21, 5, 23, 27, 6, 9, 6, 6], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(in1) \\l max(divInt(len(in2),( min(i1, i0) - i1 )), mod(i0,int(26.0))):{:\\nb1 = min(len(in0), min(max(i2, int(9.0)), int(73.0))) \\le max(i1, len((s2 + (in1[:int(5.0)][min(int(5.0), saveOrd(in2)):saveOrd(getCharFromString(s2, min(i2, int(5.0))))] + s0.capitalize().rstrip(in0[:i1].capitalize())))[min(i1, ( abs(( int(4.0) * max(int(8.0), abs(int(8.0))) )) - max(( i2 - ( min(saveOrd(\"\"Y\"\"), saveOrd(\"\"3\"\")) + int(2.0) ) ), ( ( divInt(mod(i0,i0),abs(int(8.0))) * abs(saveOrd(in0[:i2].capitalize()[:( i1 + divInt(abs(i1),i1) )][int(4.0):int(4.0)])) ) - int(1.0) )) )):int(0.0)]))\\nloopBreak% = 0\\nfor in1 in \"\"inxCG\"\":{:\\nin0 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif in1 != s1:{:\\ni1 += saveOrd(saveChr(( divInt(int(6.0),i1) - i0 )))\\nb1 = i0 \\ge i0\\nres0 = in2[:saveOrd(\"\"X\"\"[divInt(int(5.0),min(int(5.0), ( mod(mod(int(4.0),abs(int(7.0))),mod(( i1 * len(in1) ),int(2.0))) * mod(int(0.0),divInt(mod(len(\"\"3\"\"),len(\"\"\\\\\\\\\"\")),( int(4.0) * divInt(int(5.0),min(max(int(4.0), i2), int(9.0))) ))) ))):divInt(min(i1, int(4.0)),( int(8.0) - int(9.0) ))][divInt(( ( i0 - i1 ) - ( i2 + abs(len(\"\"n\"\")) ) ),divInt(int(3.0),( min(( int(1.0) - int(4.0) ), i0) * len(s1[i2:int(8.0)]) ))):int(8.0)])] in (\"\"w\"\"[i2:] + \"\"@\"\")\\nb0 = getCharFromString(\"\"J\"\".lstrip(), max(divInt(i0,( i2 - i2 )), i2)).startswith((\"\"\\\\\\t\"\" + (\"\"t\"\"[i2:i2] + getCharFromString(saveChr(abs(i2)).capitalize(), int(5.0)))))\\nloopBreak% = 0\\nfor in1 in in0:{:\\ni2 = mod(int(7.0),( saveOrd(\"\"9\"\".strip()[int(4.0):].capitalize().rstrip(\"\"c\"\")[i0:i2].capitalize()[:( i0 + i2 )]) + int(2.0) ))\\ns0 = saveChr(( ( divInt(( int(9.0) + mod(int(6.0),( int(0.0) - ( int(6.0) - ( int(1.0) + i2 ) ) )) ),len(saveChr(abs(int(1.0)))[:i1])) + int(7.0) ) + i1 )).strip()\\ns1 = saveChr(len(in1.capitalize()))\\nb2 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( i1 \\l len((\"\"a\"\"[:min(int(1.0), divInt(( divInt(mod(saveOrd(s1),int(2.0)),( len(\"\"\\\\\\n\"\") * ( divInt(saveOrd(\"\"C\"\"[i2:i2][i1:]),i0) * abs(abs(int(9.0))) ) )) + abs(( i0 + int(6.0) )) ),saveOrd(in1)))][:int(1.0)] + s1[:( saveOrd(\"\"q\"\") * divInt(int(0.0),i0) )])) or (s1 + in0[:mod(mod(( abs(int(6.0)) - i2 ),i0),i2)]).capitalize() in \"\"#67\"\" ):{:\\ni2 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = \"\"]\"\" == (\"\"8\"\" + s1)\\n:}\\n:}\\nb1 = int(3.0) == i1\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 5, 6, 0, 3, 5, 5], [1, 1, 1, 1, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 2, 3, 1, 3, 3, 2, 1, 0, 3, 2, 0, 3, 1, 1, 2, 0, 3, 1, 0], [1, 0, 1, 1, 0, 0], [2, 3, 3, 2, 0, 2, 1, 4, 3, 2, 4], [0, 0, 2], [1, 1, 0], [4, 5, 4, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 1, 2], [1], [], [13], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 5, 0, 28, 6, 11, 3, 3, 6, 1, 0, 12, 0, 0, 3, 1, 0, 1, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(min(( i1 + mod(abs(int(6.0)),max(saveOrd(\"\"n\"\"), divInt(int(0.0),i1))) ), len((in1 + (s2[( i1 + abs(int(3.0)) ):][:int(5.0)] + in1))[( i1 * saveOrd(in2) ):int(5.0)]))) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1], [3, 0, 9, 0, 6, 5, 5, 8, 7, 1, 8, 9, 9, 0, 2, 4, 9, 4, 6, 8, 2, 0, 3, 8, 7, 1, 5, 6, 8, 3, 9, 4, 8, 7, 9, 3, 4, 5, 1], [1, 0, 1, 2, 0, 1, 1, 2, 2, 0, 2, 1, 2, 2, 2, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0], [1], [1, 3, 2, 3, 3, 3, 2, 3, 0, 0, 3, 3, 1, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 2, 0, 1, 1, 1, 3, 2, 3, 2, 2, 3, 3, 0, 3, 3, 2, 1, 3, 3, 2, 3, 1, 3, 3, 0, 1, 2, 1, 2, 2, 0, 2, 1, 3, 0, 3, 2, 1, 3, 2, 0, 0, 2, 0, 2, 0, 2, 3, 0, 1, 0, 1, 3, 0, 3, 1, 3, 2, 3, 1, 3, 0, 0, 0, 3, 0, 1, 1, 3, 3, 2, 1, 1, 0, 3, 1, 2, 3, 3, 2, 1, 0, 0, 2, 1, 0, 0, 0, 2, 1, 2, 0, 1, 2, 2, 0, 0, 0, 3, 0, 1, 3, 0, 1, 3, 0, 1, 1, 2, 2, 0, 2, 3, 1, 3, 0], [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0], [2, 3, 3, 0, 0, 0, 1, 4, 1, 0, 2, 1, 4, 0, 3, 4, 0, 1, 3, 3, 4, 3, 3, 1, 3, 1, 1, 0, 1, 2, 3, 4, 3, 1, 0, 2, 1, 2, 4, 2, 3, 2, 1, 3, 4], [0, 2, 1, 2, 1, 0, 1, 0, 2, 0, 2, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [4, 5, 4, 2, 4, 5, 2, 4, 4, 3, 3, 5, 0, 5, 2], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 4, 2, 4, 2, 4, 1, 0, 2, 1, 2, 2, 2, 4, 2, 4, 4, 2, 4, 4, 0, 2, 2, 2, 2, 1, 4, 4, 0, 0, 1, 0, 4, 1, 2, 4, 4, 0, 3, 0, 1, 2, 0, 1], [0, 3, 2, 1, 2, 2, 3, 1, 0, 3, 3, 3, 1], [4, 2, 2, 0, 2], [0, 2, 2, 2, 0, 2, 0, 2, 2, 0, 0, 2, 1, 2, 1, 0, 0, 2], [2, 2, 2, 3, 3, 3, 1, 2, 0, 3, 1, 1], [8], [14, 24, 4], [4, 0, 6, 5], [29, 16, 29, 1]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 39, 39, 35, 0, 147, 34, 45, 12, 22, 15, 12, 0, 55, 13, 5, 18, 12, 1, 3, 4, 4], "tree_depth": 105, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(30.0) \\l abs(mod(len(in1),len(in2))):{:\\nb1 = min(( min(i1, i0) + min(max(int(9.0), saveOrd(in1)), mod(mod(i1,max(int(0.0), int(6.0))),int(5.0))) ), i2) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = (in1 + (in2[( mod(divInt(min(abs(max(saveOrd(s2), min(mod(i0,int(8.0)), int(7.0)))), int(1.0)),len(getCharFromString(\"\"4\"\".capitalize()[mod(saveOrd(in1),mod(divInt(min(max(i1, len(\"\"0\"\"[len(saveChr(mod(int(8.0),saveOrd(saveChr(len(in1)).strip()[( len(\"\"6\"\"[int(9.0):max(len(getCharFromString(in0.strip(), i1)), int(9.0))][:divInt(int(0.0),mod(divInt(i2,( int(2.0) * max(i2, max(( int(4.0) - min(( i0 * i2 ), ( i1 - divInt(i2,mod(max(i2, int(9.0)),i2)) )) ), int(4.0))) )),abs(i1)))][len(in0):][:int(6.0)]) + saveOrd(\"\"^\"\") ):].capitalize().capitalize()[( len(in2) - int(8.0) ):max(i0, i1)])))[i0:min(i0, int(2.0))][int(0.0):][abs(max(mod(int(3.0),int(8.0)), i1)):]):abs(int(7.0))])), ( saveOrd(\"\"-\"\".lstrip()) + abs(divInt(int(1.0),i0)) )),i2),divInt(int(5.0),i0))):].rstrip(saveChr(i1).strip()[i0:divInt(int(6.0),mod(i1,int(8.0)))])[divInt(( i1 * i0 ),i0):len(s0)], i1)[int(3.0):])),abs(i1)) + int(9.0) ):][max(i0, int(4879.0)):] + (in2 + \"\"^\"\")))[int(3.0):( mod(i0,( len(s2[int(451.0):]) * saveOrd(\"\"o5I\\\\\\nye\"\") )) - i0 )]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [3, 4, 4, 0, 7, 7, 1, 8, 7, 3, 9, 1, 1, 5, 5], [0, 2, 0, 0, 2, 2, 1, 2, 1, 1, 0, 2, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 0, 0, 2, 1, 1, 1, 0, 2, 0, 1, 2, 3, 2, 1, 2, 1, 3, 3, 1, 2, 0, 2, 0, 3, 0, 2, 1, 2, 0, 1, 3, 0, 1, 2, 3, 1, 2, 3, 3, 1, 2, 2, 2, 0, 1, 3, 0, 3, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [4, 3, 3, 0, 0, 4, 2, 0, 4, 0, 4, 1, 3, 2], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [2, 5, 3, 2, 4, 5], [1, 1, 1], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 4, 1, 1, 0, 1], [0, 3, 2], [4], [2, 1, 0, 0, 1], [1, 3, 0], [14], [17], [], [4]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 15, 15, 13, 0, 60, 19, 14, 7, 12, 6, 3, 0, 17, 1, 0, 5, 3, 1, 1, 0, 1], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2[( divInt(len(in2),mod(len((in0 + (s2[( ( i0 + int(3.0) ) + min(i2, i0) ):mod(int(4.0),int(4.0))][int(0.0):i0] + in1))[:( i2 + int(7.0) )]),( min(divInt(int(7.0),divInt(int(1.0),saveOrd(getCharFromString(\"\"r\"\", abs(int(8.0)))[:( i2 * ( i1 - min(i2, divInt(int(7.0),divInt(i1,int(3.0)))) ) )]))), saveOrd(\"\"!\"\")) * i1 ))) + int(9.0) ):]) \\le divInt(min(int(11.0), divInt(saveOrd(in2),max(int(5.0), divInt(mod(mod(i0,int(5.0)),len(\"\"O\"\")),i2)))),abs(i1))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1], [2, 1, 0, 0, 0, 0, 1, 2, 1, 1], [1, 2], [0, 1, 0, 0, 0, 0, 0, 1], [], [0, 0, 0, 0], [], [], [3, 1, 1, 2, 1, 1], [4, 4, 1, 2, 0], [1, 1, 1, 0, 0, 2, 1, 2, 2, 2, 1], [0, 0, 0, 0, 0], [4, 1, 4, 4], [3, 2], [0], [], [1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 6, 1, 7, 6, 3, 6, 1, 8, 9, 2, 0, 3, 4, 9, 4, 9, 4, 5, 9, 0, 4, 5, 1, 7, 0, 1, 7, 7, 0, 5, 5, 4, 3, 8, 7, 3, 0, 8, 1, 3, 1, 0, 9, 1, 2, 0, 2, 3, 1, 0, 4, 8, 3, 4, 4, 6, 9, 8, 9, 2, 5, 1, 8, 8, 3, 9, 9, 9, 1, 1, 5], [2, 2, 1, 0, 2, 0, 0, 1, 0, 2, 0, 2, 1, 1, 2, 1, 2, 0, 0, 2, 1, 1, 0, 1, 2, 2, 0, 0, 0, 1, 2, 2, 1, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 1, 1, 0, 1, 1, 0, 2, 2], [1, 1], [3, 1, 1, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3, 0, 2, 3, 2, 2, 2, 2, 3, 3, 2, 1, 1, 3, 1, 3, 1, 2, 1, 0, 2, 1, 1, 3, 1, 2, 2, 3, 3, 1, 3, 2, 2, 2, 0, 3, 2, 2, 3, 2, 2, 0, 2, 1, 1, 1, 3, 2, 0, 3, 1, 3, 1, 1, 2, 3, 3, 2, 0, 2, 1, 3, 2, 2, 3, 3, 3, 0, 3, 2, 3, 2, 2, 0, 0, 3, 0, 1, 1, 2, 2, 3, 2, 1, 0, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 3, 2, 1, 0, 0, 2, 2, 2, 1, 0, 0, 1, 0, 2, 0, 3, 2, 3, 0, 3, 1, 0, 0, 2, 2, 3, 0, 1, 3, 0, 1, 1, 1, 2, 0, 0, 3, 2, 3, 3, 2, 3, 0, 2, 3, 0, 0, 2, 3, 1, 3, 2, 2, 3, 2, 1, 3, 2, 3, 3, 0, 1, 0, 0, 3, 0, 3, 2, 3, 2, 1, 3, 1, 3, 3, 0, 2, 2, 0, 2, 2, 1, 1, 3, 2, 1, 2, 3, 1, 1, 1, 2, 3, 0, 2, 3, 2, 0, 2, 1, 3, 0, 1, 1, 0, 0, 2, 0, 3, 0, 3, 3, 2, 0, 3, 0, 2, 3, 0, 0, 0, 0, 1, 3, 0, 0, 1, 1, 1, 0, 2, 3, 0, 3, 1, 0, 1, 3, 3, 1, 2, 3, 0, 3, 1, 2, 1, 3, 3, 0, 1, 1, 1, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1], [3, 3, 3, 3, 4, 1, 3, 2, 3, 4, 4, 3, 2, 3, 4, 4, 2, 0, 0, 3, 4, 0, 0, 3, 2, 4, 3, 1, 2, 1, 4, 3, 2, 0, 4, 1, 1, 4, 1, 4, 4, 4, 4, 0, 0, 4, 2, 0, 3, 2, 4, 0, 4, 3, 1, 0, 2, 3, 3, 4, 3, 1, 2, 3, 0, 1, 4, 3, 4, 3, 1], [0, 1, 0, 1, 2, 1, 2, 0, 1, 1, 2, 0, 0, 1, 0, 2, 0, 1, 2, 0, 2, 2, 2, 0, 1, 0, 0, 0, 1, 1, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [3, 5, 1, 4, 4, 2, 0, 3, 5, 3, 5, 5, 5, 1, 4, 3, 0, 0, 5, 4, 3, 2, 3, 2, 5, 3, 4, 5, 5, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1, 4, 2, 1, 2, 2, 4, 4, 2, 0, 4, 4, 2, 1, 2, 0, 4, 2, 2, 4, 0, 2, 0, 2, 4, 2, 4, 4, 1, 2, 2, 0, 1, 0, 1, 1, 2, 2, 2, 2, 2, 0, 2, 4, 0, 0, 1, 0, 4, 2, 2, 0, 1, 1, 2, 4, 4, 1, 1, 0, 0, 1, 0, 4, 2, 1, 4, 2, 0, 2, 2, 4, 0, 2, 1, 0, 2, 4, 0, 1, 3, 4, 0, 4, 2, 1, 4, 1, 2, 2, 0, 0, 1, 3, 0, 1, 1, 2, 1, 3, 4, 0, 1, 1, 2, 4, 3, 0, 4, 2, 3, 4, 4, 0, 2, 1, 0, 1], [0, 0, 0, 2, 3, 3, 2, 2, 3, 2, 2, 0, 3, 3, 2, 3, 2, 1, 1, 1, 0, 3, 0, 3, 3, 2, 1, 3], [3, 1, 3, 3, 5, 4, 2, 3, 2, 3], [2, 0, 2, 2, 0, 0, 1, 1, 1, 1, 2, 2, 0, 0, 0, 1, 1, 0, 1, 1, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 2, 2, 2, 1, 2, 0, 2], [1, 2, 3, 1, 2, 2, 2, 2, 1, 3, 2, 3, 0, 0, 2, 2, 3, 3, 2, 3, 3, 2, 2, 3, 0, 3, 2, 2, 2, 3, 1, 0, 2, 0], [5, 2, 24, 23, 15], [5, 16, 11, 3], [8, 8, 6, 0, 1, 9, 4, 0, 4, 2, 9, 0, 5, 1, 5], [25, 5, 16, 17, 25, 1, 5, 28, 23, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 2, 8, 0, 4, 0, 0, 6, 5, 11, 5, 4, 2, 1, 0, 1, 72, 72, 60, 2, 263, 69, 71, 32, 39, 30, 34, 0, 130, 28, 10, 37, 34, 5, 4, 15, 10], "tree_depth": 93, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(in0[int(16.0):]) \\le int(1.0):{:\\nres0 = len(in2) \\le divInt(len(getCharFromString((\"\"f\"\" + \"\"8\"\"), i2)),i2)\\ni1 += int(7.0)\\nb1 = len(getCharFromString(s1, int(6.0))[int(3.0):saveOrd((in1 + \"\"@\"\"))]) \\g i0\\nb1 = ( not getCharFromString(\"\"q\"\"[( max(mod(( divInt(divInt(len(in1[abs(( int(6.0) - int(1.0) )):len(\"\"8\"\"[:int(8.0)].capitalize().rstrip())].lstrip(s2[:saveOrd(s0.lstrip(in0[int(9.0):])[:( int(2.0) + i2 )][:( int(0.0) - int(3.0) )].capitalize())]).capitalize()[saveOrd(getCharFromString(\"\"6\"\", int(4.0)).capitalize()[divInt(divInt(len(in2[abs(int(9.0)):len(\"\"0\"\")][( ( mod(i0,saveOrd(in0)) * ( divInt(saveOrd(\"\"1\"\"),mod(( i0 - ( int(4.0) * int(9.0) ) ),int(4.0))) + abs(mod(i1,min(int(5.0), min(int(9.0), int(0.0))))) ) ) - mod(len(\"\"l\"\"),saveOrd(in2[:( i0 - ( int(4.0) * min(mod(( min(len(in2.lstrip(in2)[abs(i2):saveOrd(\"\"\"\"\")]), ( len(s1) + mod(divInt(i0,i2),max(i1, int(5.0))) )) + int(1.0) ),mod(mod(abs(mod(int(7.0),i1)),int(0.0)),int(1.0))), ( int(7.0) - int(7.0) )) ) )][:int(0.0)][mod(int(5.0),int(5.0)):mod(max(( int(4.0) + i2 ), i1),divInt(( divInt(int(3.0),i2) * i0 ),int(8.0)))][:i0][:( i2 + saveOrd(in1[mod(len(\"\"9\"\"),i1):abs(int(7.0))][i1:].strip(\"\"-\"\")) )])) ):i0]),mod(mod(min(i1, int(3.0)),saveOrd(\"\"F\"\".rstrip(\"\"C\"\").capitalize()[:i2])),int(0.0))),int(8.0)):int(1.0)].capitalize()[mod(i2,i0):]):max(mod(max(saveOrd(in0), ( max(i0, mod(saveOrd(s0),i0)) - i1 )),( saveOrd(\"\"4\"\") * int(3.0) )), saveOrd(s0))][divInt(( saveOrd(\"\"0\"\"[divInt(int(1.0),min(( min(saveOrd(saveChr(i2)), int(0.0)) + i2 ), i1)):abs(i0)].capitalize()) * min(( len(in2[mod(int(9.0),abs(int(1.0))):saveOrd(saveChr(min(i0, ( ( i1 * divInt(( int(2.0) * int(0.0) ),saveOrd(in1)) ) + divInt(int(2.0),mod(len(\"\".\"\"[int(3.0):int(1.0)]),int(0.0))) )))[:divInt(max(i1, mod(min(( i1 - mod(int(4.0),abs(i1)) ), int(8.0)),int(3.0))),i2)][i2:mod(i2,len(in0))])]) + i2 ), len(saveChr(saveOrd(s2))[mod(i0,len(\"\"@\"\")):])) ),i2):]),( max(i0, i2) + i2 )),i2) + int(4.0) ),abs(i0)), i1) - int(4.0) ):], int(69.0)).startswith((getCharFromString(in0, int(8.0)) + \"\"4\"\"[i2:].strip())) and ( len(getCharFromString(\"\"\\\\\\n\"\", i1)) - min(int(9.0), i1) ) == int(2.0) )\\nb2 = s2[max(saveOrd(in2), int(51.0)):][( len(\"\"\"29\"\") - i0 ):] not in (in0 + \"\"]\"\")\\n:}else:{:\\nb1 = \"\"Y\"\".startswith(\"\">\"\"[:saveOrd((in1.lstrip(\"\"05\"\") + \"\"1-d\"\"))])\\n:}\\nloopBreak% = 0\\nwhile (in2 + (saveChr(int(88.0)) + in2.lstrip(\"\"X\"\"[mod(int(3.0),len(in0)):]))[max(i1, int(99.0)):int(91.0)].capitalize()).strip()[int(15.0):].startswith(\"\"5P\"\"):{:\\nb1 = i1 \\l i0\\ni2 *= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [2, 6, 9, 7, 3, 5, 5, 3, 4, 8, 0, 5, 1, 6, 5, 7, 7, 4, 6], [1, 0, 1, 2, 1, 1, 1, 2, 0, 2, 2, 2], [1], [1, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 1, 3, 2, 3, 2, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2, 2, 3, 0, 1, 1, 3, 2, 0, 3, 3, 0, 3, 3, 1, 2, 0, 0, 0], [1, 0, 1, 1, 0, 0, 0, 1, 0], [1, 1, 4, 4, 0, 3, 0, 1, 1, 0, 4, 3, 1], [2, 2, 2, 0, 0], [0, 1, 0, 0], [3, 5, 3, 2, 4, 5], [1, 1, 1], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 1, 1, 3, 1, 4, 0], [0, 3, 2], [4], [0, 1, 0], [3, 1, 3], [], [18], [], [25, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 19, 19, 12, 0, 44, 9, 13, 5, 4, 6, 3, 0, 18, 3, 1, 3, 3, 0, 1, 0, 2], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(26.0) \\l max(divInt(max(saveOrd(getCharFromString(in0, saveOrd(in2))), i1),( i0 * min(i1, int(9.0)) )), len((in0 + (s2[mod(min(divInt(i2,int(7.0)), ( i1 * int(3.0) )),int(5.0)):int(5.0)][:i1] + in1))[int(3480.0):( ( max(i1, int(516.0)) * int(57.0) ) + max(divInt(i2,min(saveOrd(\"\"@\"\".rstrip(\"\"s\"\")), i0)), len((\"\"\"\\\\\"\"\" + in2.capitalize()))) )])):{:\\nres0 = max(int(746.0), ( i2 + i2 )) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [5, 2], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 0, 3, 5, 5], [1, 0, 1, 0, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 3, 0, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1], [1, 1, 0], [4, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [2], [], [], [7], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 5, 0, 21, 3, 8, 1, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(mod(len(in1),min(min(i1, ( len(\"\"7\"\") - i0 )), i1)), int(26.0))) != int(9.0):{:\\nres0 = min(max(mod(i0,int(0.0)), int(3.0)), i1) == int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1], [1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 0], [1, 0, 2], [0, 2, 1, 1, 0, 2, 2, 2, 1, 0], [0], [0, 0], [], [], [1, 1, 0], [4, 4, 5], [1, 1, 2, 2, 1], [0, 0, 0], [4, 1], [], [], [], [1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 6, 3, 7, 6, 3, 6, 3, 1, 5, 8, 0, 3, 2, 3, 8, 3, 6, 8, 4, 2, 8], [0, 2, 1, 0, 2, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 0, 0, 2, 0, 0, 2], [1, 1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3, 2, 3, 1, 2, 0, 0, 2, 1, 0, 3, 0, 1, 1, 3, 0, 3, 0, 1, 2, 1, 0, 1, 2, 0, 2, 3, 1, 0, 0, 0, 0, 2, 0, 2, 0, 3, 0, 2, 3, 3, 1, 2, 0, 0, 1, 3, 0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [4, 3, 3, 3, 4, 2, 0, 3, 2, 2, 2, 3, 3, 2], [0, 1, 0, 1, 2, 1, 1], [0, 1, 0, 1, 1, 1, 1], [3, 5, 1, 4, 4, 0, 1, 5, 4, 0, 0, 1, 3, 0], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1], [0], [2, 1, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1, 2, 4, 2, 1, 0, 2, 2, 1, 2, 0, 1, 2, 0, 0, 1, 2, 3, 1, 0, 2, 1, 4, 4, 3, 1, 2, 1, 0], [0, 0, 0, 0, 0], [], [2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 1], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 2, 3, 0, 0, 3, 3], [5, 22, 6, 14, 25, 18], [5, 7, 15, 24, 22, 2, 3], [4], [30, 16, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 13, 13, 3, 10, 1, 1, 0, 0, 3, 3, 5, 3, 2, 0, 0, 0, 1, 22, 22, 23, 3, 60, 11, 14, 7, 7, 14, 17, 1, 41, 5, 0, 11, 17, 6, 7, 1, 3], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(\"\"f\"\"[int(06.0):]) \\le len(in0)\\nin2 = getCharFromString((\"\"hp\"\" + \"\"F\"\"), int(3.0))\\ni0 += divInt(len(getCharFromString(s1, i2)[i1:int(7.0)]),len((in1 + \"\"y\"\")))\\nif int(6.0) \\le int(3.0):{:\\nloopBreak% = 0\\nfor in1 in getCharFromString(\"\"W\"\"[saveOrd(s0):], ( abs(int(6.0)) - mod(i0,i2) ))[( int(31.0) + i0 ):min(i0, int(580.0))]:{:\\ni1 -= int(323.0)\\nloopBreak% = 0\\nwhile \"\"G\"\"[:len(s1[i0:abs(i0)])][int(8.0):divInt(int(3.0),i1)].startswith(\"\"w\"\"):{:\\nb1 = in2[:int(6.0)] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = \"\"cO\"\"\\ns0 = (\"\"d4_\"\" + s1)[mod(i1,( abs(int(8.0)) * i1 )):i1]\\n:}else:{:\\nin0 = \"\"Z\"\"[i1:i1]\\ni2 -= ( i0 - mod(i0,abs(i2)) )\\n:}\\nb0 = mod(len(getCharFromString(getCharFromString((\"\"S\"\" + \"\"-.\"\"[:len(s0)]), int(4.0)), mod(i0,i0))),int(28.0)) != abs(i2)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 7, 6, 3, 5, 5, 8, 7, 9, 5, 0, 7, 0, 3, 5, 6, 8], [0, 0, 2, 1, 0, 1, 1, 2, 2, 2, 2, 2, 2], [1], [1, 3, 2, 3, 3, 3, 3, 2, 1, 0, 3, 1, 0, 2, 2, 2, 0, 3, 1, 1, 1, 1, 1, 3, 0, 3, 2, 3, 3, 3, 0, 2, 2, 2, 0, 0, 1, 1, 1, 0, 3, 2, 0, 0, 3, 1, 2, 1, 3, 1, 2, 1, 1, 2, 0, 0, 3, 0, 2, 3, 3], [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0], [2, 1, 3, 0, 1, 0, 1, 0, 1, 3, 0, 1, 1, 4, 2, 2, 3, 4], [0, 1, 0, 2, 2], [0, 0, 0, 0, 1, 1, 1, 0, 0], [4, 5, 4, 2, 4, 5], [0, 1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 0], [0, 3, 2], [4], [0, 2, 0], [0, 1], [0], [9], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 18, 18, 13, 0, 61, 14, 18, 5, 9, 6, 2, 0, 13, 1, 0, 3, 2, 1, 1, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l abs(divInt(max(len(in1), min(max(divInt(int(7.0),i0), min(int(6.0), i0)), divInt(divInt(mod(i2,max(int(3.0), int(5.0))),int(5.0)),int(8.0)))),int(79.0))):{:\\nres0 = min(i1, max(( len(getCharFromString(in2, min(max(i0, mod(( mod(i1,i1) + int(5.0) ),int(0.0))), int(7.0)))) - i2 ), max(divInt(i2,i2), saveOrd((in1 + (s2[int(0.0):divInt(int(3.0),abs(int(5.0)))][( int(6.0) + int(8.0) ):] + in1))[( i2 * i2 ):abs(i2)])))) \\le ( len(\"\"Aj\"\") * saveOrd(in2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 4, 4, 0, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [0, 0, 0, 0, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [3, 1, 3, 1, 3], [], [11, 17], [], [1, 11, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 12, 2, 5, 1, 1, 1, 5, 0, 2, 0, 0, 0, 5, 0, 2, 0, 3], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le max(( len(\"\"\\\\\\nl(r,\"\") + min(min(i0, divInt(i0,i0)), i0) ), int(3.0))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 4, 4, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [3], [], [], [], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 5, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),( len(\"\">\"\") + ( ( i0 + int(9.0) ) * divInt(int(4.0),i0) ) )) * ( int(4.0) - int(8.0) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5, 3], [2, 0, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 3, 4, 3, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [1], [], [0, 0, 4, 2, 4, 0, 3, 2, 2, 2, 0, 0, 4, 4, 1, 0], [0, 3, 2, 2], [4], [2, 2, 2, 0], [2], [], [], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 4, 0, 22, 4, 8, 1, 3, 6, 1, 0, 16, 4, 1, 4, 1, 0, 0, 1, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(min(( i2 + int(9.0) ), len(getCharFromString(in1.rstrip((s2[int(8.0):saveOrd(in1)][int(3.0):][mod(mod(i0,len(\"\"6\"\".capitalize().capitalize())),i2):] + in2))[i2:], int(5.0))))) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 5, 4, 8, 7, 7, 1], [2, 0, 1, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 2, 2, 0, 2, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 0, 1, 0, 1], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [1], [], [6], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 5, 3, 2, 3, 1, 1, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(divInt(int(5.0),len(\"\"g\"\"))) \\le ( len(s1) + divInt(( i2 + divInt(int(5.0),int(4.0)) ),i0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 5, 8, 7, 7, 1, 7, 4, 7, 3, 9, 0, 9, 2, 8, 2, 6, 2], [1, 0, 1, 0, 2, 0, 0, 0, 2, 0], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 1, 2, 2, 3, 1, 2, 2, 2, 1, 1, 2, 2, 3, 1, 1, 0, 3, 1, 2, 1, 2, 2, 1, 3, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0], [4, 3, 3, 0, 0, 2, 0, 2, 2, 4, 3, 2, 0, 1], [0, 0, 0, 2, 1, 2, 0, 2, 1, 2], [0, 0, 0, 1, 0, 0, 1, 0, 1], [2, 5, 1, 2, 4, 5], [1, 1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 1, 1], [0, 3, 2], [4], [0, 0, 2], [1, 2], [], [22], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 19, 19, 10, 0, 60, 19, 14, 10, 9, 5, 2, 0, 13, 1, 0, 3, 2, 0, 1, 1, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(getCharFromString((s1 + (s2[( ( i1 + int(3.0) ) + int(7.0) ):][int(5.0):i0] + in1))[divInt(int(8.0),i1):int(7.0)], i0)),( i2 + int(7.0) ))) * ( int(17.0) - mod(( min(int(47.0), divInt(( divInt(int(3.0),int(9.0)) * ( mod(min(int(0.0), int(9.0)),i0) + abs(int(2.0)) ) ),divInt(int(8.0),mod(( int(2.0) * min(abs(i0), ( i0 - abs(saveOrd(\"\"w\"\")) )) ),len(\"\"4\"\"))))) * abs(min(max(i2, int(6.0)), i0)) ),int(2.0)) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [2, 2, 0, 1, 2, 1, 0, 1, 2, 2, 2, 1, 1, 1, 0, 2, 0, 1, 1, 2, 2, 0, 0, 0, 1], [1, 1, 0, 1, 0, 1, 0, 2, 1], [0, 2, 2, 1, 2, 1, 0, 1, 0, 2, 0, 2, 1, 0, 2, 0], [0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [3, 1, 1, 0, 3, 1, 0], [0, 4, 1, 2, 3, 0, 2, 0], [1, 1, 2, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [2], [0, 2, 1, 1], [], [0, 0], [1, 1, 0, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1], [2, 6, 9, 7, 3, 5, 5, 0, 3, 3, 0, 4, 1, 9, 2, 5, 2, 6, 5, 2, 7, 2, 3, 5, 3, 1, 6, 0, 4, 6, 2, 5, 8, 3, 5, 1, 5, 8, 3, 6, 1, 4, 3, 0, 4, 7, 6, 9, 1, 6, 3, 7, 2, 5, 6, 1, 7, 8, 1, 1, 0, 5, 6, 7, 8, 2, 1, 3, 7, 3, 2, 2, 9, 0, 2, 4, 0, 4], [1, 0, 1, 0, 1, 1, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 1, 2, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 0, 0, 2, 2, 1, 2, 0, 2, 0, 1, 1, 2, 0, 2, 2, 0, 0, 1, 2, 1, 0, 2, 0, 2, 1, 0, 1, 0, 1, 1, 0, 0, 2, 2, 2, 0, 1, 2, 0, 0], [1, 0, 1, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1, 1, 2, 0, 1, 3, 3, 3, 1, 2, 0, 2, 3, 0, 2, 0, 1, 1, 3, 1, 3, 0, 0, 3, 2, 2, 2, 3, 1, 3, 0, 2, 1, 1, 0, 2, 1, 3, 3, 3, 0, 3, 1, 0, 2, 2, 3, 1, 0, 3, 0, 0, 3, 1, 2, 1, 0, 1, 0, 1, 3, 0, 2, 0, 0, 0, 3, 2, 2, 2, 1, 1, 1, 0, 3, 3, 2, 3, 0, 3, 0, 2, 3, 3, 2, 0, 2, 1, 2, 2, 2, 0, 0, 1, 0, 1, 3, 0, 3, 3, 3, 0, 1, 1, 0, 0, 1, 3, 3, 1, 2, 0, 2, 0, 2, 2, 3, 1, 3, 1, 0, 2, 0, 0, 1, 2, 3, 2, 0, 0, 2, 2, 1, 3, 1, 2, 0, 2, 1, 2, 3, 0, 2, 1, 3, 3, 0, 0, 0, 3, 1, 1, 0, 1, 0, 0, 2, 2, 1, 2, 0, 0, 0, 2, 0, 1, 0, 2, 2, 3, 2, 1, 3, 1, 1, 1, 3, 3, 0, 2, 1, 3, 1, 3, 3, 2, 3, 2, 1, 2, 1, 0, 3, 3, 1, 3, 2, 0, 2, 2, 1, 1, 2, 3, 3, 1, 1, 1, 2, 3, 1, 3, 1, 0, 3, 1, 2, 3, 0, 1, 0, 2, 3, 1, 2, 3, 0, 1, 3, 3, 0, 0, 3, 3, 1, 2, 0, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1, 0, 2, 2, 3, 1, 4, 4, 1, 2, 4, 3, 0, 3, 3, 1, 1, 4, 2, 1, 1, 0, 2, 2, 2, 2, 3, 2, 3, 2, 2, 0, 3, 4, 4, 2, 1, 2, 1, 2, 1, 3, 1, 4, 3, 3, 1, 3, 0, 3, 1, 1, 1, 1, 3, 1, 2, 4, 0, 0, 2], [2, 2, 1, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 0, 2, 1, 2, 2, 0, 2, 1, 0, 2, 0, 1, 0, 1, 2], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [5, 5, 3, 2, 4, 5, 0, 5, 0, 0, 5, 5, 0, 4, 2, 4, 5, 3, 5, 5, 5, 5, 0, 4, 0, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 0, 4, 1, 2, 4, 2, 2, 0, 1, 2, 4, 2, 1, 0, 1, 2, 0, 1, 2, 4, 2, 0, 4, 1, 2, 4, 1, 4, 2, 1, 2, 2, 0, 0, 3, 2, 2, 2, 2, 4, 4, 1, 2, 4, 1, 0, 2, 2, 2, 0, 3, 2, 0, 2, 0, 0, 4, 2, 4, 2, 4, 1, 1, 2, 1, 4, 4, 1, 1, 2, 2, 4, 0, 2, 4, 1, 0], [0, 3, 2, 2, 1, 3, 0, 1, 2, 3, 0, 0, 1, 2, 0, 0, 2], [4, 0, 5], [0, 0, 2, 2, 1, 2, 0, 1, 1, 1, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 1, 1, 1, 0, 2, 0, 1, 0, 1, 2], [3, 1, 3, 2, 0, 1, 0, 0, 2, 0, 1, 2, 3, 3, 1, 3, 1], [0, 21, 4, 24], [25, 3, 9, 2, 19], [6, 1, 8], [5, 31, 14, 6, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 25, 25, 9, 16, 3, 7, 0, 0, 7, 8, 13, 8, 1, 4, 0, 2, 5, 78, 78, 71, 4, 265, 59, 69, 28, 33, 29, 17, 3, 89, 17, 3, 31, 17, 4, 5, 3, 5], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in2),min(min(i1, ( i0 * i1 )), i0)), int(26.0))) \\l len(in2):{:\\nif min(max(mod(i1,int(9.0)), int(7.0)), i1) \\le int(3.0):{:\\nres0 = in0 == (s2 + (in1[int(5.0):][int(5.0):int(0.0)] + in2))[( i0 * int(3.0) ):max(min(abs(int(3.0)), ( i0 - divInt(abs(i2),( i0 * int(0.0) )) )), int(4.0))]\\ns0 = \"\"\"\"\"\\nloopBreak% = 0\\nfor in2 in s0:{:\\ns0 = getCharFromString(\"\"z\"\", len(in2[int(1.0):][:max(i0, i0)].rstrip(\"\"`\"\")[saveOrd(\"\"6\"\"[:divInt(( divInt(saveOrd(in2),int(9.0)) * max(i1, mod(int(2.0),int(5.0))) ),i0)].capitalize()[divInt(int(2.0),abs(saveOrd(\"\"A\"\"))):len(s0[:i0])]):]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += min(int(6.0), i0)\\nin1 = \"\"d\"\"\\nif b1:{:\\nloopBreak% = 0\\nfor s2 in in1[( divInt(len(saveChr(int(5.0))),i2) * len(\"\"V\"\") ):i1].capitalize()[:i1]:{:\\nif not max(int(2.0), ( int(7.0) * i2 )) \\g int(2.0):{:\\ni1 = i1\\n:}else:{:\\nb1 = int(3.0) == max(i1, ( i2 + i1 ))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= i2\\n:}\\nb0 = saveOrd(\"\"E\"\".lstrip()[( ( ( int(5.0) - int(3.0) ) * int(1.0) ) * i0 ):abs(max(mod(max(i1, min(i1, mod(abs(abs(( i0 + ( int(6.0) * divInt(divInt(( i0 - i2 ),int(0.0)),i2) ) ))),int(4.0)))),abs(i1)), abs(len(getCharFromString(\"\"1\"\"[abs(i2):], int(6.0))))))]) \\ge int(2.0)\\nloopBreak% = 0\\nfor in2 in in0[i0:i2][int(583.0):len(in2)]:{:\\nin2 = (saveChr(abs(int(5.0)))[( i0 * mod(i1,( mod(abs(int(1.0)),min(int(5.0), i1)) * mod(i2,i0) )) ):][int(8.0):][divInt(len(\"\"Y\"\".capitalize()),( i2 + i2 )):][( ( int(3.0) * saveOrd(\"\"j\"\".strip(in2)[int(6.0):divInt(i0,( int(1.0) - mod(saveOrd(in2[:i0][:divInt(int(4.0),abs(max(i1, i2)))][i1:abs(int(3.0))]),int(0.0)) ))]) ) + i0 ):] + (s0[:int(4.0)] + in1[i2:i0]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = True\\n:}else:{:\\ns0 = s1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile divInt(divInt(int(7.0),mod(i2,i1)),i0) \\l mod(i1,int(691.0)):{:\\nif i0 == mod(( max(divInt(int(6.0),abs(int(3.0))), int(7.0)) * int(2.0) ),max(len(getCharFromString(getCharFromString(saveChr(i1)[mod(int(5.0),max(int(6.0), saveOrd(\"\"8\"\"))):len(\"\"+\"\")], divInt(len(\"\"#\"\"[:divInt(int(1.0),mod(int(7.0),i1))]),max(len(getCharFromString(\"\"c\"\", int(8.0)).capitalize()), min(divInt(i0,( divInt(int(1.0),int(1.0)) + ( len(\"\"]\"\") - max(int(0.0), int(5.0)) ) )), int(6.0)))))[divInt(max(int(7.0), max(int(8.0), i0)),max(int(2.0), ( len(getCharFromString(s1, i2)[:int(1.0)][i2:divInt(max(int(3.0), ( abs(i2) + int(7.0) )),saveOrd(\"\"t\"\".capitalize()[min(i0, i1):]))]) - min(abs(int(3.0)), ( i2 * int(2.0) )) ))):], int(2.0))), int(90.0))):{:\\ni0 = int(2.0)\\nb1 = True\\ns1 = s2\\nb0 = i0 \\l int(404.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 5, 4, 8, 7, 7, 1], [1, 0, 1, 0, 2, 1, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 0, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [1, 5, 3, 2, 4, 5], [1], [], [1, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 2, 0], [1], [], [12], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 7, 0, 21, 7, 3, 3, 4, 4, 1, 0, 11, 0, 0, 4, 1, 0, 1, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"m\"\") \\le ( divInt(len(s1),divInt(len((in2 + (in0[( divInt(i1,i0) + int(5.0) ):i1][i0:] + s2))[:mod(int(5.0),i2)][int(4.0):]),i1)) + ( i1 + int(8.0) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 6, 5, 3, 5, 5, 1, 5, 0, 6], [1, 1, 2, 1, 0, 1, 1, 0], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 3, 1, 1, 3, 3, 2, 1, 0, 3, 0, 0, 3, 1, 1, 1, 0, 0, 0, 3, 1, 3, 3, 0, 2, 1, 1], [1, 0, 1, 1], [3, 0, 3, 2, 0, 3, 1, 4, 1, 0, 0, 1, 3], [0], [1, 0, 0], [0, 5, 1, 2, 4, 5], [1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 4, 0, 1], [0, 3, 2], [4], [0, 0, 2, 2, 2], [1], [], [10], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 11, 11, 8, 0, 35, 4, 13, 1, 3, 6, 1, 0, 15, 1, 0, 5, 1, 0, 1, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l len(s0):{:\\nres0 = mod(min(len(in2[abs(min(( i1 + len((s1 + (s2[int(6.0):][int(5.0):] + in1))[max(saveOrd(getCharFromString(in2, divInt(int(3.0),i1))[max(i2, i1):]), min(int(5.0), int(5.0))):int(1.0)]) ), i0)):i1]), i1),min(int(5.0), max(len(\"\"k\"\"), i0))) \\le divInt(int(0.0),int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1], [2, 1, 0, 2, 0, 0, 1, 0, 1, 0, 1], [1, 1], [0, 1, 2, 0, 0, 2, 1, 2, 2], [], [0, 0, 0, 0, 0], [], [], [3, 1, 2], [4, 4, 5], [1, 1, 1, 2, 2], [0, 0, 0], [5, 4], [], [], [], [1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 3, 7, 6, 3, 6, 5, 5, 3, 4, 8, 4, 9, 0, 8, 2, 9, 8, 4, 8, 9, 2, 2, 5, 2, 9, 1, 5, 2, 1, 8, 3, 2, 2, 2, 3, 6, 5, 9, 2, 7, 2, 3, 7, 1, 4, 1, 7, 7, 5, 3, 1, 2, 9, 5, 2, 0, 7], [0, 2, 1, 0, 2, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 2, 0, 1, 1, 2, 2, 2, 0, 1, 2, 2, 1, 1, 0, 1, 0, 1, 2, 1, 2, 0, 2, 0, 1, 1, 1, 0, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 1, 2, 0, 1, 0, 0, 2, 1, 1, 2, 0], [0, 1], [3, 1, 3, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3, 3, 0, 2, 1, 3, 2, 2, 3, 3, 3, 1, 1, 3, 2, 2, 1, 3, 3, 3, 0, 3, 0, 3, 3, 2, 1, 1, 3, 2, 2, 2, 3, 0, 1, 2, 2, 1, 3, 2, 3, 3, 0, 2, 3, 0, 3, 0, 3, 1, 0, 0, 3, 3, 2, 3, 2, 0, 0, 0, 1, 3, 1, 1, 3, 1, 3, 3, 2, 0, 3, 3, 1, 3, 1, 2, 0, 3, 2, 0, 1, 1, 1, 3, 3, 3, 1, 3, 0, 3, 3, 2, 0, 3, 2, 2, 0, 0, 1, 0, 0, 3, 0, 1, 0, 1, 3, 1, 3, 1, 3, 0, 0, 2, 3, 0, 1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 0, 1, 0, 3, 1, 0, 1, 3, 1, 3, 0, 0, 3, 3, 2, 1, 3, 3, 2, 2, 0, 0, 3, 0, 0, 0, 2, 2, 0, 2, 2, 3, 3, 3, 3, 0, 1, 2, 2, 2, 3, 1, 3, 0, 0, 0, 2, 0, 3, 3, 3, 1, 3, 3, 3, 0, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 0, 3, 3, 2, 1, 3, 0, 2, 0, 0, 3, 2, 3, 2, 3, 2, 2, 1, 3, 0, 2, 1, 2, 2, 2, 0, 0, 0, 3, 3, 0, 3, 0, 2, 3, 1, 3, 1, 0, 3, 3, 3, 2, 2, 3, 0, 1, 0, 2, 1, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0], [4, 1, 3, 3, 4, 2, 1, 4, 0, 0, 4, 0, 0, 0, 1, 0, 1, 4, 0, 2, 1, 3, 2, 2, 1, 2, 4, 1, 2, 0, 4, 4, 2, 1, 0, 2, 3, 0, 1, 3, 4, 3, 1, 1, 0, 4, 1, 3, 3, 3, 3, 4, 1, 4, 4, 0, 2, 4, 0, 3, 2, 0, 0, 4, 3, 0, 3, 4, 2, 1, 1, 2, 2, 1, 2, 2, 2, 3, 0, 2, 4, 0, 2, 4, 0, 0, 3, 2], [1, 1, 0, 1, 2, 1, 2, 1, 2, 0, 2, 0, 0, 2, 2, 1, 0, 1, 0, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 2], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [2, 5, 1, 4, 4, 1, 2, 3, 3, 4, 5, 3, 5, 4, 3, 0, 5, 2, 3, 1, 1, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 2, 2, 2, 4, 1, 4, 2, 1, 1, 4, 2, 2, 4, 4, 2, 2, 0, 1, 2, 1, 1, 2, 0, 0, 4, 4, 2, 1, 2, 2, 2, 2, 2, 0, 1, 1, 2, 4, 2, 4, 2, 2, 1, 0, 2, 4, 0, 1, 3, 2, 3, 4, 2, 1, 1, 2, 2, 2, 0, 2, 0, 1, 2, 2, 0, 1, 0, 1, 4, 4, 4, 1, 4, 2, 2, 1, 1, 0, 1, 3, 4, 4, 1, 2, 4, 2, 2, 1, 3, 0, 1, 4, 3, 1, 1, 1, 4, 1], [2, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 3, 1, 1, 2, 2, 0, 1, 2, 2], [5, 0, 4], [2, 1, 1, 0, 0, 1, 1, 0, 2, 1, 1, 1, 2, 0, 0, 0, 2, 0, 2, 1, 0, 2, 0, 0, 1, 1, 2, 2, 1, 1, 2, 0, 2, 2, 1, 0, 1], [1, 0, 2, 1, 1, 0, 3, 0, 3, 0, 0, 0, 3, 2, 1, 2, 3, 0, 1, 3, 2, 1, 2, 3, 3, 0, 1, 0, 3, 3], [5, 23, 3, 2, 10, 22, 7, 15, 25], [23, 14, 13, 13, 20, 18, 8], [4, 1, 5, 8, 7], [13, 21, 14, 5, 20, 25, 13, 23, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 2, 9, 0, 5, 0, 0, 3, 3, 5, 3, 2, 0, 0, 0, 2, 59, 59, 66, 2, 260, 50, 88, 30, 21, 23, 30, 0, 110, 20, 3, 37, 30, 9, 7, 5, 9], "tree_depth": 73, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(s2) \\le int(31.0):{:\\nres0 = max(len(in2), ( len(s1) - i0 )) \\le i2\\n:}else:{:\\ni1 = int(3.0)\\nif saveOrd((in1 + (in1[:int(7.0)][:int(6.0)] + s1))[abs(max(i0, ( int(3.0) - saveOrd(s2) ))):]) != divInt(( min(min(saveOrd(\"\"x\"\".capitalize()[:int(6.0)][int(5.0):min(mod(divInt(int(5.0),min(min(max(i2, min(i0, max(saveOrd(getCharFromString(\"\"F\"\"[:( int(3.0) + int(4.0) )], min(( ( ( abs(i0) - int(8.0) ) * ( mod(int(4.0),max(mod(len(\"\"4\"\"),abs(i1)), ( abs(i0) - max(i1, abs(int(9.0))) ))) * i0 ) ) - i1 ), saveOrd(getCharFromString(getCharFromString(getCharFromString(in0[:max(( abs(( i1 * i0 )) + i0 ), int(0.0))][:min(int(8.0), int(2.0))], saveOrd(\"\"o\"\")), int(9.0))[saveOrd(\"\"n\"\"[:abs(divInt(i0,max(min(int(8.0), abs(int(4.0))), ( i1 * len(\"\"X\"\") ))))]):][divInt(i1,int(8.0)):int(9.0)], int(2.0)))))), min(max(len(in0[int(2.0):]), saveOrd(in1)), i2)))), len(getCharFromString(getCharFromString(\"\"*\"\"[max(divInt(i0,max(( ( i1 + i1 ) + int(5.0) ), i2)), i2):min(i2, int(2.0))], i0), int(9.0)))), saveOrd(in2[int(1.0):][max(int(5.0), len(\"\"D\"\")):i1][i2:][( len(\"\"<\"\") * i2 ):int(2.0)][int(1.0):int(8.0)]))),i1), int(3.0))][int(2.0):len(saveChr(len(\"\"C\"\"[int(2.0):divInt(i1,int(2.0))][i0:].strip(in0)[saveOrd(in2.lstrip()[int(3.0):i1]):int(6.0)]))[:max(int(5.0), saveOrd(\"\"K\"\"))])]), i0), i1) * saveOrd(((getCharFromString(\"\"W\"\"[:min(divInt(int(9.0),abs(saveOrd(\"\"+\"\"))), ( ( i2 - i1 ) + min(i2, i0) ))], i2) + in1[:( divInt(i0,( mod(len(in0[:abs(min(min(i1, int(2.0)), mod(( divInt(saveOrd(\"\"1\"\"),int(7.0)) - len(s0[i1:i1][i0:]) ),divInt(i0,min(len(\"\"n\"\"), saveOrd(in2))))))]),int(2.0)) + abs(max(max(i2, i1), int(3.0))) )) * int(7.0) )][abs(int(1.0)):][( int(4.0) - i0 ):])[:int(1.0)] + \"\"5\"\")) ),i2):{:\\ns2 = saveChr(i1).rstrip(saveChr(abs(max(( int(7.0) + abs(i0) ), ( i2 - i1 )))))\\nb1 = \"\"\"\"\".endswith(\"\"H\"\"[abs(divInt(abs(( len(\"\"u\"\") + ( divInt(int(7.0),min(i0, ( int(5.0) + mod(( mod(i1,i2) - i0 ),abs(saveOrd(in0))) ))) * i1 ) )),min(i0, divInt(abs(int(3.0)),saveOrd(\"\";\"\"))))):][int(1.0):].capitalize())\\nb2 = (getCharFromString(\"\"8\"\", i0).capitalize() + saveChr(min(min(len(\"\"s\"\"[:divInt(( abs(i2) * int(2.0) ),i1)][( int(9.0) - int(5.0) ):i1]), int(2.0)), i2))[:int(0.0)]).startswith((s1 + \"\"7@\"\"))\\ns1 = (\"\"*Pi\"\" + \"\"Z\"\").capitalize()\\n:}else:{:\\ni0 *= int(7.0)\\ns2 = \"\">\"\"\\nin0 = \"\";\"\".capitalize()\\n:}\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [3, 1, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [0, 1], [3, 1, 3, 3, 3, 3, 0, 0, 1, 3, 1, 1, 3], [0, 0, 1, 0, 1, 1, 0, 0], [4, 1, 3, 3, 4], [1, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 0, 4], [0, 1], [], [2, 1, 3, 0, 0, 4, 4, 2, 0, 0, 3, 0, 1], [2, 0, 0], [], [0, 2], [1, 3], [5], [12], [], [17]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 8, 0, 5, 0, 0, 4, 2, 0, 10, 2, 0, 2, 2, 0, 1, 0, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"m.\"\"[int(3.0):max(len((in0 + in2)), len(getCharFromString(s1[saveOrd(s0):], i0).capitalize()))]) \\le i2\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [1, 0, 9, 8, 3, 6, 5, 3, 0, 5, 4, 2, 9], [1, 0, 2, 0, 0, 1, 1, 1, 2, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 3, 0, 3, 2, 2, 0, 3, 1, 1, 1, 1, 1, 2, 3, 0, 3, 2, 0, 3, 0, 1, 3, 1, 1, 3, 0, 0, 0], [1, 0, 1, 1, 0, 1], [2, 3, 3, 2, 4, 4, 1, 0, 1, 2, 3, 1, 3, 1], [1, 0], [1, 1, 1, 0], [4, 5, 4, 2, 4, 5, 3], [1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 2, 4, 4, 2, 2, 4, 1, 1, 4], [0, 3, 2, 1], [4], [0, 0, 1, 1, 2, 1], [2, 3, 3], [], [], [1], [30, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 13, 13, 10, 0, 39, 6, 14, 2, 4, 7, 3, 0, 21, 4, 1, 6, 3, 0, 0, 1, 2], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(109.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(saveOrd(in1)) \\le ( i1 - i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = (in1 + (in2[:saveOrd(in0)][max(i2, min(mod(mod(i0,max(int(8.0), int(3.0))),int(6.0)), int(5.0))):int(305.0)] + \"\"1\"\"))[( abs(i0) + len(getCharFromString(\"\"_\"\".capitalize()[:divInt(i1,max(i1, int(4.0)))][len(\"\"@\"\"):].rstrip(saveChr(int(2.0))), int(9.0))[:max(i1, i2)]) ):i1]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [1], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 3, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5, 2], [1], [], [2, 0, 3, 0, 0, 4, 4, 2, 0, 0, 3, 0, 1, 2, 0], [0, 3, 2], [3], [2, 1, 1], [2], [], [], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 0, 18, 6, 4, 3, 3, 7, 1, 0, 15, 2, 1, 3, 1, 0, 0, 1, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1[saveOrd((in2 + in0)):] not in getCharFromString(s2[:( divInt(len(in1),divInt(len((in2 + \"\"2\"\")),( ( i0 + min(int(5.0), int(7.0)) ) + i0 ))) + divInt(int(4.0),i1) )].lstrip(s2[:int(8.0)]), i0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 2, 8, 5, 3, 5, 3, 8, 1], [0, 1, 1, 1, 0, 0, 2, 2], [1], [1, 3, 2, 3, 3, 3, 2, 2, 0, 0, 3, 1, 3, 3, 2, 2, 0, 3, 1, 2, 1, 1, 1, 1, 3, 3, 3, 0, 3, 1, 3, 0, 1, 3, 0, 2, 2, 3, 3, 2, 0, 3, 0, 3, 1, 1], [1, 0, 1, 1, 1, 0, 1, 1, 1], [2, 3, 3, 4, 4, 0, 1, 1, 2, 0, 4, 1, 3, 0, 4, 3, 4, 3], [2, 0], [1, 1, 1, 1, 0, 1, 0], [4, 5, 3, 2, 4, 5, 1, 5, 3, 5], [1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 2, 2, 0, 0, 0, 4, 0, 1, 3, 4, 4, 1, 4, 4, 1], [0, 3, 2, 1, 2, 3], [4, 1], [0, 0, 0, 1, 2], [1, 0, 2], [7], [14], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 12, 12, 8, 0, 46, 9, 18, 2, 7, 10, 3, 0, 27, 6, 2, 5, 3, 1, 1, 1, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = saveOrd(in0) != ( mod(i0,i1) * saveOrd((s2 + (in1[int(9.0):min(max(mod(mod(i1,max(int(8.0), ( int(2.0) + int(8.0) ))),int(5.0)), int(3.0)), abs(min(saveOrd(in2), i1)))][max(int(5.0), len(getCharFromString(s1[i0:][:int(3.0)], min(i0, divInt(mod(saveOrd(in2),len(in0)),divInt(i2,saveOrd(in2.rstrip(\"\"o\"\")))))))):i2] + (saveChr(len(\"\"H\"\")).capitalize() + \"\"9\"\".rstrip().capitalize())))[int(8.0):int(1.0)]) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [1, 1], [3, 3, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [2, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1, 1], [5], [5, 2], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 8, 1, 4, 1, 1, 2, 2, 0, 7, 1, 0, 1, 2, 0, 2, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0[len(in2):])) \\le int(16.0)\\ni1 += divInt(len(getCharFromString((\"\"f\"\" + \"\"c\"\"), i2)),i1)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [3], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5, 3], [2, 2, 2, 0, 2], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 3, 2, 1, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 1, 0, 4, 4, 1], [2], [1, 1, 1], [4, 5, 4, 3, 0, 5], [1, 1], [], [2, 0, 0, 2, 3, 0, 1, 2, 2, 0, 2, 4, 0, 1], [0, 3, 2], [4], [2, 1, 2, 1, 2], [0, 0], [15, 19], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 4, 0, 22, 3, 9, 1, 2, 5, 2, 0, 14, 1, 0, 5, 2, 2, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1[int(10.0):] != in2:{:\\nres0 = abs(mod(len((in1 + \"\"P\"\")[:len(in0[:abs(max(( i2 * int(9.0) ), min(int(8.0), saveOrd(getCharFromString(s0, saveOrd(\"\"T\"\"))[mod(int(3.0),i2):]))))][max(i2, i0):])]),int(5.0))) \\l int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 0, 2, 0, 2, 1, 1, 0, 2, 2, 2, 1, 2, 1], [1, 0, 2, 1, 2, 1], [0, 1, 0, 0, 1, 0, 2, 1, 1], [0], [0, 0, 0], [], [], [3, 1, 2, 0, 2, 1], [4, 4, 4], [0, 1, 0, 0, 1, 0, 2, 1, 2], [0, 0, 0], [4, 0], [1, 0, 0, 1], [], [1, 1], [1, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1, 6, 3, 7, 6, 3, 6, 6, 7, 5, 7, 3, 5, 9, 6], [0, 2, 1, 0, 2, 1, 0, 1, 2, 0, 1, 2, 1, 1], [1, 1, 0, 0], [3, 2, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3, 0, 0, 3, 0, 0, 1, 1, 1, 0, 0, 2, 1, 2, 3, 0, 1, 1, 3, 1, 0], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4, 0, 2, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4, 0, 3, 1, 5, 1, 1, 5, 5], [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1], [0], [2, 2, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1, 3, 3, 0, 2, 2, 4, 3, 0, 1, 3, 3, 0, 1, 0, 4, 1, 1, 4, 4, 3, 3, 0, 0, 0, 2, 1, 1, 0], [0, 0, 0, 2, 1, 2], [], [2, 0, 2, 1, 1, 0], [1, 0, 0, 3, 3, 0, 3, 1, 2, 2, 0, 0, 3, 2, 1, 0, 1, 0], [5, 3, 24, 19, 19, 17, 15], [5, 6, 18, 4], [1, 1, 2], [6, 0, 8, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 15, 15, 6, 9, 1, 3, 0, 0, 6, 3, 9, 3, 2, 4, 0, 2, 3, 15, 15, 14, 4, 33, 4, 8, 4, 2, 13, 18, 1, 41, 6, 0, 6, 18, 7, 4, 3, 4], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\ni0 += saveOrd(in0[divInt(len(getCharFromString((\"\"f\"\" + \"\"F\"\"), int(16.0))),( len(getCharFromString(in2, i2)[i1:]) - int(3.0) )):len((s1 + \"\"D#\"\"))][int(7.0):])\\nb1 = int(6.0) \\le saveOrd(((in1 + getCharFromString((in1 + \"\"Y\"\"), i0)[:i2][:min(i1, i0)]) + ((s0 + \"\"%g\"\") + in0)))\\nif b2:{:\\nb0 = b2\\nloopBreak% = 0\\nfor s1 in \"\"1\"\".capitalize():{:\\ni1 += int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = int(6.0) \\le int(6.0)\\nin2 = \"\"1\"\"\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nif saveChr(i2).startswith(((s1 + s1) + in2).capitalize()):{:\\nloopBreak% = 0\\nwhile i0 \\le mod(int(757.0),( abs(i1) - int(3.0) )):{:\\ni2 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif \"\"TT&2s\"\"[saveOrd(\"\"ReP\"\"):int(96.0)] in in2:{:\\ni1 = i1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 3, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0, 1, 1], [0, 1, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5, 1], [0, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [2, 1], [], [12], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 22, 6, 7, 3, 3, 2, 2, 0, 3, 0, 0, 0, 2, 0, 1, 1, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(\"\"6m\"\"),mod(len(in2),min(( int(3.0) + int(3.0) ), min(int(3.0), max(( int(6.0) - i0 ), max(i0, divInt(i1,int(7.0)))))))) * i0 )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 2, 2, 1, 2, 0, 2, 0, 1], [1, 1, 1, 0], [0, 1, 2, 2, 2], [0], [0, 0], [], [], [3, 1], [4, 4], [1, 1, 0, 2], [0, 0], [5], [0], [], [], [0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 6, 1, 7, 6, 3, 6, 8, 9, 2], [0, 2, 1, 0, 2, 1, 2, 2, 2, 1, 0, 1, 0], [0, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3, 0, 0, 1, 0, 1, 2, 2, 1, 0, 0, 0, 0, 3, 0, 1, 3, 2, 3, 3, 3, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4, 4, 1, 2, 2, 3], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4, 5, 3, 3, 3, 2, 1], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1, 1, 3, 4, 0, 4, 3, 1, 3, 2, 2, 2, 1, 2, 4, 1, 0, 2, 4, 1, 2, 1, 0], [0, 0, 0, 1, 1, 0], [], [1, 0, 0, 0, 2, 2, 1, 0], [1, 1, 2, 3, 3, 1, 3, 3, 2, 2, 2, 3], [5], [5, 7, 15], [6, 4, 1, 7], [21, 10, 17, 29, 7]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 4, 5, 1, 2, 0, 0, 2, 2, 4, 2, 1, 1, 0, 0, 3, 10, 10, 13, 1, 35, 4, 10, 2, 2, 11, 12, 1, 35, 6, 0, 8, 12, 0, 3, 4, 5], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[:int(16.0)]) \\le len(in2)\\nif int(1.0) \\le divInt(len(getCharFromString((\"\"f\"\" + \"\"h\"\"), i0)),i2):{:\\nif b1:{:\\ni1 = int(7.0)\\nif getCharFromString(s1, len((in1 + \"\"6\"\")))[int(6.0):int(3.0)].endswith(\"\"<\"\\\\\"p\"\"):{:\\nin1 = (getCharFromString(in2, saveOrd(saveChr(i0))) + (\"\".\"\" + (\"\"^\"\"[i2:][int(6.0):i1][int(8.0):( mod(int(9.0),i2) + i2 )] + saveChr(i2)[i1:])))\\n:}\\nloopBreak% = 0\\nfor in0 in \"\"41\"\":{:\\nin0 = in0\\ns2 = getCharFromString(\"\"7\"\", saveOrd(\"\"$\"\"[i0:int(2.0)]))[:max(( abs(abs(len(s1))) - i1 ), i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 0, 2, 2, 1, 1, 1], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 0, 3, 1, 0, 1, 2, 1, 0, 3, 1, 1, 1, 0, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0], [1, 1, 0, 1, 1], [4, 5, 4, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1], [], [0], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 3, 4, 1, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l abs(mod(len(in1),( len(\"\"a\"\") + abs(mod(i0,i0)) )))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 1], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 8, 3, 5, 5, 3, 8, 3, 9, 7, 3, 9, 7, 7, 4, 0, 4], [2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 0, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 2, 0, 0, 1, 1, 1, 1, 3, 1, 0, 2, 2, 3, 1, 2, 0, 2, 1, 2, 2, 2, 1, 3, 2, 3, 2, 3, 1, 2, 0, 1, 1, 0, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 0, 3, 1], [1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0], [2, 3, 3, 2, 0, 0, 4, 3, 1, 2, 1, 3, 1, 2, 2, 2], [0, 0, 2, 0, 0, 2], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0], [4, 5, 4, 2, 4, 5], [0, 0, 1, 0, 1, 1], [], [0, 2, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0, 4, 3, 1, 4, 2, 4, 4, 4, 1, 1], [0, 3, 2, 1, 0, 0], [4], [2, 2, 2, 1, 1], [0, 1, 0, 3, 3, 3], [16, 6], [1], [], [29, 6, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 19, 19, 12, 0, 63, 17, 16, 6, 11, 5, 6, 0, 22, 6, 1, 5, 6, 2, 1, 0, 3], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(getCharFromString((in2 + (in1[:abs(min(( i2 + int(4.0) ), min(int(8.0), saveOrd(s2))))][int(3.0):] + in1))[mod(mod(i1,( i2 + i2 )),int(5.0)):], int(5.0))[int(3.0):]))):{:\\nres0 = int(8.0) \\g len((\"\"QbG\"\" + saveChr(int(3.0))[:i2].capitalize()).rstrip(getCharFromString(getCharFromString(\"\"^#\"\", mod(( max(int(9.0), divInt(i1,( int(7.0) * divInt(mod(( int(3.0) + abs(divInt(max(divInt(len(\"\"=\"\"),int(9.0)), mod(i1,int(7.0))),int(7.0))) ),i1),int(4.0)) ))) + i0 ),i0)), max(divInt(int(0.0),abs(i0)), ( abs(i1) * abs(int(4.0)) )))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [2, 2, 1, 0, 2], [1, 1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 4, 1, 4, 4], [1, 1, 1], [], [2, 0, 3, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1, 0], [0, 0, 0], [], [2, 0], [1, 2, 3], [5], [5], [1], [11]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 1, 10, 1, 4, 1, 1, 4, 3, 0, 14, 2, 0, 2, 3, 0, 1, 1, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len((getCharFromString((\"\"f\"\" + \"\"1\"\"), i2) + getCharFromString(in1, divInt(len((s1 + \"\"(\"\")),i2))[i1:int(3.0)]))\\ni0 += len(in1)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [3], [], [], [], [7]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"$\"\") \\le ( divInt(len(s2),mod(len(in2),( ( i0 + int(3.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [7, 6, 3, 7, 6, 3, 6], [2, 2, 2, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1, 0, 1, 1], [], [2, 0, 2, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0, 0], [1, 3, 3, 2], [5], [5], [3], [30, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 2, 0, 11, 1, 4, 0, 1, 3, 4, 0, 13, 2, 0, 3, 4, 0, 1, 1, 2], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(76.0):]) \\le len(getCharFromString((\"\"f\"\" + \"\"_(\"\"), int(37.0))[divInt(len(getCharFromString(in2, i2)[i2:int(6.0)]),len((s1 + \"\"3\"\"))):int(3.0)])\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 0, 1, 1], [9, 5, 9, 8, 5, 6, 2, 5, 4], [0, 0, 1, 1, 2, 0, 0, 0, 1, 0, 1, 1], [0], [3, 3, 2, 3, 2, 2, 3, 3, 0, 3, 0, 3, 2, 1, 1, 2, 0, 3, 0, 1, 3, 1, 0, 0, 0, 2, 3, 3, 2, 0, 1, 1, 1, 3, 3, 2, 0, 0, 2, 3, 0, 0], [1, 0, 0, 1, 1, 1, 0, 1, 1], [2, 3, 3, 0, 0, 2, 3, 4, 1, 2, 2, 3, 4, 3], [2, 0, 0], [0, 1, 0, 1, 0, 1], [3, 5, 3, 2, 4, 5, 5], [1, 1, 1], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0, 0, 4, 1, 2, 2, 1, 1], [0, 3, 2], [4], [0, 0, 0, 0, 0, 1], [1, 3, 0], [5], [1], [], [22]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 12, 0, 42, 9, 14, 3, 6, 6, 3, 0, 18, 1, 0, 6, 3, 1, 1, 0, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in0)) \\l divInt(len(in2),( ( min(min(i0, abs(i0)), len((in0 + (s2[mod(int(95.0),int(9.0)):divInt(i1,saveOrd(in1))][i1:int(8.0)] + in2))[max(int(5.0), i2):i0][i0:mod(abs(abs(( i0 * int(6.0) ))),int(25.0))])) + int(4.0) ) + len(getCharFromString(\"\"b\"\", saveOrd(\"\"=\"\"[:divInt(i1,i0)][mod(len(\"\"F\"\"),i1):i1]))) ))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1], [1, 1, 0, 0, 0], [1], [0, 1, 0, 0, 1], [], [0, 0, 0], [], [], [3, 1, 0], [4, 4], [1, 1, 0], [0, 0], [], [1], [], [1], [], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6, 6, 0, 1, 3, 0, 7, 6], [0, 2, 1, 0, 2, 2, 1, 0], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3, 1, 2, 1, 3, 2, 0, 0, 0, 2, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 3, 4, 2], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1, 0, 1, 1, 1], [], [2, 4, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1, 3, 3, 2, 2, 0, 1, 0], [0, 0, 0], [], [2, 0, 0, 0], [1, 2, 1, 0, 0], [5, 12], [5, 12], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 0, 5, 0, 3, 0, 0, 3, 2, 3, 2, 0, 1, 0, 1, 0, 14, 14, 8, 2, 25, 4, 6, 4, 2, 5, 5, 0, 20, 3, 0, 4, 5, 2, 2, 1, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(in0, int(16.0))[len(getCharFromString((\"\"f\"\" + \"\"4m\"\"), int(37.0))):]) \\le ( len(getCharFromString(in2, i0)[i2:int(6.0)]) + len((s1 + \"\"F\"\")) )\\ni1 -= int(3.0)\\nb1 = int(6.0) \\le saveOrd(((in1[int(601.0):divInt(int(30.0),abs(mod(i0,i2)))][i2:( int(7.0) + int(6.0) )] + \"\"M\"\") + in1))\\nb0 = False\\ni1 -= i0\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3, 0], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 5, 8, 3, 5, 5, 3, 6], [2, 2, 2, 0, 2], [1], [2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 1, 2, 3, 2, 1, 0, 3, 0, 1, 0, 1, 1, 1], [1, 0, 1, 1, 0], [2, 1, 3, 2, 1, 0, 4, 4, 1], [2, 2], [1, 1, 1], [4, 5, 4, 3, 0, 2], [0, 0, 1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 2, 4, 0], [0, 3, 2], [4], [2, 1, 2, 1], [3, 1, 0], [7], [2], [], [13]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 4, 4, 4, 0, 20, 5, 8, 2, 3, 2, 3, 0, 3, 0, 0, 0, 3, 1, 1, 0, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb0 = mod(abs(( max(len(in1), abs(max(mod(i2,i2), min(int(10.0), mod(saveOrd(in2),( int(5.0) * i2 )))))) * saveOrd(\"\"*cH\"\") )),i0) \\l int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [3, 1, 3, 7, 6, 3, 6], [1, 0, 2, 2, 0, 1, 1], [0, 1], [3, 1, 3, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3], [0, 0, 1, 0, 1, 1, 0, 0], [4, 1, 3, 3, 4], [1, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 3, 0, 0, 4, 2, 2, 1, 0, 3, 0, 1], [2, 0, 0], [], [2, 1, 2], [1], [5], [15], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 9, 1, 4, 1, 0, 3, 1, 0, 9, 1, 0, 3, 1, 0, 1, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(31.0):]) \\le max(len((in2 + s1)), ( len(\"\"p\"\"[i1:][:i0].capitalize()) - int(3.0) ))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1, 0, 0, 0, 1], [], [1, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [3, 3, 0, 0, 3], [6, 12], [], [], [3, 11, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 1, 5, 0, 3, 0, 0, 0, 5, 2, 0, 0, 3], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"\"\") \\le ( divInt(len(s1),divInt(len(\"\"(GM+\"\"),( ( i0 + int(5.0) ) + int(7.0) ))) + int(4.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 4, 0, 7, 7, 1, 3, 4, 8, 1, 4, 1, 4, 0, 0], [0, 0, 0, 0, 2, 0, 2, 2, 1, 1, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 1, 0, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 2, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1, 3, 0, 3, 0, 2, 1, 2, 3, 0, 3, 3, 3, 2, 3, 0, 2, 2, 3, 3, 3, 1, 1, 2, 1, 0, 2, 2, 0, 2, 3, 3, 2, 0, 3, 3, 2, 3, 2, 2, 3, 0, 2, 2, 0, 3, 3, 1, 3, 3, 0, 0, 0, 1, 3, 0, 0, 3, 1, 2, 2, 2, 2, 2, 3, 0, 2, 1, 0, 2, 1, 1, 3, 0, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 3, 3, 0, 0, 0, 0, 0, 4, 1, 3, 4, 1, 4, 2, 3, 2, 3, 0, 3, 1, 2, 0, 4, 1, 2, 3, 3], [0, 0, 0, 2, 1, 2, 0, 1, 1, 2, 2, 2, 0, 2, 2, 1], [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0], [2, 5, 3, 2, 4, 5, 1, 5, 2, 5], [1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 1, 1, 0, 2, 1, 4, 4, 0, 0, 1, 2, 0], [0, 3, 2], [4], [2, 2, 2, 1, 0], [3, 3, 3, 0, 1], [19], [0], [], [5, 30, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 16, 16, 23, 0, 97, 30, 28, 16, 14, 10, 5, 0, 24, 2, 1, 5, 5, 1, 1, 0, 3], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( divInt(len(s2),( len(in2) + ( ( i0 + mod(min(int(3.0), i0),( int(4.0) + int(4.0) )) ) * int(0.0) ) )) - i0 ), ( i0 * int(7.0) )) \\l min(i2, min(i0, mod(int(7.0),mod(min(i2, min(saveOrd(in0), max(( len((s2 + (in1[i2:][mod(divInt(saveOrd(in2),max(saveOrd(\"\"\"\"\"), int(1.0))),int(3.0)):] + \"\"_\"\"))[( int(4.0) + i1 ):]) - mod(( i1 - ( abs(len(\"\"<\"\")) * ( i1 * abs(len(s1)) ) ) ),( min(mod(divInt(len(\"\"T\"\"[:i0]),mod(( i2 * max(abs(int(8.0)), min(saveOrd(getCharFromString(in2.rstrip(s2), i0)), i1)) ),i1)),int(1.0)), max(i2, i1)) + abs(int(4.0)) )) ), ( ( mod(mod(( len(\"\"a\"\") * i0 ),divInt(int(1.0),i1)),divInt(int(4.0),int(0.0))) * len(in2[i1:int(0.0)]) ) - i0 )))),i1))))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 2, 2, 8, 7, 7, 1], [0, 1, 1, 0, 2], [0, 1], [3, 2, 3, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [1], [], [3], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 1, 0, 2, 1, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"d\"\") \\le ( len(s1) + len(in2) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 8, 3, 6, 7, 7, 9, 6, 8, 9, 5, 2, 2], [0, 0, 1, 0, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0], [4, 3, 4, 0, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5, 1], [0, 0, 0, 0, 0, 0, 1], [], [1, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [2, 2, 1, 3, 2, 2, 0], [16], [13], [3, 8, 0, 8], [13]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 6, 0, 29, 8, 6, 6, 2, 4, 7, 0, 11, 1, 0, 3, 7, 1, 1, 4, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"38n*08Q\"\") \\le ( ( len(getCharFromString(s2, divInt(saveOrd((in2 + (in1[min(( int(5.0) + int(8.0) ), int(3.0)):][int(6.0):min(( int(7.0) + i0 ), min(i0, mod(i1,int(79.0))))] + s2))[i0:]),( ( i2 * int(6.0) ) * int(895.0) )))) - i0 ) * int(2.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [1], [], [0], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 3, 1, 3, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 3, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 1], [0], [9], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 2, 0, 10, 4, 3, 1, 3, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile True:{:\\nres0 = saveOrd(s0) \\le ( divInt(len(\"\"J\"\"),mod(len(in2),i0)) + mod(i0,int(5.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1], [3, 4, 4, 8, 7, 7, 1, 0], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 2, 1, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 3, 2, 3, 0, 3, 2, 2, 0, 0, 2, 1], [0, 3, 2], [4], [2, 2, 0, 0], [2], [], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 3, 0, 18, 4, 4, 2, 2, 5, 1, 0, 13, 0, 0, 4, 1, 0, 0, 1, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\ge ( divInt(len(in2),int(3.0)) + len(((in0 + (s2[mod(int(4.0),i0):int(4.0)][min(int(8.0), i0):] + in1))[( int(7.0) + int(7.0) ):] + \"\"8\"\"[int(10.0):i0])) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [1], [5, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 5, 4, 8, 3, 5, 7, 3], [1, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 0, 1, 2, 2, 0, 3, 0, 0, 2, 1, 1, 1], [1, 0, 1, 1, 0], [4, 3, 3, 2, 0, 0, 4, 4, 1], [0, 0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [1, 1], [], [0, 4, 4, 2, 1, 1, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [0, 1], [15], [2], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 5, 0, 23, 5, 7, 2, 3, 4, 2, 0, 12, 2, 1, 3, 2, 1, 1, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) != saveOrd(in1):{:\\nb1 = mod(len(getCharFromString(\"\"P\"\"[len(\"\"c\"\"):].rstrip((in2[abs(min(( i1 + int(4.0) ), min(int(8.0), i1))):][int(3.0):] + in1)), mod(mod(i2,saveOrd(s2)),i2))),i2) \\le ( int(5.0) + int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [1, 0], [0, 2], [0], [0, 0], [], [], [3], [5, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5, 9, 1, 6, 6, 9, 5, 4, 4, 2, 3, 2], [0, 0, 2, 2, 1, 1, 1, 1], [1], [2, 3, 2, 3, 2, 3, 2, 2, 2, 0, 3, 1, 0, 1, 2, 1, 0, 3, 1, 1, 1, 0, 1, 1, 0, 3, 1, 3, 2, 3, 2, 3, 3, 3, 2, 1, 0, 1, 2, 1, 1, 1, 3, 1, 3, 2, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [2, 3, 3, 4, 0, 0, 1, 0, 1, 1, 2, 3, 4], [0, 1, 1, 0, 0], [1, 1, 0, 1, 1, 0, 0], [4, 5, 4, 2, 4, 5, 2, 2, 1, 0, 2], [1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 2, 0, 1, 0, 0], [0, 3, 2], [4], [0, 1, 1, 0], [3], [], [], [], [11]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 18, 18, 8, 0, 48, 12, 13, 5, 7, 11, 1, 1, 17, 0, 0, 4, 1, 0, 0, 0, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif mod(abs(mod(len(in1),divInt(len(in2),mod(mod(( i0 + saveOrd(in1) ),int(10.0)),i0)))),int(9.0)) != ( int(8.0) - i2 ):{:\\nloopBreak% = 0\\nfor s2 in (in1 + (in2[:min(int(3.0), int(5.0))][:int(5.0)] + s2))[i2:int(91.0)]:{:\\nres0 = int(6.0) \\le i1\\ns2 = (s1[min(int(69.0), max(( min(( max(max(abs(divInt(int(5.0),i1)), int(4.0)), divInt(int(4.0),int(2.0))) - int(3.0) ), len(\"\"(\"\")) + int(2.0) ), saveOrd(s0))):( i1 + i1 )] + s2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 7, 8, 3, 5, 5, 8], [0, 0, 2, 1, 0, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 1, 0, 3, 1, 0, 2, 2, 2, 0, 3, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1], [2, 3, 3, 2, 0, 0, 1, 0, 1], [0], [1, 1, 1, 0], [4, 5, 4, 2, 4, 5], [0, 0, 0, 0, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [0, 2, 0, 3, 1], [18, 0], [15], [6], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 3, 0, 22, 5, 7, 1, 4, 1, 5, 0, 2, 0, 0, 0, 5, 2, 1, 1, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(8.0) \\l abs(mod(len(in1),len(\"\"S6A@p\"\"))):{:\\nres0 = abs(min(( int(8.0) + i0 ), min(int(7.0), i0))) \\le mod(mod(divInt(i2,max(int(8.0), int(3.0))),int(5.0)),int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 1, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [0, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [3, 2], [], [], [1], [14]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 3, 2, 1, 2, 0, 2, 0, 0, 0, 2, 0, 0, 1, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(\"\"+1\"\"),divInt(int(3.0),( ( i1 + int(7.0) ) + int(9.0) ))) + int(8.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [0], [0, 2], [0], [0, 0], [], [], [3], [4, 3], [1, 0], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 7, 9, 3, 3, 5, 5], [1, 0, 2, 2, 0, 1, 1], [1], [1, 3, 2, 3, 2, 3, 1, 2, 0, 1, 3, 1, 3, 3, 3, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1], [2, 3, 3, 0, 0, 3, 1, 0, 1], [0], [1, 1, 0], [4, 5, 3, 2, 4, 5], [1], [0], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [0], [2], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 7, 2, 3, 0, 2, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = int(1.0) \\le abs(mod(len(in0),mod(len(\"\"C\"\"),int(7.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1], [2, 0, 1, 1, 0], [2], [0, 2, 2, 0], [], [0, 0], [], [], [3, 3, 2], [0, 4], [1, 2, 0], [0, 0], [5], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [1, 0, 9, 8, 3, 5, 5, 6, 5, 3, 5, 4, 7, 8, 7, 2, 9, 6, 0, 4, 5, 9, 4, 7, 8, 4, 7, 4, 5, 2, 7, 1, 2, 9, 2, 6, 0, 5, 2, 1, 3, 1, 1, 4, 2, 8, 8, 9, 8, 3, 8, 3, 2, 0, 0, 3, 9, 9, 4, 9, 2, 6, 0, 6, 7, 4, 4, 6, 0, 3, 0, 8, 5, 8, 1, 5, 4, 7, 4, 0, 7, 8, 5, 1], [0, 0, 2, 2, 0, 1, 1, 0, 0, 2, 2, 1, 0, 2, 1, 0, 1, 1, 2, 1, 0, 1, 2, 1, 1, 0, 2, 1, 1, 0, 2, 2, 1, 2, 1, 0, 1, 1, 1, 2, 0, 1, 1, 0, 2, 0, 2, 0, 2, 2, 2, 0, 0, 1, 1, 0, 0, 2, 0, 2, 1, 0, 0, 1, 2, 2, 0, 2, 2, 2, 1, 0, 1, 0, 0, 2, 2, 2, 2, 0, 2, 2, 0], [1], [3, 3, 1, 3, 3, 3, 3, 0, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1, 1, 3, 0, 2, 1, 0, 3, 1, 0, 2, 1, 3, 3, 0, 2, 0, 1, 3, 1, 3, 3, 0, 1, 0, 2, 1, 2, 2, 0, 3, 1, 2, 3, 3, 1, 1, 0, 2, 2, 2, 3, 1, 2, 0, 3, 3, 2, 2, 2, 1, 0, 0, 0, 2, 3, 2, 1, 0, 2, 2, 3, 3, 0, 2, 0, 2, 3, 2, 1, 3, 0, 1, 2, 2, 3, 3, 2, 3, 2, 3, 3, 3, 2, 0, 1, 2, 3, 0, 2, 3, 2, 3, 1, 1, 3, 0, 2, 1, 2, 0, 3, 3, 3, 2, 1, 1, 2, 1, 1, 0, 3, 2, 3, 2, 0, 3, 0, 1, 0, 2, 3, 1, 3, 2, 1, 0, 0, 0, 2, 3, 2, 0, 2, 2, 1, 0, 2, 1, 0, 3, 1, 1, 3, 1, 1, 1, 0, 3, 0, 3, 3, 0, 2, 0, 2, 2, 1, 2, 0, 2, 2, 2, 0, 1, 2, 2, 3, 0, 1, 1, 0, 3, 3, 3, 1, 2, 0, 2, 1, 3, 1, 3, 2, 3, 2, 1, 1, 3, 1, 1, 2, 3, 3, 3, 3, 2, 1, 3, 2, 0, 0, 1, 0, 3, 1, 3, 0, 1, 2, 3, 2, 3, 0, 1, 2, 2, 2, 2, 2, 3, 2, 0, 1, 1, 3, 0, 2, 0, 3, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 0, 3, 1, 1, 2, 3, 0, 1, 3, 0, 1, 3, 2, 2, 3, 0, 1, 2, 3, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 3, 2, 3, 3, 0, 2, 3, 0, 0, 0, 2, 0, 1, 2, 0, 0, 0, 2, 3, 2, 1, 1, 2, 1, 0, 1, 3, 0, 1, 0, 0, 2, 3, 0, 2, 1, 0, 2, 2, 0, 1, 1, 2, 1, 0, 3, 1, 0], [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [2, 3, 3, 2, 0, 0, 1, 0, 1, 1, 2, 1, 2, 2, 0, 1, 2, 1, 0, 1, 3, 1, 2, 1, 4, 1, 4, 3, 2, 3, 3, 3, 3, 0, 1, 0, 4, 2, 0, 0, 1, 4, 4, 1, 2, 3, 4, 3, 3, 3, 0, 0, 0, 2, 3, 1, 3, 4, 4, 0, 0, 0, 4, 3, 1, 1, 0, 0, 2, 2, 0, 3, 2, 4, 3, 4, 1, 4, 0, 1, 3, 4, 2, 4, 2, 4, 0, 4], [0, 1, 0, 1, 0, 2, 1, 2, 2, 0, 1, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 1, 1, 2, 0, 0, 2, 0, 1, 0, 2, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], [4, 5, 4, 2, 4, 5, 4, 4, 5, 3, 0, 0, 0, 5, 2, 5, 1, 0, 4, 1, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], [], [0, 3, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 3, 2, 4, 4, 2, 4, 2, 2, 2, 2, 4, 2, 4, 0, 4, 2, 4, 4, 4, 1, 0, 0, 0, 1, 1, 2, 0, 2, 1, 2, 2, 4, 1, 4, 2, 2, 2, 2, 1, 4, 2, 4, 2, 4, 4, 4, 4, 0, 1, 2, 4, 4, 1, 4, 2, 2, 0, 0, 2, 1, 0, 4, 4, 2, 1, 4, 1, 0, 2, 2, 1, 4, 4, 1, 4, 0, 4, 1, 0, 2, 1, 1, 2, 2, 1, 4, 0, 1, 2, 4, 1, 2, 4, 3, 2, 3, 2, 1, 4, 2, 4, 0, 1, 1, 0, 4, 1], [0, 3, 2, 0, 1, 2, 2, 1, 2, 3, 0, 3, 3, 3, 3, 3, 1, 0, 2, 3, 0, 0, 1, 0, 3, 2, 1, 2, 1, 2, 3, 3, 2, 0], [4, 2, 4, 2, 1, 2, 3, 2, 5, 1, 5], [0, 2, 1, 2, 0, 0, 2, 2, 1, 1, 2, 0, 0, 2, 1, 2, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 2, 0, 2], [3, 1, 1, 0, 0, 0, 3, 3, 1, 2, 0, 0, 0, 0, 1, 0, 3, 2, 0, 0, 0, 0, 2, 2, 3, 3, 3, 2], [15, 20, 1, 2, 14, 17, 1, 6, 10, 23, 13, 21], [18, 18, 18, 4], [1, 1, 6, 2, 5], [15, 16, 21, 17, 28, 26, 26]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 2, 0, 0, 3, 1, 3, 1, 1, 1, 0, 0, 0, 84, 84, 83, 0, 339, 89, 88, 42, 47, 22, 28, 0, 119, 34, 11, 36, 28, 12, 4, 5, 7], "tree_depth": 143, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(in1)) \\l int(10.0):{:\\nres0 = (in2 + (in1 + (s2[:len(in1)][abs(min(min(i0, i0), i2)):] + getCharFromString((getCharFromString(saveChr(max(int(9.0), i2))[:min(mod(( i0 + max(int(8.0), int(3.0)) ),int(5.0)), i1)][int(5.0):][int(6.0):][max(i1, mod(int(5.0),i0)):abs(int(3.0))], i0)[mod(int(5.0),max(abs(i2), ( i2 - int(4.0) ))):abs(int(7.0))].capitalize().rstrip(in2.capitalize()[:min(max(i1, int(8.0)), i0)])[mod(int(7.0),( mod(i2,abs(int(2.0))) + divInt(max(min(int(9.0), int(6.0)), i1),( mod(mod(max(int(0.0), ( i0 - len(saveChr(max(divInt(( mod(int(4.0),i1) + i1 ),i2), ( abs(( int(5.0) * i1 )) - divInt(( max(saveOrd(\"\",\"\".strip().capitalize()), i0) * divInt(i1,( max(divInt(int(9.0),saveOrd(in1)), i2) * int(4.0) )) ),( ( len(in1) + abs(( len(in2) - ( len(\"\"s\"\") + len(\"\"s\"\") ) )) ) + len(in0[mod(i1,int(7.0)):mod(min(i1, ( max(( min(int(8.0), int(4.0)) * saveOrd(\"\"P\"\"[i0:divInt(int(7.0),( i2 + abs(min(min(divInt(int(4.0),int(5.0)), mod(int(2.0),int(7.0))), i1)) ))]) ), max(divInt(saveOrd(getCharFromString(\"\"U\"\", divInt(i1,saveOrd(\"\"B\"\"[i0:int(1.0)][i2:][divInt(max(int(2.0), abs(( int(9.0) + i2 ))),i1):i2][divInt(len(saveChr(( i1 + ( divInt(int(2.0),i0) * ( int(6.0) + i1 ) ) )).lstrip(getCharFromString(s0, saveOrd(\"\"-\"\"))).strip()[int(0.0):].rstrip()[int(5.0):len(\"\"<\"\".strip().capitalize()[int(2.0):int(1.0)])].strip()),int(3.0)):].rstrip(getCharFromString(s0[i1:len(s0)][:i1], len(\"\"s\"\"[min(i2, divInt(i0,( divInt(int(1.0),( i1 * ( divInt(divInt(i1,int(1.0)),mod(divInt(min(i0, int(4.0)),int(2.0)),i2)) + min(abs(len(in2)), int(8.0)) ) )) - divInt(i0,divInt(int(8.0),max(int(9.0), len(getCharFromString(saveChr(( saveOrd(\"\"1\"\"[( int(8.0) - int(3.0) ):saveOrd(getCharFromString(\"\"C\"\", int(8.0)))]) * int(3.0) )), ( min(min(min(saveOrd(s2), mod(int(2.0),len(\"\"O\"\"[( i2 + i0 ):int(0.0)][:i2]))), max(int(0.0), max(i2, int(3.0)))), ( min(divInt(min(i2, int(9.0)),( ( ( ( mod(abs(mod(i0,int(9.0))),int(4.0)) + abs(i0) ) * mod(i1,min(i1, i0)) ) + ( mod(mod(mod(i0,len(\"\"R\"\".capitalize().strip(saveChr(abs(saveOrd(in2)))))),i2),len(\"\"B\"\".capitalize())) - int(9.0) ) ) + int(2.0) )), ( saveOrd(s1) * i0 )) + int(6.0) )) - max(i2, int(0.0)) )))))) ))):saveOrd(\"\"e\"\"[:mod(mod(min(i1, int(6.0)),divInt(max(i0, int(7.0)),i0)),int(4.0))])]))))))[:i1][i2:]),int(4.0)), int(6.0))) + i2 )),int(0.0))]) )) )))[len(\"\"G\"\"):].capitalize()) )),mod(saveOrd(\"\".\"\"[abs(i0):mod(saveOrd(saveChr(i2)),i2)][:i2]),divInt(i1,int(3.0)))),mod(i0,i1)) + i0 )) )):] + s0), ( abs(divInt(int(0.0),int(8.0))) + ( int(5.0) - i0 ) ))))[int(81.0):saveOrd(\"\"1\"\")]).endswith(\"\"K\"\".capitalize()[i2:int(54.0)])\\nin1 = ((\"\"X\"\"[i2:i2] + s1.capitalize()[( min(i2, ( int(7.0) + i0 )) + ( ( i2 - int(4.0) ) + int(0.0) ) ):].strip(\"\"N\"\"))[( int(7.0) - i2 ):] + \"\"V6\"\").rstrip()[saveOrd(in1):int(851.0)]\\nin1 = getCharFromString(\"\"2][[5\"\", i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = b2\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 7, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 0, 2, 3, 2, 3, 2, 2, 0, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 3, 2], [4], [2], [3, 2], [], [], [2], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 12, 4, 3, 2, 2, 2, 2, 0, 7, 1, 0, 1, 2, 0, 0, 1, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1[i0:]) \\le ( len(in2) + divInt(len(getCharFromString((\"\"[\"\" + \"\"2\"\"), divInt(( i0 + i1 ),int(5.0)))),int(7.0)) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [2, 0, 2, 1, 0, 2, 0, 2, 1, 0, 0, 1, 1, 1], [2, 1, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0], [0, 0, 0, 0, 0], [], [], [3, 3, 2, 2, 2, 2, 1, 1, 3], [0, 4, 1, 1], [1, 1, 0, 2, 1, 0, 1, 2, 2, 0, 2], [0, 0, 0, 0], [0, 5, 5, 2], [0, 1, 2], [], [0], [0], [0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 9, 8, 3, 5, 5, 1, 5, 2, 3, 5, 9, 2, 3, 1, 2, 8, 5, 2, 3, 5, 2, 6, 3, 8, 7, 0, 9, 9, 3, 1, 3, 2, 5, 7, 8, 8, 9, 9, 1, 2, 4, 6, 1], [0, 0, 2, 1, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 2, 2, 1, 0, 2, 1, 1, 0, 0, 1, 2, 0, 2, 0], [1], [1, 3, 2, 3, 3, 3, 0, 2, 0, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 0, 1, 0, 1, 3, 1, 0, 1, 3, 1, 2, 1, 3, 1, 1, 1, 0, 3, 2, 2, 0, 2, 3, 1, 1, 2, 2, 1, 2, 2, 0, 2, 1, 2, 2, 1, 0, 1, 2, 1, 2, 3, 2, 1, 3, 0, 3, 3, 2, 3, 0, 3, 0, 1, 3, 1, 0, 2, 0, 3, 2, 3, 0, 3, 0, 0, 3, 2, 1, 2, 3, 0, 3, 2, 1, 0, 1, 2, 3, 2, 2, 2, 2, 2, 3, 0, 3, 0, 1, 2, 0, 3, 0, 1, 3, 1, 1, 2, 1, 0, 0, 0, 3, 1, 2, 0, 1, 3, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], [2, 3, 3, 0, 0, 0, 1, 0, 1, 2, 4, 1, 2, 1, 3, 1, 4, 3, 3, 2, 2, 1, 1, 4, 1, 4, 1, 4, 3, 3, 0, 0], [0, 1, 0, 1, 0, 0, 1, 2, 0, 2, 1, 1, 0, 2], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [4, 5, 4, 2, 4, 5, 5, 2, 3, 2, 5, 5, 3, 4, 3, 2, 4, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [0, 0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 4, 3, 4, 4, 0, 3, 2, 2, 1, 1, 2, 3, 3, 1, 4, 4, 1, 1, 3, 1, 2, 1, 1, 1, 4, 0, 0, 4, 1, 1, 4, 0, 4, 2, 0, 4, 0, 1, 0, 0, 0, 0, 1, 2, 4], [0, 3, 2, 2, 0, 0, 2, 1, 3, 0, 1], [4, 3], [0, 0, 0, 1, 1, 1, 0, 2, 2], [0, 0, 1, 3, 3, 1, 3, 3, 0, 1, 1, 3, 0, 1, 2, 2, 2], [22, 24, 4, 16], [2, 11, 23, 9, 11], [2, 7, 1], [2, 15, 26, 25, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 14, 14, 4, 10, 2, 5, 0, 0, 9, 4, 11, 4, 4, 3, 0, 1, 1, 45, 45, 31, 1, 129, 33, 32, 14, 20, 19, 17, 2, 57, 11, 2, 9, 17, 4, 5, 3, 5], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = min(i0, ( i0 + i2 )) \\le min(int(9.0), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif res0:{:\\nin1 = s2\\n:}\\nb2 = (in1 + (in2[min(divInt(mod(i0,max(int(8.0), i1)),int(3.0)), i1):int(5.0)][min(int(5.0), i0):int(15.0)] + in2))[max(int(2.0), divInt(int(359.0),abs(int(2.0)))):int(3.0)] in \"\"W\"\"\\nloopBreak% = 0\\nfor s2 in getCharFromString((in0.capitalize().rstrip((\"\"Y\"\"[:int(1.0)][:i0] + \"\"c\"\")) + ((\"\"\\\\\\t\"\" + getCharFromString(\"\",\"\", saveOrd(\"\"l\"\")).capitalize()) + (\"\"[@\"\" + \"\"E\"\"[mod(mod(i0,mod(max(int(2.0), int(8.0)),divInt(( int(5.0) - ( divInt(i2,divInt(int(2.0),mod(( int(3.0) + i0 ),int(5.0)))) - divInt(int(2.0),( abs(( int(6.0) + max(i0, len(\"\"x\"\")) )) + max(( saveOrd(\"\"j\"\") - i0 ), len(getCharFromString(s2, i1))) )) ) ),int(3.0)))),len(in2)):int(8.0)]))[:i1]), mod(i1,abs(mod(abs(i2),max(i2, i1))))):{:\\nb2 = max(mod(int(7.0),mod(saveOrd(\"\"/\"\".capitalize()),i0)), max(mod(int(0.0),i2), int(9.0))) \\g divInt(saveOrd(\"\"Q\"\"),( ( ( ( mod(max(i1, saveOrd(saveChr(i1))),int(9.0)) * ( i0 + len(in2) ) ) * i0 ) - int(3.0) ) - len(in0[int(1.0):].lstrip(getCharFromString(in1, int(3.0)))) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in0 in \"\"l27\"\":{:\\nb2 = True\\nb2 = mod(int(25.0),i1) \\g i2\\nb1 = s2.endswith(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = s0.endswith(s1)\\nres0 = not \"\"1\"\" == saveChr(i0)[min(int(788.0), ( i2 + int(9.0) )):]\\ni0 *= min(int(91246.0), int(1.0))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1, 0, 1, 1], [], [2, 2, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0, 2], [1, 1, 2, 2], [5], [5, 17], [4, 0], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 1, 11, 1, 4, 1, 1, 3, 4, 0, 13, 2, 0, 3, 4, 0, 2, 2, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):len(getCharFromString((\"\"f\"\" + \"\"r4\"\"), int(37.0)))][divInt(len(getCharFromString(in2, i0)[i2:]),int(6.0)):]) \\le len((s1 + \"\"0\"\"))\\ni1 += int(3.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [2, 1, 0, 1, 0, 1, 2, 0, 1, 2, 2, 1, 1, 2, 1, 0, 0, 0, 0], [2, 2, 2, 1, 1], [0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 1, 1, 2], [], [0, 0, 0, 0, 0, 0, 0], [], [], [3, 2, 3, 0, 2, 2, 3, 1], [0, 4, 3, 3, 1, 0], [1, 1, 1, 1, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 1, 2, 1, 0], [0, 0, 0, 0, 0, 0], [5, 1, 4, 3, 5], [0, 2, 3, 2, 1, 3, 1], [1, 0], [0, 0], [0, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 6, 5, 5, 7, 3, 1, 6, 6, 4, 1, 1, 9, 7, 4, 0, 3, 0, 9, 3, 7, 4, 3, 7, 1, 2, 5, 5, 2, 8, 0, 1, 8, 2, 5, 1, 1, 5, 8, 4, 6, 7, 7, 3, 7, 2, 3, 9, 3, 6, 3, 2, 8, 5, 4, 1, 0, 4, 5, 3, 9, 3, 0, 7, 8, 5, 4, 9, 5, 8, 3, 1, 0, 9, 9, 9, 9, 2, 2, 1, 9, 4, 1, 9], [1, 0, 1, 2, 0, 1, 1, 1, 2, 2, 0, 0, 1, 0, 0, 1, 2, 2, 1, 1, 1, 0, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 2, 2, 0, 1, 0, 0, 0, 1, 1, 2, 2, 0, 0, 2, 2, 2, 0, 0, 1, 2, 1, 1, 1, 0, 1, 1, 2, 2, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 2, 1, 0, 0, 2, 0, 0], [1, 0, 0], [1, 3, 2, 3, 3, 3, 3, 0, 0, 1, 3, 1, 1, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1, 0, 2, 0, 0, 0, 3, 3, 2, 3, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 1, 2, 0, 0, 2, 2, 0, 2, 1, 0, 3, 2, 0, 1, 3, 2, 1, 3, 0, 0, 2, 0, 1, 0, 1, 1, 3, 2, 1, 0, 1, 2, 2, 3, 1, 1, 1, 2, 2, 0, 0, 0, 3, 0, 0, 3, 3, 0, 3, 3, 0, 1, 2, 3, 1, 3, 1, 3, 3, 1, 3, 0, 0, 3, 0, 2, 1, 1, 0, 3, 3, 0, 1, 0, 2, 1, 2, 2, 0, 1, 0, 1, 1, 2, 2, 3, 3, 0, 1, 2, 0, 3, 1, 1, 3, 2, 3, 3, 0, 1, 1, 0, 2, 3, 0, 2, 1, 3, 0, 3, 2, 1, 1, 3, 3, 2, 2, 2, 0, 0, 3, 3, 3, 2, 0, 3, 1, 0, 2, 0, 0, 2, 2, 3, 2, 0, 1, 1, 2, 0, 1, 1, 1, 2, 3, 3, 2, 1, 1, 1, 3, 2, 1, 2, 3, 1, 0, 2, 3, 1, 0, 1, 1, 3, 3, 2, 3, 1, 0, 3, 3, 1, 3, 2, 1, 0, 2, 0, 1, 3, 3, 3, 1, 2, 0, 3, 2, 2, 3, 3, 2, 1, 3, 2, 3, 0, 0, 1, 1, 3, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 2, 3, 0, 0, 0, 1, 3, 2, 0, 0, 0, 2, 3, 2, 3, 0, 0, 0, 2, 0, 2, 2, 0, 0, 3, 0, 1, 0, 0, 1, 2, 3, 3, 3, 0, 0, 3, 0, 1, 1, 1, 3, 2, 3, 2, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [4, 3, 3, 0, 0, 0, 1, 4, 1, 1, 3, 0, 4, 1, 0, 0, 4, 3, 0, 3, 1, 2, 3, 2, 4, 2, 4, 0, 1, 4, 0, 0, 3, 4, 4, 2, 4, 1, 3, 0, 4, 4, 2, 0, 4, 2, 0, 4, 3, 0, 4, 0, 3, 4, 0, 2, 0, 1, 0, 0, 0, 4, 0, 4, 1, 2, 1, 0, 0, 1, 1, 3, 1, 4, 4, 3, 4], [0, 0, 1, 2, 1, 0, 0, 1, 0, 0, 1, 2, 2, 0, 2, 0, 0, 2, 0, 1, 0, 1, 1, 0, 0, 1, 2, 2, 1, 1, 2, 2, 0, 0, 0, 2], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0], [4, 5, 4, 2, 4, 5, 3, 2, 3, 3, 1, 1, 0, 3, 5, 3, 4, 0, 5, 1, 2, 1, 5, 5, 1, 5, 4, 4, 3, 4, 3, 3, 0, 2, 2, 4, 3, 3, 5, 2, 4, 5, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 4, 0, 2, 2, 2, 2, 4, 0, 1, 1, 2, 0, 4, 1, 2, 3, 3, 0, 0, 3, 1, 2, 1, 0, 4, 1, 3, 2, 0, 4, 0, 0, 3, 3, 2, 4, 2, 4, 1, 4, 1, 0, 2, 4, 4, 0, 3, 2, 0, 2, 3, 2, 2, 4, 2, 2, 2, 1, 2, 0, 0, 2, 4, 1, 0, 2, 1, 0, 2, 2, 2, 4, 4, 0, 0, 2, 2, 4, 1, 4, 0, 0, 3, 0, 0, 0, 2, 1, 2, 0, 1, 3, 0, 0, 4, 3, 0, 2, 2, 4, 0, 0, 2, 1, 1, 2, 3, 2, 2, 3, 0, 3, 4, 4, 4, 4, 4, 0, 4, 0, 3, 4, 4, 3, 1, 2, 1, 1, 0], [0, 3, 2, 2, 0, 3, 2, 0, 1, 1, 1, 0, 2, 2, 3, 1, 0, 3, 0, 2, 1, 1, 3, 1, 2, 2, 1], [4, 0, 1, 2, 1], [0, 2, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 1, 2, 1, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 1], [3, 1, 2, 2, 3, 1, 0, 3, 3, 3, 2, 3, 1, 3, 3, 3, 3, 0, 2, 0, 0, 1], [25, 24, 24, 15], [13, 9, 16, 24], [0, 3, 3, 5], [16, 30, 7, 3, 20, 6, 20, 1, 31, 8]], "fitness": 9223372036854775807, "mapping_values": [1, 19, 19, 5, 14, 0, 7, 0, 0, 8, 6, 18, 6, 5, 7, 2, 2, 2, 87, 87, 81, 3, 299, 67, 77, 36, 32, 43, 22, 0, 141, 27, 5, 38, 22, 4, 4, 4, 10], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l saveOrd(getCharFromString(in1, mod(len(in2),len((in1 + (s2[min(min(i1, i0), int(0.0)):min(int(0.0), int(6.0))][max(( mod(i1,saveOrd(in1)) + int(5.0) ), int(5.0)):] + in2))[int(73.0):i2])))):{:\\nres0 = int(1.0) \\le i0\\nin0 = s2.rstrip(in0.capitalize()[mod(i1,i1):][i1:max(max(( len(\"\"-\"\") + int(6.0) ), int(6.0)), ( int(4.0) - ( min(mod(int(1.0),int(1.0)), int(9.0)) * int(7.0) ) ))][( i2 - i2 ):mod(mod(i0,( int(4.0) + i0 )),saveOrd(\"\"n\"\"))][:mod(i1,int(0.0))])\\nb2 = max(mod(int(309.0),min(i0, i0)), ( i1 + int(3.0) )) \\ge i2\\nres0 = int(74.0) \\ge int(3.0)\\nb0 = b2\\nloopBreak% = 0\\nwhile not ( in0[min(( int(7.0) - i2 ), int(12.0)):divInt(mod(saveOrd(\"\"0\"\".capitalize()),int(5.0)),int(52.0))].endswith(((s1 + s1) + (\"\"3\"\" + \"\"_\"\"[:int(8.0)]))[:mod(mod(i1,i1),i1)]) or s0 not in getCharFromString(\"\"j\"\", len((in0[i0:i2] + in2.lstrip()))) ):{:\\nin0 = in1\\nb2 = not ((getCharFromString(\"\"Z\"\", min(len(saveChr(i1)), max(abs(i0), int(0.0))))[mod(len(\"\"$\"\"),int(1.0)):abs(int(8.0))].capitalize()[saveOrd(s0):abs(int(2.0))] + saveChr(saveOrd(saveChr(i0)))[i2:min(i2, mod(int(5.0),int(1.0)))]) + in2).startswith((s1[:i2] + (getCharFromString(\"\"\"\"[max(saveOrd(s2[i1:]), int(1.0)):i0][mod(int(5.0),divInt(( i2 + int(8.0) ),i0)):int(4.0)][int(6.0):divInt(( min(min(i2, int(7.0)), ( i0 + len(s1) )) - int(7.0) ),int(3.0))], saveOrd(\"\";\"\".capitalize()[mod(saveOrd(in2),abs(i2)):]))[int(7.0):][:int(2.0)] + \"\"3\"\"[i2:mod(saveOrd(in2),i0)])[divInt(int(3.0),max(i1, len(s1.rstrip().capitalize()[mod(int(9.0),int(3.0)):][min(saveOrd(in2), ( ( ( i0 * i0 ) * saveOrd(saveChr(abs(min(divInt(i0,saveOrd(\"\"#\"\")), int(6.0))))[i1:][mod(i1,i2):]) ) + ( divInt(abs(mod(i2,int(3.0))),int(2.0)) * ( i0 + int(8.0) ) ) )):int(5.0)][int(4.0):divInt(min(saveOrd(getCharFromString(in1, ( int(1.0) + int(0.0) ))), int(4.0)),len(in1))]))):]))\\nloopBreak% = 0\\nwhile (in0 + in1) != in0:{:\\nif True:{:\\nres0 = ( ( int(5.0) * ( min(int(3.0), i0) + divInt(saveOrd(\"\"q\"\"[int(9.0):]),i2) ) ) \\g int(3.0) and in0[:int(0.0)].endswith(\"\";\"\") )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = min(len((s0 + s2)), ( saveOrd((s2 + getCharFromString(in1, int(7.0))[i2:][min(abs(int(8.0)), min(( int(5.0) - i2 ), ( i0 + int(4.0) ))):]).strip()) - max(min(min(int(9.0), ( i0 - min(( ( saveOrd(in0) + min(divInt(int(5.0),saveOrd(\"\"\\\\\\n\"\"[( max(i1, i2) + int(8.0) ):int(3.0)])), abs(i1)) ) - int(1.0) ), ( i1 * mod(int(0.0),int(9.0)) )) )), ( i1 * i0 )), ( max(i1, i1) - i2 )) )) \\l int(9992.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif True:{:\\nin0 = \"\"`\"\"\\n:}else:{:\\ni2 -= min(mod(i0,i0), i1)\\ni0 = ( min(divInt(max(i2, i0),i1), ( i0 * ( ( i0 * i1 ) + max(i0, int(2.0)) ) )) + i2 )\\ni1 = i0\\nin2 = ((s2 + (saveChr(int(1.0)).capitalize() + saveChr(( len(saveChr(max(saveOrd(in1), i0)).rstrip()) + i2 ))))[:saveOrd(in2.capitalize())][i0:int(9.0)] + (saveChr(int(4.0)).capitalize() + (\"\"%Y5Y\"\" + \"\"P\"\"[:int(1.0)])))[len(\"\"y\"\"):( saveOrd(in0) * divInt(i0,int(9.0)) )]\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 2, 1, 2, 2, 0, 2, 0, 1, 0, 2, 2, 2, 2, 0, 1, 2, 2, 2, 1, 0, 1, 1], [1, 2, 2, 0, 0, 0, 1, 1, 2, 1, 0], [0, 1, 2, 2, 0, 1, 1, 2, 0, 2, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0, 0], [], [], [3, 1, 1, 0, 3, 2, 1], [4, 4, 5, 3, 0, 1, 2, 0], [1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [4], [0, 0, 1, 3, 3, 0, 2], [1, 0], [1], [1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [1, 6, 3, 7, 6, 3, 6, 5, 9, 0, 8, 4, 2, 9, 3, 9, 4, 4, 2, 8, 5, 5, 0, 3, 5, 3, 3, 2, 9, 3, 8, 2, 3, 0, 8, 6, 1, 3, 3, 4, 2, 2, 5, 2, 7, 9, 2, 5, 2, 6, 7, 3, 9, 3, 9, 5, 2, 8, 6, 0, 5, 4, 8, 9, 5, 3, 6, 7, 9, 3, 4, 3], [0, 2, 1, 0, 2, 0, 0, 1, 2, 1, 0, 2, 2, 1, 1, 0, 2, 0, 2, 0, 1, 1, 2, 0, 2, 2, 1, 0, 2, 2, 2, 0, 2, 1, 0, 0, 1, 0, 0, 0, 1, 2, 1, 0, 1, 2, 2, 1, 2, 2, 2, 1, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 1, 1, 1, 2, 0, 1, 2, 0, 1, 0, 1, 2, 1, 0, 2, 0, 0, 0, 2, 0], [1, 1, 0], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3, 3, 0, 2, 1, 2, 0, 2, 2, 3, 2, 1, 2, 1, 3, 0, 2, 3, 0, 3, 3, 3, 0, 3, 1, 0, 1, 0, 2, 2, 2, 1, 2, 0, 2, 0, 2, 2, 0, 2, 3, 3, 2, 3, 0, 0, 0, 2, 3, 0, 2, 3, 2, 3, 1, 0, 0, 1, 3, 2, 1, 3, 3, 1, 3, 0, 3, 3, 0, 0, 2, 3, 3, 2, 1, 0, 0, 3, 1, 3, 0, 2, 1, 2, 2, 1, 3, 1, 1, 2, 3, 2, 1, 0, 0, 2, 3, 2, 2, 3, 3, 1, 0, 0, 2, 1, 1, 0, 3, 3, 3, 3, 3, 0, 3, 1, 2, 3, 3, 1, 1, 0, 2, 1, 2, 2, 0, 3, 2, 3, 3, 0, 3, 1, 2, 0, 1, 0, 0, 1, 3, 3, 3, 1, 2, 2, 1, 3, 3, 1, 1, 1, 3, 3, 3, 0, 3, 2, 1, 3, 1, 2, 2, 2, 2, 0, 3, 0, 2, 1, 0, 3, 3, 3, 0, 3, 1, 1, 2, 1, 3, 3, 1, 2, 0, 3, 1, 2, 3, 3, 2, 1, 3, 2, 1, 2, 1, 3, 2, 3, 0, 0, 2, 3, 3, 2, 2, 1, 3, 2, 0, 3, 1, 3, 2, 0, 2, 3, 0, 1, 3, 1, 0, 0, 0, 1, 1, 2, 2, 2, 0, 3, 0, 2, 3, 0, 0, 2, 2, 1, 3, 1, 3, 2, 2, 3, 0, 2, 0, 2, 3, 2, 0, 3, 2, 0, 2, 3, 2, 1, 2, 0, 1, 0, 3, 3, 2, 1, 3, 0, 0, 1, 0, 1, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 2, 0, 2, 0, 3, 3, 0, 3, 1, 1, 0, 3, 0, 3, 3, 1, 3, 3, 0, 2, 0, 3, 1, 2, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [4, 3, 3, 3, 4, 1, 0, 1, 2, 3, 1, 0, 4, 1, 3, 1, 3, 1, 3, 4, 0, 1, 0, 0, 0, 0, 2, 1, 2, 0, 2, 0, 1, 0, 0, 0, 3, 2, 3, 1, 4, 4, 0, 2, 2, 4, 3, 3, 2, 4, 2, 0, 4, 3, 3, 3, 3, 2, 3, 1, 0, 1, 2, 1, 3, 0, 1, 3, 4, 1, 4, 0, 1, 0, 1, 4, 0, 2, 1, 3, 0, 1, 2, 0, 2, 1, 1, 4, 3, 3, 3, 2, 4, 3, 4, 1], [0, 1, 0, 1, 2, 1, 0, 2, 0, 2, 0, 0, 1, 1, 1, 2, 0, 2, 1, 0, 1, 0, 1, 2, 2, 2, 2, 1, 0, 0, 0, 1, 1, 2, 1, 2, 1, 0, 1, 1], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0], [3, 5, 1, 4, 4, 3, 3, 0, 4, 1, 0, 4, 5, 0, 2, 0, 0, 4, 0, 3, 3, 0, 3, 0, 4, 4, 2, 1, 5, 0, 5, 3, 0, 1, 4], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0], [2, 1, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1, 0, 2, 0, 0, 4, 4, 1, 0, 0, 0, 1, 4, 1, 1, 2, 2, 0, 4, 0, 4, 2, 4, 0, 4, 0, 2, 3, 2, 2, 4, 2, 0, 1, 2, 0, 4, 2, 1, 4, 0, 1, 1, 3, 2, 2, 1, 0, 4, 4, 0, 1, 4, 4, 4, 2, 1, 1, 4, 4, 2, 1, 2, 0, 1, 4, 1, 0, 4, 2, 4, 0, 4, 4, 1, 0, 1, 0, 1, 2, 0, 2, 2, 1, 1, 4, 1, 4, 4, 4, 2, 1, 2, 0, 0], [0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 3, 1, 0, 3, 0, 0, 2, 0, 3, 2, 3, 3, 2, 2, 3, 3, 2, 1], [0, 0, 0, 3, 0, 3, 0, 5, 0], [2, 0, 0, 1, 0, 1, 1, 2, 2, 0, 2, 2, 0, 0, 1, 0, 1, 0, 2, 2, 1, 1, 2], [1, 1, 2, 2, 0, 0, 3, 3, 2, 2, 3, 3, 2, 1, 0, 0, 3, 0, 1, 3, 2, 3, 0, 3, 0, 2, 0, 0, 0, 0], [5, 17, 24, 3, 9, 1, 5, 5, 14, 1, 24], [5, 19, 13, 15], [7, 1, 1, 8, 6, 5, 6], [28, 9, 13, 22, 29, 28, 5, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 23, 23, 11, 12, 4, 5, 0, 0, 7, 8, 16, 8, 1, 7, 2, 1, 4, 72, 72, 82, 3, 322, 80, 96, 40, 42, 35, 30, 4, 107, 28, 9, 23, 30, 11, 4, 7, 8], "tree_depth": 90, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"f\"\"[int(16.0):]) \\le len(in0)\\nif int(3.0) \\le divInt(len(getCharFromString((\"\"t7\"\" + \"\"1\"\"), i0)),i2):{:\\ni1 += int(7.0)\\nloopBreak% = 0\\nwhile len(getCharFromString(in2, int(6.0))[int(3.0):saveOrd((s1 + \"\"F\"\"))]) != max(i0, ( int(6.0) - mod(i2,( divInt(min(mod(int(5.0),( int(9.0) + max(i0, ( abs(i0) - len(in1) )) )), max(min(i1, saveOrd(in1[int(0.0):i2])), int(8.0))),i1) * divInt(( ( int(4.0) - divInt(i0,mod(i2,( mod(i2,( max(len(in0), mod(max(i1, i1),i0)) + ( len(getCharFromString(saveChr(i2), mod(max(mod(len(\"\"R\"\"),int(2.0)), i0),i2))) * int(9.0) ) )) + saveOrd(in0) ))) ) * mod(int(3.0),min(max(int(9.0), min(i0, min(min(i1, i1), divInt(min(abs(( int(4.0) + i2 )), i0),max(int(4.0), abs(i2)))))), mod(int(2.0),divInt(( int(8.0) + min(int(5.0), int(5.0)) ),mod(abs(( int(0.0) - i2 )),i1))))) ),( min(divInt(( max(min(int(3.0), i0), i2) - ( int(5.0) - int(3.0) ) ),i2), min(min(len(s0), abs(len(in1))), i2)) * max(int(3.0), mod(saveOrd(\"\"]\"\"),saveOrd(saveChr(int(2.0))))) )) )) )):{:\\nloopBreak% = 0\\nwhile int(93.0) \\ge i0:{:\\ns1 = \"\"&18\"\"\\nloopBreak% = 0\\nfor s0 in \"\"*\"\":{:\\nin1 = in2[divInt(int(8.0),mod(divInt(i2,min(divInt(abs(abs(i1)),saveOrd(s0.capitalize())), int(2.0))),( i0 + int(3.0) ))):i0][:i1]\\nb1 = s2.capitalize()[:int(0.0)].capitalize().startswith(s0.lstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= len((s0[len(\"\"=\"\"):abs(int(8.0))].lstrip()[( ( int(6.0) - saveOrd(in1[abs(int(1.0)):]) ) + int(3.0) ):][int(3.0):] + \"\"6\"\"[min(saveOrd(saveChr(len(s0))), i0):].lstrip())[:len(\"\"n\"\")])\\nloopBreak% = 0\\nfor in0 in \"\"Y\"\":{:\\nloopBreak% = 0\\nfor in0 in (\"\"D\"\"[( int(4.0) - len(s0) ):int(2.0)][( divInt(( ( i0 + len(getCharFromString(in0.lstrip(\"\"^\"\"), i1)) ) - ( int(2.0) * i2 ) ),abs(len(getCharFromString(getCharFromString(\"\"J\"\"[:max(i1, min(int(5.0), int(2.0)))].capitalize(), ( int(7.0) * max(abs(int(9.0)), mod(i0,max(int(2.0), mod(len(\"\"p\"\"),min(( int(5.0) * max(( int(2.0) * ( int(6.0) - len(getCharFromString(\"\"]\"\"[mod(saveOrd(s0[:i1]),i2):divInt(max(saveOrd(\"\"5\"\"), ( ( int(7.0) + min(divInt(i2,max(int(3.0), min(mod(i1,( max(i2, int(9.0)) + saveOrd(\"\"\"\"\".capitalize()) )), int(3.0)))), i2) ) + i2 )),i1)].lstrip(), int(9.0))) ) ), int(5.0)) ), mod(mod(mod(i0,min(i0, ( abs(i0) - i0 ))),divInt(( int(2.0) - max(int(8.0), len(in1)) ),mod(( min(i0, divInt(i1,mod(max(( i1 * abs(divInt(i0,( min(( int(6.0) - divInt(i2,int(0.0)) ), i0) * abs(max(divInt(int(5.0),max(i1, i1)), int(4.0))) ))) ), i1),int(8.0)))) - i2 ),i0))),( i1 + i2 ))))))) )), i0)))) - int(9.0) ):int(5.0)] + in1.lstrip()[i1:i0].lstrip(\"\"B\"\".capitalize().capitalize())):{:\\nif b1:{:\\nif b0:{:\\ni1 = mod(i2,( i1 - saveOrd(s2) ))\\n:}else:{:\\ns1 = \"\";\"\"\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile False:{:\\nif ( ( len(in2) \\l i0 or res0 ) and len(\"\"F\"\") \\g int(3.0) ):{:\\nloopBreak% = 0\\nfor s0 in in2[int(6.0):]:{:\\nb2 = not i2 == len(\"\"6\"\"[:i0][abs(saveOrd(\"\"F\"\")):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin0 = \"\"O\"\".strip(saveChr(int(7.0)).capitalize().lstrip())\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = len(\"\"BY\"\"[:saveOrd(s0[i0:])]) \\l divInt(i0,max(int(9343.0), divInt(i2,i0)))\\ns1 = in1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 0, 1, 0, 1, 1, 1, 0, 0, 1], [2, 6, 9, 7, 3, 5, 5, 3, 0, 0], [1, 0, 1, 1, 1, 1, 1], [1], [3, 0, 2, 3, 2, 3, 0, 2, 0, 2, 0, 1, 3, 3, 3, 3, 0, 1, 3, 3, 0, 1, 1, 3, 2, 1, 0], [1, 0, 1, 0, 1], [3, 1, 3, 0, 0, 3, 0, 0, 3, 3], [1, 2], [0, 0, 0], [4, 5, 3, 2, 4, 5], [0, 0, 1], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 1], [0, 3, 2], [4], [0, 2, 2], [2, 1, 2], [], [25], [2, 4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 7, 0, 27, 5, 10, 2, 3, 6, 3, 0, 13, 1, 0, 3, 3, 0, 1, 2, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(getCharFromString(in1, i1)) \\l divInt(max(( len(in2) - i0 ), divInt(i1,( i1 * int(269.0) ))),min(min(len((in0 + (s2[min(i1, int(73.0)):][min(len(in1), i1):] + in2))[int(5.0):int(5.0)]), len(\"\"2z4\"\")), divInt(int(300.0),i1)))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [1], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5, 6, 3, 0, 2, 8, 9], [1, 0, 1, 2, 1, 1, 1, 2, 1, 0, 1, 1, 2, 0, 0, 0, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 3, 1, 1, 1, 3, 0, 0, 3, 1, 2, 2, 0, 0, 0, 3, 3, 3, 3, 1, 1, 3, 3, 0, 2, 3, 2, 0, 2, 3, 0, 0, 3, 0, 0, 1, 0], [1, 0, 0, 0, 1, 1, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 0, 0, 3, 4, 2, 2, 2, 3, 0, 1, 4, 3], [2, 2, 2], [0, 1, 0, 0, 1], [4, 5, 3, 2, 4, 5, 3, 4, 5, 2, 4, 2], [1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 3, 3, 0, 2, 3, 3, 2, 4, 4, 0, 2, 2, 0, 1, 0, 1, 4, 0, 4, 0, 2, 2, 2, 1], [0, 3, 2, 1], [4], [0, 1, 0, 1, 2, 1, 2, 0, 2, 1, 1], [0, 3, 1], [11], [12], [], [7]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 13, 13, 17, 0, 58, 8, 21, 3, 5, 12, 3, 0, 36, 4, 1, 11, 3, 1, 1, 0, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( int(26.0) * i0 )), i1)), int(9.0))) \\l len(in2):{:\\nres0 = in0 not in (s2 + (in1[min(max(( i2 * int(7.0) ), int(3.0)), i1):max(int(5.0), min(int(5.0), int(6.0)))][:int(3.0)] + in2))[min(i1, i1):len(((in0 + ((getCharFromString(in1.rstrip(in2[int(0.0):( mod(i2,i1) * i0 )][saveOrd(\"\"L\"\"):]), abs(abs(abs(int(2.0)))))[:int(8.0)] + s2) + \"\"$\"\")[len(in1.capitalize()):]) + saveChr(min(i1, divInt(max(divInt(i1,mod(saveOrd(s2),i2)), i0),len(\"\"m\"\"[:i0][:i0][int(9.0):])))))[:i0])]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1, 0, 1], [], [3, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [3, 1, 2, 0, 3], [2], [2, 0], [1, 3, 2], [5], [5], [8], [21]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 0, 2, 1, 0, 2, 3, 0, 7, 1, 1, 0, 3, 0, 1, 1, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd((in0 + in2)) \\le int(16.0)\\ni0 += len((\"\"f\"\" + \"\"<8\"\").strip())\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1], [3, 7, 9, 8, 7, 7, 1, 3], [0, 2, 2, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 4, 2, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [2, 2, 1, 1], [2], [], [], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 4, 0, 21, 6, 4, 3, 3, 4, 1, 0, 12, 1, 0, 4, 1, 0, 0, 1, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le len(getCharFromString((in2 + (in0[:( len(s2) + divInt(min(mod(( i0 + int(3.0) ),int(7.0)), int(9.0)),int(8.0)) )][:( int(7.0) + i2 )] + \"\"6\"\"))[int(71.0):][i2:], divInt(i0,int(3.0))))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 2, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 1, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 4, 2, 4, 5], [0, 0, 0, 0, 0, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [1, 1, 2, 0, 1, 3], [11], [3, 8, 22], [3], [18]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 2, 3, 1, 6, 0, 2, 0, 0, 0, 6, 1, 3, 1, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le divInt(divInt(len(\"\"di3Lw/\"\"),divInt(int(3.0),( ( i1 + int(7.0) ) + int(2.0) ))),int(8.0))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 2, 3, 5, 7, 3], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 4, 3, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [1], [], [0, 1, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0], [1, 3, 2], [4], [2, 2, 2], [2], [], [], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 4, 0, 22, 4, 8, 1, 3, 4, 1, 0, 11, 1, 0, 3, 1, 0, 0, 1, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(\"\"9\"\"))):{:\\nres0 = abs(min(( i2 + int(4.0) ), min(int(2.0), saveOrd(saveChr(int(3.0)))))) \\le mod(mod(i1,len((in2 + (in1[i2:][i2:] + s2))[int(5.0):])),int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [9, 7, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [2, 3, 3, 2, 4, 5], [1], [], [0, 4, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 0], [2], [], [], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 6, 0, 22, 7, 3, 3, 4, 4, 1, 0, 11, 1, 0, 3, 1, 0, 0, 1, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\l divInt(divInt(len(getCharFromString(\"\"4\"\", divInt(len((in0 + (in0[( ( i0 + int(9.0) ) + int(7.0) ):int(2.0)][i2:mod(int(8.0),i2)] + s2))[int(7.0):]),i0))),( i2 + int(71.0) )),i2)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 3, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [1], [], [13], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in0),divInt(len(\"\"n\"\"),( ( i0 - int(3.0) ) + int(7.0) ))) + int(2.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [1], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 2, 2, 2, 0, 1, 1, 1, 0], [1], [1, 3, 2, 3, 3, 2, 3, 3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 0, 0, 1, 1, 1, 2, 0, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1, 0], [2, 3, 3, 2, 0, 0, 1, 4, 3, 1], [1, 0], [1, 1, 0, 1, 1], [4, 5, 4, 2, 4, 4, 4], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 4, 0, 0, 0, 1], [0, 3, 2], [4], [0, 1, 1], [0], [14], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 6, 0, 22, 3, 10, 1, 2, 7, 1, 0, 13, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = in1 not in (s2 + (getCharFromString(in1, ( abs(min(i0, i2)) - min(mod(max(saveOrd(in1), i2),len(in1)), i2) ))[:max(i0, i1)] + \"\"O\"\"))[int(9.0):int(8.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 8, 3, 5, 7, 3], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 1, 2, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 4, 4, 1], [0, 1], [1, 1, 1], [4, 5, 4, 2, 4, 5, 2], [1, 1], [], [4, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0, 3, 4, 0, 3, 2, 1, 1, 2, 0], [0, 3, 2], [4], [2, 2, 2, 1, 2], [2, 3], [], [], [4], [29]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 5, 1, 21, 3, 8, 2, 2, 7, 2, 0, 21, 3, 1, 5, 2, 0, 0, 1, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(getCharFromString(in1, len((in2 + (in1[abs(min(( i2 + int(4.0) ), min(int(8.0), saveOrd(s2)))):][int(3.0):] + in1))[int(5.0):].rstrip((in2.capitalize() + (\"\"4\"\"[:mod(i1,saveOrd(\"\"^\"\"))] + s2[i2:])))))),i2)):{:\\ni2 -= int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 5, 6, 0, 3, 5, 5, 9, 1, 1, 2, 5, 8, 7, 0], [1, 1, 2, 1, 0, 1, 1, 2], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 2, 3, 1, 3, 3, 3, 1, 0, 3, 0, 0, 3, 1, 1, 0, 2, 3, 1, 3, 3, 3, 0, 0, 1, 2, 1, 2, 3, 1, 0, 1, 1], [1, 1, 1, 1, 1, 0], [2, 3, 3, 2, 0, 0, 1, 4, 1, 2, 0, 2, 2, 3, 1, 0], [0], [1, 0, 0, 1, 0], [4, 5, 4, 2, 4, 5], [1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [0, 1, 0, 1], [2], [], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 15, 15, 8, 0, 41, 6, 16, 1, 5, 5, 1, 0, 12, 0, 0, 4, 1, 0, 0, 1, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l abs(mod(len(in1),len(in2[abs(min(divInt(i1,divInt(min(int(6.0), max(saveOrd((in1 + (s2[:max(int(0.0), i1)][abs(i2):i1] + in1))[:min(int(3.0), int(5.0))]), i0)),mod(abs(int(5.0)),abs(len(\"\"5\"\"))))), max(i1, i1))):int(9112.0)]))):{:\\nres0 = divInt(int(5.0),( min(int(8.0), i2) + int(7.0) )) \\le int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 0, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [1], [], [24], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(\"\"y\"\")\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 7, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [0, 0], [1, 2], [5], [5], [7], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 1, 8, 1, 3, 1, 1, 2, 2, 0, 7, 1, 0, 1, 2, 0, 1, 1, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(17.0):len(in2)]) \\le int(37.0)\\ni0 += divInt(len(getCharFromString((\"\"f\"\" + \"\"7\"\"), i2)),i1)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 4, 8, 3, 5, 7, 3, 9, 0], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 2, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1, 1], [2, 3, 3, 2, 0, 0, 4, 4, 1], [0], [1, 1, 1, 1], [4, 5, 4, 3, 4, 5], [1, 1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 4, 0, 1, 1], [0, 3, 2], [4], [2, 2, 2], [2, 1], [], [23], [7], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 10, 10, 3, 0, 24, 5, 8, 1, 4, 5, 2, 0, 14, 2, 1, 3, 2, 0, 1, 1, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(00.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(min(( i2 + int(4.0) ), min(int(8.0), saveOrd(getCharFromString((in1 + (in0[int(3.0):][mod(mod(mod(saveOrd(in1.rstrip(\"\"7\"\")),i1),i2),int(5.0)):] + \"\"x\"\"))[int(7.0):], int(3.0)))))) \\le int(90.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [5, 4], [2, 1], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 4, 8, 7, 7, 1], [0, 0, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 4, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [2, 0, 1], [3], [], [], [], [13]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 16, 5, 3, 3, 2, 6, 1, 0, 12, 0, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s1 in in2:{:\\nres0 = saveOrd(in1) != ( divInt(len((s2 + (in1[:divInt(len(in2),( int(4.0) * i0 ))][int(6.0):int(4.0)] + \"\"*\"\"))[int(8.0):]),i0) + ( int(7.0) + i1 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 0, 1], [2, 0, 2, 0, 1, 1], [2, 0], [0, 2, 0, 0], [0], [0, 0], [], [], [0, 3, 3], [4, 4], [1, 1, 2, 2], [0, 0], [4, 1], [0], [], [], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1], [1, 2, 9, 8, 7, 5, 5, 1, 4, 4, 7, 2, 6, 9, 1, 3, 5, 2, 2, 4, 2, 3, 8, 8, 9, 9, 1, 1, 0, 6, 2, 5, 2, 6, 0, 7, 5, 7, 7, 9, 0, 8, 3, 7, 7, 9, 7, 0, 5, 6, 6, 7, 8, 8, 0, 9, 3, 8, 6, 9, 6, 2, 5, 0, 1, 7, 8, 5, 5, 4, 3, 3, 5, 5, 1, 0, 4, 5, 9, 4, 1, 7, 4, 2, 5], [1, 0, 2, 2, 2, 1, 1, 0, 2, 1, 1, 1, 2, 0, 1, 0, 2, 1, 1, 1, 0, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 0, 2, 0, 0, 0, 1, 2, 0, 0, 0], [1], [1, 3, 2, 3, 2, 3, 3, 2, 0, 1, 3, 1, 3, 3, 3, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 1, 1, 2, 3, 3, 3, 3, 0, 2, 1, 0, 2, 1, 2, 0, 3, 0, 2, 1, 2, 0, 1, 2, 1, 2, 3, 2, 3, 1, 1, 3, 1, 2, 2, 3, 2, 0, 2, 3, 3, 0, 2, 3, 0, 3, 2, 1, 2, 1, 2, 1, 3, 0, 2, 1, 2, 2, 2, 1, 2, 0, 2, 2, 1, 1, 1, 3, 1, 3, 3, 0, 1, 0, 0, 2, 2, 2, 1, 2, 2, 3, 2, 2, 3, 0, 1, 3, 2, 1, 1, 3, 1, 1, 3, 0, 3, 0, 1, 2, 3, 3, 2, 1, 0, 2, 1, 1, 1, 1, 2, 0, 2, 1, 0, 0, 1, 2, 1, 3, 0, 3, 2, 3, 3, 3, 2, 0, 0, 1, 0, 3, 0, 1, 1, 2, 3, 3, 3, 2, 0, 0, 3, 2, 2, 0, 2, 0, 2, 2, 2, 3, 2, 1, 1, 0, 0, 0, 1, 1, 2, 0, 2, 1, 3, 1, 1, 1, 3, 1, 3, 1, 1, 1], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], [2, 3, 3, 2, 0, 3, 3, 0, 1, 1, 3, 0, 4, 2, 2, 1, 3, 3, 1, 4, 4, 1, 0, 4, 0, 0, 2, 2, 1, 2, 0, 1, 1, 3, 0, 1, 0, 1, 2, 1, 2, 1, 1, 1, 4, 0, 1], [0, 1, 2, 2, 1, 1, 0, 2, 0, 2, 1, 0, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 1, 0, 2, 0, 2], [1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 5, 3, 2, 4, 5, 2, 1, 2, 3, 3, 3, 2, 0, 4], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 2, 1, 1, 3, 0, 1, 4, 2, 0, 4, 4, 0, 0, 4, 0, 4, 2, 1, 2, 2, 1, 4, 4, 1, 4, 2, 4, 1, 4, 0], [0, 3, 2, 0, 3, 2, 1, 0, 1, 1], [4, 0], [0, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1, 2, 2, 0], [2, 0, 3, 0, 2, 1, 0, 0, 0, 1], [5, 13, 20, 21, 23], [3, 24], [9, 8], [1]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 1, 2, 0, 0, 3, 2, 4, 2, 2, 0, 0, 0, 0, 85, 85, 41, 0, 200, 55, 47, 27, 28, 15, 10, 1, 47, 10, 2, 14, 10, 5, 2, 2, 1], "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(12.0) \\le abs(mod(len(in1),mod(len(in2),abs(divInt(i1,int(9.0)))))):{:\\nb0 = min(int(8.0), len(in0)) \\le len((s2 + (in1[min(i0, i2):i2][i2:i1] + in2))[int(7.0):int(55.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s2 in s1[int(14.0):][:int(47.0)][i1:i0][( int(269135.0) + int(2.0) ):divInt(max(max(len(\"\"9\"\"[:min(i2, ( int(2.0) - i1 ))]), ( int(42.0) * ( i1 * saveOrd(\"\"F\"\") ) )), i1),mod(int(38.0),mod(i2,int(89911.0))))][mod(int(0625.0),( abs(( abs(int(260.0)) - int(757.0) )) - max(int(790.0), ( ( len((s2 + \"\"\\\\\\n\"\")) + ( i0 * mod(len(getCharFromString(in0[max(i1, ( saveOrd(in0.capitalize().rstrip(in0)) + i0 )):saveOrd(getCharFromString(s2, mod(int(8.0),( int(3.0) * ( int(7.0) - max(i2, ( int(7.0) + ( divInt(mod(int(9.0),divInt(i1,mod(divInt(int(7.0),int(0.0)),int(5.0)))),min(int(6.0), saveOrd(\"\"N\"\"[:min(i1, int(6.0))].lstrip()))) + i1 ) )) ) ))))], i0)),mod(( divInt(int(7.0),( mod(min(divInt(divInt(abs(i2),int(8.0)),abs(divInt(int(8.0),int(0.0)))), max(int(9.0), int(3.0))),abs(i2)) - min(i1, int(8.0)) )) * ( max(max(( int(6.0) - i1 ), ( int(9.0) - int(6.0) )), int(2.0)) - int(5.0) ) ),( i1 - divInt(int(0.0),i2) ))) ) ) + i1 )) )):]:{:\\ns0 = \"\"8dU\"\"[int(1.0):][( int(7.0) + len(saveChr(i1).capitalize()) ):]\\nres0 = \"\"VX\"\".startswith(getCharFromString(saveChr(min(divInt(max(min(max(( i2 + i1 ), int(8.0)), i0), abs(i2)),int(5.0)), int(5.0)))[divInt(max(abs(max(mod(i0,i0), max(( ( i0 - divInt(i1,divInt(( ( max(mod(int(4.0),int(3.0)), i2) + i0 ) * i0 ),int(3.0))) ) + int(5.0) ), divInt(i0,( int(5.0) * saveOrd(\"\"y\"\") ))))), int(1.0)),int(0.0)):int(4.0)], min(int(59.0), max(int(41.0), int(7.0)))))\\nres0 = saveChr(int(425.0)) not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 1, 7, 6, 3, 6], [0, 2, 2, 0, 2], [1, 1], [3, 1, 3, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1, 0, 1, 0, 1, 0, 1], [], [2, 1, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1, 3, 0, 3, 3, 0, 1], [5, 6], [5, 20], [], [27, 9, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 10, 1, 5, 1, 1, 3, 7, 0, 13, 2, 0, 2, 7, 2, 2, 0, 3], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"f\"\"[int(16.0):]) \\le len(in0)\\ni0 += len(getCharFromString((\"\"\\\\\\\\F\"\" + \"\"&<\"\"), divInt(len(getCharFromString(in2, i2)[i2:int(1.0)]),saveOrd((s1 + \"\"Gu\"\")))))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [0], [1, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], [1, 6, 9, 0, 6, 5, 6, 9, 8, 1, 3, 4], [1, 1, 2, 2, 0, 1, 1], [1], [2, 3, 1, 3, 3, 3, 3, 2, 0, 0, 3, 1, 3, 3, 2, 1, 0, 3, 1, 0, 3, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 4, 0, 1, 2], [0], [1, 0, 0], [4, 5, 3, 2, 3, 5], [1], [], [0, 0, 4, 2, 1, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 2], [2], [], [], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 12, 12, 4, 0, 24, 3, 10, 1, 2, 2, 1, 0, 5, 1, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(abs(int(16.0)),len(in1)) \\g len(in2):{:\\nb0 = abs(min(( i1 + i1 ), min(int(9.0), saveOrd(getCharFromString(\"\"6\"\"[min(divInt(int(0.0),i2), max(int(6.0), i2)):abs(int(5.0))], int(6.0)))))) \\le int(98134.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [1], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [6, 0, 9, 8, 6, 5, 5], [0, 0, 2, 2, 0, 1, 1], [1], [2, 3, 2, 3, 3, 3, 3, 0, 0, 0, 3, 1, 1, 3, 2, 2, 0, 3, 1, 1, 1, 0, 1, 3, 3, 3, 0, 3, 0], [1, 0, 1, 1], [2, 3, 3, 0, 1, 0, 1, 4, 1, 0, 3, 3], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 1, 4, 3, 1, 1, 1, 1], [0, 3, 2], [4], [0, 2, 0], [3, 0, 2, 2, 3, 1, 0, 1, 3, 1, 1, 0, 0, 3, 0], [0, 5, 25, 16, 7], [13, 20, 8, 4], [5, 8], [18, 31, 31, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 7, 0, 29, 4, 12, 1, 3, 6, 15, 0, 19, 1, 0, 3, 15, 5, 4, 2, 4], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(abs(( len(in1) + len(in2) )),min(max(i0, i0), i2)) \\l min(int(60.0), int(9.0)):{:\\nres0 = in1 not in (s2 + (in1[max(mod(mod(i2,saveOrd(in2)),int(8.0)), int(6.0)):int(5.0)][i0:] + (\"\"/A58`n\"\" + getCharFromString((\"\"F\"\" + \"\"u\"\"), int(5.0)))))[max(min(len(\"\"`i\"\"), i1), len(\"\"eZQ(H\"\")):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 3, 7, 6, 3, 6, 7, 7, 7, 2, 9], [0, 2, 1, 0, 2], [0, 1], [3, 3, 3, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3, 3, 1, 2, 1, 3, 3, 2, 1, 1, 1, 2, 3, 1, 1, 0, 3, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [4, 1, 3, 3, 4, 0, 4, 1, 3, 0, 0, 2], [1, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4, 5], [1], [], [2, 0, 3, 0, 0, 4, 4, 2, 2, 0, 3, 0, 1, 3, 3, 4, 4, 0, 4], [1, 0, 0, 1, 1], [], [2, 1, 0], [1], [5], [12], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 4, 0, 32, 5, 12, 3, 2, 6, 1, 0, 19, 5, 0, 3, 1, 0, 1, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[max(len((in2 + s1)), len(saveChr(( saveOrd(getCharFromString(in1[i0:i2][:int(31.0)], min(int(3.0), int(7.0)))) - saveOrd((in1 + \"\"m\"\")) )))):]) \\le max(int(6.0), ( int(3.0) - len(((getCharFromString(saveChr(min(divInt(int(6.0),int(7.0)), int(7.0))), ( min(int(7.0), int(2.0)) + i1 )) + in2) + saveChr(abs(mod(int(9.0),i0))))) ))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [0], [0, 2], [0], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 0, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 2, 3, 0, 0, 0, 2, 0, 1, 3, 1, 3, 3, 0, 1, 1, 3, 0, 1, 1], [1, 0, 1], [3, 1, 3, 3, 0, 3, 0, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5, 3], [1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [0, 1, 2], [1], [], [21], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 5, 0, 18, 3, 7, 1, 2, 7, 1, 1, 12, 0, 0, 3, 1, 0, 1, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = len(in0) \\le max(divInt(len(s2),( len((in1 + (in2[i1:][:i0] + in0))[i1:mod(i0,int(26.0))]) - min(int(9.0), len(\"\"v\"\")) )), min(i1, int(73.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1], [2, 1, 1, 0, 0], [1], [0, 1, 2, 0], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1, 2], [0, 0], [2], [], [], [], [1], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [1, 7, 3, 7, 6, 3, 6, 4, 2, 8, 7, 3, 5, 7, 3, 7, 2, 8, 1, 9, 5], [0, 2, 1, 0, 2, 2, 0, 0, 1, 2, 0], [1, 1], [3, 0, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3, 3, 1, 2, 3, 2, 0, 0, 2, 1, 1, 0, 2, 0, 1, 1, 1, 3, 2, 3, 0, 1, 2, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4, 0, 4, 2, 1], [0, 1, 0, 1, 2, 1], [0, 1, 0, 0], [3, 5, 1, 4, 4, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1, 4, 4, 1, 2, 2, 0, 1, 2, 0], [0, 0, 0, 0], [], [2, 0, 0, 0, 0], [1, 1, 1, 0, 2, 0, 3, 1, 0, 1, 2, 3, 1, 3, 2], [5, 8, 12], [5, 16, 21, 23, 15, 5], [6, 0, 8], [15, 4, 1]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 2, 0, 0, 2, 2, 3, 2, 1, 0, 0, 0, 1, 21, 21, 11, 1, 37, 7, 9, 4, 4, 7, 15, 0, 22, 4, 0, 5, 15, 3, 6, 3, 3], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(in0[i0:]) \\l len(in2):{:\\nres0 = int(173.0) \\le divInt(len(getCharFromString((\"\"f\"\" + \"\"qvF\"\"), i2)),i1)\\n:}else:{:\\ni0 += int(7.0)\\ns1 = getCharFromString(in1, len((in1 + \"\"6I\"\")))[int(6.0):int(3.0)]\\n:}\\nb1 = getCharFromString(getCharFromString(\"\",xMp0!f\\\\\\n\"\", saveOrd(s1[min(int(6.0), ( saveOrd(\"\"8\"\") - mod(i2,i2) )):( int(42.0) + int(87.0) )][i0:divInt(i0,int(3573.0))])), int(728.0)) == s1[int(1.0):abs(divInt(max(i1, int(95.0)),( i2 - i0 )))]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 8, 3, 5, 7, 3], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 2, 0, 0, 4, 4, 1], [0], [1, 1, 1], [4, 5, 4, 2, 4, 5], [1], [], [0, 0, 4, 2, 1, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [1], [], [13], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 20, 4, 8, 1, 3, 3, 1, 0, 6, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(min(( i2 + int(4.0) ), min(int(8.0), saveOrd(getCharFromString(\"\"n\"\"[int(3.0):], mod(mod(i1,saveOrd(in1)),i2)))))) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1, 1], [2, 0, 2, 2, 1, 1], [1, 1, 2], [0, 2, 1], [], [0, 0], [], [], [3], [0, 4, 0, 1], [1, 1, 1, 1], [0, 0, 0, 0], [], [0], [], [], [1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 1, 7, 3, 5, 5, 7, 6, 7, 2, 4, 6, 0, 6, 2, 4, 0], [1, 0, 1, 2, 1, 1, 2, 1, 1, 1, 2, 0, 0, 0, 1, 1, 0, 0, 2, 1, 2, 1], [1], [2, 3, 2, 3, 2, 3, 0, 2, 3, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1, 3, 0, 0, 3, 2, 3, 3, 2, 0, 3, 1, 2, 3, 2, 3, 2, 3, 0, 3, 0, 1, 0, 2, 1, 2, 0, 2, 0, 1, 0, 3, 3, 1, 0, 3, 3, 3, 0, 2, 3, 3, 1, 1, 3, 1, 2, 1, 0, 0, 3, 1, 1, 2, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1, 4, 1, 2, 1, 1, 4, 3, 0, 0, 4, 2, 1, 3, 4, 0, 2], [2, 1, 1, 0, 2, 2, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 1], [4, 5, 3, 2, 4, 5, 2, 3, 4, 2], [1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 1, 1, 1, 3, 4, 0, 4, 2, 0, 2, 4, 1], [0, 3, 2], [4], [0, 2, 0, 2, 1], [3, 2, 2, 2], [], [], [3, 8, 5], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 3, 3, 0, 1, 0, 0, 1, 4, 4, 4, 0, 0, 0, 0, 2, 18, 18, 22, 1, 79, 16, 25, 8, 9, 10, 4, 0, 24, 3, 1, 5, 4, 0, 0, 3, 1], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif divInt(abs(( max(mod(len(in1),i1), divInt(min(i0, i1),int(26.0))) * min(len(in2), min(( i2 - int(1.0) ), int(7.0))) )),i1) \\l int(3.0):{:\\nres0 = int(5.0) \\le int(5.0)\\n:}else:{:\\nif max(i1, i2) \\l max(mod(saveOrd(in0),max(divInt(i1,abs(int(7.0))), ( max(( max(mod(saveOrd((s2 + (in1[i1:len(in2)][i1:] + s2))[int(6.0):i2]),( int(7.0) - mod(i0,mod(i0,int(2.0))) )), i0) + min(min(int(4.0), i1), saveOrd(\"\"#\"\")) ), abs(max(i1, ( len(\"\"3\"\") * saveOrd(\"\"8\"\") )))) * int(6.0) ))), int(0.0)):{:\\nloopBreak% = 0\\nwhile min(int(6.0), mod(int(2.0),i0)) \\g i0:{:\\nin0 = (getCharFromString(in1, abs(int(4.0))) + s2[int(0.0):].rstrip(\"\"5\"\".capitalize()[:( i2 + i1 )]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni2 -= i1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1], [9, 4, 4, 8, 7, 7, 1, 8, 8, 7, 5], [0, 0, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 1, 1], [2, 5, 3, 2, 4, 5], [0, 0, 1], [], [0, 4, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [1, 0, 1], [18], [24, 2], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 4, 0, 22, 7, 4, 4, 3, 4, 3, 0, 11, 1, 0, 3, 3, 1, 2, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) == ( divInt(len(getCharFromString(\"\"ySc\"\", mod(len((in2 + (in0[( ( i0 + int(9.0) ) + min(int(4.0), i0) ):][mod(int(4.0),int(8.0)):] + s2))[int(7.0):]),i0))),( i0 * int(7188.0) )) * int(75.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [2, 0, 0, 2, 2, 1, 2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 0, 1], [2, 0, 1, 1, 0, 0, 1, 0], [0, 2, 2, 1, 1, 2, 1, 2, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [3], [0, 4], [1, 1, 2, 2, 2], [0, 0], [3, 3, 4], [0], [], [], [0, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 7, 9, 8, 3, 6, 5, 7, 4, 2, 1, 4, 4, 6, 0, 4, 9, 0, 4, 9, 6, 6, 1, 4, 2, 0, 8, 0, 9, 9, 3, 3, 3, 4, 9, 3, 8, 1, 2, 4, 7, 2, 8, 2, 5, 1, 9, 5, 3, 5, 4, 7, 4, 7, 6, 5, 1, 3, 4, 6, 9, 2, 4, 5, 9, 8, 7, 1, 8, 3], [1, 2, 2, 0, 0, 1, 1, 1, 2, 1, 2, 1, 2, 0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1, 2, 0, 1, 0, 2, 0, 1, 2, 0, 1, 0, 2, 2, 2, 0, 1, 1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 2, 2, 1, 2, 2, 1, 1, 0, 2, 2, 1], [1, 1, 0, 0, 1], [1, 3, 2, 3, 3, 3, 3, 2, 2, 0, 3, 1, 0, 3, 2, 2, 0, 3, 1, 1, 1, 1, 1, 3, 2, 1, 0, 2, 1, 2, 1, 0, 3, 2, 3, 0, 1, 1, 1, 3, 0, 0, 1, 0, 3, 3, 0, 0, 0, 2, 1, 3, 0, 0, 2, 0, 1, 0, 2, 1, 1, 2, 0, 2, 2, 3, 1, 3, 3, 2, 0, 1, 0, 1, 3, 2, 1, 1, 2, 3, 2, 2, 1, 2, 3, 1, 1, 3, 0, 2, 0, 0, 1, 2, 3, 2, 1, 2, 2, 2, 3, 2, 3, 2, 3, 1, 0, 0, 2, 2, 0, 3, 3, 3, 2, 0, 1, 0, 1, 3, 2, 2, 1, 3, 1, 2, 0, 3, 1, 1, 2, 0, 1, 2, 1, 2, 3, 1, 1, 2, 2, 2, 3, 0, 1, 3, 3, 1, 3, 1, 0, 0, 3, 1, 3, 0, 1, 3, 3, 1, 3, 2, 1, 1, 2, 0, 0, 0, 2, 2, 3, 2, 1, 2, 0, 2, 2, 1, 0, 2, 3, 2, 3, 2, 2, 1, 2, 2, 1, 1, 3, 3, 2, 0, 2, 2, 3, 0, 2, 1, 2, 3, 0, 2, 1, 0, 2, 0, 1, 3, 3, 0, 0, 0, 0, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 0, 2, 2, 0, 0, 2, 3, 2, 2, 3, 2, 0, 3, 0, 0, 1, 3, 1, 1, 1, 3, 2, 0, 0, 0, 1, 1, 3, 3, 3, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1], [2, 3, 3, 2, 0, 4, 1, 0, 1, 1, 1, 4, 3, 2, 2, 2, 3, 3, 2, 1, 4, 4, 1, 3, 4, 0, 2, 4, 2, 3, 1, 3, 4, 4, 3, 1, 3, 4, 4, 0, 1, 3, 1, 3, 1, 3, 3, 0, 4, 2, 1, 2, 1, 3, 0, 1, 2, 4, 2, 1], [1, 2, 0, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [4, 5, 4, 2, 4, 5, 0, 3, 0, 2, 3, 2, 3, 4, 5, 0, 5, 3, 3, 0, 4, 0, 4, 1, 3, 2, 1, 2, 4, 1, 3, 0, 5, 2, 0, 0, 0, 0, 2, 0, 5, 4, 5, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0, 3, 4, 0, 2, 0, 3, 4, 2, 1, 3, 3, 4, 2, 0, 0, 0, 3, 4, 0, 4, 3, 1, 3, 0, 2, 2, 2, 0, 1, 1, 1, 2, 0, 1, 2, 4, 0, 2, 0, 4, 1, 4, 0, 1, 4, 1, 4, 4, 2, 1, 2, 2, 0, 0, 0, 0, 0, 2, 2, 4, 2, 0, 0, 0, 4, 2, 0, 0, 0, 1, 2, 3, 3, 2, 0, 1, 0, 2, 1, 4, 4, 2, 1, 4, 2, 4, 0, 2, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 4, 4, 1, 0, 0], [0, 3, 2, 2, 2, 3, 0, 0, 3, 0, 3, 1, 1, 0, 3, 2, 3, 0, 2], [4, 0, 4, 5, 0, 4], [0, 1, 1, 0, 2, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 2, 0, 0, 0, 1, 2, 0, 2, 0, 1, 1, 1, 2, 1, 2], [2, 2, 2, 0, 1, 0, 3, 3, 3, 1, 0, 1, 3, 3, 1, 2, 3, 2, 1], [14, 20, 8], [4, 6, 18, 15, 5], [0, 5, 9, 9, 8], [17, 29, 3, 30, 1, 29]], "fitness": 9223372036854775807, "mapping_values": [1, 18, 18, 8, 10, 4, 7, 0, 0, 1, 2, 5, 2, 3, 0, 0, 0, 3, 70, 70, 64, 5, 259, 73, 60, 38, 38, 44, 19, 4, 114, 19, 6, 30, 19, 3, 5, 5, 6], "tree_depth": 91, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(27.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = abs(min(( mod(i1,saveOrd((in1 + (s2[int(9.0):i2][:max(mod(( i2 - min(int(8.0), int(3.0)) ),int(6.0)), int(5.0))] + in1))[:int(7.0)][max(mod(int(4.0),i0), ( int(2.0) * mod(int(1.0),i0) )):max(divInt(max(i1, int(4.0)),int(4.0)), int(6.0))])) + saveOrd((getCharFromString(in2, i1) + s0[i1:])) ), int(0.0))) \\le i2\\nin0 = (\"\"0\"\"[:len(((s0[abs(i1):i2].capitalize() + s2) + in0))].rstrip((s2.capitalize() + (\"\"5\"\" + (in0 + in1[i1:divInt(int(4.0),abs(i2))][i0:( i1 * int(9.0) )][i0:divInt(int(0.0),int(4.0))])).capitalize())) + \"\"9\"\")\\nloopBreak% = 0\\nfor in2 in \"\"O\"\":{:\\nif \"\"e\"\" != s0[:( i1 - mod(mod(abs(int(9.0)),len(\"\"U\"\")),len(in2.lstrip()[divInt(i0,int(6.0)):])) )]:{:\\nin0 = in0[i2:]\\nif getCharFromString(\"\".\"\", int(6.0)) != getCharFromString(s0, abs(( int(1.0) + int(4.0) ))):{:\\ni1 *= ( max(mod(divInt(int(2.0),( saveOrd(\"\"^\"\") - int(0.0) )),int(8.0)), saveOrd(\"\"\"\".rstrip(getCharFromString(\"\"g\"\"[i1:].strip(in1[( i2 - i0 ):][int(0.0):( max(mod(int(9.0),( ( mod(len(s0),divInt(saveOrd(in1),( min(int(9.0), i0) + i1 ))) + ( divInt(i2,abs(saveOrd(s1))) + abs(( i0 - int(3.0) )) ) ) + i1 )), int(3.0)) * len(in0) )]), ( ( int(3.0) - max(int(4.0), ( i0 - len(saveChr(int(9.0))[int(3.0):mod(i2,int(8.0))][mod(int(1.0),( saveOrd(s2[int(2.0):int(4.0)]) * divInt(divInt(( saveOrd(s1) + i0 ),int(7.0)),len(s2)) )):max(int(2.0), len(saveChr(int(8.0))))]) )) ) * i1 ))))) - i2 )\\nloopBreak% = 0\\nfor in1 in s1[:saveOrd(in0)]:{:\\ni0 *= int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = in2\\ni1 = saveOrd(\"\"I\"\")\\n:}\\n:}\\nloopBreak% = 0\\nfor s2 in ((s0[i0:int(5.0)] + \"\"s_\"\") + s0)[min(max(int(1.0), len(\"\"\\\\\\n\"\"[mod(int(9.0),int(5.0)):])), divInt(i2,i2)):]:{:\\nif getCharFromString(\"\"p\"\"[i2:divInt(mod(max(divInt(int(3.0),divInt(i0,mod(( int(5.0) * i1 ),( len(s0.rstrip(\"\"9\"\"[:divInt(max(divInt(( int(4.0) + divInt(( int(7.0) + int(4.0) ),len(\"\"^\"\"[len(\"\"8\"\"[:( i1 * divInt(( min(i2, ( int(7.0) * ( saveOrd(s0[i2:]) * divInt(int(6.0),i1) ) )) * ( i1 * int(5.0) ) ),abs(max(i0, i0))) )]):])) ),i0), i0),mod(( ( int(1.0) * abs(int(3.0)) ) * int(4.0) ),int(6.0)))][:int(9.0)])[:mod(i1,( mod(i0,i1) - ( max(( divInt(len(s2),( i2 - min(i2, i1) )) * int(2.0) ), max(int(4.0), int(5.0))) - int(9.0) ) ))].capitalize()) + abs(mod(i2,i2)) )))), i1),int(8.0)),int(7.0))].lstrip(), saveOrd(s0)).startswith(getCharFromString(\"\"f\"\".capitalize(), abs(max(i1, i0)))):{:\\nin2 = in1\\nloopBreak% = 0\\nfor in2 in in0:{:\\ni2 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(183.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [1, 4], [2, 1], [0, 0], [2], [], [], [], [], [0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [9, 7, 9, 8, 5, 6, 2, 5, 6, 5, 9, 0, 3], [0, 0, 1, 1, 2, 0, 0, 0, 0, 1, 1], [0], [3, 3, 2, 3, 2, 2, 3, 3, 0, 3, 0, 3, 3, 1, 1, 2, 0, 1, 0, 1, 3, 1, 0, 0, 0, 2, 3, 3, 2, 0, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1], [2, 3, 3, 0, 0, 0, 3, 3, 1, 2, 0, 3, 4], [0, 1, 0, 2], [0, 1, 0, 1], [3, 5, 3, 2, 3, 5, 5], [1, 0, 1, 1, 0, 1], [], [2, 0, 1, 2, 3, 4, 3, 2, 2, 0, 0, 0, 1, 4, 4, 0, 2, 0, 2, 2, 0, 2, 1, 1], [0, 3, 2], [4], [0, 0, 0, 1, 0, 0, 1, 2], [0, 2, 0, 2, 2, 1], [5, 23], [9], [9, 5, 1], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 11, 0, 40, 7, 13, 4, 3, 7, 6, 0, 24, 3, 1, 8, 6, 2, 1, 3, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = in0[abs(len(\"\"F\"\")):divInt(len((getCharFromString((in2[:( ( min(min(i0, min(i0, len(in0))), len(s2)) + int(97.0) ) - int(9.0) )][mod(i1,int(8.0)):i1] + \"\"9X\"\"), int(5.0)) + in0.capitalize().rstrip(in2[max(int(6.0), i2):i0]))[i0:( abs(min(( i0 + i0 ), int(25.0))) * int(659.0) )]),len(in2[:saveOrd(\"\"5\"\"[divInt(i1,int(0.0)):])][int(3.0):i1]))] == \"\"1j\"\"\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 5, 8, 7, 7, 1], [0, 0, 1, 0, 2], [1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [0, 0, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [2, 0, 0], [24, 9], [], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 4, 3, 3, 1, 2, 3, 0, 3, 0, 0, 0, 3, 2, 0, 1, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le ( ( len(\"\"2YJ\"\") + divInt(len(in2),int(3.0)) ) + ( i0 + int(7.0) ) ):{:\\nres0 = int(5.0) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1], [2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 0, 1, 0, 2, 2, 2, 1, 2, 1, 0, 1], [2, 2, 2, 0, 2, 0, 0, 1, 0, 1, 1, 1, 2, 2], [0, 2, 0, 2, 2, 0, 2, 0, 1, 1, 0], [0, 0, 0, 0], [0, 0, 0], [], [], [3, 1, 2, 2, 1, 0], [0, 4, 5, 2, 4, 0, 4, 5], [1, 1, 1, 2, 2, 1, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 0], [0, 1, 2, 1, 2, 1], [], [1, 0, 0], [0, 1, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5, 5, 9, 5, 6, 1, 9, 4, 8, 2, 9, 9, 9, 0, 9, 2, 4, 7, 2, 7, 2, 2, 5, 3, 8, 3, 5, 7, 1, 2, 9, 1, 3, 3, 9, 1, 9, 0, 8, 3, 3, 7, 1, 2, 8, 9, 9, 2, 0, 3, 4, 5, 8, 9, 2, 4, 0, 7, 1, 4, 5, 3, 8, 7, 3, 7, 4, 6, 7, 3, 9, 5], [0, 0, 1, 0, 1, 1, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2, 1, 0, 2, 0, 2, 2, 0, 0, 0, 0, 2, 2, 1, 2, 0, 1, 0, 1, 2, 0, 1, 1, 0, 2, 0, 2, 2, 0, 0, 2, 2, 1, 0, 0, 2, 1, 0], [1, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 3, 3, 3, 2, 1, 1, 1, 0, 1, 1, 1, 1, 2, 3, 2, 1, 0, 2, 2, 2, 1, 2, 1, 0, 3, 0, 2, 2, 2, 3, 3, 3, 3, 1, 1, 3, 2, 3, 1, 1, 3, 1, 3, 3, 3, 0, 1, 2, 3, 1, 3, 0, 1, 0, 1, 0, 3, 1, 2, 0, 3, 2, 1, 0, 0, 2, 3, 0, 0, 0, 0, 3, 1, 2, 1, 0, 2, 1, 3, 3, 1, 2, 3, 0, 0, 1, 1, 0, 1, 0, 0, 2, 3, 2, 2, 1, 2, 0, 0, 0, 3, 1, 0, 2, 2, 0, 1, 2, 0, 3, 1, 2, 0, 1, 1, 0, 0, 3, 2, 0, 1, 2, 3, 0, 1, 0, 0, 1, 2, 2, 0, 1, 3, 3, 0, 1, 0, 3, 1, 1, 1, 1, 0, 3, 3, 2, 2, 3, 0, 2, 2, 1, 3, 3, 2, 3, 2, 2, 2, 1, 3, 3, 3, 1, 2, 3, 3, 3, 1, 2, 3, 0, 1, 3, 3, 1, 3, 1, 3, 1, 3, 0, 1, 1, 0, 1, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 1, 1, 3, 3, 0, 0, 1, 2, 1, 3, 2, 2, 2, 0, 3, 2, 0, 0, 2, 2, 3, 3, 3, 1, 0, 1, 0, 1, 1, 1, 3, 3, 2, 3, 0, 0, 3, 0, 1, 0, 2, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [2, 1, 0, 0, 0, 3, 0, 1, 1, 1, 1, 3, 1, 2, 4, 0, 2, 0, 2, 4, 1, 3, 1, 2, 0, 2, 1, 2, 1, 0, 0, 2, 0, 3, 0, 4, 1, 1, 3, 3, 4, 1, 1, 4, 3, 2, 3, 1, 3, 0, 2, 3, 4, 1, 4, 0, 2, 1, 2, 3, 0, 1, 3, 2, 1, 3, 1, 3], [1, 1, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 1, 0, 1, 2, 0, 0, 2, 0, 2, 0, 2], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [4, 5, 3, 2, 4, 5, 0, 0, 1, 2, 4, 1, 3, 5, 2, 4, 3, 2, 3, 3, 2, 3, 1, 0, 5, 2, 2, 3, 3, 4], [1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 1, 4, 4, 4, 2, 0, 4, 1, 4, 3, 1, 4, 4, 0, 2, 0, 4, 4, 2, 4, 3, 4, 3, 4, 2, 4, 4, 1, 1, 0, 0, 1, 2, 1, 0, 4, 4, 4, 4, 0, 4, 0, 4, 1, 0, 2, 2, 4, 1, 4, 2, 4, 0, 0, 0, 1, 2, 1, 0, 2, 2, 2, 4, 0, 1, 0, 1, 2, 2, 4, 1, 2, 1, 0, 1], [0, 3, 2, 1, 3, 3, 0, 0, 1, 2, 1, 3, 2, 1, 1, 3, 0, 1, 2, 1, 0, 3, 3, 0, 1], [4, 5, 5, 3, 5, 1, 3], [0, 2, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 2, 1, 1, 2, 2], [2, 3, 3, 3, 1, 2, 3, 1, 0, 3, 3, 0, 3, 1, 2, 1, 3, 3, 0], [2, 14, 10], [21, 12, 2, 6], [3, 7, 1], [9, 13, 9, 14, 16, 22, 8, 18, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 25, 25, 14, 11, 4, 3, 0, 0, 6, 8, 17, 8, 3, 6, 0, 3, 4, 78, 78, 60, 2, 253, 56, 68, 32, 25, 30, 19, 4, 87, 25, 7, 19, 19, 3, 4, 3, 9], "tree_depth": 77, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(min(min(min(i0, ( i0 - i1 )), i0), ( len(in1) - min(max(( int(26.0) * int(9.0) ), int(7.0)), i1) )),int(3.0)), int(5.0))) \\l int(5.0):{:\\nloopBreak% = 0\\nwhile int(5.0) \\le mod(max(( int(9.0) + i1 ), divInt(( divInt(int(56.0),( int(1.0) + i0 )) * max(i1, divInt(mod(mod(max(len(in2), max(abs(int(9.0)), int(4.0))),saveOrd(in0)),( min(int(8.0), int(2.0)) * abs(int(9.0)) )),min(abs(saveOrd((s2 + (in1[i2:][int(9.0):] + in2))[mod(max(int(9.0), len(\"\"3\"\"[i2:])),int(0.0)):i2])), int(9.0)))) ),i0)),max(int(24.0), ( i0 + abs(divInt(int(72.0),i0)) ))):{:\\nloopBreak% = 0\\nwhile i0 != ( min(i1, i1) + i0 ):{:\\nres0 = getCharFromString(s0[i1:abs(int(7.0))].capitalize().rstrip(saveChr(( int(2.0) + i0 ))), ( int(2.0) + max(abs(int(5.0)), ( max(i1, i2) + int(3.0) )) )) not in \"\"&\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = (\"\"*&v\"\" + getCharFromString(s1, int(8.0)).strip(s2[i2:int(3.0)])).strip(getCharFromString(saveChr(i1), i0))\\nloopBreak% = 0\\nfor in1 in (saveChr(divInt(min(mod(divInt(int(5.0),( i2 + i0 )),i2), min(int(7.0), i2)),mod(( i0 + int(1.0) ),( i0 * abs(int(2.0)) )))) + (saveChr(( i0 * int(9.0) )).capitalize()[int(1.0):i0].lstrip(\"\"7\"\") + \"\"+\"\")).capitalize()[i2:min(( i2 + int(3.0) ), ( len(s1) + i1 ))]:{:\\nloopBreak% = 0\\nwhile in0 == \"\"m\"\":{:\\nloopBreak% = 0\\nfor in2 in \"\"C\"\"[int(3.0):]:{:\\nloopBreak% = 0\\nfor s2 in in1:{:\\nb1 = i2 == i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b2:{:\\nloopBreak% = 0\\nfor in0 in saveChr(int(9.0)):{:\\ns2 = getCharFromString(saveChr(divInt(( i1 + int(1.0) ),min(saveOrd(in0), i0))), int(9.0)).strip(in0.capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif i1 \\le max(int(0.0), int(8337.0)):{:\\ns2 = saveChr(int(1.0))\\nb2 = False\\n:}else:{:\\nin0 = \"\"-=\"\"\\nif int(2.0) \\l i2:{:\\nif not True:{:\\nloopBreak% = 0\\nwhile not s1 in getCharFromString(\"\"O\"\", max(len(s0.lstrip(in2)[( divInt(len(s2),i0) * divInt(divInt(int(8.0),saveOrd(\"\"%\"\")),max(mod(max(( ( ( int(9.0) * saveOrd(\"\"c\"\"[len(s2):abs(int(9.0))]) ) - divInt(len(getCharFromString(in0, max(len(\"\"1\"\"), int(2.0)))[:( min(i1, int(0.0)) + abs(len(in0)) )][int(3.0):][:saveOrd(\"\"g\"\")]),int(4.0)) ) - max(int(5.0), saveOrd(saveChr(i1)[int(8.0):][:int(9.0)])) ), i0),int(2.0)), mod(min(( abs(divInt(( int(4.0) * int(0.0) ),int(7.0))) + int(1.0) ), i2),int(4.0)))) ):int(5.0)].rstrip()), max(abs(i0), i2)))[int(3.0):( int(8.0) + len(\"\"/\"\") )][( divInt(( i2 * min(divInt(i0,i0), ( divInt(max(len(\"\".\"\"[abs(int(7.0)):]), i2),int(3.0)) + i2 )) ),int(7.0)) * int(4.0) ):int(6.0)]:{:\\nb1 = max(len(in1), divInt(max(i1, i0),len(\"\"K\"\"))) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile int(7.0) != i2:{:\\ni1 += ( int(3.0) * int(9.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\ni0 = int(5.0)\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [2], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 0, 5, 5, 4, 6, 2, 0, 8, 1, 9, 2, 6, 2, 4, 5, 4, 2, 1, 2, 9, 2, 7, 8, 1, 3, 6, 2, 3, 0, 3, 9, 2, 2, 9, 8, 3, 6, 0, 2, 5, 5, 3, 0, 4, 9, 5, 6, 6, 4, 4], [1, 0, 1, 2, 1, 0, 2, 0, 2, 2, 2, 0, 0, 0, 2, 1, 2, 2, 0, 0, 2, 0, 0, 2, 0, 1, 1, 0, 0, 2, 2, 2, 1, 0, 2, 0, 0, 1, 2, 0, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 1, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1, 3, 1, 2, 3, 0, 3, 1, 2, 3, 1, 2, 0, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 3, 2, 2, 1, 1, 0, 3, 3, 0, 3, 3, 0, 0, 3, 0, 3, 1, 0, 3, 1, 1, 2, 3, 1, 2, 3, 3, 1, 2, 1, 1, 0, 1, 0, 0, 1, 1, 0, 3, 0, 2, 2, 0, 1, 1, 2, 1, 3, 1, 1, 2, 0, 2, 0, 2, 1, 0, 1, 3, 3, 0, 2, 2, 2, 3, 0, 0, 2, 1, 2, 2, 0, 2, 1, 3, 0, 1, 3, 2, 3, 1, 2, 0, 3, 1, 0, 2, 1, 2, 3, 3, 3, 0, 1, 0, 2, 2, 3, 2, 0, 3, 1, 1, 3, 2, 1, 0, 3, 2, 0, 3, 1, 1, 1, 3, 2, 2, 2, 0, 3, 3, 3, 2, 3, 3, 3, 1, 0, 3, 0, 1, 2, 0, 1, 2, 1, 0, 3, 0, 1, 3, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [2, 1, 3, 0, 0, 3, 0, 1, 3, 3, 0, 0, 4, 0, 4, 3, 3, 0, 3, 1, 2, 1, 1, 0, 2, 1, 0, 2, 4, 0, 3, 4, 2, 1, 3, 1, 1, 4, 4, 0, 1, 3, 2, 2, 4, 1, 3, 0, 3, 0, 0], [2, 2, 0, 0, 1, 1, 2, 1, 2, 0, 0, 1, 1, 0, 2, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1], [4, 5, 3, 2, 4, 5, 0, 3, 5, 1, 0, 1, 3, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 2, 0, 3, 2, 2, 2, 1, 4, 2, 4, 4, 1, 0, 4, 4, 2, 2, 2, 2, 2, 2, 4, 1, 0, 4, 4, 2, 1, 4, 0, 3, 4, 1, 0, 2, 2, 0, 4, 4, 1, 0, 2, 2, 0, 4, 4, 1, 4, 4, 1, 2, 1, 2, 4, 0], [0, 3, 2, 0, 3, 3, 1, 3, 0, 0, 1, 1, 0, 2, 0, 0, 2, 2], [4, 1, 5, 2], [0, 0, 0, 1, 2, 0, 1, 2, 1, 0, 1, 1, 2, 2, 2, 0, 1, 1, 0, 0, 1], [0, 3, 0, 1, 0, 0, 3, 3, 1], [2, 7, 9, 0], [5, 11], [], [6, 2, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 54, 54, 41, 0, 188, 45, 51, 18, 27, 15, 9, 0, 67, 18, 4, 21, 9, 4, 2, 0, 3], "tree_depth": 79, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * int(29.0) )), i1)), int(9.0))) \\l len(in2):{:\\nres0 = in0 == (s2 + (in1[min(max(mod(i2,int(7.0)), int(0.0)), i1):len(in2)][int(5.0):int(5.0)] + getCharFromString(s0[:len((\"\"C\"\"[:int(4.0)][divInt(min(i0, min(int(6.0), ( saveOrd(getCharFromString(\"\"#\"\", int(2.0)).capitalize()[( i2 * mod(int(0.0),divInt(( int(8.0) + int(1.0) ),mod(divInt(( int(9.0) + min(( divInt(int(2.0),int(6.0)) - i0 ), saveOrd(in0)) ),len(saveChr(i2)[len(\"\"H\"\"):][min(i2, i2):][:len(in2)][:i0][max(int(2.0), i0):abs(int(4.0))][:int(5.0)].strip(getCharFromString(\"\"f\"\"[( max(int(4.0), divInt(max(min(int(2.0), ( int(1.0) - int(2.0) )), i0),int(9.0))) * i2 ):], i1).strip()).rstrip())),int(2.0)))) ):].rstrip(getCharFromString(s1, int(7.0)))) - i2 ))),abs(i2)):divInt(mod(i0,int(8.0)),int(1.0))][divInt(int(3.0),max(int(6.0), int(2.0))):] + (saveChr(mod(i0,mod(i2,mod(int(3.0),i0)))) + \"\"J\"\")))], int(0.0))))[min(abs(i0), mod(divInt(( saveOrd(s0) * i2 ),i0),( int(392.0) + ( divInt(i1,mod(int(2.0),min(i1, int(9.0)))) + len(s1[:mod(saveOrd(saveChr(int(8.0))),mod(i0,abs(int(3.0))))][i0:( int(6.0) - mod(max(len(getCharFromString(\"\"A\"\", max(i2, int(0.0)))), i2),divInt(( max(divInt(i2,saveOrd(in0)), int(2.0)) - int(5.0) ),saveOrd(in0[( int(5.0) + i1 ):min(( i0 * max(int(3.0), int(0.0)) ), int(4.0))][:len(getCharFromString(\"\"\\\\\\t\"\", divInt(divInt(( i2 + abs(abs(saveOrd(getCharFromString(\"\"(\"\".capitalize(), ( max(len(\"\"l\"\"[min(int(9.0), i0):len(in2.capitalize()[:i0])]), int(5.0)) - mod(i1,int(6.0)) ))))) ),( int(6.0) - i2 )),min(i0, int(4.0)))).capitalize())]))) )]) ) ))):min(i0, int(4.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 9, 9, 4, 1, 6, 5, 4, 2, 8, 8, 7, 1, 7, 2, 7, 5, 9], [1, 0, 1, 0, 1, 0, 0, 2, 2, 2, 2, 2, 0, 1, 0, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1, 0, 0, 1, 3, 1, 2, 3, 3, 3, 1, 1, 1, 3, 3, 2, 1, 2, 0, 2, 3, 0, 2, 0, 2, 0, 2, 0, 1, 3, 2, 3, 1, 2, 2, 0, 0, 0, 3, 1, 3, 0, 2, 2, 3, 3, 1, 1, 3, 3], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 1, 1, 3, 1, 2, 0, 3, 3, 2, 0, 1, 0, 3, 2, 3], [1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1], [3, 5, 3, 2, 4, 5, 2, 3], [1, 1], [], [4, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 0, 2, 1, 2, 0, 0, 1, 0], [0, 3, 2], [4], [0, 1, 1, 0, 2], [2, 1], [], [1], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 18, 18, 17, 0, 72, 15, 24, 6, 9, 8, 2, 0, 20, 3, 1, 5, 2, 0, 1, 1, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(getCharFromString(in0.rstrip((in2 + (in0[:min(min(i1, ( i0 - i1 )), i0)][:int(29.0)] + s2))[len(in1.capitalize()):min(max(divInt(i1,int(9.0)), int(4.0)), i0)]), max(int(1.0), int(6.0)))),i0), i2)) \\l int(5.0):{:\\nres0 = max(int(4.0), divInt(max(len(\"\"3\"\"[max(int(2.0), int(8.0)):int(8.0)]), abs(min(mod(int(7.0),( i2 - mod(len(in2[i2:]),( i2 + ( i2 - ( i0 - int(1.0) ) ) )) )), len(s2)))),divInt(abs(int(7.0)),divInt(( i1 - i0 ),i2)))) \\le min(int(2.0), max(i0, divInt(mod(min(len(\"\"b\"\"), int(75.0)),int(9.0)),abs(len(in0)))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 4, 8, 3, 5, 7, 3], [2, 1, 2, 2, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 1, 2, 1, 0, 2, 0, 3, 0, 0, 1, 1, 1, 1], [1, 0, 1, 0], [1, 3, 3, 0, 0, 0, 4, 3, 1], [0, 1], [1, 1, 1], [4, 5, 4, 2, 4, 5], [0, 1], [], [0, 0, 4, 2, 3, 0, 1, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [0, 1], [21], [21], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 5, 0, 22, 4, 7, 2, 2, 3, 2, 0, 7, 1, 0, 1, 2, 1, 1, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), min(min(( i2 + int(0.0) ), min(int(4.0), mod(int(8.0),i1))), ( i2 - saveOrd(getCharFromString((in1 + \"\"Vv\"\")[i2:], i2)) ))):{:\\nres0 = int(3.0) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [1], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 3, 5, 5], [0, 2, 2, 2, 0, 1, 1, 1, 0], [1], [1, 3, 2, 3, 3, 2, 3, 2, 2, 0, 3, 2, 3, 3, 0, 2, 0, 3, 0, 1, 1, 1, 1, 2, 0, 1, 3, 0, 0, 0], [1, 1, 1, 0, 1, 0, 0], [0, 3, 3, 2, 0, 0, 1, 4, 3, 1], [1, 0, 2], [1, 1, 0, 1, 1], [4, 5, 4, 2, 4, 4, 4], [0, 1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 0], [0, 3, 2], [4], [0, 1, 1], [2, 0], [4], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 7, 0, 29, 7, 9, 3, 4, 7, 2, 0, 13, 0, 0, 3, 2, 1, 0, 1, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l min(mod(len(\"\"8E\"\"),len(in1)), mod(abs(divInt(( i0 - min(mod(min(max(i2, ( i2 + saveOrd(in2) )), i2),int(9.0)), int(8.0)) ),int(3.0))),int(5.0))):{:\\nres0 = (in1 + (s2[:( i0 * int(5.0) )][:len(in1)] + in1))[i1:i1] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}]